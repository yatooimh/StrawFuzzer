public class com.android.server.wm.WindowManagerService extends android.view.IWindowManager$Stub implements com.android.server.Watchdog$Monitor, com.android.server.policy.WindowManagerPolicy$WindowManagerFuncs
{
    private static final boolean ALWAYS_KEEP_CURRENT;
    private static final int ANIMATION_COMPLETED_TIMEOUT_MS;
    private static final int ANIMATION_DURATION_SCALE;
    private static final int BOOT_ANIMATION_POLL_INTERVAL;
    private static final java.lang.String BOOT_ANIMATION_SERVICE;
    static final long DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
    private static final java.lang.String DENSITY_OVERRIDE;
    private static final java.lang.String DISABLE_TRIPLE_BUFFERING_PROPERTY;
    static final boolean ENABLE_FIXED_ROTATION_TRANSFORM;
    private static final java.lang.String HIERARCHICAL_ANIMATIONS_PROPERTY;
    private static final int INPUT_DEVICES_READY_FOR_SAFE_MODE_DETECTION_TIMEOUT_MILLIS;
    static final int LAST_ANR_LIFETIME_DURATION_MSECS;
    static final int LAYER_OFFSET_THUMBNAIL;
    static final int LAYOUT_REPEAT_THRESHOLD;
    private static final int MAXIMUM_WINDOW_TOKEN_COUNT_WITHOUT_SURFACE;
    static final int MAX_ANIMATION_DURATION;
    static final boolean PROFILE_ORIENTATION;
    private static final java.lang.String PROPERTY_EMULATOR_CIRCULAR;
    static final int SEAMLESS_ROTATION_TIMEOUT_DURATION;
    private static final java.lang.String SIZE_OVERRIDE;
    private static final java.lang.String SYSTEM_DEBUGGABLE;
    private static final java.lang.String SYSTEM_SECURE;
    private static final int SYSTEM_UI_MULTIPLIER;
    private static final java.lang.String TAG;
    private static final int TRANSITION_ANIMATION_SCALE;
    static final int TYPE_LAYER_MULTIPLIER;
    static final int TYPE_LAYER_OFFSET;
    static final int UPDATE_FOCUS_NORMAL;
    static final int UPDATE_FOCUS_PLACING_SURFACES;
    static final int UPDATE_FOCUS_REMOVING_FOCUS;
    static final int UPDATE_FOCUS_WILL_ASSIGN_LAYERS;
    static final int UPDATE_FOCUS_WILL_PLACE_SURFACES;
    static final int WINDOWS_FREEZING_SCREENS_ACTIVE;
    static final int WINDOWS_FREEZING_SCREENS_NONE;
    static final int WINDOWS_FREEZING_SCREENS_TIMEOUT;
    private static final int WINDOW_ANIMATION_SCALE;
    static final int WINDOW_FREEZE_TIMEOUT_DURATION;
    static final int WINDOW_LAYER_MULTIPLIER;
    static final int WINDOW_REPLACEMENT_TIMEOUT_DURATION;
    private static final java.lang.String WM_USE_BLAST_ADAPTER_FLAG;
    static boolean sEnableTripleBuffering;
    static boolean sHierarchicalAnimations;
    private static com.android.server.wm.WindowManagerService sInstance;
    static com.android.server.wm.WindowManagerThreadPriorityBooster sThreadPriorityBooster;
    com.android.server.wm.AccessibilityController mAccessibilityController;
    final android.app.IActivityManager mActivityManager;
    final com.android.server.wm.WindowManagerInternal$AppTransitionListener mActivityManagerAppTransitionNotifier;
    final android.app.IActivityTaskManager mActivityTaskManager;
    final boolean mAllowAnimationsInLowPowerMode;
    final boolean mAllowBootMessages;
    boolean mAllowTheaterModeWakeFromLayout;
    final android.app.ActivityManagerInternal mAmInternal;
    final android.os.Handler mAnimationHandler;
    final android.util.ArrayMap mAnimationTransferMap;
    private boolean mAnimationsDisabled;
    final com.android.server.wm.WindowAnimator mAnimator;
    private float mAnimatorDurationScaleSetting;
    final java.util.ArrayList mAppFreezeListeners;
    final android.app.AppOpsManager mAppOps;
    int mAppsFreezingScreen;
    final boolean mAssistantOnTopOfDream;
    final com.android.server.wm.ActivityTaskManagerInternal mAtmInternal;
    final com.android.server.wm.ActivityTaskManagerService mAtmService;
    boolean mBootAnimationStopped;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    boolean mClientFreezingScreen;
    final com.android.server.wm.WindowManagerConstants mConstants;
    final android.content.Context mContext;
    int[] mCurrentProfileIds;
    int mCurrentUserId;
    final java.util.ArrayList mDestroyPreservedSurface;
    final java.util.ArrayList mDestroySurface;
    boolean mDisableTransitionAnimation;
    final com.android.server.wm.DisplayAreaPolicy$Provider mDisplayAreaPolicyProvider;
    boolean mDisplayEnabled;
    long mDisplayFreezeTime;
    boolean mDisplayFrozen;
    final android.hardware.display.DisplayManager mDisplayManager;
    final android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    final com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController;
    boolean mDisplayReady;
    android.view.IDisplayWindowRotationController mDisplayRotationController;
    private final android.os.IBinder$DeathRecipient mDisplayRotationControllerDeath;
    final com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings;
    android.graphics.Rect mDockedStackCreateBounds;
    int mDockedStackCreateMode;
    final com.android.server.wm.DragDropController mDragDropController;
    final long mDrawLockTimeoutMillis;
    final com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController;
    com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay;
    private int mEnterAnimId;
    private boolean mEventDispatchingEnabled;
    private int mExitAnimId;
    boolean mFocusMayChange;
    boolean mForceDesktopModeOnExternalDisplays;
    boolean mForceDisplayEnabled;
    final java.util.ArrayList mForceRemoves;
    private int mFrozenDisplayId;
    final com.android.server.wm.WindowManagerGlobalLock mGlobalLock;
    final com.android.server.wm.WindowManagerService$H mH;
    boolean mHardKeyboardAvailable;
    com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener;
    private boolean mHasHdrSupport;
    final boolean mHasPermanentDpad;
    private boolean mHasWideColorGamutSupport;
    private java.util.ArrayList mHidingNonSystemOverlayWindows;
    final com.android.server.wm.HighRefreshRateBlacklist mHighRefreshRateBlacklist;
    private com.android.server.wm.Session mHoldingScreenOn;
    private android.os.PowerManager$WakeLock mHoldingScreenWakeLock;
    private boolean mInTouchMode;
    final com.android.server.input.InputManagerService mInputManager;
    final com.android.server.wm.InputManagerCallback mInputManagerCallback;
    final java.util.HashMap mInputToWindowMap;
    boolean mIsPc;
    boolean mIsTouchDevice;
    final java.util.Map mKeyInterceptionInfoForToken;
    private final com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler;
    boolean mKeyguardGoingAway;
    boolean mKeyguardOrAodShowingOnDefaultDisplay;
    java.lang.String mLastANRState;
    int mLastDisplayFreezeDuration;
    java.lang.Object mLastFinishedFreezeSource;
    com.android.server.wm.WindowState mLastWakeLockHoldingWindow;
    com.android.server.wm.WindowState mLastWakeLockObscuringWindow;
    private final com.android.internal.util.LatencyTracker mLatencyTracker;
    final boolean mLimitedAlphaCompositing;
    final int mMaxUiWidth;
    com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker;
    final boolean mOnlyCore;
    final java.util.ArrayList mPendingRemove;
    com.android.server.wm.WindowState[] mPendingRemoveTmp;
    boolean mPerDisplayFocusEnabled;
    final android.content.pm.PackageManagerInternal mPmInternal;
    boolean mPointerLocationEnabled;
    com.android.server.policy.WindowManagerPolicy mPolicy;
    android.os.PowerManager mPowerManager;
    android.os.PowerManagerInternal mPowerManagerInternal;
    private final com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper;
    final android.util.SparseArray mProcessConfigurations;
    private com.android.server.wm.RecentsAnimationController mRecentsAnimationController;
    boolean mRenderShadowsInCompositor;
    final java.util.ArrayList mResizingWindows;
    com.android.server.wm.RootWindowContainer mRoot;
    java.util.ArrayList mRotationWatchers;
    boolean mSafeMode;
    private final android.os.PowerManager$WakeLock mScreenFrozenLock;
    final android.util.ArraySet mSessions;
    com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver;
    boolean mShowAlertWindowNotifications;
    boolean mShowingBootMessages;
    com.android.server.wm.StrictModeFlash mStrictModeFlash;
    com.android.server.wm.SurfaceAnimationRunner mSurfaceAnimationRunner;
    java.util.function.Function mSurfaceControlFactory;
    final java.util.function.Supplier mSurfaceFactory;
    boolean mSwitchingUser;
    boolean mSystemBooted;
    boolean mSystemReady;
    final com.android.server.wm.TaskPositioningController mTaskPositioningController;
    final com.android.server.wm.TaskSnapshotController mTaskSnapshotController;
    final android.content.res.Configuration mTempConfiguration;
    private android.view.WindowContentFrameStats mTempWindowRenderStats;
    final float[] mTmpFloats;
    final android.graphics.Rect mTmpRect;
    final android.graphics.Rect mTmpRect2;
    final android.graphics.Rect mTmpRect3;
    final android.graphics.RectF mTmpRectF;
    final android.graphics.Matrix mTmpTransform;
    private final android.view.SurfaceControl$Transaction mTransaction;
    java.util.function.Supplier mTransactionFactory;
    int mTransactionSequence;
    private float mTransitionAnimationScaleSetting;
    final boolean mUseBLAST;
    private com.android.server.wm.ViewServer mViewServer;
    int mVr2dDisplayId;
    boolean mVrModeEnabled;
    private final android.service.vr.IVrStateCallbacks mVrStateCallbacks;
    final java.util.HashMap mWaitingForDrawnCallbacks;
    final com.android.server.wm.WallpaperVisibilityListeners mWallpaperVisibilityListeners;
    com.android.server.wm.Watermark mWatermark;
    private float mWindowAnimationScaleSetting;
    final java.util.ArrayList mWindowChangeListeners;
    final java.util.HashMap mWindowMap;
    final com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked;
    final java.util.ArrayList mWindowReplacementTimeouts;
    final com.android.server.wm.WindowTracing mWindowTracing;
    boolean mWindowsChanged;
    int mWindowsFreezingScreen;

    static void <clinit>()
    {
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.WindowManagerThreadPriorityBooster $r0;

        <com.android.server.wm.WindowManagerService: java.lang.String WM_USE_BLAST_ADAPTER_FLAG> = "wm_use_blast_adapter";

        <com.android.server.wm.WindowManagerService: int WINDOW_REPLACEMENT_TIMEOUT_DURATION> = 2000;

        <com.android.server.wm.WindowManagerService: int WINDOW_LAYER_MULTIPLIER> = 5;

        <com.android.server.wm.WindowManagerService: int WINDOW_FREEZE_TIMEOUT_DURATION> = 2000;

        <com.android.server.wm.WindowManagerService: int WINDOW_ANIMATION_SCALE> = 0;

        <com.android.server.wm.WindowManagerService: int WINDOWS_FREEZING_SCREENS_TIMEOUT> = 2;

        <com.android.server.wm.WindowManagerService: int WINDOWS_FREEZING_SCREENS_NONE> = 0;

        <com.android.server.wm.WindowManagerService: int WINDOWS_FREEZING_SCREENS_ACTIVE> = 1;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_WILL_PLACE_SURFACES> = 3;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_WILL_ASSIGN_LAYERS> = 1;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_REMOVING_FOCUS> = 4;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_PLACING_SURFACES> = 2;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_NORMAL> = 0;

        <com.android.server.wm.WindowManagerService: int TYPE_LAYER_OFFSET> = 1000;

        <com.android.server.wm.WindowManagerService: int TYPE_LAYER_MULTIPLIER> = 10000;

        <com.android.server.wm.WindowManagerService: int TRANSITION_ANIMATION_SCALE> = 1;

        <com.android.server.wm.WindowManagerService: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.WindowManagerService: int SYSTEM_UI_MULTIPLIER> = 2;

        <com.android.server.wm.WindowManagerService: java.lang.String SYSTEM_SECURE> = "ro.secure";

        <com.android.server.wm.WindowManagerService: java.lang.String SYSTEM_DEBUGGABLE> = "ro.debuggable";

        <com.android.server.wm.WindowManagerService: java.lang.String SIZE_OVERRIDE> = "ro.config.size_override";

        <com.android.server.wm.WindowManagerService: int SEAMLESS_ROTATION_TIMEOUT_DURATION> = 2000;

        <com.android.server.wm.WindowManagerService: java.lang.String PROPERTY_EMULATOR_CIRCULAR> = "ro.emulator.circular";

        <com.android.server.wm.WindowManagerService: boolean PROFILE_ORIENTATION> = 0;

        <com.android.server.wm.WindowManagerService: int MAX_ANIMATION_DURATION> = 10000;

        <com.android.server.wm.WindowManagerService: int MAXIMUM_WINDOW_TOKEN_COUNT_WITHOUT_SURFACE> = 5;

        <com.android.server.wm.WindowManagerService: int LAYOUT_REPEAT_THRESHOLD> = 4;

        <com.android.server.wm.WindowManagerService: int LAYER_OFFSET_THUMBNAIL> = 4;

        <com.android.server.wm.WindowManagerService: int LAST_ANR_LIFETIME_DURATION_MSECS> = 7200000;

        <com.android.server.wm.WindowManagerService: int INPUT_DEVICES_READY_FOR_SAFE_MODE_DETECTION_TIMEOUT_MILLIS> = 1000;

        <com.android.server.wm.WindowManagerService: java.lang.String HIERARCHICAL_ANIMATIONS_PROPERTY> = "persist.wm.hierarchical_animations";

        <com.android.server.wm.WindowManagerService: java.lang.String DISABLE_TRIPLE_BUFFERING_PROPERTY> = "ro.sf.disable_triple_buffer";

        <com.android.server.wm.WindowManagerService: java.lang.String DENSITY_OVERRIDE> = "ro.config.density_override";

        <com.android.server.wm.WindowManagerService: long DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS> = 5000000000L;

        <com.android.server.wm.WindowManagerService: java.lang.String BOOT_ANIMATION_SERVICE> = "bootanim";

        <com.android.server.wm.WindowManagerService: int BOOT_ANIMATION_POLL_INTERVAL> = 50;

        <com.android.server.wm.WindowManagerService: int ANIMATION_DURATION_SCALE> = 2;

        <com.android.server.wm.WindowManagerService: int ANIMATION_COMPLETED_TIMEOUT_MS> = 5000;

        <com.android.server.wm.WindowManagerService: boolean ALWAYS_KEEP_CURRENT> = 1;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.wm.hierarchical_animations", 1);

        <com.android.server.wm.WindowManagerService: boolean sHierarchicalAnimations> = $z0;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.sf.disable_triple_buffer", 0);

        $z2 = $z1 ^ 1;

        <com.android.server.wm.WindowManagerService: boolean sEnableTripleBuffering> = $z2;

        $z3 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.wm.fixed_rotation_transform", 1);

        <com.android.server.wm.WindowManagerService: boolean ENABLE_FIXED_ROTATION_TRANSFORM> = $z3;

        $r0 = new com.android.server.wm.WindowManagerThreadPriorityBooster;

        specialinvoke $r0.<com.android.server.wm.WindowManagerThreadPriorityBooster: void <init>()>();

        <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerThreadPriorityBooster sThreadPriorityBooster> = $r0;

        return;
    }

    private void <init>(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, com.android.server.policy.WindowManagerPolicy, com.android.server.wm.ActivityTaskManagerService, java.util.function.Supplier, java.util.function.Supplier, java.util.function.Function)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14;
        com.android.server.policy.WindowManagerPolicy r1, $r68, $r72;
        com.android.server.wm.ActivityTaskManagerService r2, $r126;
        java.util.function.Supplier r3, r4, $r108;
        java.util.function.Function r5;
        android.util.ArrayMap $r6, $r38;
        java.util.Map $r7;
        com.android.server.wm.WindowManagerService$1 $r8;
        com.android.server.wm.WindowManagerService$2 $r9;
        com.android.server.wm.WindowManagerService$3 $r10;
        int[] $r11;
        android.util.ArraySet $r12;
        java.util.HashMap $r13, $r14, $r23;
        java.util.ArrayList $r15, $r16, $r17, $r20, $r21, $r22, $r24, $r31, $r39, $r42;
        com.android.server.wm.WindowState[] $r18;
        android.util.SparseArray $r19;
        float[] $r25;
        android.graphics.Rect $r26, $r27, $r28;
        android.graphics.RectF $r29;
        android.graphics.Matrix $r30;
        com.android.server.wm.WallpaperVisibilityListeners $r32;
        com.android.server.wm._$$Lambda$WindowManagerService$_84S7IuSlM65nKgepHJEvVFHdC8 $r33;
        com.android.server.wm.WindowManagerService$H $r34, $r71, $r111, $r116, $r123;
        android.os.Handler $r35, $r36;
        android.os.Looper $r37, $r114, $r117;
        android.content.res.Configuration $r40;
        com.android.server.wm.WindowManagerService$4 $r41;
        com.android.server.wm.InputManagerCallback $r43;
        com.android.server.wm.WindowManagerService$MousePositionTracker $r44;
        com.android.server.wm.WindowManagerGlobalLock $r46;
        android.content.pm.PackageManager $r47;
        android.content.res.Resources $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r97, $r109, $r118, $r128;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.Object $r57, $r59, $r69, $r75, $r77, $r82, $r84, $r86, $r91;
        android.hardware.display.DisplayManagerInternal $r58;
        android.view.SurfaceControl$Transaction $r60;
        com.android.server.wm.DisplayWindowSettings $r61;
        com.android.server.wm.WindowAnimator $r62;
        com.android.server.wm.RootWindowContainer $r63;
        com.android.server.wm.WindowSurfacePlacer $r64;
        com.android.server.wm.TaskSnapshotController $r65;
        android.view.Choreographer $r66;
        com.android.server.wm.WindowTracing $r67;
        android.hardware.display.DisplayManager $r70;
        android.content.Context $r73, $r101, $r127, r133;
        com.android.server.wm.KeyguardDisableHandler $r74;
        android.os.PowerManager $r76, $r78, $r105;
        com.android.server.wm.DisplayWindowListenerController $r79;
        android.app.IActivityManager $r80;
        android.app.IActivityTaskManager $r81, $r113;
        android.app.ActivityManagerInternal $r83;
        com.android.server.wm.ActivityTaskManagerInternal $r85;
        android.app.AppOpsManager $r87, $r89, $r90;
        com.android.server.wm.WindowManagerService$7 $r88;
        android.content.pm.PackageManagerInternal $r92;
        android.content.IntentFilter $r93, $r98;
        com.android.server.wm.WindowManagerService$8 $r94;
        android.os.UserHandle $r95, $r99;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.content.BroadcastReceiver $r100;
        com.android.internal.util.LatencyTracker $r103;
        com.android.server.wm.WindowManagerService$SettingsObserver $r104;
        com.android.server.wm.SurfaceAnimationRunner $r106;
        android.os.PowerManagerInternal $r107, $r131, r135;
        com.android.server.wm.TaskPositioningController $r110;
        com.android.server.input.InputManagerService $r112, r134;
        com.android.server.wm.DragDropController $r115;
        com.android.server.wm.HighRefreshRateBlacklist $r119;
        com.android.server.wm.WindowManagerConstants $r120;
        com.android.server.wm.utils.DeviceConfigInterface $r121;
        android.os.HandlerExecutor $r122;
        com.android.server.wm.WindowManagerService$LocalService $r124;
        com.android.server.wm.EmbeddedWindowController $r125;
        com.android.server.wm.DisplayAreaPolicy$Provider $r129;
        com.android.server.wm.WindowManagerService$6 $r130;
        android.os.PowerSaveState $r132;
        android.os.PowerManager$WakeLock r136, r141;
        android.content.ContentResolver r139;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r133 := @parameter0: android.content.Context;

        r134 := @parameter1: com.android.server.input.InputManagerService;

        z12 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        r1 := @parameter4: com.android.server.policy.WindowManagerPolicy;

        r2 := @parameter5: com.android.server.wm.ActivityTaskManagerService;

        r3 := @parameter6: java.util.function.Supplier;

        r4 := @parameter7: java.util.function.Supplier;

        r5 := @parameter8: java.util.function.Function;

        specialinvoke r0.<android.view.IWindowManager$Stub: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: int mVr2dDisplayId> = -1;

        r0.<com.android.server.wm.WindowManagerService: boolean mVrModeEnabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mRenderShadowsInCompositor> = 0;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        $r7 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r6);

        r0.<com.android.server.wm.WindowManagerService: java.util.Map mKeyInterceptionInfoForToken> = $r7;

        $r8 = new com.android.server.wm.WindowManagerService$1;

        specialinvoke $r8.<com.android.server.wm.WindowManagerService$1: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: android.service.vr.IVrStateCallbacks mVrStateCallbacks> = $r8;

        $r9 = new com.android.server.wm.WindowManagerService$2;

        specialinvoke $r9.<com.android.server.wm.WindowManagerService$2: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: android.content.BroadcastReceiver mBroadcastReceiver> = $r9;

        $r10 = new com.android.server.wm.WindowManagerService$3;

        specialinvoke $r10.<com.android.server.wm.WindowManagerService$3: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper> = $r10;

        $r11 = newarray (int)[0];

        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = $r11;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowAlertWindowNotifications> = 1;

        $r12 = new android.util.ArraySet;

        specialinvoke $r12.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap> = $r13;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowReplacementTimeouts> = $r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove> = $r17;

        $r18 = newarray (com.android.server.wm.WindowState)[20];

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp> = $r18;

        $r19 = new android.util.SparseArray;

        specialinvoke $r19.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mProcessConfigurations> = $r19;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface> = $r20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface> = $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves> = $r22;

        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks> = $r23;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows> = $r24;

        $r25 = newarray (float)[9];

        r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats> = $r25;

        $r26 = new android.graphics.Rect;

        specialinvoke $r26.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect> = $r26;

        $r27 = new android.graphics.Rect;

        specialinvoke $r27.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect2> = $r27;

        $r28 = new android.graphics.Rect;

        specialinvoke $r28.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect3> = $r28;

        $r29 = new android.graphics.RectF;

        specialinvoke $r29.<android.graphics.RectF: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.RectF mTmpRectF> = $r29;

        $r30 = new android.graphics.Matrix;

        specialinvoke $r30.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Matrix mTmpTransform> = $r30;

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSystemReady> = 0;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockHoldingWindow> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockObscuringWindow> = null;

        r0.<com.android.server.wm.WindowManagerService: int mDockedStackCreateMode> = 0;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers> = $r31;

        $r32 = new com.android.server.wm.WallpaperVisibilityListeners;

        specialinvoke $r32.<com.android.server.wm.WallpaperVisibilityListeners: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WallpaperVisibilityListeners mWallpaperVisibilityListeners> = $r32;

        r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController> = null;

        $r33 = new com.android.server.wm._$$Lambda$WindowManagerService$_84S7IuSlM65nKgepHJEvVFHdC8;

        specialinvoke $r33.<com.android.server.wm._$$Lambda$WindowManagerService$_84S7IuSlM65nKgepHJEvVFHdC8: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: android.os.IBinder$DeathRecipient mDisplayRotationControllerDeath> = $r33;

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 0;

        r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime> = 0L;

        r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = null;

        r0.<com.android.server.wm.WindowManagerService: boolean mSwitchingUser> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = 0;

        $r34 = new com.android.server.wm.WindowManagerService$H;

        specialinvoke $r34.<com.android.server.wm.WindowManagerService$H: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH> = $r34;

        $r35 = new android.os.Handler;

        $r36 = staticinvoke <com.android.server.AnimationThread: android.os.Handler getHandler()>();

        $r37 = virtualinvoke $r36.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r35.<android.os.Handler: void <init>(android.os.Looper)>($r37);

        r0.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler> = $r35;

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mPointerLocationEnabled> = 0;

        $r38 = new android.util.ArrayMap;

        specialinvoke $r38.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArrayMap mAnimationTransferMap> = $r38;

        $r39 = new java.util.ArrayList;

        specialinvoke $r39.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners> = $r39;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 0;

        $r40 = new android.content.res.Configuration;

        specialinvoke $r40.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration> = $r40;

        $r41 = new com.android.server.wm.WindowManagerService$4;

        specialinvoke $r41.<com.android.server.wm.WindowManagerService$4: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerInternal$AppTransitionListener mActivityManagerAppTransitionNotifier> = $r41;

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mAppFreezeListeners> = $r42;

        $r43 = new com.android.server.wm.InputManagerCallback;

        specialinvoke $r43.<com.android.server.wm.InputManagerCallback: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback> = $r43;

        $r44 = new com.android.server.wm.WindowManagerService$MousePositionTracker;

        specialinvoke $r44.<com.android.server.wm.WindowManagerService$MousePositionTracker: void <init>(com.android.server.wm.WindowManagerService$1)>(null);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker> = $r44;

        staticinvoke <com.android.server.LockGuard: java.lang.Object installLock(java.lang.Object,int)>(r0, 5);

        $r46 = virtualinvoke r2.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowManagerGlobalLock getGlobalLock()>();

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock> = $r46;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService> = r2;

        r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext> = r133;

        $r47 = virtualinvoke r133.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z2 = virtualinvoke $r47.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.pc");

        r0.<com.android.server.wm.WindowManagerService: boolean mIsPc> = $z2;

        r0.<com.android.server.wm.WindowManagerService: boolean mAllowBootMessages> = z12;

        r0.<com.android.server.wm.WindowManagerService: boolean mOnlyCore> = z0;

        $r48 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r48.<android.content.res.Resources: boolean getBoolean(int)>(17891518);

        r0.<com.android.server.wm.WindowManagerService: boolean mLimitedAlphaCompositing> = $z3;

        $r49 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke $r49.<android.content.res.Resources: boolean getBoolean(int)>(17891470);

        r0.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad> = $z4;

        $r50 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        z13 = virtualinvoke $r50.<android.content.res.Resources: boolean getBoolean(int)>(17891402);

        r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode> = z13;

        virtualinvoke r134.<com.android.server.input.InputManagerService: void setInTouchMode(boolean)>(z13);

        $r51 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r51.<android.content.res.Resources: int getInteger(int)>(17694805);

        $l1 = (long) $i0;

        r0.<com.android.server.wm.WindowManagerService: long mDrawLockTimeoutMillis> = $l1;

        $r52 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z5 = virtualinvoke $r52.<android.content.res.Resources: boolean getBoolean(int)>(17891342);

        r0.<com.android.server.wm.WindowManagerService: boolean mAllowAnimationsInLowPowerMode> = $z5;

        $r53 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r53.<android.content.res.Resources: int getInteger(int)>(17694838);

        r0.<com.android.server.wm.WindowManagerService: int mMaxUiWidth> = $i2;

        $r54 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z6 = virtualinvoke $r54.<android.content.res.Resources: boolean getBoolean(int)>(17891413);

        r0.<com.android.server.wm.WindowManagerService: boolean mDisableTransitionAnimation> = $z6;

        $r55 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z7 = virtualinvoke $r55.<android.content.res.Resources: boolean getBoolean(int)>(17891332);

        r0.<com.android.server.wm.WindowManagerService: boolean mPerDisplayFocusEnabled> = $z7;

        $r56 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z8 = virtualinvoke $r56.<android.content.res.Resources: boolean getBoolean(int)>(17891333);

        r0.<com.android.server.wm.WindowManagerService: boolean mAssistantOnTopOfDream> = $z8;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager> = r134;

        $r57 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r58 = (android.hardware.display.DisplayManagerInternal) $r57;

        r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r58;

        r0.<com.android.server.wm.WindowManagerService: java.util.function.Function mSurfaceControlFactory> = r5;

        r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory> = r3;

        r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory> = r4;

        $r59 = interfaceinvoke r3.<java.util.function.Supplier: java.lang.Object get()>();

        $r60 = (android.view.SurfaceControl$Transaction) $r59;

        r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction> = $r60;

        $r61 = new com.android.server.wm.DisplayWindowSettings;

        specialinvoke $r61.<com.android.server.wm.DisplayWindowSettings: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings> = $r61;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy> = r1;

        $r62 = new com.android.server.wm.WindowAnimator;

        specialinvoke $r62.<com.android.server.wm.WindowAnimator: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator> = $r62;

        $r63 = new com.android.server.wm.RootWindowContainer;

        specialinvoke $r63.<com.android.server.wm.RootWindowContainer: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot> = $r63;

        $z9 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("window_manager_native_boot", "wm_use_blast_adapter", 0);

        r0.<com.android.server.wm.WindowManagerService: boolean mUseBLAST> = $z9;

        $r64 = new com.android.server.wm.WindowSurfacePlacer;

        specialinvoke $r64.<com.android.server.wm.WindowSurfacePlacer: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked> = $r64;

        $r65 = new com.android.server.wm.TaskSnapshotController;

        specialinvoke $r65.<com.android.server.wm.TaskSnapshotController: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController> = $r65;

        $r66 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        $r67 = staticinvoke <com.android.server.wm.WindowTracing: com.android.server.wm.WindowTracing createDefaultAndStartLooper(com.android.server.wm.WindowManagerService,android.view.Choreographer)>(r0, $r66);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing> = $r67;

        $r68 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/policy/WindowManagerPolicy;", $r68);

        $r69 = virtualinvoke r133.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r70 = (android.hardware.display.DisplayManager) $r69;

        r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager> = $r70;

        $r73 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r72 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r71 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r74 = staticinvoke <com.android.server.wm.KeyguardDisableHandler: com.android.server.wm.KeyguardDisableHandler create(android.content.Context,com.android.server.policy.WindowManagerPolicy,android.os.Handler)>($r73, $r72, $r71);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler> = $r74;

        $r75 = virtualinvoke r133.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r76 = (android.os.PowerManager) $r75;

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager> = $r76;

        $r77 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        r135 = (android.os.PowerManagerInternal) $r77;

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal> = r135;

        if r135 == null goto label1;

        $r130 = new com.android.server.wm.WindowManagerService$6;

        specialinvoke $r130.<com.android.server.wm.WindowManagerService$6: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke r135.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>($r130);

        $r131 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r132 = virtualinvoke $r131.<android.os.PowerManagerInternal: android.os.PowerSaveState getLowPowerState(int)>(3);

        $z11 = $r132.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled> = $z11;

     label1:
        $r78 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        r136 = virtualinvoke $r78.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "SCREEN_FROZEN");

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock> = r136;

        virtualinvoke r136.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r79 = new com.android.server.wm.DisplayWindowListenerController;

        specialinvoke $r79.<com.android.server.wm.DisplayWindowListenerController: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController> = $r79;

        $r80 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager> = $r80;

        $r81 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        r0.<com.android.server.wm.WindowManagerService: android.app.IActivityTaskManager mActivityTaskManager> = $r81;

        $r82 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r83 = (android.app.ActivityManagerInternal) $r82;

        r0.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal> = $r83;

        $r84 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r85 = (com.android.server.wm.ActivityTaskManagerInternal) $r84;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal> = $r85;

        $r86 = virtualinvoke r133.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r87 = (android.app.AppOpsManager) $r86;

        r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps> = $r87;

        $r88 = new com.android.server.wm.WindowManagerService$7;

        specialinvoke $r88.<com.android.server.wm.WindowManagerService$7: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        $r89 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r89.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(24, null, $r88);

        $r90 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r90.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(45, null, $r88);

        $r91 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r92 = (android.content.pm.PackageManagerInternal) $r91;

        r0.<com.android.server.wm.WindowManagerService: android.content.pm.PackageManagerInternal mPmInternal> = $r92;

        $r93 = new android.content.IntentFilter;

        specialinvoke $r93.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r93.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGES_SUSPENDED");

        virtualinvoke $r93.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGES_UNSUSPENDED");

        $r94 = new com.android.server.wm.WindowManagerService$8;

        specialinvoke $r94.<com.android.server.wm.WindowManagerService$8: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        $r95 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r133.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r94, $r95, $r93, null, null);

        r139 = virtualinvoke r133.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        $f1 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>(r139, "window_animation_scale", $f0);

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = $f1;

        $r97 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $f2 = virtualinvoke $r97.<android.content.res.Resources: float getFloat(int)>(17105050);

        $f3 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>(r139, "transition_animation_scale", $f2);

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = $f3;

        $f4 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        $f5 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>(r139, "animator_duration_scale", $f4);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setAnimatorDurationScale(float)>($f5);

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r139, "force_desktop_mode_on_external_displays", 0);

        if $i3 == 0 goto label2;

        z14 = 1;

        goto label3;

     label2:
        z14 = 0;

     label3:
        r0.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays> = z14;

        $r98 = new android.content.IntentFilter;

        specialinvoke $r98.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r98.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        $r101 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r100 = r0.<com.android.server.wm.WindowManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r99 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r101.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r100, $r99, $r98, null, null);

        $r103 = staticinvoke <com.android.internal.util.LatencyTracker: com.android.internal.util.LatencyTracker getInstance(android.content.Context)>(r133);

        r0.<com.android.server.wm.WindowManagerService: com.android.internal.util.LatencyTracker mLatencyTracker> = $r103;

        $r104 = new com.android.server.wm.WindowManagerService$SettingsObserver;

        specialinvoke $r104.<com.android.server.wm.WindowManagerService$SettingsObserver: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver> = $r104;

        $r105 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        r141 = virtualinvoke $r105.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(536870922, "WindowManager");

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock> = r141;

        virtualinvoke r141.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r106 = new com.android.server.wm.SurfaceAnimationRunner;

        $r108 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r107 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        specialinvoke $r106.<com.android.server.wm.SurfaceAnimationRunner: void <init>(java.util.function.Supplier,android.os.PowerManagerInternal)>($r108, $r107);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.SurfaceAnimationRunner mSurfaceAnimationRunner> = $r106;

        $r109 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $z10 = virtualinvoke $r109.<android.content.res.Resources: boolean getBoolean(int)>(17891358);

        r0.<com.android.server.wm.WindowManagerService: boolean mAllowTheaterModeWakeFromLayout> = $z10;

        $r110 = new com.android.server.wm.TaskPositioningController;

        $r112 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r113 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityTaskManager mActivityTaskManager>;

        $r111 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r114 = virtualinvoke $r111.<com.android.server.wm.WindowManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r110.<com.android.server.wm.TaskPositioningController: void <init>(com.android.server.wm.WindowManagerService,com.android.server.input.InputManagerService,android.app.IActivityTaskManager,android.os.Looper)>(r0, $r112, $r113, $r114);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskPositioningController mTaskPositioningController> = $r110;

        $r115 = new com.android.server.wm.DragDropController;

        $r116 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r117 = virtualinvoke $r116.<com.android.server.wm.WindowManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r115.<com.android.server.wm.DragDropController: void <init>(com.android.server.wm.WindowManagerService,android.os.Looper)>(r0, $r117);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragDropController mDragDropController> = $r115;

        $r118 = virtualinvoke r133.<android.content.Context: android.content.res.Resources getResources()>();

        $r119 = staticinvoke <com.android.server.wm.HighRefreshRateBlacklist: com.android.server.wm.HighRefreshRateBlacklist create(android.content.res.Resources)>($r118);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.HighRefreshRateBlacklist mHighRefreshRateBlacklist> = $r119;

        $r120 = new com.android.server.wm.WindowManagerConstants;

        $r121 = <com.android.server.wm.utils.DeviceConfigInterface: com.android.server.wm.utils.DeviceConfigInterface REAL>;

        specialinvoke $r120.<com.android.server.wm.WindowManagerConstants: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.utils.DeviceConfigInterface)>(r0, $r121);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants> = $r120;

        $r122 = new android.os.HandlerExecutor;

        $r123 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        specialinvoke $r122.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r123);

        virtualinvoke $r120.<com.android.server.wm.WindowManagerConstants: void start(java.util.concurrent.Executor)>($r122);

        $r124 = new com.android.server.wm.WindowManagerService$LocalService;

        specialinvoke $r124.<com.android.server.wm.WindowManagerService$LocalService: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.WindowManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/wm/WindowManagerInternal;", $r124);

        $r125 = new com.android.server.wm.EmbeddedWindowController;

        $r126 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        specialinvoke $r125.<com.android.server.wm.EmbeddedWindowController: void <init>(com.android.server.wm.ActivityTaskManagerService)>($r126);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController> = $r125;

        $r127 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r128 = virtualinvoke $r127.<android.content.Context: android.content.res.Resources getResources()>();

        $r129 = staticinvoke <com.android.server.wm.DisplayAreaPolicy$Provider: com.android.server.wm.DisplayAreaPolicy$Provider fromResources(android.content.res.Resources)>($r128);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayAreaPolicy$Provider mDisplayAreaPolicyProvider> = $r129;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setGlobalShadowSettings()>();

        return;
    }

    static com.android.server.wm.KeyguardDisableHandler access$000(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.KeyguardDisableHandler $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        return $r1;
    }

    static void access$100(com.android.server.wm.WindowManagerService, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.PrintWriter;

        r3 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>(r1, r2, r3, z0);

        return;
    }

    static float access$1000(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        float $f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        return $f0;
    }

    static float access$1002(com.android.server.wm.WindowManagerService, float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        f0 := @parameter1: float;

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = f0;

        return f0;
    }

    static void access$1100(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

        return;
    }

    static void access$1200(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void notifyWindowsChanged()>();

        return;
    }

    static void access$1300(com.android.server.wm.WindowManagerService, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void showStrictModeViolation(int,int)>(i0, i1);

        return;
    }

    static boolean access$1400(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkBootAnimationCompleteLocked()>();

        return $z0;
    }

    static com.android.server.wm.RecentsAnimationController access$1500(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RecentsAnimationController $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        return $r1;
    }

    static void access$1600(com.android.server.wm.WindowManagerService, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void onPointerDownOutsideFocusLocked(android.os.IBinder)>(r1);

        return;
    }

    static void access$200(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setShadowRenderer()>();

        return;
    }

    static com.android.server.wm.WindowState access$2100(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindowLocked()>();

        return $r1;
    }

    static android.view.SurfaceControl$Transaction access$2200(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        return $r1;
    }

    static boolean access$300(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        return $z0;
    }

    static boolean access$302(com.android.server.wm.WindowManagerService, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled> = z0;

        return z0;
    }

    static void access$400(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateAppOpsState()>();

        return;
    }

    static void access$500(com.android.server.wm.WindowManagerService, android.util.ArraySet, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.util.ArraySet r1;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: android.util.ArraySet;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateHiddenWhileSuspendedState(android.util.ArraySet,boolean)>(r1, z0);

        return;
    }

    static void access$700(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void notifyFocusChanged()>();

        return;
    }

    static float access$800(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        float $f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        return $f0;
    }

    static float access$802(com.android.server.wm.WindowManagerService, float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        f0 := @parameter1: float;

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = f0;

        return f0;
    }

    static float access$900(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        float $f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        return $f0;
    }

    static float access$902(com.android.server.wm.WindowManagerService, float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        f0 := @parameter1: float;

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = f0;

        return f0;
    }

    private int addWindowTokenWithOptions(android.os.IBinder, int, int, android.os.Bundle, java.lang.String, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i3, i4;
        boolean z0, z1, $z2, $z3, $z4;
        long l2, l5, l6;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowToken $r2, r21;
        com.android.server.wm.WallpaperWindowToken $r3;
        java.lang.Object[] $r4, $r7;
        com.android.server.wm.ProtoLogGroup $r5, $r8;
        java.lang.Long $r6, $r9;
        int[] $r10;
        com.android.server.policy.WindowManagerPolicy $r11;
        java.lang.Throwable $r12, $r13, $r14, r27;
        android.os.IBinder r15;
        android.os.Bundle r16;
        java.lang.String r17, r20, r22, r23;
        com.android.server.wm.WindowManagerGlobalLock r18, r24, r26;
        java.lang.SecurityException r19;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r15 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r16 := @parameter3: android.os.Bundle;

        r17 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "addWindowToken()");

        if z1 != 0 goto label01;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r10 = newarray (int)[1];

        i3 = interfaceinvoke $r11.<com.android.server.policy.WindowManagerPolicy: int checkAddPermission(int,boolean,java.lang.String,int[])>(i0, 0, r17, $r10);

        if i3 == 0 goto label01;

        return i3;

     label01:
        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r18;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label04:
        if z1 != 0 goto label08;

        if r17 == null goto label07;

     label05:
        $z4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean unprivilegedAppCanCreateTokenWith(com.android.server.wm.WindowState,int,int,int,android.os.IBinder,java.lang.String)>(null, i4, i0, i0, r15, r17);

        if $z4 == 0 goto label07;

     label06:
        goto label08;

     label07:
        r19 = new java.lang.SecurityException;

        specialinvoke r19.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw r19;

     label08:
        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i1, null);

     label09:
        if r1 != null goto label15;

     label10:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label13;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

     label11:
        l5 = (long) i1;

     label12:
        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r20;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r7[1] = $r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 1208313423, 4, "addWindowToken: Attempted to add token: %s for non-exiting displayId=%d", $r7);

     label13:
        exitmonitor r18;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return -9;

     label15:
        r21 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r15);

     label16:
        if r21 == null goto label22;

     label17:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label20;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r15);

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

     label18:
        l6 = (long) i1;

     label19:
        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r22;

        $r4[1] = r23;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r4[2] = $r6;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 254883724, 16, "addWindowToken: Attempted to add binder token: %s for already created window token: %s displayId=%d", $r4);

     label20:
        exitmonitor r18;

     label21:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return -5;

     label22:
        if i0 != 2013 goto label25;

     label23:
        $r3 = new com.android.server.wm.WallpaperWindowToken;

        specialinvoke $r3.<com.android.server.wm.WallpaperWindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,boolean,com.android.server.wm.DisplayContent,boolean)>(r0, r15, 1, r1, z1);

     label24:
        goto label27;

     label25:
        r24 = r18;

     label26:
        $r2 = new com.android.server.wm.WindowToken;

        specialinvoke $r2.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean,com.android.server.wm.DisplayContent,boolean,int,boolean,boolean)>(r0, r15, i0, 1, r1, z1, i4, 0, z0);

     label27:
        r24 = r18;

     label28:
        exitmonitor r18;

     label29:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label30:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 0;

     label31:
        $r14 := @caughtexception;

        r26 = r18;

        r27 = $r14;

     label32:
        r24 = r26;

     label33:
        exitmonitor r26;

     label34:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r27;

     label35:
        $r13 := @caughtexception;

        r27 = $r13;

        r26 = r24;

        goto label32;

     label36:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label36;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label05 to label06 with label31;
        catch java.lang.Throwable from label07 to label08 with label31;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch java.lang.Throwable from label12 to label13 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label15 to label16 with label31;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label20 to label21 with label31;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label26 to label27 with label35;
        catch java.lang.Throwable from label28 to label29 with label35;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    private boolean applyForcedPropertiesForDefaultDisplay()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        long l0, l1;
        android.content.Context $r2, $r15;
        android.content.ContentResolver $r3, $r16;
        boolean $z0, $z1, z4, z5, z6, z7;
        java.lang.Object[] $r4, $r8;
        com.android.server.wm.ProtoLogGroup $r5, $r9;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i13, i14, i15;
        java.lang.String $r6, $r7, r13;
        java.lang.Long $r10, $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r13 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, "display_size_forced");

        if r13 == null goto label02;

        $i9 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i9 != 0 goto label01;

        goto label02;

     label01:
        goto label03;

     label02:
        r13 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.size_override", null);

     label03:
        z4 = 0;

        if r13 == null goto label14;

        z4 = 0;

        $i3 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i3 <= 0 goto label14;

        i10 = virtualinvoke r13.<java.lang.String: int indexOf(int)>(44);

        z4 = 0;

        if i10 <= 0 goto label14;

        z4 = 0;

        $i4 = virtualinvoke r13.<java.lang.String: int lastIndexOf(int)>(44);

        if $i4 != i10 goto label14;

     label04:
        $r6 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, i10);

        i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $i5 = i10 + 1;

        $r7 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>($i5);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $i6 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        if $i6 != i11 goto label07;

     label05:
        z4 = 0;

     label06:
        $i8 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        if $i8 == i12 goto label12;

     label07:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label10;

     label08:
        l0 = (long) i11;

        l1 = (long) i12;

     label09:
        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r8[1] = $r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, 1115417974, 5, "FORCED DISPLAY SIZE: %dx%d", $r8);

     label10:
        $i7 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void updateBaseDisplayMetrics(int,int,int)>(i11, i12, $i7);

     label11:
        z4 = 1;

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        z4 = 0;

     label14:
        $i13 = r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        i14 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int getForcedDisplayDensityForUserLocked(int)>($i13);

        z5 = z4;

        if i14 == 0 goto label15;

        z5 = z4;

        $i2 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        if i14 == $i2 goto label15;

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = i14;

        z5 = 1;

     label15:
        $r15 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i15 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r16, "display_scaling_force", 0);

        z6 = r1.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled>;

        if i15 == 0 goto label16;

        z7 = 1;

        goto label17;

     label16:
        z7 = 0;

     label17:
        if z6 == z7 goto label19;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label18;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 954470154, 0, "FORCED DISPLAY SCALING DISABLED", $r4);

     label18:
        r1.<com.android.server.wm.DisplayContent: boolean mDisplayScalingDisabled> = 1;

        z5 = 1;

     label19:
        return z5;

        catch java.lang.NumberFormatException from label04 to label05 with label13;
        catch java.lang.NumberFormatException from label06 to label07 with label13;
        catch java.lang.NumberFormatException from label07 to label08 with label13;
        catch java.lang.NumberFormatException from label09 to label10 with label13;
        catch java.lang.NumberFormatException from label10 to label11 with label13;
    }

    static void boostPriorityForLockedSection()
    {
        com.android.server.wm.WindowManagerThreadPriorityBooster $r0;

        $r0 = <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerThreadPriorityBooster sThreadPriorityBooster>;

        virtualinvoke $r0.<com.android.server.wm.WindowManagerThreadPriorityBooster: void boost()>();

        return;
    }

    private boolean checkBootAnimationCompleteLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, $z3;
        java.lang.Object[] $r1, $r5;
        com.android.server.wm.ProtoLogGroup $r2, $r6;
        com.android.server.wm.WindowManagerService$H $r3, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = staticinvoke <android.os.SystemService: boolean isRunning(java.lang.String)>("bootanim");

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(37);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(37, 50L);

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z3 == 0 goto label1;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r5 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 600140673, 0, null, $r5);

     label1:
        return 0;

     label2:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z1 == 0 goto label3;

        $r2 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r1 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r2, 1224307091, 0, null, $r1);

     label3:
        return 1;
    }

    private void checkCallerOwnsDisplay(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2;
        android.hardware.display.DisplayManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        java.lang.SecurityException $r7;
        android.view.Display r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r8 = virtualinvoke $r1.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r8 == null goto label2;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r8.<android.view.Display: int getOwnerUid()>();

        if $i1 != $i2 goto label1;

        return;

     label1:
        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("The caller doesn\'t own the display.");

        throw $r7;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find display for non-existent displayId: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private android.content.res.Configuration computeNewConfigurationLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean $z0;
        android.content.res.Configuration $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayContent $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new android.content.res.Configuration;

        specialinvoke $r2.<android.content.res.Configuration: void <init>()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void computeScreenConfiguration(android.content.res.Configuration)>($r2);

        return $r2;
    }

    private int createSurfaceControl(android.view.SurfaceControl, android.view.SurfaceControl, int, com.android.server.wm.WindowState, com.android.server.wm.WindowStateAnimator)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, i3;
        com.android.server.wm.WindowState r1;
        boolean $z0, $z1, $z2;
        android.view.WindowManager$LayoutParams $r2;
        java.lang.Object[] $r3, $r5;
        com.android.server.wm.ProtoLogGroup $r4, $r6;
        java.lang.Throwable $r7;
        android.view.SurfaceControl r8, r9;
        com.android.server.wm.WindowStateAnimator r10;
        com.android.server.wm.WindowSurfaceController r11;
        java.lang.String r12, r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.view.SurfaceControl;

        r9 := @parameter1: android.view.SurfaceControl;

        i0 := @parameter2: int;

        r1 := @parameter3: com.android.server.wm.WindowState;

        r10 := @parameter4: com.android.server.wm.WindowStateAnimator;

        i3 = i0;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 != 0 goto label1;

        i3 = i0 | 4;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "createSurfaceControl");

        $r2 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        $i1 = r1.<com.android.server.wm.WindowState: int mOwnerUid>;

        r11 = virtualinvoke r10.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController createSurfaceLocked(int,int)>($i2, $i1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        if r11 == null goto label3;

        virtualinvoke r11.<com.android.server.wm.WindowSurfaceController: void getSurfaceControl(android.view.SurfaceControl)>(r8);

        virtualinvoke r11.<com.android.server.wm.WindowSurfaceController: void getBLASTSurfaceControl(android.view.SurfaceControl)>(r9);

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z2 == 0 goto label5;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1257821162, 0, null, $r5);

        goto label5;

     label3:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label4;

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r13;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 704998117, 0, "Failed to create surface control for %s", $r3);

     label4:
        virtualinvoke r8.<android.view.SurfaceControl: void release()>();

     label5:
        return i3;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    static int dipToPixel(int, android.util.DisplayMetrics)
    {
        int i0, $i1;
        android.util.DisplayMetrics r0;
        float $f0, $f1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.util.DisplayMetrics;

        $f0 = (float) i0;

        $f1 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(1, $f0, r0);

        $i1 = (int) $f1;

        return $i1;
    }

    private void doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, z25;
        java.lang.String r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r29, $r33, $r34, $r39, r58;
        android.content.Context $r2;
        int $i0, $i1, $i2, $i3, i5;
        com.android.server.wm.RootWindowContainer $r3, $r14, $r31, r62;
        com.android.server.wm.WindowManagerConstants $r4, $r30;
        java.lang.StringBuilder $r26, $r35;
        android.util.proto.ProtoOutputStream $r32;
        char $c4;
        java.lang.Throwable $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50;
        java.io.FileDescriptor r51;
        java.io.PrintWriter r52;
        java.lang.String[] r53;
        com.android.server.wm.WindowManagerGlobalLock r56, r59, r61, r66, r68, r70, r72, r74, r76, r78, r80;
        com.android.server.wm._$$Lambda$WindowManagerService$Weqt9AR6Z_7QFUqINpyO4wa_syM r63;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r51 := @parameter0: java.io.FileDescriptor;

        r52 := @parameter1: java.io.PrintWriter;

        r53 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $z1 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r2, "WindowManager", r52);

        if $z1 != 0 goto label001;

        return;

     label001:
        z25 = 0;

        i5 = 0;

     label002:
        $i0 = lengthof r53;

        if i5 >= $i0 goto label007;

        r1 = r53[i5];

        if r1 == null goto label007;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 <= 0 goto label007;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c4 == 45 goto label003;

        goto label007;

     label003:
        i5 = i5 + 1;

        $r33 = "-a";

        $z23 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z23 == 0 goto label004;

        z25 = 1;

        goto label006;

     label004:
        $r34 = "-h";

        $z24 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z24 == 0 goto label005;

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("Window manager dump options:");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("  [-a] [-h] [cmd] ...");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may be one of:");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    l[astanr]: last ANR information");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    p[policy]: policy state");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    a[animator]: animator state");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    s[essions]: active sessions");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    surfaces: active surfaces (debugging enabled only)");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    d[isplays]: active display contents");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    t[okens]: token list");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    w[indows]: window list");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    trace: print trace status and write Winscope trace to file");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may also be a NAME to dump windows.  NAME may");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    be a partial substring in a window name, a");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    Window hex object identifier, or");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    \"all\" for all windows, or");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    \"visible\" for the visible windows.");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("    \"visible-apps\" for the visible app windows.");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("  -a: include all available server state.");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("  --proto: output dump in protocol buffer format.");

        return;

     label005:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; use -h for help");

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>($r39);

     label006:
        goto label002;

     label007:
        if z0 == 0 goto label013;

        $r32 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r32.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r51);

        r56 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r56;

     label008:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpDebugLocked(android.util.proto.ProtoOutputStream,int)>($r32, 0);

        exitmonitor r56;

     label009:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        virtualinvoke $r32.<android.util.proto.ProtoOutputStream: void flush()>();

        return;

     label010:
        $r47 := @caughtexception;

     label011:
        exitmonitor r56;

     label012:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r47;

     label013:
        $i1 = lengthof r53;

        if i5 >= $i1 goto label080;

        r58 = r53[i5];

        $r5 = "lastanr";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z2 != 0 goto label074;

        $r6 = "l";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z3 == 0 goto label014;

        goto label074;

     label014:
        $r7 = "policy";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z4 != 0 goto label068;

        $r8 = "p";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z5 == 0 goto label015;

        goto label068;

     label015:
        $r9 = "animator";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z6 != 0 goto label062;

        $r10 = "a";

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z7 == 0 goto label016;

        goto label062;

     label016:
        $r11 = "sessions";

        $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z8 != 0 goto label056;

        $r12 = "s";

        $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z9 == 0 goto label017;

        goto label056;

     label017:
        $r13 = "displays";

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z10 != 0 goto label050;

        $r15 = "d";

        $z11 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z11 == 0 goto label018;

        goto label050;

     label018:
        $r16 = "tokens";

        $z12 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z12 != 0 goto label044;

        $r17 = "t";

        $z13 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z13 == 0 goto label019;

        goto label044;

     label019:
        $r18 = "windows";

        $z14 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z14 != 0 goto label038;

        $r19 = "w";

        $z15 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z15 == 0 goto label020;

        goto label038;

     label020:
        $r20 = "all";

        $z16 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z16 == 0 goto label026;

        r59 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r59;

     label021:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r52, 1, null);

        exitmonitor r59;

     label022:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label023:
        $r48 := @caughtexception;

     label024:
        exitmonitor r59;

     label025:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r48;

     label026:
        $r21 = "containers";

        $z17 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z17 == 0 goto label032;

        r61 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r61;

     label027:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r31.<com.android.server.wm.RootWindowContainer: void dumpChildrenNames(java.io.PrintWriter,java.lang.String)>(r52, " ");

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        r62 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r63 = new com.android.server.wm._$$Lambda$WindowManagerService$Weqt9AR6Z_7QFUqINpyO4wa_syM;

        specialinvoke r63.<com.android.server.wm._$$Lambda$WindowManagerService$Weqt9AR6Z_7QFUqINpyO4wa_syM: void <init>(java.io.PrintWriter)>(r52);

        virtualinvoke r62.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>(r63, 1);

        exitmonitor r61;

     label028:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label029:
        $r42 := @caughtexception;

     label030:
        exitmonitor r61;

     label031:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r42;

     label032:
        $r22 = "trace";

        $z18 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z18 == 0 goto label033;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTraceStatus(java.io.PrintWriter)>(r52);

        return;

     label033:
        $r23 = "logging";

        $z19 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z19 == 0 goto label034;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLogStatus(java.io.PrintWriter)>(r52);

        return;

     label034:
        $r24 = "refresh";

        $z20 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z20 == 0 goto label035;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpHighRefreshRateBlacklist(java.io.PrintWriter)>(r52);

        return;

     label035:
        $r25 = "constants";

        $z21 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r58);

        if $z21 == 0 goto label036;

        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        virtualinvoke $r30.<com.android.server.wm.WindowManagerConstants: void dump(java.io.PrintWriter)>(r52);

        return;

     label036:
        $i2 = i5 + 1;

        $z22 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean dumpWindows(java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>(r52, r58, r53, $i2, z25);

        if $z22 != 0 goto label037;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad window command, or no windows match: ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r58);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("Use -h for help.");

     label037:
        return;

     label038:
        r66 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r66;

     label039:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r52, 1, null);

        exitmonitor r66;

     label040:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label041:
        $r45 := @caughtexception;

     label042:
        exitmonitor r66;

     label043:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r45;

     label044:
        r68 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r68;

     label045:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.PrintWriter,boolean)>(r52, 1);

        exitmonitor r68;

     label046:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label047:
        $r50 := @caughtexception;

     label048:
        exitmonitor r68;

     label049:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r50;

     label050:
        r70 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r70;

     label051:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r14.<com.android.server.wm.RootWindowContainer: void dumpDisplayContents(java.io.PrintWriter)>(r52);

        exitmonitor r70;

     label052:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label053:
        $r41 := @caughtexception;

     label054:
        exitmonitor r70;

     label055:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r41;

     label056:
        r72 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r72;

     label057:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.PrintWriter,boolean)>(r52, 1);

        exitmonitor r72;

     label058:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label059:
        $r46 := @caughtexception;

     label060:
        exitmonitor r72;

     label061:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r46;

     label062:
        r74 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r74;

     label063:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r52, r53, 1);

        exitmonitor r74;

     label064:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label065:
        $r40 := @caughtexception;

     label066:
        exitmonitor r74;

     label067:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r40;

     label068:
        r76 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r76;

     label069:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r52, r53, 1);

        exitmonitor r76;

     label070:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label071:
        $r44 := @caughtexception;

     label072:
        exitmonitor r76;

     label073:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r44;

     label074:
        r78 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r78;

     label075:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLastANRLocked(java.io.PrintWriter)>(r52);

        exitmonitor r78;

     label076:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label077:
        $r43 := @caughtexception;

     label078:
        exitmonitor r78;

     label079:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r43;

     label080:
        r80 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r80;

     label081:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label082:
        if z25 == 0 goto label084;

     label083:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label084:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLastANRLocked(java.io.PrintWriter)>(r52);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label085:
        if z25 == 0 goto label087;

     label086:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label087:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r52, r53, z25);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label088:
        if z25 == 0 goto label090;

     label089:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label090:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r52, r53, z25);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label091:
        if z25 == 0 goto label093;

     label092:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label093:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.PrintWriter,boolean)>(r52, z25);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label094:
        if z25 == 0 goto label096;

     label095:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label096:
        if z25 == 0 goto label098;

     label097:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label098:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void dumpDisplayContents(java.io.PrintWriter)>(r52);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label099:
        if z25 == 0 goto label101;

     label100:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label101:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.PrintWriter,boolean)>(r52, z25);

        virtualinvoke r52.<java.io.PrintWriter: void println()>();

     label102:
        if z25 == 0 goto label104;

     label103:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label104:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r52, z25, null);

     label105:
        if z25 == 0 goto label107;

     label106:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label107:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTraceStatus(java.io.PrintWriter)>(r52);

     label108:
        if z25 == 0 goto label110;

     label109:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label110:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLogStatus(java.io.PrintWriter)>(r52);

     label111:
        if z25 == 0 goto label113;

     label112:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label113:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpHighRefreshRateBlacklist(java.io.PrintWriter)>(r52);

     label114:
        if z25 == 0 goto label116;

     label115:
        virtualinvoke r52.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label116:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerConstants: void dump(java.io.PrintWriter)>(r52);

        exitmonitor r80;

     label117:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label118:
        $r49 := @caughtexception;

     label119:
        exitmonitor r80;

     label120:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r49;

        catch java.lang.Throwable from label008 to label009 with label010;
        catch java.lang.Throwable from label011 to label012 with label010;
        catch java.lang.Throwable from label021 to label022 with label023;
        catch java.lang.Throwable from label024 to label025 with label023;
        catch java.lang.Throwable from label027 to label028 with label029;
        catch java.lang.Throwable from label030 to label031 with label029;
        catch java.lang.Throwable from label039 to label040 with label041;
        catch java.lang.Throwable from label042 to label043 with label041;
        catch java.lang.Throwable from label045 to label046 with label047;
        catch java.lang.Throwable from label048 to label049 with label047;
        catch java.lang.Throwable from label051 to label052 with label053;
        catch java.lang.Throwable from label054 to label055 with label053;
        catch java.lang.Throwable from label057 to label058 with label059;
        catch java.lang.Throwable from label060 to label061 with label059;
        catch java.lang.Throwable from label063 to label064 with label065;
        catch java.lang.Throwable from label066 to label067 with label065;
        catch java.lang.Throwable from label069 to label070 with label071;
        catch java.lang.Throwable from label072 to label073 with label071;
        catch java.lang.Throwable from label075 to label076 with label077;
        catch java.lang.Throwable from label078 to label079 with label077;
        catch java.lang.Throwable from label081 to label082 with label118;
        catch java.lang.Throwable from label083 to label084 with label118;
        catch java.lang.Throwable from label084 to label085 with label118;
        catch java.lang.Throwable from label086 to label087 with label118;
        catch java.lang.Throwable from label087 to label088 with label118;
        catch java.lang.Throwable from label089 to label090 with label118;
        catch java.lang.Throwable from label090 to label091 with label118;
        catch java.lang.Throwable from label092 to label093 with label118;
        catch java.lang.Throwable from label093 to label094 with label118;
        catch java.lang.Throwable from label095 to label096 with label118;
        catch java.lang.Throwable from label097 to label098 with label118;
        catch java.lang.Throwable from label098 to label099 with label118;
        catch java.lang.Throwable from label100 to label101 with label118;
        catch java.lang.Throwable from label101 to label102 with label118;
        catch java.lang.Throwable from label103 to label104 with label118;
        catch java.lang.Throwable from label104 to label105 with label118;
        catch java.lang.Throwable from label106 to label107 with label118;
        catch java.lang.Throwable from label107 to label108 with label118;
        catch java.lang.Throwable from label109 to label110 with label118;
        catch java.lang.Throwable from label110 to label111 with label118;
        catch java.lang.Throwable from label112 to label113 with label118;
        catch java.lang.Throwable from label113 to label114 with label118;
        catch java.lang.Throwable from label115 to label116 with label118;
        catch java.lang.Throwable from label116 to label117 with label118;
        catch java.lang.Throwable from label119 to label120 with label118;
    }

    private boolean doesAddToastWindowRequireToken(java.lang.String, int, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.SecurityException r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r8, r12;
        com.android.server.wm.ActivityRecord $r9, $r10;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        com.android.server.wm.WindowState r13;
        boolean z0;
        android.content.pm.ApplicationInfo r14;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r13 := @parameter2: com.android.server.wm.WindowState;

        z0 = 1;

        if r13 == null goto label3;

        $r9 = r13.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r9 == null goto label1;

        $r10 = r13.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $i4 = $r10.<com.android.server.wm.ActivityRecord: int mTargetSdk>;

        if $i4 < 26 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r14 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r12, 0, $i1);

        $i2 = r14.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 != i0 goto label6;

        $i3 = r14.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 < 26 goto label5;

     label4:
        return 1;

     label5:
        goto label8;

     label6:
        r1 = new java.lang.SecurityException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in UID ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw r1;

     label7:
        $r11 := @caughtexception;

     label8:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label6 to label7 with label7;
    }

    private void dumpAnimatorLocked(java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        boolean z0;
        com.android.server.wm.WindowAnimator $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER ANIMATOR STATE (dumpsys window animator)");

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r3.<com.android.server.wm.WindowAnimator: void dumpLocked(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", z0);

        return;
    }

    private void dumpHighRefreshRateBlacklist(java.io.PrintWriter)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.wm.HighRefreshRateBlacklist $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER HIGH REFRESH RATE BLACKLIST (dumpsys window refresh)");

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.HighRefreshRateBlacklist mHighRefreshRateBlacklist>;

        virtualinvoke $r2.<com.android.server.wm.HighRefreshRateBlacklist: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    private void dumpLastANRLocked(java.io.PrintWriter)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER LAST ANR (dumpsys window lastanr)");

        r2 = r0.<com.android.server.wm.WindowManagerService: java.lang.String mLastANRState>;

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  <no ANR has occurred since boot>");

        goto label2;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r2);

     label2:
        return;
    }

    private void dumpLogStatus(java.io.PrintWriter)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.protolog.ProtoLogImpl $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER LOGGING (dumpsys window logging)");

        $r2 = staticinvoke <com.android.server.protolog.ProtoLogImpl: com.android.server.protolog.ProtoLogImpl getSingleInstance()>();

        $r3 = virtualinvoke $r2.<com.android.server.protolog.ProtoLogImpl: java.lang.String getStatus()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        return;
    }

    private void dumpPolicyLocked(java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        boolean z0;
        com.android.server.policy.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER POLICY STATE (dumpsys window policy)");

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void dump(java.lang.String,java.io.PrintWriter,java.lang.String[])>("    ", r1, r2);

        return;
    }

    private void dumpSessionsLocked(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0;
        com.android.server.wm.Session r2;
        android.util.ArraySet $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER SESSIONS (dumpsys window sessions)");

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        if i1 >= $i0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.wm.Session) $r5;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Session ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r2.<com.android.server.wm.Session: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void dumpTokensLocked(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER TOKENS (dumpsys window tokens)");

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void dumpTokens(java.io.PrintWriter,boolean)>(r1, z0);

        return;
    }

    private void dumpTraceStatus(java.io.PrintWriter)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        com.android.server.wm.WindowTracing $r4;
        java.lang.String $r5, $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER TRACE (dumpsys window trace)");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowTracing: java.lang.String getStatus()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r8);

        return;
    }

    private boolean dumpWindows(java.io.PrintWriter, java.lang.String, java.lang.String[], int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1;
        boolean z0, z1, z2, $z3, $z4, $z5;
        com.android.server.wm._$$Lambda$WindowManagerService$tQLp_WG3sRGFq2iHAmuL0rNXLKY r1;
        java.util.ArrayList $r2;
        java.lang.String $r3, $r5, $r6, r12;
        com.android.server.wm.RootWindowContainer $r4, $r7, r18;
        java.lang.Throwable $r8, $r9, $r10;
        java.io.PrintWriter r11;
        java.lang.String[] r13;
        com.android.server.wm.WindowManagerGlobalLock r15, r17, r19;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: java.io.PrintWriter;

        r12 := @parameter1: java.lang.String;

        r13 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = "apps";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z3 != 0 goto label07;

        $r5 = "visible";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z4 != 0 goto label07;

        $r6 = "visible-apps";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z5 == 0 goto label01;

        goto label07;

     label01:
        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: void getWindowsByName(java.util.ArrayList,java.lang.String)>($r2, r12);

        exitmonitor r15;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        goto label13;

     label04:
        $r8 := @caughtexception;

     label05:
        exitmonitor r15;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label07:
        z1 = virtualinvoke r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("apps");

        z2 = virtualinvoke r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("visible");

        r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r17;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label09:
        if z1 == 0 goto label11;

     label10:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void dumpDisplayContents(java.io.PrintWriter)>(r11);

     label11:
        r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = new com.android.server.wm._$$Lambda$WindowManagerService$tQLp_WG3sRGFq2iHAmuL0rNXLKY;

        specialinvoke r1.<com.android.server.wm._$$Lambda$WindowManagerService$tQLp_WG3sRGFq2iHAmuL0rNXLKY: void <init>(boolean,boolean,java.util.ArrayList)>(z2, z1, $r2);

        virtualinvoke r18.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>(r1, 1);

        exitmonitor r17;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label13:
        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 > 0 goto label14;

        return 0;

     label14:
        r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r19;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r11, z0, $r2);

        exitmonitor r19;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 1;

     label17:
        $r9 := @caughtexception;

     label18:
        exitmonitor r19;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

     label20:
        $r10 := @caughtexception;

     label21:
        exitmonitor r17;

     label22:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void dumpWindowsLocked(java.io.PrintWriter, boolean, java.util.ArrayList)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0;
        java.util.ArrayList r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.ArrayList;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER WINDOWS (dumpsys window windows)");

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsNoHeaderLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r1, z0, r2);

        return;
    }

    private void dumpWindowsNoHeaderLocked(java.io.PrintWriter, boolean, java.util.ArrayList)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.android.server.wm.RootWindowContainer $r2, $r7, $r9, $r11, $r17, $r19;
        java.util.ArrayList $r3, $r4, $r5, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, r41, r44, $r46;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i18, i19, i20;
        java.util.HashMap $r6, $r25;
        android.content.res.Configuration $r8;
        com.android.server.wm._$$Lambda$WindowManagerService$r_RKnp9McRAtWJkuC0ltrPERYYE $r10;
        long $l3;
        java.lang.Object $r12, $r23, $r28, $r31, $r34, $r37, $r40;
        com.android.server.wm.WindowState $r13, $r14, r42, r43, r45, r47, r48, r50;
        com.android.server.wm.InputManagerCallback $r15;
        com.android.server.wm.TaskSnapshotController $r16;
        com.android.server.wm.WindowSurfacePlacer $r18;
        float $f0, $f1, $f2;
        com.android.server.wm.RecentsAnimationController $r20, $r21, $r22;
        com.android.server.wm._$$Lambda$WindowManagerService$PR1gW5Tck_nLlfWq9om2tE_fX1o $r24;
        com.android.server.wm.AccessibilityController r49;
        com.android.server.wm.DisplayContent r51;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r41 := @parameter2: java.util.ArrayList;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void dumpWindowsNoHeader(java.io.PrintWriter,boolean,java.util.ArrayList)>(r1, z0, r41);

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Hiding System Alert Windows:");

        $r38 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $i14 = virtualinvoke $r38.<java.util.ArrayList: int size()>();

        i15 = $i14 - 1;

     label01:
        if i15 < 0 goto label04;

        $r39 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $r40 = virtualinvoke $r39.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        r42 = (com.android.server.wm.WindowState) $r40;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i15);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r42);

        if z0 == 0 goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r42.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label03;

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label03:
        i15 = i15 + -1;

        goto label01;

     label04:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label09;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Remove pending for:");

        $r35 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i13 = virtualinvoke $r35.<java.util.ArrayList: int size()>();

        i16 = $i13 - 1;

     label05:
        if i16 < 0 goto label09;

        $r36 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r37 = virtualinvoke $r36.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        r43 = (com.android.server.wm.WindowState) $r37;

        if r41 == null goto label06;

        $z13 = virtualinvoke r41.<java.util.ArrayList: boolean contains(java.lang.Object)>(r43);

        if $z13 == 0 goto label08;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Remove #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i16);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r43);

        if z0 == 0 goto label07;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r43.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label08;

     label07:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label08:
        i16 = i16 + -1;

        goto label05;

     label09:
        r44 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if r44 == null goto label13;

        $i11 = virtualinvoke r44.<java.util.ArrayList: int size()>();

        if $i11 <= 0 goto label13;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows force removing:");

        $r32 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i12 = virtualinvoke $r32.<java.util.ArrayList: int size()>();

        i17 = $i12 - 1;

     label10:
        if i17 < 0 goto label13;

        $r33 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r34 = virtualinvoke $r33.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        r45 = (com.android.server.wm.WindowState) $r34;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Removing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i17);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r45);

        if z0 == 0 goto label11;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r45.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label12;

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label12:
        i17 = i17 + -1;

        goto label10;

     label13:
        $r46 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i18 = virtualinvoke $r46.<java.util.ArrayList: int size()>();

        if $i18 <= 0 goto label18;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows waiting to destroy their surface:");

        $r29 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i10 = virtualinvoke $r29.<java.util.ArrayList: int size()>();

        i19 = $i10 - 1;

     label14:
        if i19 < 0 goto label18;

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r31 = virtualinvoke $r30.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        r47 = (com.android.server.wm.WindowState) $r31;

        if r41 == null goto label15;

        $z12 = virtualinvoke r41.<java.util.ArrayList: boolean contains(java.lang.Object)>(r47);

        if $z12 == 0 goto label17;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Destroy #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i19);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r47);

        if z0 == 0 goto label16;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r47.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label17;

     label16:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label17:
        i19 = i19 + -1;

        goto label14;

     label18:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label23;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows waiting to resize:");

        $r26 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i9 = virtualinvoke $r26.<java.util.ArrayList: int size()>();

        i20 = $i9 - 1;

     label19:
        if i20 < 0 goto label23;

        $r27 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $r28 = virtualinvoke $r27.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        r48 = (com.android.server.wm.WindowState) $r28;

        if r41 == null goto label20;

        $z11 = virtualinvoke r41.<java.util.ArrayList: boolean contains(java.lang.Object)>(r48);

        if $z11 == 0 goto label22;

     label20:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Resizing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i20);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r48);

        if z0 == 0 goto label21;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r48.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label22;

     label21:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label22:
        i20 = i20 + -1;

        goto label19;

     label23:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        $z2 = virtualinvoke $r6.<java.util.HashMap: boolean isEmpty()>();

        if $z2 != 0 goto label24;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Clients waiting for these windows to be drawn:");

        $r25 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        $r24 = new com.android.server.wm._$$Lambda$WindowManagerService$PR1gW5Tck_nLlfWq9om2tE_fX1o;

        specialinvoke $r24.<com.android.server.wm._$$Lambda$WindowManagerService$PR1gW5Tck_nLlfWq9om2tE_fX1o: void <init>(java.io.PrintWriter)>(r1);

        virtualinvoke $r25.<java.util.HashMap: void forEach(java.util.function.BiConsumer)>($r24);

     label24:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mGlobalConfiguration=");

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: android.content.res.Configuration getConfiguration()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHasPermanentDpad=");

        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z3);

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: void dumpTopFocusedDisplayId(java.io.PrintWriter)>(r1);

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r10 = new com.android.server.wm._$$Lambda$WindowManagerService$r_RKnp9McRAtWJkuC0ltrPERYYE;

        specialinvoke $r10.<com.android.server.wm._$$Lambda$WindowManagerService$r_RKnp9McRAtWJkuC0ltrPERYYE: void <init>(java.io.PrintWriter)>(r1);

        virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>($r10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInTouchMode=");

        $z4 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastDisplayFreezeDuration=");

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration>;

        $l3 = (long) $i2;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l3, r1);

        $r12 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        if $r12 == null goto label25;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" due to ");

        $r23 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r23);

     label25:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastWakeLockHoldingWindow=");

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockHoldingWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastWakeLockObscuringWindow=");

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockObscuringWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r14);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        virtualinvoke $r15.<com.android.server.wm.InputManagerCallback: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r16.<com.android.server.wm.TaskSnapshotController: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        r49 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if r49 == null goto label26;

        virtualinvoke r49.<com.android.server.wm.AccessibilityController: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

     label26:
        if z0 == 0 goto label29;

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r50 = virtualinvoke $r17.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getCurrentInputMethodWindow()>();

        if r50 == null goto label27;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodWindow=");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r50);

     label27:
        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r18.<com.android.server.wm.WindowSurfacePlacer: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemBooted=");

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDisplayEnabled=");

        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z6);

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r19.<com.android.server.wm.RootWindowContainer: void dumpLayoutNeededDisplayIds(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mTransactionSequence=");

        $i4 = r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mDisplayFrozen=");

        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" windows=");

        $i5 = r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" client=");

        $z8 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" apps=");

        $i6 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i6);

        r51 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mRotation=");

        $i7 = virtualinvoke r51.<com.android.server.wm.DisplayContent: int getRotation()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastOrientation=");

        $i8 = virtualinvoke r51.<com.android.server.wm.DisplayContent: int getLastOrientation()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" waitingForConfig=");

        $z9 = r51.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Animation settings: disabled=");

        $z10 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" window=");

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" transition=");

        $f1 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" animator=");

        $f2 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f2);

        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        if $r20 == null goto label28;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mRecentsAnimationController=");

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        virtualinvoke $r22.<com.android.server.wm.RecentsAnimationController: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

     label28:
        staticinvoke <com.android.server.wm.PolicyControl: void dump(java.lang.String,java.io.PrintWriter)>("  ", r1);

     label29:
        return;
    }

    static boolean excludeWindowTypeFromTapOutTask(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 2000 goto label1;

        if i0 == 2012 goto label1;

        if i0 == 2040 goto label1;

        if i0 == 2019 goto label1;

        if i0 == 2020 goto label1;

        return 0;

     label1:
        return 1;
    }

    private com.android.server.wm.WindowState findWindow(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm._$$Lambda$WindowManagerService$_a2dLBOzIKX2MkvxUpQBEFZFW3w r2;
        com.android.server.wm.WindowState $r3, r6;
        java.lang.Throwable $r4;
        com.android.server.wm.RootWindowContainer r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        $r3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        return $r3;

     label1:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = new com.android.server.wm._$$Lambda$WindowManagerService$_a2dLBOzIKX2MkvxUpQBEFZFW3w;

        specialinvoke r2.<com.android.server.wm._$$Lambda$WindowManagerService$_a2dLBOzIKX2MkvxUpQBEFZFW3w: void <init>(int)>(i0);

        r6 = virtualinvoke r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getWindow(java.util.function.Predicate)>(r2);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static float fixScale(float)
    {
        float f0, f1, $f2;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        f1 = 0.0F;

        goto label2;

     label1:
        f1 = f0;

        $b1 = f0 cmpl 20.0F;

        if $b1 <= 0 goto label2;

        f1 = 20.0F;

     label2:
        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        return $f2;
    }

    private com.android.server.wm.DisplayContent getDisplayContentOrCreate(int, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.RootWindowContainer $r1, $r3;
        com.android.server.wm.DisplayContent $r2, $r4;
        android.os.IBinder r5;
        com.android.server.wm.WindowToken r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.os.IBinder;

        if r5 == null goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r5);

        if r6 == null goto label1;

        $r4 = virtualinvoke r6.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayContent getDisplayContent()>();

        return $r4;

     label1:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int)>(i0);

        return $r2;
    }

    private com.android.server.wm.WindowState getFocusedWindow()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        com.android.server.wm.WindowState r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindowLocked()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private com.android.server.wm.WindowState getFocusedWindowLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.WindowState $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        return $r3;
    }

    private int getForcedDisplayDensityForUserLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1, r5;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1, i2, i3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i2 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r1 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "display_density_forced", i2);

        if r1 == null goto label1;

        r5 = r1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        r5 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.density_override", null);

     label2:
        if r5 == null goto label6;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

     label3:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

     label4:
        return i3;

     label5:
        $r4 := @caughtexception;

     label6:
        return 0;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private void getInsetsSourceControls(com.android.server.wm.WindowState, android.view.InsetsSourceControl[])
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.InsetsSourceControl[] r1, r2;
        int i0, $i1, $i2, i3;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.InsetsStateController $r4;
        android.view.InsetsSourceControl $r5, $r6, $r7, r9;
        com.android.server.wm.WindowState r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.view.InsetsSourceControl[];

        $r3 = virtualinvoke r8.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        r2 = virtualinvoke $r4.<com.android.server.wm.InsetsStateController: android.view.InsetsSourceControl[] getControlsForDispatch(com.android.server.wm.InsetsControlTarget)>(r8);

        if r2 == null goto label4;

        $i2 = lengthof r2;

        $i1 = lengthof r1;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $r5 = r2[i3];

        if $r5 == null goto label2;

        $r6 = new android.view.InsetsSourceControl;

        $r7 = r2[i3];

        specialinvoke $r6.<android.view.InsetsSourceControl: void <init>(android.view.InsetsSourceControl)>($r7);

        r9 = $r6;

        goto label3;

     label2:
        r9 = null;

     label3:
        r1[i3] = r9;

        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    static com.android.server.wm.WindowManagerService getInstance()
    {
        com.android.server.wm.WindowManagerService $r0;

        $r0 = <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService sInstance>;

        return $r0;
    }

    static int getPropertyInt(java.lang.String[], int, int, int, android.util.DisplayMetrics)
    {
        int i0, i1, $i2, $i3, $i4, i5, i6;
        android.util.DisplayMetrics r0;
        float $f0, $f1;
        java.lang.Exception $r1;
        java.lang.String[] r2;
        java.lang.String r3;

        r2 := @parameter0: java.lang.String[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0 := @parameter4: android.util.DisplayMetrics;

        $i2 = lengthof r2;

        if i5 >= $i2 goto label4;

        r3 = r2[i5];

        if r3 == null goto label4;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i4 <= 0 goto label4;

     label1:
        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

     label2:
        return i6;

     label3:
        $r1 := @caughtexception;

     label4:
        if i0 != 0 goto label5;

        return i1;

     label5:
        $f0 = (float) i1;

        $f1 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(i0, $f0, r0);

        $i3 = (int) $f1;

        return $i3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean hasStatusBarPermission(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.STATUS_BAR", i0, i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void initPolicy()
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.Handler $r1;
        com.android.server.wm.WindowManagerService$5 $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.wm.WindowManagerService$5;

        specialinvoke $r2.<com.android.server.wm.WindowManagerService$5: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>($r2, 0L);

        return;
    }

    private boolean isSystemSecure()
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "1");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = "0";

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.debuggable", "0");

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    static void lambda$doDump$12(java.io.PrintWriter, com.android.server.wm.WindowState)
    {
        java.io.PrintWriter r0;
        com.android.server.wm.WindowState r1;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wm.WindowState;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>(r1);

        return;
    }

    static void lambda$dumpWindows$11(boolean, boolean, java.util.ArrayList, com.android.server.wm.WindowState)
    {
        boolean z0, z1, $z3;
        java.util.ArrayList r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.ActivityRecord $r2;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.util.ArrayList;

        r1 := @parameter3: com.android.server.wm.WindowState;

        if z0 == 0 goto label1;

        $z3 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z3 == 0 goto label3;

     label1:
        if z1 == 0 goto label2;

        $r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 == null goto label3;

     label2:
        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    static void lambda$dumpWindowsNoHeaderLocked$10(java.io.PrintWriter, com.android.server.wm.DisplayContent)
    {
        java.io.PrintWriter r0;
        int i0;
        com.android.server.wm.WindowState r1, r2, $r3;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.InsetsControlTarget r5;

        r0 := @parameter0: java.io.PrintWriter;

        r4 := @parameter1: com.android.server.wm.DisplayContent;

        i0 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        r1 = r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        r2 = r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        r5 = r4.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget mInputMethodControlTarget>;

        if r1 == null goto label1;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodTarget in display# ");

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>(r1);

     label1:
        if r2 == null goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodInputTarget in display# ");

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>(r2);

     label2:
        if r5 == null goto label3;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  inputMethodControlTarget in display# ");

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(32);

        $r3 = interfaceinvoke r5.<com.android.server.wm.InsetsControlTarget: com.android.server.wm.WindowState getWindow()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

     label3:
        return;
    }

    static void lambda$dumpWindowsNoHeaderLocked$9(java.io.PrintWriter, com.android.server.wm.WindowContainer, java.lang.Runnable)
    {
        java.io.PrintWriter r0;
        com.android.server.wm.WindowContainer r1;
        java.lang.String $r2;
        java.util.ArrayList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        java.lang.Runnable r6;
        com.android.server.wm.WindowState r7;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: com.android.server.wm.WindowContainer;

        r6 := @parameter2: java.lang.Runnable;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  WindowContainer ");

        $r2 = virtualinvoke r1.<com.android.server.wm.WindowContainer: java.lang.String getName()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        $r3 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r4 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r7 = (com.android.server.wm.WindowState) $r5;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("  Waiting #");

        virtualinvoke r0.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r0.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.Object)>(r7);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    static boolean lambda$findWindow$6(int, com.android.server.wm.WindowState)
    {
        int i0, $i1;
        com.android.server.wm.WindowState r0;
        boolean z0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.WindowState;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$main$1(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, com.android.server.policy.WindowManagerPolicy, com.android.server.wm.ActivityTaskManagerService, java.util.function.Supplier, java.util.function.Supplier, java.util.function.Function)
    {
        android.content.Context r0;
        com.android.server.input.InputManagerService r1;
        boolean z0, z1;
        com.android.server.policy.WindowManagerPolicy r2;
        com.android.server.wm.ActivityTaskManagerService r3;
        java.util.function.Supplier r4, r5;
        java.util.function.Function r6;
        com.android.server.wm.WindowManagerService $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: com.android.server.policy.WindowManagerPolicy;

        r3 := @parameter5: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter6: java.util.function.Supplier;

        r5 := @parameter7: java.util.function.Supplier;

        r6 := @parameter8: java.util.function.Function;

        $r7 = new com.android.server.wm.WindowManagerService;

        specialinvoke $r7.<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,com.android.server.policy.WindowManagerPolicy,com.android.server.wm.ActivityTaskManagerService,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Function)>(r0, r1, z0, z1, r2, r3, r4, r5, r6);

        <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService sInstance> = $r7;

        return;
    }

    static void lambda$onOverlayChanged$13(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.DisplayPolicy $r1;

        r0 := @parameter0: com.android.server.wm.DisplayContent;

        $r1 = virtualinvoke r0.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        virtualinvoke $r1.<com.android.server.wm.DisplayPolicy: void onOverlayChangedLw()>();

        virtualinvoke r0.<com.android.server.wm.DisplayContent: void updateDisplayInfo()>();

        return;
    }

    static void lambda$requestAssistScreenshot$4(android.app.IAssistDataReceiver, android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        android.os.RemoteException $r1;
        android.app.IAssistDataReceiver r2;

        r2 := @parameter0: android.app.IAssistDataReceiver;

        r0 := @parameter1: android.graphics.Bitmap;

     label1:
        interfaceinvoke r2.<android.app.IAssistDataReceiver: void onHandleAssistScreenshot(android.graphics.Bitmap)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$setCurrentUser$3(int, com.android.server.wm.DisplayContent)
    {
        int i0;
        com.android.server.wm.DisplayContent r0;
        com.android.server.wm.AppTransition $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.wm.DisplayContent;

        $r1 = r0.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r1.<com.android.server.wm.AppTransition: void setCurrentUser(int)>(i0);

        return;
    }

    static void lambda$syncInputTransactions$15(android.view.SurfaceControl$Transaction, com.android.server.wm.DisplayContent)
    {
        android.view.SurfaceControl$Transaction r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.InputMonitor $r2;

        r0 := @parameter0: android.view.SurfaceControl$Transaction;

        r1 := @parameter1: com.android.server.wm.DisplayContent;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r2.<com.android.server.wm.InputMonitor: void updateInputWindowsImmediately(android.view.SurfaceControl$Transaction)>(r0);

        return;
    }

    static void lambda$tokenCountExceed$2(int[], int, com.android.server.wm.DisplayContent)
    {
        int[] r0;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.DisplayContent r1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.DisplayContent;

        $i1 = r0[0];

        $i2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getWindowTokensWithoutSurfaceCount(int)>(i0);

        $i3 = $i1 + $i2;

        r0[0] = $i3;

        return;
    }

    static void lambda$updateNonSystemOverlayWindowsVisibilityIfNeeded$14(boolean, com.android.server.wm.WindowState)
    {
        boolean z0;
        com.android.server.wm.WindowState r0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setForceHideNonSystemOverlayWindowIfNeeded(boolean)>(z0);

        return;
    }

    static void lambda$viewServerListWindows$5(java.util.ArrayList, com.android.server.wm.WindowState)
    {
        java.util.ArrayList r0;
        com.android.server.wm.WindowState r1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: com.android.server.wm.WindowState;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    static void logSurface(com.android.server.wm.WindowState, java.lang.String, boolean)
    {
        java.lang.String r0, r8;
        boolean z0;
        java.lang.StringBuilder $r2;
        com.android.server.wm.WindowState r7;

        r7 := @parameter0: com.android.server.wm.WindowState;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SURFACE ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label1;

        staticinvoke <com.android.server.wm.WindowManagerService: void logWithStack(java.lang.String,java.lang.String)>("WindowManager", r8);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", r8);

     label2:
        return;
    }

    static void logWithStack(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>(r0, r1, null);

        return;
    }

    public static com.android.server.wm.WindowManagerService main(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, com.android.server.policy.WindowManagerPolicy, com.android.server.wm.ActivityTaskManagerService)
    {
        android.content.Context r0;
        com.android.server.input.InputManagerService r1;
        boolean z0, z1;
        com.android.server.policy.WindowManagerPolicy r2;
        com.android.server.wm.ActivityTaskManagerService r3;
        com.android.server.wm.'-$$Lambda$1Hjf_Nn5x4aIy9rIBTwVrtrzWFA' $r4;
        com.android.server.wm.'-$$Lambda$6P_D-ul93Vzg9xx2hvWUdYrHVXg' $r5;
        com.android.server.wm.'-$$Lambda$9vBfnQOmNnsc9WU80IIatZHQGKc' $r6;
        com.android.server.wm.WindowManagerService $r7;
        java.util.function.Supplier r8, r9;
        java.util.function.Function r10;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: com.android.server.policy.WindowManagerPolicy;

        r3 := @parameter5: com.android.server.wm.ActivityTaskManagerService;

        $r6 = <com.android.server.wm._$$Lambda$9vBfnQOmNnsc9WU80IIatZHQGKc: com.android.server.wm.'-$$Lambda$9vBfnQOmNnsc9WU80IIatZHQGKc' INSTANCE>;

        $r5 = <com.android.server.wm._$$Lambda$6P_D_ul93Vzg9xx2hvWUdYrHVXg: com.android.server.wm.'-$$Lambda$6P_D-ul93Vzg9xx2hvWUdYrHVXg' INSTANCE>;

        $r4 = <com.android.server.wm._$$Lambda$1Hjf_Nn5x4aIy9rIBTwVrtrzWFA: com.android.server.wm.'-$$Lambda$1Hjf_Nn5x4aIy9rIBTwVrtrzWFA' INSTANCE>;

        r8 = (java.util.function.Supplier) $r6;

        r9 = (java.util.function.Supplier) $r5;

        r10 = (java.util.function.Function) $r4;

        $r7 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,com.android.server.policy.WindowManagerPolicy,com.android.server.wm.ActivityTaskManagerService,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Function)>(r0, r1, z0, z1, r2, r3, r8, r9, r10);

        return $r7;
    }

    public static com.android.server.wm.WindowManagerService main(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, com.android.server.policy.WindowManagerPolicy, com.android.server.wm.ActivityTaskManagerService, java.util.function.Supplier, java.util.function.Supplier, java.util.function.Function)
    {
        android.content.Context r0;
        com.android.server.input.InputManagerService r1;
        boolean z0, z1;
        com.android.server.policy.WindowManagerPolicy r2;
        com.android.server.wm.ActivityTaskManagerService r3;
        java.util.function.Supplier r4, r5;
        java.util.function.Function r6;
        android.os.Handler $r7;
        com.android.server.wm._$$Lambda$WindowManagerService$qCWPyJrU0wwX4tP__QpfmersCVc $r8;
        com.android.server.wm.WindowManagerService $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: com.android.server.policy.WindowManagerPolicy;

        r3 := @parameter5: com.android.server.wm.ActivityTaskManagerService;

        r4 := @parameter6: java.util.function.Supplier;

        r5 := @parameter7: java.util.function.Supplier;

        r6 := @parameter8: java.util.function.Function;

        $r7 = staticinvoke <com.android.server.DisplayThread: android.os.Handler getHandler()>();

        $r8 = new com.android.server.wm._$$Lambda$WindowManagerService$qCWPyJrU0wwX4tP__QpfmersCVc;

        specialinvoke $r8.<com.android.server.wm._$$Lambda$WindowManagerService$qCWPyJrU0wwX4tP__QpfmersCVc: void <init>(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,com.android.server.policy.WindowManagerPolicy,com.android.server.wm.ActivityTaskManagerService,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Function)>(r0, r1, z0, z1, r2, r3, r4, r5, r6);

        virtualinvoke $r7.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>($r8, 0L);

        $r9 = <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService sInstance>;

        return $r9;
    }

    private void notifyFocusChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0, $i1, i2;
        java.util.ArrayList $r2, $r3, $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        com.android.server.wm.WindowManagerService$WindowChangeListener $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.WindowManagerService$WindowChangeListener[] r8, r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        r8 = newarray (com.android.server.wm.WindowManagerService$WindowChangeListener)[$i1];

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r8);

        r9 = (com.android.server.wm.WindowManagerService$WindowChangeListener[]) $r5;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        i0 = lengthof r9;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r6 = r9[i2];

        interfaceinvoke $r6.<com.android.server.wm.WindowManagerService$WindowChangeListener: void focusChanged()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void notifyWindowsChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0, $i1, i2;
        java.util.ArrayList $r2, $r3, $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        com.android.server.wm.WindowManagerService$WindowChangeListener $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.WindowManagerService$WindowChangeListener[] r8, r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        r8 = newarray (com.android.server.wm.WindowManagerService$WindowChangeListener)[$i1];

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r8);

        r9 = (com.android.server.wm.WindowManagerService$WindowChangeListener[]) $r5;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        i0 = lengthof r9;

        i2 = 0;

     label5:
        if i2 >= i0 goto label6;

        $r6 = r9[i2];

        interfaceinvoke $r6.<com.android.server.wm.WindowManagerService$WindowChangeListener: void windowsChanged()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void onPointerDownOutsideFocusLocked(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r7;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.android.server.wm.Task $r4;
        com.android.server.wm.EmbeddedWindowController $r5;
        android.os.IBinder r6;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r1 = (com.android.server.wm.WindowState) $r3;

        r7 = r1;

        if r1 != null goto label1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        r7 = virtualinvoke $r5.<com.android.server.wm.EmbeddedWindowController: com.android.server.wm.WindowState getHostWindow(android.os.IBinder)>(r6);

     label1:
        if r7 == null goto label4;

        $z0 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean canReceiveKeys(boolean)>(1);

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        r8 = virtualinvoke r7.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z1 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean isOnTop()>();

        if $z1 != 0 goto label3;

        virtualinvoke r8.<com.android.server.wm.DisplayContent: void positionDisplayAt(int,boolean)>(2147483647, 1);

     label3:
        $r4 = virtualinvoke r7.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void handleTaskFocusChange(com.android.server.wm.Task)>($r4);

        return;

     label4:
        return;
    }

    private void performEnableScreen()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        android.os.Parcel r1;
        com.android.server.wm.InputManagerCallback $r2;
        android.app.IActivityManager $r3;
        com.android.server.policy.WindowManagerPolicy $r4, $r15;
        java.lang.Object[] $r5, $r7, $r9, $r17, $r27;
        com.android.server.wm.ProtoLogGroup $r6, $r8, $r10, $r18, $r28;
        com.android.server.wm.RootWindowContainer $r11, $r12;
        int $i0, i1;
        com.android.server.wm.WindowContainer $r13;
        com.android.server.wm.DisplayContent $r14;
        java.lang.Throwable $r16, $r24;
        java.lang.Boolean $r19, $r20, $r21, $r22, $r23;
        android.os.RemoteException $r25, $r26;
        com.android.server.wm.WindowManagerGlobalLock r29;
        java.lang.RuntimeException r30;
        java.lang.String r31;
        android.os.IBinder r32;
        long $l2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r29 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r29;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z5 == 0 goto label02;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        z1 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        z2 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        z4 = r0.<com.android.server.wm.WindowManagerService: boolean mOnlyCore>;

        r30 = new java.lang.RuntimeException;

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r16 = virtualinvoke r30.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r17 = newarray (java.lang.Object)[6];

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r17[0] = $r19;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r17[1] = $r20;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r17[2] = $r21;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r17[3] = $r22;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r17[4] = $r23;

        $r17[5] = r31;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, -618015844, 1023, null, $r17);

     label02:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z6 == 0 goto label04;

        exitmonitor r29;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label04:
        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z7 != 0 goto label06;

        $z19 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z19 != 0 goto label06;

        exitmonitor r29;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $z8 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z8 != 0 goto label08;

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z18 = interfaceinvoke $r15.<com.android.server.policy.WindowManagerPolicy: boolean canDismissBootAnimation()>();

        if $z18 != 0 goto label08;

        exitmonitor r29;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $z9 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        if $z9 != 0 goto label13;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i0 = virtualinvoke $r11.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i1 = $i0 - 1;

     label09:
        if i1 < 0 goto label13;

     label10:
        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i1);

        $r14 = (com.android.server.wm.DisplayContent) $r13;

        $z17 = virtualinvoke $r14.<com.android.server.wm.DisplayContent: boolean shouldWaitForSystemDecorWindowsOnBoot()>();

        if $z17 == 0 goto label12;

        exitmonitor r29;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        i1 = i1 + -1;

        goto label09;

     label13:
        $z10 = r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped>;

        if $z10 != 0 goto label14;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(32L, "Stop bootanim", 0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("service.bootanim.exit", "1");

        r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped> = 1;

     label14:
        $z11 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        if $z11 != 0 goto label17;

        $z15 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkBootAnimationCompleteLocked()>();

        if $z15 != 0 goto label17;

        $z16 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z16 == 0 goto label15;

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r9 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 374972436, 0, null, $r9);

     label15:
        exitmonitor r29;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label17:
        r32 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

     label18:
        if r32 == null goto label21;

     label19:
        $z13 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z13 == 0 goto label20;

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 620368427, 0, "******* TELLING SURFACE FLINGER WE ARE BOOTED!", $r7);

     label20:
        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        interfaceinvoke r32.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, null, 0);

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

     label21:
        goto label24;

     label22:
        $r26 := @caughtexception;

     label23:
        $z20 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z20 == 0 goto label24;

        $r28 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r27 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void e(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r28, -87703044, 0, "Boot completed: SurfaceFlinger is dead!", $r27);

     label24:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <com.android.server.wm.EventLogTags: void writeWmBootAnimationDone(long)>($l2);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(32L, "Stop bootanim", 0);

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled> = 1;

        $z21 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z21 == 0 goto label25;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r5 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -116086365, 0, null, $r5);

     label25:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        $z12 = r0.<com.android.server.wm.WindowManagerService: boolean mEventDispatchingEnabled>;

        virtualinvoke $r2.<com.android.server.wm.InputManagerCallback: void setEventDispatchingLw(boolean)>($z12);

        exitmonitor r29;

     label26:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label27:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r3.<android.app.IActivityManager: void bootAnimationComplete()>();

     label28:
        goto label30;

     label29:
        $r25 := @caughtexception;

     label30:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void enableScreenAfterBoot()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

     label31:
        $r24 := @caughtexception;

     label32:
        exitmonitor r29;

     label33:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r24;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch java.lang.Throwable from label02 to label03 with label31;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label15 to label16 with label31;
        catch android.os.RemoteException from label17 to label18 with label22;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch android.os.RemoteException from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label31;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label24 to label25 with label31;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch android.os.RemoteException from label27 to label28 with label29;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    private void prepareNoneTransitionForRelaunching(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.DisplayContent r2;
        boolean $z0, $z1, $z2;
        android.util.ArraySet $r3, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 == 0 goto label1;

        $r3 = r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $z1 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z2 == 0 goto label1;

        $r4 = r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(0, 0, 0, 0);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

     label1:
        return;
    }

    private boolean prepareWindowReplacementTransition(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.DisplayContent r2;
        android.util.ArraySet $r3;
        com.android.server.wm.AppTransition $r4;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.WindowState r5;
        android.graphics.Rect r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void clearAllDrawn()>();

        r5 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState getReplacingWindow()>();

        if r5 != null goto label1;

        return 0;

     label1:
        r6 = virtualinvoke r5.<com.android.server.wm.WindowState: android.graphics.Rect getVisibleFrameLw()>();

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(18, 1, 0, 0);

        $r4 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $i0 = r6.<android.graphics.Rect: int left>;

        $i1 = r6.<android.graphics.Rect: int top>;

        $i2 = virtualinvoke r6.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke r6.<android.graphics.Rect: int height()>();

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void overridePendingAppTransitionClipReveal(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        return 1;
    }

    private static boolean queryHdrSupport()
    {
        boolean z0, $z1, $z2;
        android.hardware.configstore.V1_0.ISurfaceFlingerConfigs $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.util.Optional r5;
        android.hardware.configstore.V1_0.OptionalBool r6;

        r5 = staticinvoke <android.sysprop.SurfaceFlingerProperties: java.util.Optional has_HDR_display()>();

        $z1 = virtualinvoke r5.<java.util.Optional: boolean isPresent()>();

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke r5.<java.util.Optional: java.lang.Object get()>();

        $r2 = (java.lang.Boolean) $r1;

        $z2 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $r0 = staticinvoke <android.hardware.configstore.V1_0.ISurfaceFlingerConfigs: android.hardware.configstore.V1_0.ISurfaceFlingerConfigs getService()>();

        r6 = interfaceinvoke $r0.<android.hardware.configstore.V1_0.ISurfaceFlingerConfigs: android.hardware.configstore.V1_0.OptionalBool hasHDRDisplay()>();

     label2:
        if r6 == null goto label5;

     label3:
        z0 = r6.<android.hardware.configstore.V1_0.OptionalBool: boolean value>;

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        return 0;

     label7:
        $r3 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.util.NoSuchElementException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.util.NoSuchElementException from label3 to label4 with label6;
    }

    private static boolean queryWideColorGamutSupport()
    {
        boolean z0, $z1, $z2;
        android.hardware.configstore.V1_0.ISurfaceFlingerConfigs $r0;
        java.lang.Object $r1;
        java.lang.Boolean $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.util.Optional r5;
        android.hardware.configstore.V1_0.OptionalBool r6;

        r5 = staticinvoke <android.sysprop.SurfaceFlingerProperties: java.util.Optional has_wide_color_display()>();

        $z1 = virtualinvoke r5.<java.util.Optional: boolean isPresent()>();

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke r5.<java.util.Optional: java.lang.Object get()>();

        $r2 = (java.lang.Boolean) $r1;

        $z2 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $r0 = staticinvoke <android.hardware.configstore.V1_0.ISurfaceFlingerConfigs: android.hardware.configstore.V1_0.ISurfaceFlingerConfigs getService()>();

        r6 = interfaceinvoke $r0.<android.hardware.configstore.V1_0.ISurfaceFlingerConfigs: android.hardware.configstore.V1_0.OptionalBool hasWideColorDisplay()>();

     label2:
        if r6 == null goto label5;

     label3:
        z0 = r6.<android.hardware.configstore.V1_0.OptionalBool: boolean value>;

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        return 0;

     label7:
        $r4 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.util.NoSuchElementException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.util.NoSuchElementException from label3 to label4 with label6;
    }

    static void resetPriorityAfterLockedSection()
    {
        com.android.server.wm.WindowManagerThreadPriorityBooster $r0;

        $r0 = <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerThreadPriorityBooster sThreadPriorityBooster>;

        virtualinvoke $r0.<com.android.server.wm.WindowManagerThreadPriorityBooster: void reset()>();

        return;
    }

    private void setAnimatorDurationScale(float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        f0 := @parameter0: float;

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = f0;

        staticinvoke <android.animation.ValueAnimator: void setDurationScale(float)>(f0);

        return;
    }

    private void setGlobalShadowSettings()
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.TypedArray r1;
        float f0, f1, f2, f3, f4;
        int[] $r2;
        android.content.Context $r3;
        float[] $r4, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r2 = <com.android.internal.R$styleable: int[] Lighting>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r2, 0, 0);

        f0 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(3, 0.0F);

        f1 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(4, 0.0F);

        f2 = virtualinvoke r1.<android.content.res.TypedArray: float getDimension(int,float)>(2, 0.0F);

        f3 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.0F);

        f4 = virtualinvoke r1.<android.content.res.TypedArray: float getFloat(int,float)>(1, 0.0F);

        $r4 = newarray (float)[4];

        $r4[0] = 0.0F;

        $r4[1] = 0.0F;

        $r4[2] = 0.0F;

        $r4[3] = f3;

        $r5 = newarray (float)[4];

        $r5[0] = 0.0F;

        $r5[1] = 0.0F;

        $r5[2] = 0.0F;

        $r5[3] = f4;

        staticinvoke <android.view.SurfaceControl: void setGlobalShadowSettings(float[],float[],float,float,float)>($r4, $r5, f0, f1, f2);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setShadowRenderer()>();

        return;
    }

    private void setShadowRenderer()
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "render_shadows_in_compositor", 1);

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.wm.WindowManagerService: boolean mRenderShadowsInCompositor> = z0;

        return;
    }

    private void showStrictModeViolation(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.StrictModeFlash $r2, $r4, r11;
        android.view.SurfaceControl$Transaction $r3, $r5, $r8;
        java.util.function.Supplier $r6;
        com.android.server.wm.DisplayContent $r7;
        com.android.server.wm.RootWindowContainer $r9;
        boolean $z0, z1;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label04:
        if z1 == 0 goto label07;

     label05:
        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z0 = virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: boolean canShowStrictModeViolation(int)>(i1);

        if $z0 != 0 goto label07;

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        if $r2 != null goto label08;

        r11 = new com.android.server.wm.StrictModeFlash;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory>;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        specialinvoke r11.<com.android.server.wm.StrictModeFlash: void <init>(java.util.function.Supplier,com.android.server.wm.DisplayContent,android.view.SurfaceControl$Transaction)>($r6, $r7, $r8);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash> = r11;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r4.<com.android.server.wm.StrictModeFlash: void setVisibility(boolean,android.view.SurfaceControl$Transaction)>(z1, $r3);

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean tokenCountExceed()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer r2;
        com.android.server.wm._$$Lambda$WindowManagerService$jFK8_mkmUtg1B3WwF2ZTf1LdZvQ r3;
        boolean $z0, z1;
        java.lang.Throwable $r4;
        byte b3;
        int[] r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.Process: int myPid()>();

        z1 = 0;

        if i0 != i2 goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR_SERVICE", "addWindowTokenWithOptions");

        if $z0 == 0 goto label02;

        b3 = 10;

        goto label03;

     label02:
        b3 = 5;

     label03:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = newarray (int)[1];

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = new com.android.server.wm._$$Lambda$WindowManagerService$jFK8_mkmUtg1B3WwF2ZTf1LdZvQ;

        specialinvoke r3.<com.android.server.wm._$$Lambda$WindowManagerService$jFK8_mkmUtg1B3WwF2ZTf1LdZvQ: void <init>(int[],int)>(r5, i0);

        virtualinvoke r2.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r3);

     label05:
        $i1 = r5[0];

        if $i1 < b3 goto label06;

        z1 = 1;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z1;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private boolean tryStartExitingAnimation(com.android.server.wm.WindowState, com.android.server.wm.WindowStateAnimator, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowStateAnimator r2;
        com.android.server.wm.AccessibilityController r3;
        android.view.WindowManager$LayoutParams $r4;
        int $i0;
        boolean $z0, $z1, $z2, $z4, z5, z6;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.WallpaperController $r6;
        com.android.server.wm.ActivityRecord $r7, $r8;
        byte b1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowStateAnimator;

        z5 := @parameter2: boolean;

        b1 = 2;

        $r4 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label1;

        b1 = 5;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isWinVisibleLw()>();

        if $z0 == 0 goto label2;

        $z4 = virtualinvoke r2.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(b1, 0);

        if $z4 == 0 goto label2;

        z5 = 1;

        r1.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        goto label7;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z1 == 0 goto label3;

        r1.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        goto label7;

     label3:
        $r5 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r6 = $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.WallpaperController: boolean isWallpaperTarget(com.android.server.wm.WindowState)>(r1);

        if $z2 == 0 goto label4;

        r1.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        goto label7;

     label4:
        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r7 == null goto label5;

        $r8 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z6 = $r8.<com.android.server.wm.ActivityRecord: boolean mAppStopped>;

        goto label6;

     label5:
        z6 = 1;

     label6:
        r1.<com.android.server.wm.WindowState: boolean mDestroying> = 1;

        virtualinvoke r1.<com.android.server.wm.WindowState: boolean destroySurface(boolean,boolean)>(0, z6);

     label7:
        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if r3 == null goto label8;

        virtualinvoke r3.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r1, b1);

     label8:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

        virtualinvoke r2.<com.android.server.wm.WindowStateAnimator: void detachChildren()>();

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        return z5;
    }

    private boolean unprivilegedAppCanCreateTokenWith(com.android.server.wm.WindowState, int, int, int, android.os.IBinder, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2;
        android.os.IBinder r1;
        java.lang.String r2, r18, r19, r20, r21, r22, r23, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object[] $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        com.android.server.wm.ProtoLogGroup $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        com.android.server.wm.WindowState r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r17 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.os.IBinder;

        r2 := @parameter5: java.lang.String;

        if i2 < 1 goto label02;

        if i2 > 99 goto label02;

        $z7 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z7 == 0 goto label01;

        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r18;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, -1113134997, 0, "Attempted to add application window with unknown token %s.  Aborting.", $r15);

     label01:
        return 0;

     label02:
        if i2 != 2011 goto label04;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z6 == 0 goto label03;

        r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r19;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, -2039580386, 0, "Attempted to add input method window with unknown token %s.  Aborting.", $r13);

     label03:
        return 0;

     label04:
        if i2 != 2031 goto label06;

        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z5 == 0 goto label05;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r20;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, -914253865, 0, "Attempted to add voice interaction window with unknown token %s.  Aborting.", $r11);

     label05:
        return 0;

     label06:
        if i2 != 2013 goto label08;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z4 == 0 goto label07;

        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r21;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 424524729, 0, "Attempted to add wallpaper window with unknown token %s.  Aborting.", $r9);

     label07:
        return 0;

     label08:
        if i2 != 2035 goto label10;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label09;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 898863925, 0, "Attempted to add QS dialog window with unknown token %s.  Aborting.", $r7);

     label09:
        return 0;

     label10:
        if i2 != 2032 goto label12;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label11;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r23;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1042574499, 0, "Attempted to add Accessibility overlay window with unknown token %s.  Aborting.", $r5);

     label11:
        return 0;

     label12:
        if i1 != 2005 goto label14;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean doesAddToastWindowRequireToken(java.lang.String,int,com.android.server.wm.WindowState)>(r2, i0, r17);

        if $z0 == 0 goto label14;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label13;

        r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r24;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 1331177619, 0, "Attempted to add a toast window with unknown token %s.  Aborting.", $r3);

     label13:
        return 0;

     label14:
        return 1;
    }

    private void updateAppOpsState()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void updateAppOpsState()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void updateHiddenWhileSuspendedState(android.util.ArraySet, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        android.util.ArraySet r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: android.util.ArraySet;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void updateHiddenWhileSuspendedState(android.util.ArraySet,boolean)>(r4, z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void updateInputChannel(android.os.IBinder, int, int, int, android.view.SurfaceControl, java.lang.String, android.view.InputApplicationHandle, int, int, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        android.view.SurfaceControl r1;
        java.lang.String r2;
        android.graphics.Region r3, $r5;
        android.view.InputWindowHandle $r4;
        java.util.function.Supplier $r6;
        java.lang.Object $r7;
        android.os.IBinder r9;
        android.view.InputApplicationHandle r10;
        android.view.SurfaceControl$Transaction r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r9 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.view.SurfaceControl;

        r2 := @parameter5: java.lang.String;

        r10 := @parameter6: android.view.InputApplicationHandle;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        r3 := @parameter9: android.graphics.Region;

        $r4 = new android.view.InputWindowHandle;

        specialinvoke $r4.<android.view.InputWindowHandle: void <init>(android.view.InputApplicationHandle,int)>(r10, i2);

        $r4.<android.view.InputWindowHandle: android.os.IBinder token> = r9;

        $r4.<android.view.InputWindowHandle: java.lang.String name> = r2;

        $i5 = 536870928 & i3;

        $i6 = $i5 | 32;

        $r4.<android.view.InputWindowHandle: int layoutParamsFlags> = $i6;

        $r4.<android.view.InputWindowHandle: int layoutParamsType> = i4;

        $r4.<android.view.InputWindowHandle: long dispatchingTimeoutNanos> = 5000000000L;

        $r4.<android.view.InputWindowHandle: boolean canReceiveKeys> = 0;

        $r4.<android.view.InputWindowHandle: boolean hasFocus> = 0;

        $r4.<android.view.InputWindowHandle: boolean hasWallpaper> = 0;

        $r4.<android.view.InputWindowHandle: boolean paused> = 0;

        $r4.<android.view.InputWindowHandle: int ownerUid> = i0;

        $r4.<android.view.InputWindowHandle: int ownerPid> = i1;

        $r4.<android.view.InputWindowHandle: int inputFeatures> = 0;

        if r3 != null goto label1;

        virtualinvoke $r4.<android.view.InputWindowHandle: void replaceTouchableRegionWithCrop(android.view.SurfaceControl)>(null);

        goto label2;

     label1:
        $r5 = $r4.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        virtualinvoke $r5.<android.graphics.Region: boolean set(android.graphics.Region)>(r3);

        $r4.<android.view.InputWindowHandle: boolean replaceTouchableRegionWithCrop> = 0;

        virtualinvoke $r4.<android.view.InputWindowHandle: void setTouchableRegionCrop(android.view.SurfaceControl)>(r1);

     label2:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r7 = interfaceinvoke $r6.<java.util.function.Supplier: java.lang.Object get()>();

        r12 = (android.view.SurfaceControl$Transaction) $r7;

        virtualinvoke r12.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setInputWindowInfo(android.view.SurfaceControl,android.view.InputWindowHandle)>(r1, $r4);

        virtualinvoke r12.<android.view.SurfaceControl$Transaction: void apply()>();

        virtualinvoke r12.<android.view.SurfaceControl$Transaction: void close()>();

        virtualinvoke r1.<android.view.SurfaceControl: void release()>();

        return;
    }

    private void updateRotationUnchecked(boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, $z3, z4;
        long l0;
        int i1, $i2, i3;
        com.android.server.wm.RootWindowContainer $r1, $r4;
        com.android.server.wm.WindowList $r2, $r5;
        com.android.server.wm.WindowSurfacePlacer $r3;
        java.lang.Object $r6;
        com.android.server.wm.ActivityTaskManagerService $r7;
        com.android.server.wm.TaskChangeNotificationController $r8;
        java.lang.Object[] $r9;
        com.android.server.wm.ProtoLogGroup $r10;
        java.lang.Boolean $r11, $r12;
        java.lang.Throwable $r13, $r14;
        com.android.server.wm.WindowManagerGlobalLock r15;
        com.android.server.wm.DisplayContent r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label01;

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r9 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r9[1] = $r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, -198463978, 15, null, $r9);

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "updateRotation");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label04:
        z4 = 0;

     label05:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        i1 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

     label06:
        i3 = 0;

     label07:
        if i3 >= i1 goto label17;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r5 = $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r16 = (com.android.server.wm.DisplayContent) $r6;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "updateRotation: display");

        z2 = virtualinvoke r16.<com.android.server.wm.DisplayContent: boolean updateRotationUnchecked()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label09:
        if z2 == 0 goto label11;

     label10:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.TaskChangeNotificationController getTaskChangeNotificationController()>();

        $i2 = r16.<com.android.server.wm.DisplayContent: int mDisplayId>;

        virtualinvoke $r8.<com.android.server.wm.TaskChangeNotificationController: void notifyOnActivityRotation(int)>($i2);

     label11:
        if z2 == 0 goto label12;

        if z1 == 0 goto label14;

     label12:
        virtualinvoke r16.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label13:
        z4 = 1;

     label14:
        if z2 != 0 goto label15;

        if z0 == 0 goto label16;

     label15:
        virtualinvoke r16.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label16:
        i3 = i3 + 1;

        goto label07;

     label17:
        if z4 == 0 goto label19;

     label18:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "updateRotation: performSurfacePlacement");

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r3.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label19:
        exitmonitor r15;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label22:
        $r14 := @caughtexception;

     label23:
        exitmonitor r15;

     label24:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r14;

     label25:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    private void waitForAnimationsToComplete()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1, $r7;
        long l0, $l3, $l4, l5;
        com.android.server.wm.WindowAnimator $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        byte $b1;
        com.android.server.wm.RootWindowContainer $r6, $r8;
        java.lang.Throwable $r9, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        l5 = 5000L;

     label03:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r2.<com.android.server.wm.WindowAnimator: boolean mNotifyWhenNoAnimation> = 1;

     label04:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowAnimator: boolean isAnimationScheduled()>();

        if $z0 != 0 goto label05;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z3 = virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: boolean isAnimating(int)>(5);

        if $z3 == 0 goto label12;

     label05:
        $b1 = l5 cmp 0L;

        if $b1 <= 0 goto label12;

     label06:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label07:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r7.<java.lang.Object: void wait(long)>(l5);

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

     label10:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = $l3 - l0;

        l5 = l5 - $l4;

     label11:
        goto label04;

     label12:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r4.<com.android.server.wm.WindowAnimator: boolean mNotifyWhenNoAnimation> = 0;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.WindowAnimator: boolean isAnimationScheduled()>();

        if $z1 != 0 goto label13;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: boolean isAnimating(int)>(5);

        if $z2 == 0 goto label14;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Timed out waiting for animations to complete.");

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.view.SurfaceControl addShellRoot(int, android.view.IWindow, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i3;
        long l2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Throwable $r6, $r7;
        android.view.IWindow r8;
        android.view.SurfaceControl r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r8 := @parameter1: android.view.IWindow;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_APP_TOKENS");

        if $i3 != 0 goto label12;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label06:
        r9 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.SurfaceControl addShellRoot(android.view.IWindow,int)>(r8, i1);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r9;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label11:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r7;

     label12:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_APP_TOKENS");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public int addWindow(com.android.server.wm.Session, android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InputChannel, android.view.InsetsState, android.view.InsetsSourceControl[], int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Rect r1, r2, r137;
        android.view.DisplayCutout$ParcelableWrapper r3;
        android.view.InsetsState r4, r188;
        android.view.InsetsSourceControl[] r5;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33, i34, i36, i39, i42, i44, i47, i48, i49, i50;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7, r171;
        long l1, l35, l37, l38, l40, $l51;
        java.lang.String r9, $r10, $r18, $r25, $r71, r141, r143, r144, r154, r156, r157, r158, r159, r160, r161, r162, r163, r168, r183, r190, r191, r192;
        com.android.server.policy.WindowManagerPolicy $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, z36, z37, z38, z39, z40, z41, z42, z43, z44, z45, $z46, z47, z48, z49, $z50, z51, z52, z53, $z54, z55;
        android.os.IBinder $r12, $r14, $r16, $r24, $r41, $r46, $r49, $r52, $r55, $r58, $r61, $r72, $r73, $r82, $r85, $r88, r148, r150, r165;
        java.util.HashMap $r13, $r15;
        android.content.pm.PackageManagerInternal $r17;
        java.util.ArrayList $r19, $r33, $r34;
        com.android.server.wm.WallpaperController $r20, $r31;
        com.android.server.wm.ActivityRecord $r21, $r30, r152, r153, r164, r182;
        com.android.server.wm.WindowContainer $r22, r155;
        com.android.server.wm.InputMonitor $r23, $r28, $r189;
        java.lang.Object[] $r26, $r32, $r37, $r39, $r43, $r47, $r50, $r53, $r56, $r59, $r62, $r65, $r67, $r69, $r78, $r80, $r86, $r89, $r91, $r93, $r96, r147, r170;
        com.android.server.wm.ProtoLogGroup $r27, $r38, $r40, $r44, $r48, $r51, $r54, $r57, $r60, $r63, $r66, $r68, $r70, $r79, $r81, $r87, $r90, $r92, $r94, $r97, r146, r169, r184;
        com.android.server.wm.WindowState $r29, $r35, $r36, $r64, r142, r166, r181;
        com.android.server.wm.WindowToken $r42, $r74, r149, r151, $r185;
        java.lang.Long $r45, $r95, $r98, $r102;
        android.view.WindowManager$LayoutParams $r75, $r76, $r83, $r84, r136, r173, $r179, $r187;
        android.view.Display $r77;
        java.lang.Throwable $r99, $r100, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, r140;
        java.lang.Exception $r101, $r103;
        com.android.server.wm.Session r134;
        android.view.IWindow r135;
        android.view.InputChannel r138;
        int[] r139;
        android.app.ActivityManagerInternal r145;
        byte b43, b52, b53, b54, b55, b56;
        com.android.server.wm.WindowState$DeathRecipient r167;
        com.android.server.wm.DisplayPolicy r172;
        com.android.server.wm.WindowManagerService$H $r176, $r177;
        android.os.Message $r178;
        com.android.server.wm.WindowStateAnimator r186;
        java.lang.IllegalStateException r193;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r134 := @parameter0: com.android.server.wm.Session;

        r135 := @parameter1: android.view.IWindow;

        i29 := @parameter2: int;

        r136 := @parameter3: android.view.WindowManager$LayoutParams;

        i30 := @parameter4: int;

        i31 := @parameter5: int;

        r137 := @parameter6: android.graphics.Rect;

        r1 := @parameter7: android.graphics.Rect;

        r2 := @parameter8: android.graphics.Rect;

        r3 := @parameter9: android.view.DisplayCutout$ParcelableWrapper;

        r138 := @parameter10: android.view.InputChannel;

        r4 := @parameter11: android.view.InsetsState;

        r5 := @parameter12: android.view.InsetsSourceControl[];

        i32 := @parameter13: int;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r5, null);

        r139 = newarray (int)[1];

        $i2 = r136.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i2 & 1048576;

        if $i3 == 0 goto label001;

        z36 = 1;

        goto label002;

     label001:
        z36 = 0;

     label002:
        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i4 = r136.<android.view.WindowManager$LayoutParams: int type>;

        $r10 = r136.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        i33 = interfaceinvoke $r11.<com.android.server.policy.WindowManagerPolicy: int checkAddPermission(int,boolean,java.lang.String,int[])>($i4, z36, $r10, r139);

        if i33 == 0 goto label003;

        return i33;

     label003:
        i34 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l35 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        i36 = r136.<android.view.WindowManager$LayoutParams: int type>;

        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label004:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z0 == 0 goto label266;

        $r12 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r7 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i31, $r12);

     label005:
        if r7 != null goto label014;

     label006:
        z37 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

     label007:
        if z37 == 0 goto label010;

        l37 = (long) i31;

     label008:
        $r97 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r96 = newarray (java.lang.Object)[1];

        $r98 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l37);

        $r96[0] = $r98;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r97, -861859917, 1, "Attempted to add window to a display that does not exist: %d. Aborting.", $r96);

     label009:
        goto label010;

     label010:
        exitmonitor r6;

     label011:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -9;

     label012:
        $r126 := @caughtexception;

        r140 = $r126;

        goto label269;

     label013:
        $r132 := @caughtexception;

        r140 = $r132;

        goto label269;

     label014:
        $i5 = r134.<com.android.server.wm.Session: int mUid>;

        z38 = virtualinvoke r7.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i5);

     label015:
        if z38 != 0 goto label021;

     label016:
        $z34 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z34 == 0 goto label019;

     label017:
        l38 = (long) i31;

     label018:
        $r94 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r93 = newarray (java.lang.Object)[1];

        $r95 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l38);

        $r93[0] = $r95;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r94, 435494046, 1, "Attempted to add window to a display for which the application does not have access: %d.  Aborting.", $r93);

     label019:
        exitmonitor r6;

     label020:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -9;

     label021:
        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r14 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

        z39 = virtualinvoke $r13.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r14);

     label022:
        if z39 == 0 goto label026;

     label023:
        $z33 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z33 == 0 goto label024;

        r141 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r135);

        $r92 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r91 = newarray (java.lang.Object)[1];

        $r91[0] = r141;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r92, -507657818, 0, "Window %s is already added", $r91);

     label024:
        exitmonitor r6;

     label025:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -5;

     label026:
        if i36 < 1000 goto label037;

        if i36 > 1999 goto label037;

     label027:
        $r82 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r142 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(null, $r82, 0);

     label028:
        if r142 != null goto label032;

     label029:
        $z32 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z32 == 0 goto label030;

        $r88 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r143 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r88);

        $r90 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r89 = newarray (java.lang.Object)[1];

        $r89[0] = r143;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r90, 631792420, 0, "Attempted to add window with token that is not a window: %s.  Aborting.", $r89);

     label030:
        exitmonitor r6;

     label031:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -2;

     label032:
        $r83 = r142.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i27 = $r83.<android.view.WindowManager$LayoutParams: int type>;

        if $i27 < 1000 goto label035;

        $r84 = r142.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i28 = $r84.<android.view.WindowManager$LayoutParams: int type>;

        if $i28 > 1999 goto label035;

        $z31 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z31 == 0 goto label033;

        $r85 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r144 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r85);

        $r87 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r86 = newarray (java.lang.Object)[1];

        $r86[0] = r144;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r87, -2072089308, 0, "Attempted to add window with token that is a sub-window: %s.  Aborting.", $r86);

     label033:
        exitmonitor r6;

     label034:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -2;

     label035:
        goto label038;

     label036:
        $r117 := @caughtexception;

        r140 = $r117;

        goto label269;

     label037:
        r142 = null;

     label038:
        if i36 != 2030 goto label043;

     label039:
        $z29 = virtualinvoke r7.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z29 != 0 goto label043;

        $z30 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z30 == 0 goto label040;

        $r81 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r80 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r81, -784959154, 0, "Attempted to add private presentation window to a non-private display.  Aborting.", $r80);

     label040:
        exitmonitor r6;

     label041:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -8;

     label042:
        $r108 := @caughtexception;

        r140 = $r108;

        goto label269;

     label043:
        if i36 != 2037 goto label047;

     label044:
        $r77 = virtualinvoke r7.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $z27 = virtualinvoke $r77.<android.view.Display: boolean isPublicPresentation()>();

        if $z27 != 0 goto label047;

        $z28 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z28 == 0 goto label045;

        $r79 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r78 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r79, -1670695197, 0, "Attempted to add presentation window to a non-suitable display.  Aborting.", $r78);

     label045:
        exitmonitor r6;

     label046:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -9;

     label047:
        $i6 = r134.<com.android.server.wm.Session: int mUid>;

        i39 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i6);

     label048:
        if i32 == i39 goto label061;

     label049:
        r145 = r0.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal>;

     label050:
        virtualinvoke r145.<android.app.ActivityManagerInternal: int handleIncomingUser(int,int,int,boolean,int,java.lang.String,java.lang.String)>(i0, i34, i32, 0, 0, null, null);

     label051:
        i39 = i32;

        goto label061;

     label052:
        $r133 := @caughtexception;

        r140 = $r133;

        goto label269;

     label053:
        $r101 := @caughtexception;

        goto label056;

     label054:
        $r113 := @caughtexception;

        r140 = $r113;

        goto label269;

     label055:
        $r103 := @caughtexception;

     label056:
        $z35 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z35 == 0 goto label059;

     label057:
        l40 = (long) i32;

     label058:
        r146 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        r147 = newarray (java.lang.Object)[1];

        $r102 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l40);

        r147[0] = $r102;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r146, 315395835, 1, "Trying to add window with invalid user=%d", r147);

     label059:
        exitmonitor r6;

     label060:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -11;

     label061:
        if r142 == null goto label062;

        z40 = 1;

        goto label063;

     label062:
        z40 = 0;

     label063:
        if z40 == 0 goto label066;

     label064:
        $r76 = r142.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r148 = $r76.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

     label065:
        goto label067;

     label066:
        r148 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

     label067:
        r149 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r148);

     label068:
        if z40 == 0 goto label071;

     label069:
        $r75 = r142.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i42 = $r75.<android.view.WindowManager$LayoutParams: int type>;

     label070:
        goto label072;

     label071:
        i42 = i36;

     label072:
        if r149 != null goto label080;

     label073:
        $r72 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r71 = r136.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        $z25 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean unprivilegedAppCanCreateTokenWith(com.android.server.wm.WindowState,int,int,int,android.os.IBinder,java.lang.String)>(r142, i34, i36, i42, $r72, $r71);

        if $z25 != 0 goto label075;

        exitmonitor r6;

     label074:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label075:
        $r73 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        if $r73 == null goto label077;

        r150 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

     label076:
        goto label078;

     label077:
        r150 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

     label078:
        $r74 = new com.android.server.wm.WindowToken;

        $z26 = r134.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

        specialinvoke $r74.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean,com.android.server.wm.DisplayContent,boolean,boolean)>(r0, r150, i36, 0, r7, $z26, z36);

        r151 = $r74;

     label079:
        r152 = null;

        b43 = 1;

        z41 = 0;

        goto label145;

     label080:
        i44 = i42;

        if i42 < 1 goto label097;

        if i42 > 99 goto label097;

     label081:
        r153 = virtualinvoke r149.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

     label082:
        if r153 != null goto label086;

     label083:
        $z24 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z24 == 0 goto label084;

        r154 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r149);

        $r70 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r69 = newarray (java.lang.Object)[1];

        $r69[0] = r154;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r70, 246676969, 0, "Attempted to add window with non-application token .%s Aborting.", $r69);

     label084:
        exitmonitor r6;

     label085:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -3;

     label086:
        r155 = virtualinvoke r153.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowContainer getParent()>();

     label087:
        if r155 != null goto label091;

     label088:
        $z23 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z23 == 0 goto label089;

        r156 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r149);

        $r68 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r67 = newarray (java.lang.Object)[1];

        $r67[0] = r156;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r68, -853226675, 0, "Attempted to add window with exiting application token .%s Aborting.", $r67);

     label089:
        exitmonitor r6;

     label090:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -4;

     label091:
        if i36 != 3 goto label095;

     label092:
        $r64 = r153.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r64 == null goto label095;

        $z22 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z22 == 0 goto label093;

        $r66 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r65 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r66, -167822951, 0, "Attempted to add starting window to token with already existing starting window", $r65);

     label093:
        exitmonitor r6;

     label094:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -5;

     label095:
        r151 = r149;

        b43 = 1;

        r152 = r153;

        z41 = 0;

        goto label145;

     label096:
        $r110 := @caughtexception;

        r140 = $r110;

        goto label269;

     label097:
        if i44 != 2011 goto label103;

     label098:
        $i26 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i26 == 2011 goto label101;

        $z21 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z21 == 0 goto label099;

        $r61 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r157 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r61);

        $r63 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r62 = newarray (java.lang.Object)[1];

        $r62[0] = r157;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r63, -1949279037, 0, "Attempted to add input method window with bad token %s.  Aborting.", $r62);

     label099:
        exitmonitor r6;

     label100:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label101:
        goto label144;

     label102:
        $r124 := @caughtexception;

        r140 = $r124;

        goto label269;

     label103:
        if i44 != 2031 goto label108;

     label104:
        $i25 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i25 == 2031 goto label107;

        $z20 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z20 == 0 goto label105;

        $r58 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r158 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r58);

        $r60 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r59 = newarray (java.lang.Object)[1];

        $r59[0] = r158;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r60, -1389772804, 0, "Attempted to add voice interaction window with bad token %s.  Aborting.", $r59);

     label105:
        exitmonitor r6;

     label106:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label107:
        goto label144;

     label108:
        if i44 != 2013 goto label113;

     label109:
        $i24 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i24 == 2013 goto label112;

        $z19 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z19 == 0 goto label110;

        $r55 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r159 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r55);

        $r57 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r56 = newarray (java.lang.Object)[1];

        $r56[0] = r159;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r57, -1915280162, 0, "Attempted to add wallpaper window with bad token %s.  Aborting.", $r56);

     label110:
        exitmonitor r6;

     label111:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label112:
        goto label144;

     label113:
        if i44 != 2032 goto label118;

     label114:
        $i23 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i23 == 2032 goto label117;

        $z18 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z18 == 0 goto label115;

        $r52 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r160 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r52);

        $r54 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r53 = newarray (java.lang.Object)[1];

        $r53[0] = r160;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r54, -1976930686, 0, "Attempted to add Accessibility overlay window with bad token %s.  Aborting.", $r53);

     label115:
        exitmonitor r6;

     label116:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label117:
        goto label144;

     label118:
        if i36 != 2005 goto label127;

     label119:
        r161 = r136.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

     label120:
        z41 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean doesAddToastWindowRequireToken(java.lang.String,int,com.android.server.wm.WindowState)>(r161, i34, r142);

     label121:
        if z41 == 0 goto label125;

     label122:
        $i22 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i22 == 2005 goto label125;

        $z17 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z17 == 0 goto label123;

        $r49 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r162 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r49);

        $r51 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = r162;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r51, 662572728, 0, "Attempted to add a toast window with bad token %s.  Aborting.", $r50);

     label123:
        exitmonitor r6;

     label124:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label125:
        r151 = r149;

        r152 = null;

        b43 = 1;

        goto label145;

     label126:
        $r107 := @caughtexception;

        r140 = $r107;

        goto label269;

     label127:
        if i36 != 2035 goto label133;

     label128:
        $i21 = r149.<com.android.server.wm.WindowToken: int windowType>;

        if $i21 == 2035 goto label131;

        $z16 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z16 == 0 goto label129;

        $r46 = r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r163 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r46);

        $r48 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r47 = newarray (java.lang.Object)[1];

        $r47[0] = r163;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r48, -1060365734, 0, "Attempted to add QS dialog window with bad token %s.  Aborting.", $r47);

     label129:
        exitmonitor r6;

     label130:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label131:
        goto label144;

     label132:
        $r120 := @caughtexception;

        r140 = $r120;

        goto label269;

     label133:
        r164 = virtualinvoke r149.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

     label134:
        if r164 == null goto label144;

     label135:
        z42 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

     label136:
        if z42 == 0 goto label139;

        l1 = (long) i44;

     label137:
        $r44 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r43 = newarray (java.lang.Object)[1];

        $r45 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r43[0] = $r45;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r44, 372792199, 1, "Non-null activity for system window of rootType=%d", $r43);

     label138:
        goto label139;

     label139:
        r136.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = null;

        r165 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

        z43 = r134.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

     label140:
        $r42 = new com.android.server.wm.WindowToken;

        specialinvoke $r42.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean,com.android.server.wm.DisplayContent,boolean)>(r0, r165, i36, 0, r7, z43);

        r151 = $r42;

     label141:
        r152 = null;

        z41 = 0;

        b43 = 1;

        goto label145;

     label142:
        $r121 := @caughtexception;

        r140 = $r121;

        goto label269;

     label143:
        $r112 := @caughtexception;

        r140 = $r112;

        goto label269;

     label144:
        b43 = 1;

        r151 = r149;

        z41 = 0;

        r152 = null;

     label145:
        r166 = new com.android.server.wm.WindowState;

     label146:
        i47 = r139[0];

     label147:
        i48 = r134.<com.android.server.wm.Session: int mUid>;

        z44 = r134.<com.android.server.wm.Session: boolean mCanAddInternalSystemWindow>;

     label148:
        specialinvoke r166.<com.android.server.wm.WindowState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.Session,android.view.IWindow,com.android.server.wm.WindowToken,com.android.server.wm.WindowState,int,int,android.view.WindowManager$LayoutParams,int,int,int,boolean)>(r0, r134, r135, r151, r142, i47, i29, r136, i30, i48, i39, z44);

        r167 = r166.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeathRecipient mDeathRecipient>;

     label149:
        if r167 != null goto label156;

     label150:
        $z15 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z15 == 0 goto label153;

        $r41 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

        r168 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r41);

        r169 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        r170 = newarray (java.lang.Object)[1];

     label151:
        r170[0] = r168;

     label152:
        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r169, -1770075711, 0, "Adding window client %s that is dead, aborting.", r170);

     label153:
        exitmonitor r6;

     label154:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -4;

     label155:
        $r111 := @caughtexception;

        r140 = $r111;

        goto label269;

     label156:
        r171 = virtualinvoke r166.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label157:
        if r171 != null goto label161;

     label158:
        $z14 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z14 == 0 goto label159;

        $r40 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r39 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r40, 1720696061, 0, "Adding window to Display that has been removed.", $r39);

     label159:
        exitmonitor r6;

     label160:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -9;

     label161:
        r172 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        r173 = r166.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

     label162:
        virtualinvoke r172.<com.android.server.wm.DisplayPolicy: void adjustWindowParamsLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,int,int)>(r166, r173, i0, i34);

        i49 = virtualinvoke r172.<com.android.server.wm.DisplayPolicy: int validateAddingWindowLw(android.view.WindowManager$LayoutParams,int,int)>(r136, i0, i34);

     label163:
        if i49 == 0 goto label167;

     label164:
        exitmonitor r6;

     label165:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i49;

     label166:
        $r122 := @caughtexception;

        r140 = $r122;

        goto label269;

     label167:
        if r138 == null goto label170;

     label168:
        $i19 = r136.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i20 = $i19 & 2;

        if $i20 != 0 goto label170;

     label169:
        goto label171;

     label170:
        b43 = 0;

     label171:
        if b43 == 0 goto label173;

     label172:
        virtualinvoke r166.<com.android.server.wm.WindowState: void openInputChannel(android.view.InputChannel)>(r138);

     label173:
        if i36 != 2005 goto label188;

     label174:
        z45 = virtualinvoke r7.<com.android.server.wm.DisplayContent: boolean canAddToastWindowForUid(int)>(i34);

     label175:
        if z45 != 0 goto label180;

     label176:
        $z13 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z13 == 0 goto label177;

        $r38 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r37 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r38, -883738232, 0, "Adding more than one toast window for UID at a time.", $r37);

     label177:
        exitmonitor r6;

     label178:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -5;

     label179:
        $r119 := @caughtexception;

        r140 = $r119;

        goto label269;

     label180:
        if z41 != 0 goto label184;

     label181:
        $i17 = r136.<android.view.WindowManager$LayoutParams: int flags>;

        $i18 = $i17 & 8;

        if $i18 == 0 goto label184;

        $r35 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r35 == null goto label184;

        $r36 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        i50 = $r36.<com.android.server.wm.WindowState: int mOwnerUid>;

     label182:
        if i50 == i34 goto label183;

        goto label184;

     label183:
        goto label188;

     label184:
        $r176 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r177 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r178 = virtualinvoke $r177.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(52, r166);

        $r179 = r166.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l51 = $r179.<android.view.WindowManager$LayoutParams: long hideTimeoutMilliseconds>;

        virtualinvoke $r176.<com.android.server.wm.WindowManagerService$H: boolean sendMessageDelayed(android.os.Message,long)>($r178, $l51);

     label185:
        goto label188;

     label186:
        $r125 := @caughtexception;

        r140 = $r125;

        goto label269;

     label187:
        $r114 := @caughtexception;

        r140 = $r114;

        goto label269;

     label188:
        b52 = 0;

     label189:
        $z46 = r0.<com.android.server.wm.WindowManagerService: boolean mUseBLAST>;

        if $z46 == 0 goto label191;

     label190:
        b52 = 8;

     label191:
        b53 = b52;

     label192:
        $z1 = <com.android.server.wm.WindowManagerService: boolean sEnableTripleBuffering>;

        if $z1 == 0 goto label194;

     label193:
        b53 = b52 | 4;

     label194:
        r181 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

     label195:
        if r181 != null goto label197;

     label196:
        $r34 = r7.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinAddedSinceNullFocus>;

        virtualinvoke $r34.<java.util.ArrayList: boolean add(java.lang.Object)>(r166);

     label197:
        z47 = staticinvoke <com.android.server.wm.WindowManagerService: boolean excludeWindowTypeFromTapOutTask(int)>(i36);

     label198:
        if z47 == 0 goto label200;

     label199:
        $r33 = r7.<com.android.server.wm.DisplayContent: java.util.ArrayList mTapExcludedWindows>;

        virtualinvoke $r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r166);

     label200:
        virtualinvoke r166.<com.android.server.wm.WindowState: void attach()>();

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r16 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r166);

        virtualinvoke r166.<com.android.server.wm.WindowState: void initAppOpsState()>();

        $r17 = r0.<com.android.server.wm.WindowManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $r18 = virtualinvoke r166.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        $i7 = virtualinvoke r166.<com.android.server.wm.WindowState: int getOwningUid()>();

        $i8 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i7);

        $z2 = virtualinvoke $r17.<android.content.pm.PackageManagerInternal: boolean isPackageSuspended(java.lang.String,int)>($r18, $i8);

        virtualinvoke r166.<com.android.server.wm.WindowState: void setHiddenWhileSuspended(boolean)>($z2);

        $r19 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $z3 = virtualinvoke $r19.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 != 0 goto label202;

     label201:
        z48 = 1;

        goto label203;

     label202:
        z48 = 0;

     label203:
        virtualinvoke r166.<com.android.server.wm.WindowState: void setForceHideNonSystemOverlayWindowIfNeeded(boolean)>(z48);

        r182 = virtualinvoke r151.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

     label204:
        if i36 != 3 goto label210;

        if r182 == null goto label210;

     label205:
        r182.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow> = r166;

        $z12 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z12 == 0 goto label208;

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r152);

        r183 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r166);

        r184 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

     label206:
        $r32 = newarray (java.lang.Object)[2];

        $r32[0] = r9;

        $r32[1] = r183;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r184, 150351993, 0, null, $r32);

     label207:
        goto label210;

     label208:
        goto label210;

     label209:
        $r105 := @caughtexception;

        r140 = $r105;

        goto label258;

     label210:
        $r185 = r166.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        virtualinvoke $r185.<com.android.server.wm.WindowToken: void addWindow(com.android.server.wm.WindowState)>(r166);

        virtualinvoke r172.<com.android.server.wm.DisplayPolicy: void addWindowLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams)>(r166, r136);

     label211:
        if i36 != 2011 goto label214;

     label212:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setInputMethodWindowLocked(com.android.server.wm.WindowState)>(r166);

     label213:
        z49 = 0;

        goto label225;

     label214:
        if i36 != 2012 goto label217;

     label215:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label216:
        z49 = 0;

        goto label225;

     label217:
        if i36 != 2013 goto label220;

     label218:
        $r31 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r31.<com.android.server.wm.WallpaperController: void clearLastWallpaperTimeoutTime()>();

        $i15 = r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i16 = $i15 | 4;

        r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i16;

     label219:
        z49 = 1;

        goto label225;

     label220:
        $i9 = r136.<android.view.WindowManager$LayoutParams: int flags>;

        $i10 = $i9 & 1048576;

        if $i10 == 0 goto label222;

        $i13 = r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i14 = $i13 | 4;

        r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i14;

     label221:
        z49 = 1;

        goto label225;

     label222:
        z49 = 1;

     label223:
        $r20 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $z4 = virtualinvoke $r20.<com.android.server.wm.WallpaperController: boolean isBelowWallpaperTarget(com.android.server.wm.WindowState)>(r166);

        if $z4 == 0 goto label225;

        $i11 = r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i12 = $i11 | 4;

        r7.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i12;

     label224:
        z49 = 1;

     label225:
        r186 = r166.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r186.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 1;

        r186.<com.android.server.wm.WindowStateAnimator: boolean mEnteringAnimation> = 1;

     label226:
        if r152 == null goto label228;

     label227:
        $z10 = virtualinvoke r152.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z10 == 0 goto label228;

        $z11 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean prepareWindowReplacementTransition(com.android.server.wm.ActivityRecord)>(r152);

        if $z11 != 0 goto label228;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void prepareNoneTransitionForRelaunching(com.android.server.wm.ActivityRecord)>(r152);

     label228:
        b54 = b53;

     label229:
        $r187 = r166.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z50 = virtualinvoke r172.<com.android.server.wm.DisplayPolicy: boolean getLayoutHint(android.view.WindowManager$LayoutParams,com.android.server.wm.WindowToken,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper)>($r187, r151, r137, r1, r2, r3);

        if $z50 == 0 goto label231;

     label230:
        b54 = b53 | 4;

     label231:
        r188 = virtualinvoke r166.<com.android.server.wm.WindowState: android.view.InsetsState getInsetsState()>();

        z51 = virtualinvoke r166.<com.android.server.wm.WindowState: boolean isClientLocal()>();

     label232:
        virtualinvoke r4.<android.view.InsetsState: void set(android.view.InsetsState,boolean)>(r188, z51);

     label233:
        b55 = b54;

     label234:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        if $z5 == 0 goto label236;

     label235:
        b55 = b54 | 1;

     label236:
        $r21 = r166.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r21 == null goto label239;

     label237:
        b56 = b55;

     label238:
        $r30 = r166.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z9 = virtualinvoke $r30.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z9 == 0 goto label240;

     label239:
        b56 = b55 | 2;

     label240:
        $r189 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r189.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

     label241:
        z52 = 0;

        z53 = z49;

     label242:
        $z54 = virtualinvoke r166.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z54 == 0 goto label244;

        z55 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(1, 0);

     label243:
        z53 = z49;

        z52 = z55;

        if z55 == 0 goto label244;

        z53 = 0;

        z52 = z55;

     label244:
        if z53 == 0 goto label246;

     label245:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label246:
        $r22 = virtualinvoke r166.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        virtualinvoke $r22.<com.android.server.wm.WindowContainer: void assignChildLayers()>();

     label247:
        if z52 == 0 goto label249;

     label248:
        $r28 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        $r29 = r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke $r28.<com.android.server.wm.InputMonitor: void setInputFocusLw(com.android.server.wm.WindowState,boolean)>($r29, 0);

     label249:
        $r23 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r23.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z6 == 0 goto label251;

        $r24 = interfaceinvoke r135.<android.view.IWindow: android.os.IBinder asBinder()>();

        r190 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        r191 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r166);

        $r25 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r192 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        $r27 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r26 = newarray (java.lang.Object)[3];

        $r26[0] = r190;

        $r26[1] = r191;

        $r26[2] = r192;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r27, -1427184084, 0, null, $r26);

     label250:
        goto label251;

     label251:
        $z7 = virtualinvoke r166.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        if $z7 == 0 goto label252;

        $z8 = virtualinvoke r7.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        if $z8 == 0 goto label252;

        virtualinvoke r7.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label252:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void getInsetsSourceControls(com.android.server.wm.WindowState,android.view.InsetsSourceControl[])>(r166, r5);

        exitmonitor r6;

     label253:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l35);

        return b56;

     label254:
        $r100 := @caughtexception;

        r140 = $r100;

        goto label269;

     label255:
        $r128 := @caughtexception;

        r140 = $r128;

        goto label269;

     label256:
        $r106 := @caughtexception;

        r140 = $r106;

        goto label269;

     label257:
        $r99 := @caughtexception;

        r140 = $r99;

     label258:
        goto label269;

     label259:
        $r130 := @caughtexception;

        r140 = $r130;

        goto label269;

     label260:
        $r104 := @caughtexception;

        r140 = $r104;

        goto label269;

     label261:
        $r131 := @caughtexception;

        r140 = $r131;

        goto label269;

     label262:
        $r109 := @caughtexception;

        r140 = $r109;

        goto label269;

     label263:
        $r129 := @caughtexception;

        r140 = $r129;

        goto label269;

     label264:
        $r127 := @caughtexception;

        r140 = $r127;

        goto label269;

     label265:
        $r123 := @caughtexception;

        r140 = $r123;

        goto label269;

     label266:
        r193 = new java.lang.IllegalStateException;

        specialinvoke r193.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Display has not been initialialized");

        throw r193;

     label267:
        $r118 := @caughtexception;

        r140 = $r118;

        goto label269;

     label268:
        $r115 := @caughtexception;

        r140 = $r115;

     label269:
        exitmonitor r6;

     label270:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r140;

     label271:
        $r116 := @caughtexception;

        r140 = $r116;

        goto label269;

        catch java.lang.Throwable from label004 to label005 with label268;
        catch java.lang.Throwable from label006 to label007 with label013;
        catch java.lang.Throwable from label008 to label009 with label012;
        catch java.lang.Throwable from label010 to label011 with label012;
        catch java.lang.Throwable from label014 to label015 with label265;
        catch java.lang.Throwable from label016 to label017 with label012;
        catch java.lang.Throwable from label018 to label019 with label012;
        catch java.lang.Throwable from label019 to label020 with label012;
        catch java.lang.Throwable from label021 to label022 with label265;
        catch java.lang.Throwable from label023 to label024 with label012;
        catch java.lang.Throwable from label024 to label025 with label012;
        catch java.lang.Throwable from label027 to label028 with label012;
        catch java.lang.Throwable from label029 to label030 with label036;
        catch java.lang.Throwable from label030 to label031 with label036;
        catch java.lang.Throwable from label032 to label033 with label036;
        catch java.lang.Throwable from label033 to label034 with label036;
        catch java.lang.Throwable from label039 to label040 with label042;
        catch java.lang.Throwable from label040 to label041 with label042;
        catch java.lang.Throwable from label044 to label045 with label042;
        catch java.lang.Throwable from label045 to label046 with label042;
        catch java.lang.Throwable from label047 to label048 with label264;
        catch java.lang.Exception from label049 to label050 with label055;
        catch java.lang.Throwable from label049 to label050 with label054;
        catch java.lang.Exception from label050 to label051 with label053;
        catch java.lang.Throwable from label050 to label051 with label052;
        catch java.lang.Throwable from label056 to label057 with label052;
        catch java.lang.Throwable from label058 to label059 with label052;
        catch java.lang.Throwable from label059 to label060 with label052;
        catch java.lang.Throwable from label064 to label065 with label052;
        catch java.lang.Throwable from label066 to label067 with label263;
        catch java.lang.Throwable from label067 to label068 with label263;
        catch java.lang.Throwable from label069 to label070 with label052;
        catch java.lang.Throwable from label073 to label074 with label052;
        catch java.lang.Throwable from label075 to label076 with label052;
        catch java.lang.Throwable from label077 to label078 with label052;
        catch java.lang.Throwable from label078 to label079 with label052;
        catch java.lang.Throwable from label081 to label082 with label096;
        catch java.lang.Throwable from label083 to label084 with label052;
        catch java.lang.Throwable from label084 to label085 with label052;
        catch java.lang.Throwable from label086 to label087 with label096;
        catch java.lang.Throwable from label088 to label089 with label052;
        catch java.lang.Throwable from label089 to label090 with label052;
        catch java.lang.Throwable from label092 to label093 with label102;
        catch java.lang.Throwable from label093 to label094 with label102;
        catch java.lang.Throwable from label098 to label099 with label102;
        catch java.lang.Throwable from label099 to label100 with label102;
        catch java.lang.Throwable from label104 to label105 with label102;
        catch java.lang.Throwable from label105 to label106 with label102;
        catch java.lang.Throwable from label109 to label110 with label102;
        catch java.lang.Throwable from label110 to label111 with label102;
        catch java.lang.Throwable from label114 to label115 with label102;
        catch java.lang.Throwable from label115 to label116 with label102;
        catch java.lang.Throwable from label119 to label120 with label126;
        catch java.lang.Throwable from label120 to label121 with label132;
        catch java.lang.Throwable from label122 to label123 with label132;
        catch java.lang.Throwable from label123 to label124 with label132;
        catch java.lang.Throwable from label128 to label129 with label132;
        catch java.lang.Throwable from label129 to label130 with label132;
        catch java.lang.Throwable from label133 to label134 with label262;
        catch java.lang.Throwable from label135 to label136 with label143;
        catch java.lang.Throwable from label137 to label138 with label132;
        catch java.lang.Throwable from label139 to label140 with label143;
        catch java.lang.Throwable from label140 to label141 with label142;
        catch java.lang.Throwable from label145 to label146 with label261;
        catch java.lang.Throwable from label147 to label148 with label261;
        catch java.lang.Throwable from label148 to label149 with label260;
        catch java.lang.Throwable from label150 to label151 with label155;
        catch java.lang.Throwable from label152 to label153 with label155;
        catch java.lang.Throwable from label153 to label154 with label155;
        catch java.lang.Throwable from label156 to label157 with label260;
        catch java.lang.Throwable from label158 to label159 with label155;
        catch java.lang.Throwable from label159 to label160 with label155;
        catch java.lang.Throwable from label161 to label162 with label260;
        catch java.lang.Throwable from label162 to label163 with label259;
        catch java.lang.Throwable from label164 to label165 with label166;
        catch java.lang.Throwable from label168 to label169 with label166;
        catch java.lang.Throwable from label172 to label173 with label166;
        catch java.lang.Throwable from label174 to label175 with label187;
        catch java.lang.Throwable from label176 to label177 with label179;
        catch java.lang.Throwable from label177 to label178 with label179;
        catch java.lang.Throwable from label181 to label182 with label179;
        catch java.lang.Throwable from label184 to label185 with label186;
        catch java.lang.Throwable from label189 to label190 with label257;
        catch java.lang.Throwable from label192 to label193 with label257;
        catch java.lang.Throwable from label194 to label195 with label257;
        catch java.lang.Throwable from label196 to label197 with label186;
        catch java.lang.Throwable from label197 to label198 with label257;
        catch java.lang.Throwable from label199 to label200 with label186;
        catch java.lang.Throwable from label200 to label201 with label257;
        catch java.lang.Throwable from label203 to label204 with label257;
        catch java.lang.Throwable from label205 to label206 with label209;
        catch java.lang.Throwable from label206 to label207 with label256;
        catch java.lang.Throwable from label210 to label211 with label256;
        catch java.lang.Throwable from label212 to label213 with label256;
        catch java.lang.Throwable from label215 to label216 with label256;
        catch java.lang.Throwable from label218 to label219 with label256;
        catch java.lang.Throwable from label220 to label221 with label256;
        catch java.lang.Throwable from label223 to label224 with label256;
        catch java.lang.Throwable from label225 to label226 with label256;
        catch java.lang.Throwable from label227 to label228 with label256;
        catch java.lang.Throwable from label229 to label230 with label256;
        catch java.lang.Throwable from label231 to label232 with label256;
        catch java.lang.Throwable from label232 to label233 with label255;
        catch java.lang.Throwable from label234 to label235 with label255;
        catch java.lang.Throwable from label236 to label237 with label255;
        catch java.lang.Throwable from label238 to label239 with label255;
        catch java.lang.Throwable from label240 to label241 with label255;
        catch java.lang.Throwable from label242 to label243 with label255;
        catch java.lang.Throwable from label245 to label246 with label255;
        catch java.lang.Throwable from label246 to label247 with label255;
        catch java.lang.Throwable from label248 to label249 with label255;
        catch java.lang.Throwable from label249 to label250 with label255;
        catch java.lang.Throwable from label251 to label252 with label255;
        catch java.lang.Throwable from label252 to label253 with label254;
        catch java.lang.Throwable from label266 to label267 with label267;
        catch java.lang.Throwable from label269 to label270 with label271;
    }

    public void addWindowChangeListener(com.android.server.wm.WindowManagerService$WindowChangeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.WindowManagerService$WindowChangeListener r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: com.android.server.wm.WindowManagerService$WindowChangeListener;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addWindowToken(android.os.IBinder, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        int i0, i1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String,boolean)>(r1, i0, i1, null, null, 0);

        return;
    }

    public int addWindowTokenWithOptions(android.os.IBinder, int, int, android.os.Bundle, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        int i0, i1, $i2;
        android.os.Bundle r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        r3 := @parameter4: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean tokenCountExceed()>();

        if $z0 == 0 goto label1;

        return -12;

     label1:
        $i2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String,boolean)>(r1, i0, i1, r2, r3, 1);

        return $i2;
    }

    public void applyMagnificationSpecLocked(int, android.view.MagnificationSpec)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        android.view.MagnificationSpec r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.MagnificationSpec;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void applyMagnificationSpec(android.view.MagnificationSpec)>(r1);

     label1:
        return;
    }

    void cancelRecentsAnimation(int, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        java.lang.String r1;
        com.android.server.wm.RecentsAnimationController r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.RecentsAnimationController: void cancelAnimation(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        long l0, l1;
        int $i2, $i3, $i4, $i5, $i6;
        android.content.Context $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        com.android.server.wm.ProtoLogGroup $r3;
        java.lang.Long $r4, $r5;
        java.lang.String r6, r7, r8, r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 != $i3 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>(r6);

        if $i4 != 0 goto label2;

        return 1;

     label2:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label3;

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l0 = (long) $i5;

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = (long) $i6;

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r6);

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r2 = newarray (java.lang.Object)[4];

        $r2[0] = r8;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2[2] = $r5;

        $r2[3] = r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r3, 1563755163, 20, "Permission Denial: %s from pid=%d, uid=%d requires %s", $r2);

     label3:
        return 0;
    }

    void checkDrawnWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap $r1, $r3;
        boolean $z0;
        com.android.server.wm._$$Lambda$WindowManagerService$7pZYrwGiwPP5LZRrXp9CYvRIBQI $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWaitingForDrawnCallbacks>;

        $r2 = new com.android.server.wm._$$Lambda$WindowManagerService$7pZYrwGiwPP5LZRrXp9CYvRIBQI;

        specialinvoke $r2.<com.android.server.wm._$$Lambda$WindowManagerService$7pZYrwGiwPP5LZRrXp9CYvRIBQI: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke $r3.<java.util.HashMap: void forEach(java.util.function.BiConsumer)>($r2);

        return;
    }

    void cleanupRecentsAnimation(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.RecentsAnimationController r1, $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.AppTransition $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        if $r2 == null goto label1;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController> = null;

        virtualinvoke r1.<com.android.server.wm.RecentsAnimationController: void cleanupAnimation(int)>(i0);

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void updateBooster()>();

     label1:
        return;
    }

    public void clearForcedDisplayDensityForUser(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3, $i4, $i5, i6, i7;
        long l1;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 != 0 goto label12;

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i7 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i3, $i4, i6, 0, 1, "clearForcedDisplayDensityForUser", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r7 == null goto label05;

     label04:
        $i5 = r7.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setForcedDensity(int,int)>($i5, i7);

     label05:
        exitmonitor r6;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void clearForcedDisplaySize(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3, $i4;
        long l1;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 != 0 goto label12;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r7 == null goto label05;

     label04:
        $i4 = r7.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i3 = r7.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setForcedSize(int,int)>($i4, $i3);

     label05:
        exitmonitor r6;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public boolean clearWindowContentFrameStats(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0, $z1;
        java.lang.SecurityException $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.wm.WindowStateAnimator $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;
        com.android.server.wm.WindowState r8;
        com.android.server.wm.WindowSurfaceController r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.os.IBinder;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FRAME_STATS", "clearWindowContentFrameStats()");

        if $z1 == 0 goto label14;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.wm.WindowState) $r4;

     label02:
        if r8 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        $r5 = r8.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r9 = $r5.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

     label06:
        if r9 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label09:
        z0 = virtualinvoke r9.<com.android.server.wm.WindowSurfaceController: boolean clearWindowContentFrameStats()>();

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label14:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FRAME_STATS permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void closeSurfaceTransaction(java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowTracing $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r3 := @parameter0: java.lang.String;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "closeSurfaceTransaction");

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing>;

        virtualinvoke $r1.<com.android.server.wm.WindowTracing: void logState(java.lang.String)>(r3);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void closeSystemDialogs(java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: void closeSystemDialogs(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.res.Configuration computeNewConfiguration(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.content.res.Configuration r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked(int)>(i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void createInputConsumer(android.os.IBinder, java.lang.String, int, android.view.InputChannel)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        android.view.InputChannel r2;
        com.android.server.wm.WindowManagerGlobalLock r3;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.InputMonitor $r6;
        android.os.UserHandle $r7;
        java.lang.Throwable $r8;
        android.os.IBinder r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r9 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.view.InputChannel;

        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r4 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r4 == null goto label4;

     label3:
        $r6 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r7 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        virtualinvoke $r6.<com.android.server.wm.InputMonitor: void createInputConsumer(android.os.IBinder,java.lang.String,android.view.InputChannel,int,android.os.UserHandle)>(r9, r1, r2, $i1, $r7);

     label4:
        exitmonitor r3;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r3;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void createWatermark()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Watermark $r2, r27;
        java.io.File $r3;
        int $i0;
        android.view.SurfaceControl$Transaction $r4, $r7;
        android.util.DisplayMetrics $r5;
        java.util.function.Supplier $r6;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.io.FileInputStream r15, r17, r19, r21;
        java.io.DataInputStream r16, r18, r20, r22;
        java.lang.String r24;
        java.lang.String[] r25;
        com.android.server.wm.DisplayContent r26;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        if $r2 == null goto label01;

        return;

     label01:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/system/etc/setup.conf");

        r15 = null;

        r16 = null;

        r17 = null;

        r18 = null;

        r19 = null;

        r20 = null;

     label02:
        r21 = new java.io.FileInputStream;

     label03:
        r15 = null;

        r16 = null;

        r17 = null;

        r18 = null;

        r19 = null;

        r20 = null;

     label04:
        specialinvoke r21.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

     label05:
        r15 = r21;

        r16 = null;

        r17 = r21;

        r18 = null;

        r19 = r21;

        r20 = null;

     label06:
        r22 = new java.io.DataInputStream;

     label07:
        r15 = r21;

        r16 = null;

        r17 = r21;

        r18 = null;

        r19 = r21;

        r20 = null;

     label08:
        specialinvoke r22.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r21);

     label09:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label10:
        r24 = virtualinvoke r22.<java.io.DataInputStream: java.lang.String readLine()>();

     label11:
        if r24 == null goto label25;

        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label12:
        r25 = virtualinvoke r24.<java.lang.String: java.lang.String[] split(java.lang.String)>("%");

     label13:
        if r25 == null goto label25;

        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label14:
        $i0 = lengthof r25;

        if $i0 <= 0 goto label25;

     label15:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label16:
        r26 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

     label17:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label18:
        r27 = new com.android.server.wm.Watermark;

     label19:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label20:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory>;

        $r5 = r26.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics mRealDisplayMetrics>;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        specialinvoke r27.<com.android.server.wm.Watermark: void <init>(java.util.function.Supplier,com.android.server.wm.DisplayContent,android.util.DisplayMetrics,java.lang.String[],android.view.SurfaceControl$Transaction)>($r6, r26, $r5, r25, $r4);

     label21:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label22:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark> = r27;

     label23:
        r15 = r21;

        r16 = r22;

        r17 = r21;

        r18 = r22;

        r19 = r21;

        r20 = r22;

     label24:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r7.<android.view.SurfaceControl$Transaction: void apply()>();

     label25:
        virtualinvoke r22.<java.io.DataInputStream: void close()>();

     label26:
        goto label49;

     label27:
        $r13 := @caughtexception;

        goto label26;

     label28:
        $r11 := @caughtexception;

        if r16 != null goto label32;

        if r15 == null goto label35;

     label29:
        virtualinvoke r15.<java.io.FileInputStream: void close()>();

     label30:
        goto label35;

     label31:
        $r12 := @caughtexception;

        goto label35;

     label32:
        virtualinvoke r16.<java.io.DataInputStream: void close()>();

     label33:
        goto label35;

     label34:
        $r10 := @caughtexception;

        goto label33;

     label35:
        throw $r11;

     label36:
        $r14 := @caughtexception;

        if r18 == null goto label39;

     label37:
        virtualinvoke r18.<java.io.DataInputStream: void close()>();

     label38:
        goto label26;

     label39:
        if r17 == null goto label49;

     label40:
        virtualinvoke r17.<java.io.FileInputStream: void close()>();

     label41:
        goto label49;

     label42:
        $r8 := @caughtexception;

        goto label41;

     label43:
        $r9 := @caughtexception;

        if r20 == null goto label46;

     label44:
        virtualinvoke r20.<java.io.DataInputStream: void close()>();

     label45:
        goto label26;

     label46:
        if r19 == null goto label49;

     label47:
        virtualinvoke r19.<java.io.FileInputStream: void close()>();

     label48:
        goto label41;

     label49:
        return;

        catch java.io.FileNotFoundException from label02 to label03 with label43;
        catch java.io.IOException from label02 to label03 with label36;
        catch java.lang.Throwable from label02 to label03 with label28;
        catch java.io.FileNotFoundException from label04 to label05 with label43;
        catch java.io.IOException from label04 to label05 with label36;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.io.FileNotFoundException from label06 to label07 with label43;
        catch java.io.IOException from label06 to label07 with label36;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.io.FileNotFoundException from label08 to label09 with label43;
        catch java.io.IOException from label08 to label09 with label36;
        catch java.lang.Throwable from label08 to label09 with label28;
        catch java.io.FileNotFoundException from label10 to label11 with label43;
        catch java.io.IOException from label10 to label11 with label36;
        catch java.lang.Throwable from label10 to label11 with label28;
        catch java.io.FileNotFoundException from label12 to label13 with label43;
        catch java.io.IOException from label12 to label13 with label36;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.io.FileNotFoundException from label14 to label15 with label43;
        catch java.io.IOException from label14 to label15 with label36;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.io.FileNotFoundException from label16 to label17 with label43;
        catch java.io.IOException from label16 to label17 with label36;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.io.FileNotFoundException from label18 to label19 with label43;
        catch java.io.IOException from label18 to label19 with label36;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.io.FileNotFoundException from label20 to label21 with label43;
        catch java.io.IOException from label20 to label21 with label36;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.io.FileNotFoundException from label22 to label23 with label43;
        catch java.io.IOException from label22 to label23 with label36;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.io.FileNotFoundException from label24 to label25 with label43;
        catch java.io.IOException from label24 to label25 with label36;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label32 to label33 with label34;
        catch java.io.IOException from label37 to label38 with label27;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.io.IOException from label44 to label45 with label27;
        catch java.io.IOException from label47 to label48 with label42;
    }

    public boolean destroyInputConsumer(java.lang.String, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.InputMonitor $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r2 == null goto label5;

     label3:
        $r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        z0 = virtualinvoke $r4.<com.android.server.wm.InputMonitor: boolean destroyInputConsumer(java.lang.String)>(r6);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void destroyPreservedSurfaceLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.ArrayList $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        com.android.server.wm.WindowStateAnimator $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.wm.WindowState) $r4;

        $r6 = $r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r6.<com.android.server.wm.WindowStateAnimator: void destroyPreservedSurfaceLocked()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        return;
    }

    public boolean detectSafeMode()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i9, $i10, $i11, $i12;
        long l5, l6, l7, l8;
        com.android.server.wm.InputManagerCallback $r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7;
        com.android.server.input.InputManagerService $r3, $r4, $r5, $r6, $r7;
        java.lang.Object[] $r8, $r10, $r16;
        com.android.server.wm.ProtoLogGroup $r9, $r11, $r17;
        java.lang.Long $r12, $r13, $r14, $r15, $r18;
        java.lang.Throwable $r19;
        android.content.Context $r20;
        android.content.ContentResolver $r21;
        com.android.server.policy.WindowManagerPolicy $r22;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.InputManagerCallback: boolean waitForInputDevicesReady(long)>(1000L);

        if $z0 != 0 goto label01;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z4 == 0 goto label01;

        $r17 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r16 = newarray (java.lang.Object)[1];

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1000L);

        $r16[0] = $r18;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r17, 1774661765, 1, "Devices still not ready after waiting %d milliseconds before attempting to detect safe mode.", $r16);

     label01:
        $r20 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r20.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i11 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r21, "safe_boot_disallowed", 0);

        if $i11 == 0 goto label02;

        return 0;

     label02:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r3.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 82);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i1 = virtualinvoke $r4.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 47);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i2 = virtualinvoke $r5.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, 513, 23);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i3 = virtualinvoke $r6.<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)>(-1, 65540, 272);

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i4 = virtualinvoke $r7.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 25);

        if i0 > 0 goto label04;

        if i1 > 0 goto label04;

        if i2 > 0 goto label04;

        if i3 > 0 goto label04;

        if i4 <= 0 goto label03;

        goto label04;

     label03:
        z5 = 0;

        goto label05;

     label04:
        z5 = 1;

     label05:
        r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode> = z5;

     label06:
        $i12 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.safemode", 0);

        if $i12 != 0 goto label07;

        $i10 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.sys.safemode", 0);

        if $i10 == 0 goto label08;

     label07:
        r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode> = 1;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.safemode", "");

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

     label10:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        if $z1 == 0 goto label12;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label11;

        l5 = (long) i0;

        l6 = (long) i1;

        l7 = (long) i2;

        l8 = (long) i3;

        $r11 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r10 = newarray (java.lang.Object)[4];

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l6);

        $r10[1] = $r13;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l7);

        $r10[2] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        $r10[3] = $r15;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r11, -1443029505, 85, "SAFE MODE ENABLED (menu=%d s=%d dpad=%d trackball=%d)", $r10);

        goto label11;

     label11:
        $i9 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.sys.safemode", 0);

        if $i9 != 0 goto label13;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ro.sys.safemode", "1");

        goto label13;

     label12:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label13;

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r8 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, 1866772666, 0, "SAFE MODE not enabled", $r8);

     label13:
        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        interfaceinvoke $r22.<com.android.server.policy.WindowManagerPolicy: void setSafeMode(boolean)>($z6);

        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        return $z7;

        catch java.lang.IllegalArgumentException from label06 to label07 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    public void disableKeyguard(android.os.IBinder, java.lang.String, int)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;
        int i0, $i2, $i3, $i4, i5, i6;
        long l1;
        android.app.ActivityManagerInternal $r2;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        com.android.server.wm.KeyguardDisableHandler $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = virtualinvoke $r2.<android.app.ActivityManagerInternal: int handleIncomingUser(int,int,int,boolean,int,java.lang.String,java.lang.String)>($i2, $i3, i5, 0, 2, "disableKeyguard", null);

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i4 != 0 goto label4;

        i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        virtualinvoke $r5.<com.android.server.wm.KeyguardDisableHandler: void disableKeyguard(android.os.IBinder,java.lang.String,int,int)>(r7, r1, i6, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label4:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void disableNonVrUi(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0, $z1, z2, z3;
        android.util.ArraySet $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        com.android.server.wm.Session $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z2 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        if z2 != 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mShowAlertWindowNotifications>;

        if z3 != $z0 goto label06;

        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        r0.<com.android.server.wm.WindowManagerService: boolean mShowAlertWindowNotifications> = z3;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label07:
        if i1 < 0 goto label10;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r6 = (com.android.server.wm.Session) $r5;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mShowAlertWindowNotifications>;

        virtualinvoke $r6.<com.android.server.wm.Session: void setShowingAlertWindowNotificationAllowed(boolean)>($z1);

     label09:
        i1 = i1 + -1;

        goto label07;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.CharSequence r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        boolean $z0;
        java.lang.SecurityException $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        java.lang.Throwable $r5;
        com.android.internal.policy.IKeyguardDismissCallback r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: com.android.internal.policy.IKeyguardDismissCallback;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_KEYGUARD", "dismissKeyguard");

        if $z0 == 0 goto label6;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void dismissKeyguardLw(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>(r6, r1);

        exitmonitor r2;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CONTROL_KEYGUARD permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void dispatchNewAnimatorScaleLocked(com.android.server.wm.Session)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        com.android.server.wm.WindowManagerService$H $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(34, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void displayReady()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RootWindowContainer r1, $r4;
        int $i0;
        com.android.server.wm.WindowAnimator $r2;
        com.android.server.wm.'-$$Lambda$-hxY8aP13MItXHILC9K9vyNQgr4' $r3;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        boolean $z1;
        android.app.IActivityTaskManager $r7;
        android.os.RemoteException $r8;
        java.lang.Throwable $r9;
        com.android.server.wm.WindowManagerGlobalLock r10;
        com.android.server.wm._$$Lambda$WindowManagerService$FxYFJrJ2ADBvPh_rzG_XPZ8_EQ0 r14;
        java.util.function.Consumer r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r10;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mMaxUiWidth>;

        if $i0 <= 0 goto label02;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r14 = new com.android.server.wm._$$Lambda$WindowManagerService$FxYFJrJ2ADBvPh_rzG_XPZ8_EQ0;

        specialinvoke r14.<com.android.server.wm._$$Lambda$WindowManagerService$FxYFJrJ2ADBvPh_rzG_XPZ8_EQ0: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke r1.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r14);

     label02:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean applyForcedPropertiesForDefaultDisplay()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r2.<com.android.server.wm.WindowAnimator: void ready()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady> = 1;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = <com.android.server.wm._$$Lambda$_hxY8aP13MItXHILC9K9vyNQgr4: com.android.server.wm.'-$$Lambda$-hxY8aP13MItXHILC9K9vyNQgr4' INSTANCE>;

        r15 = (java.util.function.Consumer) $r3;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r15);

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r6.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.touchscreen");

        r0.<com.android.server.wm.WindowManagerService: boolean mIsTouchDevice> = $z1;

        exitmonitor r10;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label04:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityTaskManager mActivityTaskManager>;

        interfaceinvoke $r7.<android.app.IActivityTaskManager: boolean updateConfiguration(android.content.res.Configuration)>(null);

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r10;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void dontOverrideDisplayInfo(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        long l1;
        android.hardware.display.DisplayManagerInternal $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        com.android.server.wm.DisplayContent r5;
        java.lang.IllegalArgumentException r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

     label03:
        if r5 == null goto label07;

     label04:
        r5.<com.android.server.wm.DisplayContent: boolean mShouldOverrideDisplayConfiguration> = 0;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)>(i0, null);

        exitmonitor r4;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label07:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trying to configure a non existent display.");

        throw r6;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r4;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label11:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.server.utils.PriorityDump$PriorityDumper $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper>;

        staticinvoke <com.android.server.utils.PriorityDump: void dump(com.android.server.utils.PriorityDump$PriorityDumper,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>($r4, r1, r2, r3);

        return;
    }

    void dumpDebugLocked(android.util.proto.ProtoOutputStream, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.DisplayContent r2, r12;
        com.android.server.policy.WindowManagerPolicy $r3;
        com.android.server.wm.RootWindowContainer $r4, $r5, $r8;
        com.android.server.wm.WindowState $r6, $r10, r11;
        com.android.server.wm.ActivityRecord $r7, $r9;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268034L, i0);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        $r6 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r6 == null goto label1;

        $r10 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke $r10.<com.android.server.wm.WindowState: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268035L);

     label1:
        $r7 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if $r7 == null goto label2;

        $r9 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        virtualinvoke $r9.<com.android.server.wm.ActivityRecord: void writeNameToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1138166333444L);

     label2:
        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r11 = virtualinvoke $r8.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getCurrentInputMethodWindow()>();

        if r11 == null goto label3;

        virtualinvoke r11.<com.android.server.wm.WindowState: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268037L);

     label3:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z0);

        r12 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i1 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getRotation()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464263L, $i1);

        $i2 = virtualinvoke r12.<com.android.server.wm.DisplayContent: int getLastOrientation()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, $i2);

        $i3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464265L, $i3);

        return;
    }

    public void enableScreenAfterBoot()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0, z1, z2, z3, $z4, $z5;
        com.android.server.wm.WindowManagerService$H $r2;
        com.android.server.policy.WindowManagerPolicy $r3;
        java.lang.Throwable $r4, $r11;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Boolean $r7, $r8, $r9, $r10;
        java.lang.RuntimeException r12;
        java.lang.String r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z4 == 0 goto label2;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        z1 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        z2 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        r12 = new java.lang.RuntimeException;

        specialinvoke r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r4 = virtualinvoke r12.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r5 = newarray (java.lang.Object)[5];

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r5[3] = $r10;

        $r5[4] = r13;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1884933373, 255, null, $r5);

     label2:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z5 == 0 goto label4;

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void hideBootMessagesLocked()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(23, 30000L);

        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void systemBooted()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

        return;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void enableScreenIfNeeded()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void enableScreenIfNeededLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z8;
        java.lang.String r1;
        com.android.server.wm.WindowManagerService$H $r2;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Boolean $r7, $r8, $r9, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z4 == 0 goto label1;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        z1 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        z2 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r4 = virtualinvoke $r3.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r5 = newarray (java.lang.Object)[5];

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r5[3] = $r10;

        $r5[4] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -549028919, 255, null, $r5);

     label1:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z5 == 0 goto label2;

        return;

     label2:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z6 != 0 goto label3;

        $z8 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z8 != 0 goto label3;

        return;

     label3:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(16);

        return;
    }

    public void endProlongedAnimations()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        return;
    }

    public void executeAppTransition()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        java.lang.SecurityException $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "executeAppTransition()");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r1;
    }

    public void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IOnKeyguardExitResult r1;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        java.lang.IllegalArgumentException $r4;
        com.android.server.wm.WindowManagerService$9 $r5;
        com.android.server.policy.WindowManagerPolicy $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IOnKeyguardExitResult;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 != 0 goto label2;

        if r1 == null goto label1;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r5 = new com.android.server.wm.WindowManagerService$9;

        specialinvoke $r5.<com.android.server.wm.WindowManagerService$9: void <init>(com.android.server.wm.WindowManagerService,android.view.IOnKeyguardExitResult)>(r0, r1);

        interfaceinvoke $r6.<com.android.server.policy.WindowManagerPolicy: void exitKeyguardSecurely(com.android.server.policy.WindowManagerPolicy$OnKeyguardExitResult)>($r5);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback == null");

        throw $r4;

     label2:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r3;
    }

    void finishDrawingWindow(com.android.server.wm.Session, android.view.IWindow, android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.SurfaceControl$Transaction r1;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        java.lang.String r3, r14, r15;
        boolean $z0, $z1;
        android.view.WindowManager$LayoutParams $r4;
        int $i1, $i2, $i3, $i4;
        com.android.server.wm.WindowSurfacePlacer $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;
        com.android.server.wm.WindowStateAnimator $r8;
        java.lang.Throwable $r9, $r10;
        com.android.server.wm.Session r11;
        android.view.IWindow r12;
        com.android.server.wm.WindowState r13;
        com.android.server.wm.DisplayContent r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: com.android.server.wm.Session;

        r12 := @parameter1: android.view.IWindow;

        r1 := @parameter2: android.view.SurfaceControl$Transaction;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r13 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r11, r12, 0);

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label08;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r13);

     label03:
        if r13 == null goto label06;

     label04:
        $r8 = r13.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r14 = virtualinvoke $r8.<com.android.server.wm.WindowStateAnimator: java.lang.String drawStateToString()>();

     label05:
        goto label07;

     label06:
        r14 = "null";

     label07:
        r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r14);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r3;

        $r6[1] = r15;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, 1112047265, 0, null, $r6);

     label08:
        if r13 == null goto label11;

     label09:
        $z1 = virtualinvoke r13.<com.android.server.wm.WindowState: boolean finishDrawing(android.view.SurfaceControl$Transaction)>(r1);

        if $z1 == 0 goto label11;

        $r4 = r13.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 1048576;

        if $i2 == 0 goto label10;

        r16 = virtualinvoke r13.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i3 = r16.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i4 = $i3 | 4;

        r16.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i4;

     label10:
        virtualinvoke r13.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r5.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label11:
        exitmonitor r2;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label14:
        $r10 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label17:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    public void freezeDisplayRotation(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        long l2;
        boolean $z0;
        java.lang.SecurityException $r1;
        java.lang.IllegalArgumentException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayRotation $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.WindowManagerGlobalLock r7;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "freezeRotation()");

        if $z0 == 0 goto label14;

        if i1 < -1 goto label13;

        if i1 > 3 goto label13;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r7;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r8 != null goto label06;

     label04:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Trying to freeze rotation for a missing display.");

        exitmonitor r7;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label06:
        $r4 = virtualinvoke r8.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayRotation: void freezeRotation(int)>(i1);

        exitmonitor r7;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r7;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

     label13:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Rotation argument must be -1 or a valid rotation constant.");

        throw $r2;

     label14:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ORIENTATION permission");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void freezeRotation(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void freezeDisplayRotation(int,int)>(0, i0);

        return;
    }

    public float getAnimationScale(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return 0.0F;

     label1:
        $f2 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        return $f2;

     label2:
        $f1 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        return $f1;

     label3:
        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        return $f0;
    }

    public float[] getAnimationScales()
    {
        com.android.server.wm.WindowManagerService r0;
        float[] $r1;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = newarray (float)[3];

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        $r1[0] = $f0;

        $f1 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        $r1[1] = $f1;

        $f2 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        $r1[2] = $f2;

        return $r1;
    }

    public int getBaseDisplayDensity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        int $i0, i1, i2;
        boolean $z0;
        java.lang.Throwable $r3;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label2:
        if r4 == null goto label5;

     label3:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r4.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i0);

        if $z0 == 0 goto label5;

        i2 = r4.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i2;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void getBaseDisplaySize(int, android.graphics.Point)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.graphics.Point r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.graphics.Point;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label4;

        $i2 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        r5.<android.graphics.Point: int x> = $i2;

        $i3 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        r5.<android.graphics.Point: int y> = $i3;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int getCameraLensCoverState()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r1.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 9);

        if i0 <= 0 goto label1;

        return 1;

     label1:
        if i0 != 0 goto label2;

        return 0;

     label2:
        return -1;
    }

    public float getCurrentAnimatorScale()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0;
        java.lang.Throwable $r3;
        float f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label3;

     label2:
        f0 = 0.0F;

        goto label4;

     label3:
        f0 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return f0;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.graphics.Region getCurrentImeTouchRegion()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        android.content.Context $r3;
        int $i0, $i1, i2;
        java.lang.SecurityException $r4;
        com.android.server.wm.RootWindowContainer $r5, $r7;
        com.android.server.wm.WindowList $r6, $r8;
        java.lang.Object $r9;
        com.android.server.wm.WindowState $r10, $r11;
        java.lang.Throwable $r12;
        android.graphics.Region r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.RESTRICTED_VR_ACCESS");

        if $i0 != 0 goto label11;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r13 = new android.graphics.Region;

        specialinvoke r13.<android.graphics.Region: void <init>()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r6 = $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i2 = $i1 - 1;

     label02:
        if i2 < 0 goto label06;

     label03:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r8 = $r7.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowList mChildren>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.DisplayContent) $r9;

        $r10 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r10 == null goto label05;

        $r11 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        virtualinvoke $r11.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r13);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r13;

     label05:
        i2 = i2 + -1;

        goto label02;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r13;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

     label11:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("getCurrentImeTouchRegion is restricted to VR services");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

        return $r2;
    }

    public int getDefaultDisplayRotation()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        int i0;
        com.android.server.wm.DisplayContent $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        i0 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: int getRotation()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getDockedStackSide()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        return 0;
    }

    android.graphics.Rect getFoldedArea()
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        com.android.server.policy.WindowManagerPolicy $r1;
        java.lang.Throwable $r2, $r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        android.graphics.Rect r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        r5 = interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: android.graphics.Rect getFoldedArea()>();

        exitmonitor r4;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r5;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    com.android.server.wm.ActivityStack getImeFocusStackLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.Task $r3, $r4;
        com.android.server.wm.ActivityRecord r5;
        com.android.server.wm.ActivityStack r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getTopFocusedDisplayContent()>();

        r5 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.ActivityRecord mFocusedApp>;

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke r5.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        r6 = virtualinvoke $r4.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        goto label2;

     label1:
        r6 = null;

     label2:
        return r6;
    }

    boolean getInTouchMode()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getInitialDisplayDensity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        int $i0, i1, i2;
        boolean $z0;
        java.lang.Throwable $r3;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label2:
        if r4 == null goto label5;

     label3:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r4.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i0);

        if $z0 == 0 goto label5;

        i2 = r4.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i2;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void getInitialDisplaySize(int, android.graphics.Point)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.graphics.Point r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.graphics.Point;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label4;

        $i2 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        r5.<android.graphics.Point: int x> = $i2;

        $i3 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        r5.<android.graphics.Point: int y> = $i3;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.server.wm.InputManagerCallback getInputManagerCallback()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.InputManagerCallback $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        return $r1;
    }

    public com.android.server.policy.WindowManagerPolicy$WindowState getInputMethodWindowLw()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RootWindowContainer $r1;
        com.android.server.wm.WindowState $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getCurrentInputMethodWindow()>();

        return $r2;
    }

    public int getLidState()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r1.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 0);

        if i0 <= 0 goto label1;

        return 0;

     label1:
        if i0 != 0 goto label2;

        return 1;

     label2:
        return -1;
    }

    public int getNavBarPosition(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayPolicy $r3;
        java.lang.String $r7, $r9;
        java.lang.Throwable $r10;
        int i1, i2;
        com.android.server.wm.DisplayContent r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r11 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label2:
        if r11 != null goto label5;

     label3:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getNavBarPosition with invalid displayId=");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" callers=");

        $r7 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return -1;

     label5:
        virtualinvoke r11.<com.android.server.wm.DisplayContent: void performLayout(boolean,boolean)>(0, 0);

        $r3 = virtualinvoke r11.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        i2 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: int getNavBarPosition()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i2;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getPreferredOptionsPanelGravity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Throwable $r3;
        int i0, i1;
        com.android.server.wm.DisplayContent r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r4 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 81;

     label5:
        i1 = virtualinvoke r4.<com.android.server.wm.DisplayContent: int getPreferredOptionsPanelGravity()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i1;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    com.android.server.wm.RecentsAnimationController getRecentsAnimationController()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RecentsAnimationController $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        return $r1;
    }

    public int getRemoveContentMode(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayWindowSettings $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Long $r7;
        java.lang.Throwable $r8;
        int i1, i2;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i1 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "getRemoveContentMode()");

        if $z0 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r9 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label02:
        if r9 != null goto label08;

     label03:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label06;

     label04:
        l0 = (long) i1;

     label05:
        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[0] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -496681057, 1, "Attempted to get remove mode of a display that does not exist: %d", $r5);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        i2 = virtualinvoke $r4.<com.android.server.wm.DisplayWindowSettings: int getRemoveContentModeLocked(com.android.server.wm.DisplayContent)>(r9);

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i2;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void getStableInsets(int, android.graphics.Rect) throws android.os.RemoteException
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        android.graphics.Rect r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: android.graphics.Rect;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void getStableInsetsLocked(int,android.graphics.Rect)>(i0, r3);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void getStableInsetsLocked(int, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3;
        android.graphics.Rect r1;
        com.android.server.wm.DisplayContent r2;
        android.view.DisplayInfo r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.DisplayPolicy $r5;
        android.view.DisplayCutout $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r5 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $i3 = r3.<android.view.DisplayInfo: int rotation>;

        $i2 = r3.<android.view.DisplayInfo: int logicalWidth>;

        $i1 = r3.<android.view.DisplayInfo: int logicalHeight>;

        $r6 = r3.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        virtualinvoke $r5.<com.android.server.wm.DisplayPolicy: void getStableInsetsLw(int,int,int,android.view.DisplayCutout,android.graphics.Rect)>($i3, $i2, $i1, $r6, r1);

     label1:
        return;
    }

    void getStackBounds(int, int, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        android.graphics.Rect r1;
        com.android.server.wm.ActivityStack r2;
        com.android.server.wm.RootWindowContainer $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityStack getStack(int,int)>(i0, i1);

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.ActivityStack: void getBounds(android.graphics.Rect)>(r1);

        return;

     label1:
        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        return;
    }

    public android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int, int, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        boolean z0, z1;
        com.android.server.wm.TaskSnapshotController $r1;
        android.app.ActivityManager$TaskSnapshot $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.TaskSnapshotController: android.app.ActivityManager$TaskSnapshot getSnapshot(int,int,boolean,boolean)>(i0, i1, z1, z0);

        return $r2;
    }

    public float getTransitionAnimationScaleLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        float f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        f0 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

     label2:
        return f0;
    }

    public float getWindowAnimationScaleLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        float f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

     label2:
        return f0;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.wm.WindowStateAnimator $r5;
        android.view.WindowContentFrameStats $r6, r11, r12;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        com.android.server.wm.WindowState r9;
        com.android.server.wm.WindowSurfaceController r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FRAME_STATS", "getWindowContentFrameStats()");

        if $z0 == 0 goto label17;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.wm.WindowState) $r4;

     label02:
        if r9 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label05:
        $r5 = r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r10 = $r5.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

     label06:
        if r10 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label09:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats>;

        if $r6 != null goto label10;

        r11 = new android.view.WindowContentFrameStats;

        specialinvoke r11.<android.view.WindowContentFrameStats: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats> = r11;

     label10:
        r12 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats>;

        $z1 = virtualinvoke r10.<com.android.server.wm.WindowSurfaceController: boolean getWindowContentFrameStats(android.view.WindowContentFrameStats)>(r12);

        if $z1 != 0 goto label12;

        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return null;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r12;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label17:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FRAME_STATS permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void getWindowDisplayFrame(com.android.server.wm.Session, android.view.IWindow, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        android.graphics.Rect r2, $r4;
        com.android.server.wm.WindowManagerGlobalLock r3;
        boolean $z0;
        float $f0;
        java.lang.Throwable $r5;
        com.android.server.wm.Session r6;
        com.android.server.wm.WindowState r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.view.IWindow;

        r2 := @parameter2: android.graphics.Rect;

        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r6, r1, 0);

     label02:
        if r7 != null goto label05;

     label03:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        exitmonitor r3;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r4 = virtualinvoke r7.<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>();

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        $z0 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z0 == 0 goto label06;

        $f0 = r7.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        virtualinvoke r2.<android.graphics.Rect: void scale(float)>($f0);

     label06:
        exitmonitor r3;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.view.IWindowId getWindowId(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.wm.WindowState r6;
        com.android.server.wm.WindowState$WindowId r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.wm.WindowState) $r3;

     label02:
        if r6 == null goto label05;

     label03:
        r7 = r6.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$WindowId mWindowId>;

     label04:
        goto label06;

     label05:
        r7 = null;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return r7;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean getWindowInsets(android.view.WindowManager$LayoutParams, int, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InsetsState)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        android.graphics.Rect r1, $r16, r22;
        android.view.DisplayCutout$ParcelableWrapper r2;
        android.view.InsetsState r3, r7;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r4;
        com.android.server.wm.DisplayContent r5;
        com.android.server.wm.WindowToken r6;
        boolean z0;
        android.os.IBinder $r8, $r13;
        java.lang.String $r12;
        com.android.server.wm.InsetsStateController $r14;
        com.android.server.wm.DisplayPolicy $r15;
        java.lang.Throwable $r17, $r18, $r19, $r20, r25, r26;
        android.view.WindowManager$LayoutParams r21;
        android.view.WindowManager$InvalidDisplayException r23;
        java.lang.StringBuilder r24;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r21 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        r22 := @parameter2: android.graphics.Rect;

        r1 := @parameter3: android.graphics.Rect;

        r2 := @parameter4: android.view.DisplayCutout$ParcelableWrapper;

        r3 := @parameter5: android.view.InsetsState;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r4;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r8 = r21.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r5 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, $r8);

     label03:
        if r5 == null goto label08;

     label04:
        $r13 = r21.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r6 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>($r13);

     label05:
        $r14 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        r7 = virtualinvoke $r14.<com.android.server.wm.InsetsStateController: android.view.InsetsState getInsetsForWindowMetrics(android.view.WindowManager$LayoutParams)>(r21);

     label06:
        virtualinvoke r3.<android.view.InsetsState: void set(android.view.InsetsState)>(r7);

        $r15 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect>;

        z0 = virtualinvoke $r15.<com.android.server.wm.DisplayPolicy: boolean getLayoutHint(android.view.WindowManager$LayoutParams,com.android.server.wm.WindowToken,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper)>(r21, r6, $r16, r22, r1, r2);

        exitmonitor r4;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label08:
        r23 = new android.view.WindowManager$InvalidDisplayException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display#");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not be found!");

        $r12 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>($r12);

        throw r23;

     label09:
        $r19 := @caughtexception;

        r25 = $r19;

     label10:
        exitmonitor r4;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r25;

     label12:
        $r18 := @caughtexception;

        r26 = $r18;

        goto label15;

     label13:
        $r20 := @caughtexception;

        r25 = $r20;

        goto label10;

     label14:
        $r17 := @caughtexception;

        r26 = $r17;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r26;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public java.lang.Object getWindowManagerLock()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        return $r1;
    }

    public int getWindowingMode(int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayWindowSettings $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Long $r7;
        java.lang.Throwable $r8;
        int i1, i2;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i1 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "getWindowingMode()");

        if $z0 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r9 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

     label02:
        if r9 != null goto label08;

     label03:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label06;

     label04:
        l0 = (long) i1;

     label05:
        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5[0] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 51628177, 1, "Attempted to get windowing mode of a display that does not exist: %d", $r5);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        i2 = virtualinvoke $r4.<com.android.server.wm.DisplayWindowSettings: int getWindowingModeLocked(com.android.server.wm.DisplayContent)>(r9);

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i2;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void grantInputChannel(int, int, int, android.view.SurfaceControl, android.view.IWindow, android.os.IBinder, int, int, android.view.InputChannel)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4;
        android.view.InputChannel r1, r16;
        com.android.server.wm.WindowManagerGlobalLock r2;
        java.util.HashMap r3;
        java.lang.Object $r4;
        com.android.server.wm.WindowState $r5;
        com.android.server.wm.EmbeddedWindowController $r6;
        android.os.IBinder $r7, $r8, r14;
        java.lang.Throwable $r9, $r10, $r11, r19;
        android.view.SurfaceControl r12;
        android.view.IWindow r13;
        com.android.server.wm.EmbeddedWindowController$EmbeddedWindow r15;
        android.view.InputApplicationHandle r17;
        java.lang.String r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r12 := @parameter3: android.view.SurfaceControl;

        r13 := @parameter4: android.view.IWindow;

        r14 := @parameter5: android.os.IBinder;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        r1 := @parameter8: android.view.InputChannel;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r15 = new com.android.server.wm.EmbeddedWindowController$EmbeddedWindow;

        r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

     label2:
        $r4 = virtualinvoke r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r14);

        $r5 = (com.android.server.wm.WindowState) $r4;

        specialinvoke r15.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindow,com.android.server.wm.WindowState,int,int,int)>(r0, r13, $r5, i0, i1, i4);

        r16 = virtualinvoke r15.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: android.view.InputChannel openInputChannel()>();

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        $r7 = virtualinvoke r16.<android.view.InputChannel: android.os.IBinder getToken()>();

        virtualinvoke $r6.<com.android.server.wm.EmbeddedWindowController: void add(android.os.IBinder,com.android.server.wm.EmbeddedWindowController$EmbeddedWindow)>($r7, r15);

        r17 = virtualinvoke r15.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: android.view.InputApplicationHandle getApplicationHandle()>();

        r18 = virtualinvoke r15.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: java.lang.String getName()>();

        exitmonitor r2;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r8 = virtualinvoke r16.<android.view.InputChannel: android.os.IBinder getToken()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateInputChannel(android.os.IBinder,int,int,int,android.view.SurfaceControl,java.lang.String,android.view.InputApplicationHandle,int,int,android.graphics.Region)>($r8, i0, i1, i2, r12, r18, r17, i3, i4, null);

        virtualinvoke r16.<android.view.InputChannel: void transferTo(android.view.InputChannel)>(r1);

        virtualinvoke r16.<android.view.InputChannel: void dispose()>();

        return;

     label4:
        $r9 := @caughtexception;

        r19 = $r9;

        goto label6;

     label5:
        $r11 := @caughtexception;

        r19 = $r11;

     label6:
        exitmonitor r2;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r19;

     label8:
        $r10 := @caughtexception;

        r19 = $r10;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    void handleTaskFocusChange(com.android.server.wm.Task)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.TaskDisplayArea r1;
        com.android.server.wm.WindowState r2;
        boolean $z0, $z1;
        android.os.RemoteException $r3;
        com.android.server.wm.Task r4;
        android.app.IActivityTaskManager $r5;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: com.android.server.wm.Task;

        if r4 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r4.<com.android.server.wm.Task: boolean isActivityTypeHome()>();

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r4.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        if r2 == null goto label2;

        if r1 == null goto label2;

        $z1 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isDescendantOf(com.android.server.wm.WindowContainer)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityTaskManager mActivityTaskManager>;

        $i0 = r4.<com.android.server.wm.Task: int mTaskId>;

        interfaceinvoke $r5.<android.app.IActivityTaskManager: void setFocusedTask(int)>($i0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    boolean hasHdrSupport()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mHasHdrSupport>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean hasWideColorGamutSupport()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean hasNavigationBar(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayPolicy $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.DisplayContent r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r5 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r5 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label5:
        $r3 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        z0 = virtualinvoke $r3.<com.android.server.wm.DisplayPolicy: boolean hasNavigationBar()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    boolean hasWideColorGamutSupport()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mHasWideColorGamutSupport>;

        z1 = 1;

        if z0 == 0 goto label1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.sf.native_mode", 0);

        if $i0 == 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void hideBootMessagesLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, $z4, $z5;
        java.lang.String r1;
        com.android.server.policy.WindowManagerPolicy $r2;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Boolean $r7, $r8, $r9, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z4 == 0 goto label1;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        z1 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        z2 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r4 = virtualinvoke $r3.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r5 = newarray (java.lang.Object)[5];

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r5[3] = $r10;

        $r5[4] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1350198040, 255, null, $r5);

     label1:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z5 == 0 goto label2;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 0;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void hideBootMessages()>();

     label2:
        return;
    }

    public void hideTransientBars(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.DisplayContent r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR", "hideTransientBars()");

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r8 == null goto label05;

     label03:
        virtualinvoke r8.<com.android.server.wm.DisplayContent: void hideTransientBars()>();

     label04:
        goto label06;

     label05:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hideTransientBars with invalid displayId=");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void inSurfaceTransaction(java.lang.Runnable)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.Throwable $r1;
        java.lang.Runnable r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r2 := @parameter0: java.lang.Runnable;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label1:
        interfaceinvoke r2.<java.lang.Runnable: void run()>();

     label2:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void initializeRecentsAnimation(int, android.view.IRecentsAnimationRunner, com.android.server.wm.RecentsAnimationController$RecentsAnimationCallbacks, int, android.util.SparseBooleanArray, com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        android.view.IRecentsAnimationRunner r1;
        com.android.server.wm.RecentsAnimationController$RecentsAnimationCallbacks r2;
        android.util.SparseBooleanArray r3;
        com.android.server.wm.ActivityRecord r4;
        com.android.server.wm.RecentsAnimationController $r5, $r9;
        com.android.server.wm.RootWindowContainer $r6;
        com.android.server.wm.DisplayContent $r7;
        com.android.server.wm.AppTransition $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.IRecentsAnimationRunner;

        r2 := @parameter2: com.android.server.wm.RecentsAnimationController$RecentsAnimationCallbacks;

        i1 := @parameter3: int;

        r3 := @parameter4: android.util.SparseBooleanArray;

        r4 := @parameter5: com.android.server.wm.ActivityRecord;

        $r5 = new com.android.server.wm.RecentsAnimationController;

        specialinvoke $r5.<com.android.server.wm.RecentsAnimationController: void <init>(com.android.server.wm.WindowManagerService,android.view.IRecentsAnimationRunner,com.android.server.wm.RecentsAnimationController$RecentsAnimationCallbacks,int)>(r0, r1, r2, i1);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController> = $r5;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i1);

        $r8 = $r7.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r8.<com.android.server.wm.AppTransition: void updateBooster()>();

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController>;

        virtualinvoke $r9.<com.android.server.wm.RecentsAnimationController: void initialize(int,android.util.SparseBooleanArray,com.android.server.wm.ActivityRecord)>(i0, r3, r4);

        return;
    }

    public boolean injectInputAfterTransactionsApplied(android.view.InputEvent, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.InputEvent r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, z2, z3, z4;
        android.view.KeyEvent r2;
        android.view.MotionEvent r3;
        java.lang.Object $r4;
        android.hardware.input.InputManagerInternal $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        z0 = r1 instanceof android.view.KeyEvent;

        z1 = 0;

        if z0 == 0 goto label05;

        r2 = (android.view.KeyEvent) r1;

        $i3 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i3 != 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $i4 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i4 != 1 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        goto label09;

     label05:
        r3 = (android.view.MotionEvent) r1;

        $i1 = virtualinvoke r3.<android.view.MotionEvent: int getAction()>();

        if $i1 != 0 goto label06;

        z2 = 1;

        goto label07;

     label06:
        z2 = 0;

     label07:
        $i2 = virtualinvoke r3.<android.view.MotionEvent: int getAction()>();

        if $i2 != 1 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        $i5 = virtualinvoke r1.<android.view.InputEvent: int getSource()>();

        if $i5 != 8194 goto label10;

        z1 = 1;

     label10:
        if z2 != 0 goto label11;

        if z1 == 0 goto label12;

     label11:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void syncInputTransactions()>();

     label12:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/input/InputManagerInternal;");

        $r5 = (android.hardware.input.InputManagerInternal) $r4;

        z4 = virtualinvoke $r5.<android.hardware.input.InputManagerInternal: boolean injectInputEvent(android.view.InputEvent,int)>(r1, i0);

        if z3 == 0 goto label13;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void syncInputTransactions()>();

     label13:
        return z4;
    }

    void intersectDisplayInsetBounds(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Rect r1, r2, r3, $r4, $r5, $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect3>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect3>;

        virtualinvoke $r5.<android.graphics.Rect: void inset(android.graphics.Rect)>(r2);

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpRect3>;

        virtualinvoke r3.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r6);

        return;
    }

    boolean isCurrentProfile(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        int[] r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        if i0 != $i1 goto label1;

        return 1;

     label1:
        i4 = 0;

     label2:
        r1 = r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds>;

        $i2 = lengthof r1;

        if i4 >= $i2 goto label4;

        $i3 = r1[i4];

        if $i3 != i0 goto label3;

        return 1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean isDisplayRotationFrozen(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayRotation $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.DisplayContent r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r5 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r5 != null goto label5;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Trying to thaw rotation for a missing display.");

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label5:
        $r3 = virtualinvoke r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        z0 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: boolean isRotationFrozen()>();

        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isKeyguardLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.policy.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardLocked()>();

        return $z0;
    }

    public boolean isKeyguardSecure(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2;
        long l1;
        boolean z0, $z1;
        com.android.server.policy.WindowManagerPolicy $r2;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i2 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", "isKeyguardSecure");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERACT_ACROSS_USERS permission");

        throw $r3;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        z0 = interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardSecure(int)>(i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean isKeyguardShowingAndNotOccluded()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.policy.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardShowingAndNotOccluded()>();

        return $z0;
    }

    public boolean isLayerTracing()
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        android.os.IBinder r1;
        boolean z0;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        java.lang.Throwable $r4, $r5;
        android.os.RemoteException $r6;
        android.os.Parcel r7, r8, r9, r10, r11, r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "isLayerTracing");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r7 = null;

        r8 = null;

        r9 = null;

        r10 = null;

     label01:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

     label02:
        if r1 == null goto label17;

        r7 = null;

        r8 = null;

        r9 = null;

        r10 = null;

     label03:
        r11 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label04:
        r7 = null;

        r8 = r11;

        r9 = null;

        r10 = r11;

     label05:
        r12 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label06:
        r7 = r12;

        r8 = r11;

        r9 = r12;

        r10 = r11;

     label07:
        virtualinvoke r12.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

     label08:
        r7 = r12;

        r8 = r11;

        r9 = r12;

        r10 = r11;

     label09:
        interfaceinvoke r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1026, r12, r11, 0);

     label10:
        r7 = r12;

        r8 = r11;

        r9 = r12;

        r10 = r11;

     label11:
        z0 = virtualinvoke r11.<android.os.Parcel: boolean readBoolean()>();

     label12:
        if r12 == null goto label14;

     label13:
        virtualinvoke r12.<android.os.Parcel: void recycle()>();

     label14:
        if r11 == null goto label16;

     label15:
        virtualinvoke r11.<android.os.Parcel: void recycle()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label17:
        goto label18;

     label18:
        goto label27;

     label19:
        virtualinvoke r10.<android.os.Parcel: void recycle()>();

     label20:
        goto label27;

     label21:
        $r4 := @caughtexception;

        goto label28;

     label22:
        $r6 := @caughtexception;

        r7 = r9;

        r8 = r10;

     label23:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Failed to get layer tracing");

     label24:
        if r9 == null goto label26;

     label25:
        virtualinvoke r9.<android.os.Parcel: void recycle()>();

     label26:
        if r10 == null goto label27;

        goto label19;

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label28:
        if r7 == null goto label32;

     label29:
        virtualinvoke r7.<android.os.Parcel: void recycle()>();

     label30:
        goto label32;

     label31:
        $r5 := @caughtexception;

        goto label35;

     label32:
        if r8 == null goto label34;

     label33:
        virtualinvoke r8.<android.os.Parcel: void recycle()>();

     label34:
        throw $r4;

     label35:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch android.os.RemoteException from label01 to label02 with label22;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch android.os.RemoteException from label03 to label04 with label22;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch android.os.RemoteException from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch android.os.RemoteException from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch android.os.RemoteException from label09 to label10 with label22;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch android.os.RemoteException from label11 to label12 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label15 to label16 with label31;
        catch java.lang.Throwable from label18 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label23 to label24 with label21;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label33 to label34 with label31;
        catch java.lang.Throwable from label34 to label35 with label31;
    }

    public boolean isRotationFrozen()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean isDisplayRotationFrozen(int)>(0);

        return $z0;
    }

    public boolean isSafeModeEnabled()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        return $z0;
    }

    boolean isValidPictureInPictureAspectRatio(com.android.server.wm.DisplayContent, float)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        float f0;
        com.android.server.wm.PinnedStackController $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        $z0 = virtualinvoke $r2.<com.android.server.wm.PinnedStackController: boolean isValidPictureInPictureAspectRatio(float)>(f0);

        return $z0;
    }

    public boolean isViewServerRunning()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ViewServer r1;
        boolean $z1, $z2, z3, z4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if z3 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "isViewServerRunning");

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        z4 = 0;

        if r1 == null goto label3;

        z4 = 0;

        $z2 = virtualinvoke r1.<com.android.server.wm.ViewServer: boolean isRunning()>();

        if $z2 == 0 goto label3;

        z4 = 1;

     label3:
        return z4;
    }

    public boolean isWindowToken(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.ActivityRecord $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.wm.WindowToken r6;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r5);

     label02:
        z0 = 0;

        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        $r3 = virtualinvoke r6.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        if $r3 != null goto label07;

     label06:
        z0 = 1;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean isWindowTraceEnabled()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowTracing $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowTracing: boolean isEnabled()>();

        return $z0;
    }

    public void lambda$checkDrawnWindowsLocked$8$WindowManagerService(com.android.server.wm.WindowContainer, java.lang.Runnable)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowContainer r1;
        boolean z0, z1, z2, $z3, $z4, $z6, $z7, $z9, $z10, $z11, $z12, $z14;
        long l0;
        java.util.ArrayList $r2, $r3, $r8, $r10, $r13;
        int $i1, $i2, i3;
        com.android.server.wm.WindowManagerService$H $r4, r28;
        android.os.Message $r5;
        java.lang.Object[] $r6, $r11, $r14, $r17;
        com.android.server.wm.ProtoLogGroup $r7, $r12, $r15, $r18;
        java.lang.Object $r9;
        com.android.server.wm.WindowStateAnimator $r16;
        java.lang.Boolean $r19, $r20, $r21;
        java.lang.Long $r22;
        java.lang.Runnable r23;
        com.android.server.wm.WindowState r24;
        java.lang.String r25, r26, r27;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowContainer;

        r23 := @parameter1: java.lang.Runnable;

        $r2 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = $i1 - 1;

     label01:
        if i3 < 0 goto label08;

        $r8 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r24 = (com.android.server.wm.WindowState) $r9;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z6 == 0 goto label02;

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r24);

        z0 = r24.<com.android.server.wm.WindowState: boolean mRemoved>;

        z1 = virtualinvoke r24.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        z2 = r24.<com.android.server.wm.WindowState: boolean mHasSurface>;

        $r16 = r24.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i2 = $r16.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        l0 = (long) $i2;

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r17 = newarray (java.lang.Object)[5];

        $r17[0] = r25;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r17[1] = $r19;

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r17[2] = $r20;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r17[3] = $r21;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r17[4] = $r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, 892244061, 508, null, $r17);

     label02:
        $z7 = r24.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z7 != 0 goto label05;

        $z9 = r24.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z9 == 0 goto label05;

        $z10 = virtualinvoke r24.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z10 != 0 goto label03;

        goto label05;

     label03:
        $z11 = virtualinvoke r24.<com.android.server.wm.WindowState: boolean hasDrawnLw()>();

        if $z11 == 0 goto label07;

        $z12 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z12 == 0 goto label04;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r24);

        $r15 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r26;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r15, 1401700824, 0, null, $r14);

     label04:
        $r13 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>(r24);

        goto label07;

     label05:
        $z14 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z14 == 0 goto label06;

        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r24);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r27;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 463993897, 0, null, $r11);

     label06:
        $r10 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r10.<java.util.ArrayList: boolean remove(java.lang.Object)>(r24);

     label07:
        i3 = i3 + -1;

        goto label01;

     label08:
        $r3 = r1.<com.android.server.wm.WindowContainer: java.util.ArrayList mWaitingForDrawn>;

        $z3 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label10;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

        if $z4 == 0 goto label09;

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

        $r6 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, 665256544, 0, null, $r6);

     label09:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(24, r1);

        r28 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r5 = virtualinvoke r28.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(33, r1);

        virtualinvoke r28.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r5);

     label10:
        return;
    }

    public void lambda$displayReady$7$WindowManagerService(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mMaxUiWidth>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setMaxUiWidth(int)>($i0);

        return;
    }

    public void lambda$new$0$WindowManagerService()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController> = null;

        return;
    }

    public void lockDeviceNow()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>(null);

        return;
    }

    public void lockNow(android.os.Bundle)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.Bundle r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void lockNow(android.os.Bundle)>(r1);

        return;
    }

    android.view.SurfaceControl$Builder makeSurfaceBuilder(android.view.SurfaceSession)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.SurfaceSession r1;
        java.util.function.Function $r2;
        java.lang.Object $r3;
        android.view.SurfaceControl$Builder $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.SurfaceSession;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Function mSurfaceControlFactory>;

        $r3 = interfaceinvoke $r2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r4 = (android.view.SurfaceControl$Builder) $r3;

        return $r4;
    }

    void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        java.lang.String r2;
        com.android.server.wm.WindowToken $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.WindowManagerService$H $r5;
        com.android.server.wm.DisplayContent $r6;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowToken: boolean okToDisplay()>();

        if $z0 != 0 goto label2;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i0 == 2 goto label2;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z1 == 0 goto label1;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -1632122349, 0, null, $r7);

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(1);

        r1.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 0;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i1 != 0 goto label2;

        r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen> = 1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: void sendNewMessageDelayed(int,java.lang.Object,long)>(11, $r6, 2000L);

     label2:
        return;
    }

    public boolean mirrorDisplay(int, android.view.SurfaceControl)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        android.view.SurfaceControl $r4, r10, r13;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        com.android.server.wm.DisplayContent r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r10 := @parameter1: android.view.SurfaceControl;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "mirrorDisplay()");

        if $z0 == 0 goto label10;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r11 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r11 != null goto label05;

     label03:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid displayId ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for mirrorDisplay");

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r8);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label05:
        r13 = virtualinvoke r11.<com.android.server.wm.DisplayContent: android.view.SurfaceControl getWindowingLayer()>();

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r4 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl mirrorSurface(android.view.SurfaceControl)>(r13);

        virtualinvoke r10.<android.view.SurfaceControl: void copyFrom(android.view.SurfaceControl,java.lang.String)>($r4, "WMS.mirrorDisplay");

        return 1;

     label07:
        $r9 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

     label10:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires READ_FRAME_BUFFER permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void modifyDisplayWindowInsets(int, android.view.InsetsState)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        com.android.server.wm.RootWindowContainer $r5;
        com.android.server.wm.DisplayContent$RemoteInsetsControlTarget $r6, $r8;
        com.android.server.wm.InsetsStateController $r7;
        java.lang.Throwable $r9, $r10;
        android.view.InsetsState r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: android.view.InsetsState;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_APP_TOKENS");

        if $i2 != 0 goto label15;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r2 == null goto label09;

     label04:
        $r6 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        if $r6 != null goto label06;

     label05:
        goto label09;

     label06:
        $r7 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

        $r8 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayContent$RemoteInsetsControlTarget mRemoteInsetsControlTarget>;

        virtualinvoke $r7.<com.android.server.wm.InsetsStateController: void onInsetsModified(com.android.server.wm.InsetsControlTarget,android.view.InsetsState)>($r8, r11);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label14:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r9;

     label15:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_APP_TOKENS");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void monitor()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void moveDisplayToTop(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2, $r3;
        com.android.server.wm.WindowContainer $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.DisplayContent r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r6 == null goto label4;

     label3:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getTopChild()>();

        if $r4 == r6 goto label4;

        virtualinvoke r6.<com.android.server.wm.DisplayContent: void positionDisplayAt(int,boolean)>(2147483647, 1);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void syncInputTransactions()>();

        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void notifyHardKeyboardStatusChange()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        java.lang.Throwable $r2;
        com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener>;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r3 == null goto label3;

        interfaceinvoke r3.<com.android.server.wm.WindowManagerInternal$OnHardKeyboardStatusChangeListener: void onHardKeyboardStatusChange(boolean)>(z0);

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void notifyKeyguardFlagsChanged(java.lang.Runnable, int)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.Runnable r1;
        int i0;
        com.android.server.wm.ActivityTaskManagerInternal $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.Runnable;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void notifyKeyguardFlagsChanged(java.lang.Runnable,int)>(r1, i0);

        return;
    }

    public void notifyKeyguardTrustedChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ActivityTaskManagerInternal $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r1.<com.android.server.wm.ActivityTaskManagerInternal: void notifyKeyguardTrustedChanged()>();

        return;
    }

    public void notifyShowingDreamChanged()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void notifyKeyguardFlagsChanged(java.lang.Runnable,int)>(null, 0);

        return;
    }

    void onAnimationFinished()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onInitReady()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.Watchdog $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void initPolicy()>();

        $r1 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r1.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void createWatermark()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void showEmulatorDisplayOverlayIfNeeded()>();

        return;
    }

    public void onKeyguardShowingAndNotOccludedChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$H $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(61);

        return;
    }

    void onLockTaskStateChanged(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.'-$$Lambda$5zz5Ugt4wxIXoNE3lZS6NA9z_Jk' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Integer $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Throwable $r6;
        com.android.internal.util.function.pooled.PooledConsumer r7;
        java.util.function.BiConsumer r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = <com.android.server.wm._$$Lambda$5zz5Ugt4wxIXoNE3lZS6NA9z_Jk: com.android.server.wm.'-$$Lambda$5zz5Ugt4wxIXoNE3lZS6NA9z_Jk' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r9 = (java.util.function.BiConsumer) $r2;

        r7 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r9, $r3, $r4);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r7);

        interfaceinvoke r7.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onOverlayChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.'-$$Lambda$WindowManagerService$kVr85jPfx5uHphlz0VIIyn7eEnw' $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Throwable $r5;
        java.util.function.Consumer r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = <com.android.server.wm._$$Lambda$WindowManagerService$kVr85jPfx5uHphlz0VIIyn7eEnw: com.android.server.wm.'-$$Lambda$WindowManagerService$kVr85jPfx5uHphlz0VIIyn7eEnw' INSTANCE>;

        r6 = (java.util.function.Consumer) $r3;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r6);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onPowerKeyDown(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.internal.util.function.pooled.PooledConsumer r1;
        com.android.server.wm.'-$$Lambda$99XNq73vh8e4HVH9BuxFhbLxKVY' $r2;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r3;
        java.lang.Boolean $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.util.function.BiConsumer r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r2 = <com.android.server.wm._$$Lambda$99XNq73vh8e4HVH9BuxFhbLxKVY: com.android.server.wm.'-$$Lambda$99XNq73vh8e4HVH9BuxFhbLxKVY' INSTANCE>;

        $r3 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r6 = (java.util.function.BiConsumer) $r2;

        r1 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r6, $r3, $r4);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r1);

        interfaceinvoke r1.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        return;
    }

    public void onRectangleOnScreenRequested(android.os.IBinder, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Rect r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.AccessibilityController $r3, $r6;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        int $i0;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        com.android.server.wm.WindowState r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r3 == null goto label4;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.wm.WindowState) $r5;

     label2:
        if r9 == null goto label4;

     label3:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $i0 = virtualinvoke r9.<com.android.server.wm.WindowState: int getDisplayId()>();

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void onRectangleOnScreenRequestedLocked(int,android.graphics.Rect)>($i0, r1);

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.wm.WindowManagerShellCommand $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.wm.WindowManagerShellCommand;

        specialinvoke $r7.<com.android.server.wm.WindowManagerShellCommand: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke $r7.<com.android.server.wm.WindowManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void onSystemUiStarted()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.policy.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: void onSystemUiStarted()>();

        return;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        boolean z0, $z1, $z2;
        java.lang.RuntimeException $r1;
        java.lang.Object[] $r2;
        com.android.server.wm.ProtoLogGroup $r3;
        android.os.Parcel r4, r5;
        java.lang.String r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: android.os.Parcel;

        r5 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r4, r5, i1);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $z1 = $r1 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label4;

        r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void wtf(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r3, 371641947, 0, "Window Manager Crash %s", $r2);

     label4:
        throw $r1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void onUserSwitched()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService$SettingsObserver $r3;
        com.android.server.wm.'-$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W-M' $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Throwable $r6;
        java.util.function.Consumer r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$SettingsObserver: void updateSystemUiSettings()>();

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4 = <com.android.server.wm._$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W_M: com.android.server.wm.'-$$Lambda$_jL5KNK44AQYPj1d8Hd3FYO0W-M' INSTANCE>;

        r7 = (java.util.function.Consumer) $r4;

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r7);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.IWindowSession openSession(android.view.IWindowSessionCallback)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindowSessionCallback r1;
        com.android.server.wm.Session $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IWindowSessionCallback;

        $r2 = new com.android.server.wm.Session;

        specialinvoke $r2.<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback)>(r0, r1);

        return $r2;
    }

    void openSurfaceTransaction()
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "openSurfaceTransaction");

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean outOfMemoryWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        boolean z0;
        com.android.server.wm.WindowStateAnimator $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.Session r7;
        com.android.server.wm.WindowState r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r8 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r7, r1, 0);

     label03:
        if r8 != null goto label06;

     label04:
        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = r8.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z0 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: boolean reclaimSomeSurfaceMemory(com.android.server.wm.WindowStateAnimator,java.lang.String,boolean)>($r3, "from-client", 0);

        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture, android.os.IRemoteCallback, boolean, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IRemoteCallback r1;
        boolean z0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.AppTransition $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.view.IAppTransitionAnimationSpecsFuture r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: android.view.IAppTransitionAnimationSpecsFuture;

        r1 := @parameter1: android.os.IRemoteCallback;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r3 != null goto label5;

     label3:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to call overridePendingAppTransitionMultiThumbFuture for the display ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that does not exist.");

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        exitmonitor r2;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r5 = r3.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r5.<com.android.server.wm.AppTransition: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean)>(r11, r1, z0);

        exitmonitor r2;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        boolean $z0;
        java.lang.SecurityException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        com.android.server.wm.AppTransition $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.view.RemoteAnimationAdapter r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: android.view.RemoteAnimationAdapter;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS", "overridePendingAppTransitionRemote()");

        if $z0 == 0 goto label10;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r2 != null goto label05;

     label03:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to call overridePendingAppTransitionRemote for the display ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that does not exist.");

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r5 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r5.<com.android.server.wm.AppTransition: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter)>(r11);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label10:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CONTROL_REMOTE_APP_TRANSITION_ANIMATIONS permission");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void performBootTimeout()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0, $z1;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label4;

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 1001904964, 0, "***** BOOT TIMEOUT: forcing display enabled", $r3);

     label4:
        r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled> = 1;

        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void pokeDrawLock(com.android.server.wm.Session, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long $l0;
        java.lang.Throwable $r3;
        com.android.server.wm.Session r4;
        com.android.server.wm.WindowState r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.os.IBinder;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r5 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r4, r1, 0);

     label2:
        if r5 == null goto label4;

     label3:
        $l0 = r0.<com.android.server.wm.WindowManagerService: long mDrawLockTimeoutMillis>;

        virtualinvoke r5.<com.android.server.wm.WindowState: void pokeDrawLockLw(long)>($l0);

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void postWindowRemoveCleanupLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r9, $r13;
        com.android.server.wm.WindowToken r2;
        java.lang.String r3, r29, r31, r34;
        boolean $z0, $z3, $z4, $z5, $z6, $z7;
        android.view.IWindow $r4;
        java.util.HashMap $r5;
        android.os.IBinder $r6;
        com.android.server.wm.DisplayRotation $r8;
        com.android.server.wm.EmbeddedWindowController $r10;
        java.util.ArrayList $r11, $r12, $r21, $r26;
        android.view.WindowManager$LayoutParams $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.android.server.wm.WindowSurfacePlacer $r16, $r17;
        com.android.server.wm.ActivityRecord $r18, $r19, r33;
        com.android.server.wm.WallpaperController $r20;
        java.lang.Object[] $r22, $r24, $r27;
        com.android.server.wm.ProtoLogGroup $r23, $r25, $r28;
        com.android.server.wm.DisplayContent r30, r32;
        com.android.server.wm.ActivityStack r35;
        com.android.server.wm.InputMonitor $r36;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label01;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r28 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = r29;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r28, -622997754, 0, null, $r27);

     label01:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r6 = interfaceinvoke $r4.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        r30 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = virtualinvoke r30.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r8.<com.android.server.wm.DisplayRotation: void markForSeamlessRotation(com.android.server.wm.WindowState,boolean)>(r1, 0);

        virtualinvoke r1.<com.android.server.wm.WindowState: void resetAppOpsState()>();

        $r9 = r30.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r9 != null goto label02;

        $r26 = r30.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinRemovedSinceNullFocus>;

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label02:
        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        virtualinvoke $r10.<com.android.server.wm.EmbeddedWindowController: void onWindowRemoved(com.android.server.wm.WindowState)>(r1);

        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r12 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r12.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateNonSystemOverlayWindowsVisibilityIfNeeded(com.android.server.wm.WindowState,boolean)>(r1, 0);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_WINDOW_MOVEMENT_enabled>;

        if $z3 == 0 goto label03;

        r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r25 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_WINDOW_MOVEMENT>;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r31;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r25, -193782861, 0, null, $r24);

     label03:
        r32 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r13 = r32.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r13 != r1 goto label04;

        virtualinvoke r32.<com.android.server.wm.DisplayContent: void setInputMethodWindowLocked(com.android.server.wm.WindowState)>(null);

     label04:
        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r33 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z4 == 0 goto label05;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r23 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r22 = newarray (java.lang.Object)[2];

        $r22[0] = r3;

        $r22[1] = r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r23, -1963461591, 0, null, $r22);

     label05:
        $z5 = virtualinvoke r2.<com.android.server.wm.WindowToken: boolean isEmpty()>();

        if $z5 == 0 goto label07;

        $z7 = r2.<com.android.server.wm.WindowToken: boolean mPersistOnEmpty>;

        if $z7 != 0 goto label06;

        virtualinvoke r2.<com.android.server.wm.WindowToken: void removeImmediately()>();

        goto label07;

     label06:
        if r33 == null goto label07;

        r33.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn> = 0;

        virtualinvoke r33.<com.android.server.wm.ActivityRecord: void clearAllDrawn()>();

        r35 = virtualinvoke r33.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityStack getStack()>();

        if r35 == null goto label07;

        $r21 = r35.<com.android.server.wm.ActivityStack: java.util.ArrayList mExitingActivities>;

        virtualinvoke $r21.<java.util.ArrayList: boolean remove(java.lang.Object)>(r33);

     label07:
        if r33 == null goto label08;

        virtualinvoke r33.<com.android.server.wm.ActivityRecord: void postWindowRemoveStartingWindowCleanup(com.android.server.wm.WindowState)>(r1);

     label08:
        $r14 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r14.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2013 goto label09;

        $r20 = r30.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r20.<com.android.server.wm.WallpaperController: void clearLastWallpaperTimeoutTime()>();

        $i5 = r30.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i6 = $i5 | 4;

        r30.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i6;

        goto label10;

     label09:
        $r15 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r15.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 1048576;

        if $i2 == 0 goto label10;

        $i3 = r30.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i4 = $i3 | 4;

        r30.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i4;

     label10:
        if r30 == null goto label11;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        $z6 = virtualinvoke $r16.<com.android.server.wm.WindowSurfacePlacer: boolean isInLayout()>();

        if $z6 != 0 goto label11;

        virtualinvoke r30.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(1);

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r17.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        $r18 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r18 == null goto label11;

        $r19 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r19.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

     label11:
        $r36 = virtualinvoke r30.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r36.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        return;
    }

    public void prepareAppTransition(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean z0, $z1;
        java.lang.SecurityException $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "prepareAppTransition()");

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void prepareAppTransition(int,boolean,int,boolean)>(i0, z0, 0, 0);

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r1;
    }

    public void reboot(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.app.ActivityThread $r1;
        android.app.ContextImpl $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        staticinvoke <com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)>($r2, "userrequested", z0);

        return;
    }

    public void rebootSafeMode(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.app.ActivityThread $r1;
        android.app.ContextImpl $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        staticinvoke <com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)>($r2, z0);

        return;
    }

    public void reenableKeyguard(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3, $i4, i5, i6;
        long l1;
        android.app.ActivityManagerInternal $r1;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        com.android.server.wm.KeyguardDisableHandler $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.os.IBinder;

        i5 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.app.ActivityManagerInternal mAmInternal>;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = virtualinvoke $r1.<android.app.ActivityManagerInternal: int handleIncomingUser(int,int,int,boolean,int,java.lang.String,java.lang.String)>($i2, $i3, i5, 0, 2, "reenableKeyguard", null);

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i4 != 0 goto label4;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "token is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        virtualinvoke $r5.<com.android.server.wm.KeyguardDisableHandler: void reenableKeyguard(android.os.IBinder,int,int)>(r7, i0, i6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label4:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void refreshScreenCaptureDisabled(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.SecurityException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label6;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: void setSecureSurfaceState(int)>(i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system can call refreshScreenCaptureDisabled.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void registerAppFreezeListener(com.android.server.wm.WindowManagerService$AppFreezeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$AppFreezeListener r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService$AppFreezeListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mAppFreezeListeners>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mAppFreezeListeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void registerDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IDisplayFoldListener r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>(r1);

        return;
    }

    public void registerDisplayWindowListener(android.view.IDisplayWindowListener)
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        android.content.Context $r1;
        int $i1;
        java.lang.SecurityException $r2;
        com.android.server.wm.DisplayWindowListenerController $r3;
        java.lang.Throwable $r4;
        android.view.IDisplayWindowListener r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.view.IDisplayWindowListener;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r3.<com.android.server.wm.DisplayWindowListenerController: void registerListener(android.view.IDisplayWindowListener)>(r5);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

     label4:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_ACTIVITY_STACKS");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void registerPinnedStackListener(int, android.view.IPinnedStackListener)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.PinnedStackController $r5;
        java.lang.Throwable $r6;
        android.view.IPinnedStackListener r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r7 := @parameter1: android.view.IPinnedStackListener;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.REGISTER_WINDOW_MANAGER_LISTENERS", "registerPinnedStackListener()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $z1 = $r2.<com.android.server.wm.ActivityTaskManagerService: boolean mSupportsPictureInPicture>;

        if $z1 != 0 goto label2;

        return;

     label2:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.PinnedStackController getPinnedStackController()>();

        virtualinvoke $r5.<com.android.server.wm.PinnedStackController: void registerPinnedStackListener(android.view.IPinnedStackListener)>(r7);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4;
        android.view.WindowManagerPolicyConstants$PointerEventListener r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.view.WindowManagerPolicyConstants$PointerEventListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r2 == null goto label4;

     label3:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void registerPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>(r5);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void registerShortcutKey(long, com.android.internal.policy.IShortcutService) throws android.os.RemoteException
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        com.android.internal.policy.IShortcutService r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        com.android.server.policy.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.internal.policy.IShortcutService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.REGISTER_WINDOW_MANAGER_LISTENERS", "registerShortcutKey");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>(l0, r1);

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires REGISTER_WINDOW_MANAGER_LISTENERS permission");

        throw $r2;
    }

    public void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.view.ISystemGestureExclusionListener r7;
        com.android.server.wm.DisplayContent r8;
        java.lang.IllegalArgumentException r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.view.ISystemGestureExclusionListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r8 == null goto label5;

     label3:
        virtualinvoke r8.<com.android.server.wm.DisplayContent: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener)>(r7);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        r9 = new java.lang.IllegalArgumentException;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to register visibility event for invalid display: ");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r9;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.String $r5;
        com.android.server.wm.WallpaperVisibilityListeners $r6;
        com.android.server.wm.WallpaperController $r7;
        java.lang.Throwable $r8;
        android.view.IWallpaperVisibilityListener r9;
        com.android.server.wm.DisplayContent r10;
        java.lang.IllegalArgumentException r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r9 := @parameter0: android.view.IWallpaperVisibilityListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r10 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r10 == null goto label5;

     label3:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WallpaperVisibilityListeners mWallpaperVisibilityListeners>;

        virtualinvoke $r6.<com.android.server.wm.WallpaperVisibilityListeners: void registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>(r9, i0);

        $r7 = r10.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        z0 = virtualinvoke $r7.<com.android.server.wm.WallpaperController: boolean isWallpaperVisible()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        r11 = new java.lang.IllegalArgumentException;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to register visibility event for invalid display: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r11;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int relayoutWindow(com.android.server.wm.Session, android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, int, long, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.util.MergedConfiguration, android.view.SurfaceControl, android.view.InsetsState, android.view.InsetsSourceControl[], android.graphics.Point, android.view.SurfaceControl)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Rect r1, r2, r3, $r18, $r27, $r28, $r53, $r55, $r57, r105, r106;
        android.view.DisplayCutout$ParcelableWrapper r4;
        android.util.MergedConfiguration r5;
        android.view.SurfaceControl r6, r10;
        android.view.InsetsState r7, $r29;
        android.view.InsetsSourceControl[] r8;
        android.graphics.Point r9;
        long l0, l2, l42, l66;
        com.android.server.wm.WindowManagerGlobalLock r11, r108, r131;
        com.android.server.wm.WindowState r12, $r41;
        com.android.server.wm.DisplayContent r13, $r16, $r68;
        com.android.server.wm.DisplayPolicy r14;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i40, i41, i44, i45, i47, i48, i49, $i50, $i51, i52, i53, i54, i55, $i56, $i57, $i58, i59, i60, $i61, i62, i63, i64, $i65, i67, i68, i69, $i70, i71, i72, i74, i75;
        com.android.server.wm.ProtoLogGroup r15, $r33, r123;
        android.view.WindowManager$LayoutParams $r17, $r20, $r40, $r43, $r51, $r52, $r54, $r56, $r59, $r60, $r61, $r63, $r70, $r71, $r72, $r73, $r76, r104, $r110;
        java.lang.CharSequence $r21, $r77;
        java.lang.String $r23, r112, r114, r120, r121, r122, r129;
        com.android.server.wm.ActivityRecord $r24, $r35, $r37, $r42, $r44, $r62, $r69, $r128;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32, z33, z34, z35;
        com.android.server.wm.utils.WmDisplayCutout $r25;
        android.view.DisplayCutout $r26;
        com.android.server.wm.WindowSurfaceController $r30, $r31, $r49, $r50, r125, r126, r130;
        java.lang.Object[] $r32, $r46, $r78;
        java.lang.Boolean $r34;
        com.android.server.wm.WallpaperController $r36;
        com.android.server.wm.UnknownAppVisibilityController $r38;
        java.lang.Throwable $r45, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, r107;
        java.lang.Long $r47, $r48;
        float $f0;
        com.android.server.wm.WindowToken $r58;
        com.android.server.wm.WindowStateAnimator $r64, r109;
        com.android.server.wm.AccessibilityController $r65, $r67;
        int[] $r66;
        java.lang.Exception $r74;
        com.android.server.wm.InputMonitor $r75;
        com.android.server.wm.Session r102;
        android.view.IWindow r103;
        short s46;
        java.lang.IllegalArgumentException r111;
        java.lang.RuntimeException r113;
        com.android.server.wm.WindowSurfacePlacer $r115;
        java.lang.StringBuilder r127;
        byte b73;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r102 := @parameter0: com.android.server.wm.Session;

        r103 := @parameter1: android.view.IWindow;

        i37 := @parameter2: int;

        r104 := @parameter3: android.view.WindowManager$LayoutParams;

        i38 := @parameter4: int;

        i39 := @parameter5: int;

        i40 := @parameter6: int;

        i41 := @parameter7: int;

        l42 := @parameter8: long;

        r105 := @parameter9: android.graphics.Rect;

        r106 := @parameter10: android.graphics.Rect;

        r1 := @parameter11: android.graphics.Rect;

        r2 := @parameter12: android.graphics.Rect;

        r3 := @parameter13: android.graphics.Rect;

        r4 := @parameter14: android.view.DisplayCutout$ParcelableWrapper;

        r5 := @parameter15: android.util.MergedConfiguration;

        r6 := @parameter16: android.view.SurfaceControl;

        r7 := @parameter17: android.view.InsetsState;

        r8 := @parameter18: android.view.InsetsSourceControl[];

        r9 := @parameter19: android.graphics.Point;

        r10 := @parameter20: android.view.SurfaceControl;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r8, null);

        i44 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i45 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r11;

     label001:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r12 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r102, r103, 0);

     label002:
        if r12 != null goto label007;

     label003:
        exitmonitor r11;

     label004:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label005:
        $r98 := @caughtexception;

        r107 = $r98;

     label006:
        r108 = r11;

        goto label200;

     label007:
        r13 = virtualinvoke r12.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r14 = virtualinvoke r13.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        r109 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

     label008:
        if i40 == 8 goto label012;

     label009:
        virtualinvoke r12.<com.android.server.wm.WindowState: void setRequestedSize(int,int)>(i38, i39);

     label010:
        goto label012;

     label011:
        $r81 := @caughtexception;

        r107 = $r81;

        goto label006;

     label012:
        virtualinvoke r12.<com.android.server.wm.WindowState: void setFrameNumber(long)>(l42);

        $r16 = virtualinvoke r12.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        z18 = $r16.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

     label013:
        if z18 != 0 goto label017;

     label014:
        virtualinvoke r12.<com.android.server.wm.WindowState: void finishSeamlessRotation(boolean)>(0);

     label015:
        goto label017;

     label016:
        $r94 := @caughtexception;

        r107 = $r94;

        r108 = r11;

        goto label200;

     label017:
        z19 = virtualinvoke r12.<com.android.server.wm.WindowState: boolean useBLASTSync()>();

     label018:
        s46 = 0;

        if z19 == 0 goto label019;

        s46 = 0 | 128;

     label019:
        if r104 == null goto label047;

     label020:
        virtualinvoke r14.<com.android.server.wm.DisplayPolicy: void adjustWindowParamsLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,int,int)>(r12, r104, i44, i45);

        $r58 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        virtualinvoke $r58.<com.android.server.wm.WindowToken: void adjustWindowParams(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams)>(r12, r104);

        i47 = r12.<com.android.server.wm.WindowState: int mSeq>;

     label021:
        if i37 != i47 goto label027;

     label022:
        $i35 = r104.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i34 = r104.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i48 = $i35 | $i34;

     label023:
        i49 = i48;

        $i36 = 67043328 & i48;

        if $i36 == 0 goto label026;

        i49 = i48;

     label024:
        $z16 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean hasStatusBarPermission(int,int)>(i44, i45);

        if $z16 != 0 goto label026;

     label025:
        i49 = i48 & -67043329;

     label026:
        r12.<com.android.server.wm.WindowState: int mSystemUiVisibility> = i49;

     label027:
        $r110 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i50 = $r110.<android.view.WindowManager$LayoutParams: int type>;

        $i51 = r104.<android.view.WindowManager$LayoutParams: int type>;

        if $i50 != $i51 goto label045;

        $i19 = r104.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i20 = $i19 & 8192;

        if $i20 == 0 goto label028;

        $r70 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i30 = $r70.<android.view.WindowManager$LayoutParams: int x>;

        r104.<android.view.WindowManager$LayoutParams: int x> = $i30;

        $r71 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i31 = $r71.<android.view.WindowManager$LayoutParams: int y>;

        r104.<android.view.WindowManager$LayoutParams: int y> = $i31;

        $r72 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i32 = $r72.<android.view.WindowManager$LayoutParams: int width>;

        r104.<android.view.WindowManager$LayoutParams: int width> = $i32;

        $r73 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i33 = $r73.<android.view.WindowManager$LayoutParams: int height>;

        r104.<android.view.WindowManager$LayoutParams: int height> = $i33;

     label028:
        $r59 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i22 = $r59.<android.view.WindowManager$LayoutParams: int flags>;

        $i21 = r104.<android.view.WindowManager$LayoutParams: int flags>;

        i52 = $i22 ^ $i21;

        $r60 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i53 = $r60.<android.view.WindowManager$LayoutParams: int privateFlags>;

        i54 = r104.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $r61 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i55 = virtualinvoke $r61.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r104);

     label029:
        $i23 = i55 & 16385;

        if $i23 == 0 goto label031;

     label030:
        r12.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

     label031:
        $r62 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r62 == null goto label034;

     label032:
        $i28 = i52 & 524288;

        if $i28 != 0 goto label033;

        $i29 = i52 & 4194304;

        if $i29 == 0 goto label034;

     label033:
        $r69 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r69.<com.android.server.wm.ActivityRecord: void checkKeyguardFlagsChanged()>();

     label034:
        $i56 = 33554432 & i55;

        if $i56 == 0 goto label036;

     label035:
        $r65 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r65 == null goto label036;

        $r67 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r66 = newarray (int)[1];

        $r68 = virtualinvoke r12.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i27 = virtualinvoke $r68.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r66[0] = $i27;

        virtualinvoke $r67.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r66);

     label036:
        $i57 = i53 ^ i54;

        $i58 = $i57 & 524288;

        if $i58 == 0 goto label038;

     label037:
        $r64 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z15 = virtualinvoke $r64.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateNonSystemOverlayWindowsVisibilityIfNeeded(com.android.server.wm.WindowState,boolean)>(r12, $z15);

     label038:
        $i24 = 131072 & i55;

        if $i24 == 0 goto label044;

     label039:
        $r63 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i25 = $r63.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i26 = $i25 & 16777216;

        if $i26 == 0 goto label041;

     label040:
        z20 = 1;

        goto label042;

     label041:
        z20 = 0;

     label042:
        virtualinvoke r109.<com.android.server.wm.WindowStateAnimator: void setColorSpaceAgnosticLocked(boolean)>(z20);

     label043:
        goto label044;

     label044:
        goto label048;

     label045:
        r111 = new java.lang.IllegalArgumentException;

        specialinvoke r111.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Window type can not be changed after the window is added.");

        throw r111;

     label046:
        $r84 := @caughtexception;

        r107 = $r84;

        r108 = r11;

        goto label200;

     label047:
        i52 = 0;

        i55 = 0;

     label048:
        $i3 = i41 & 2;

        if $i3 == 0 goto label049;

        z21 = 1;

        goto label050;

     label049:
        z21 = 0;

     label050:
        r109.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = z21;

     label051:
        $i4 = i55 & 128;

        if $i4 == 0 goto label053;

     label052:
        $f0 = r104.<android.view.WindowManager$LayoutParams: float alpha>;

        r109.<com.android.server.wm.WindowStateAnimator: float mAlpha> = $f0;

     label053:
        $i6 = r12.<com.android.server.wm.WindowState: int mRequestedWidth>;

        $i5 = r12.<com.android.server.wm.WindowState: int mRequestedHeight>;

        virtualinvoke r12.<com.android.server.wm.WindowState: void setWindowScale(int,int)>($i6, $i5);

        $r17 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r18 = $r17.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i59 = $r18.<android.graphics.Rect: int left>;

     label054:
        if i59 != 0 goto label057;

     label055:
        $r52 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r53 = $r52.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i17 = $r53.<android.graphics.Rect: int top>;

        if $i17 != 0 goto label057;

        $r54 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r55 = $r54.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i18 = $r55.<android.graphics.Rect: int right>;

        if $i18 != 0 goto label057;

        $r56 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r57 = $r56.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i60 = $r57.<android.graphics.Rect: int bottom>;

     label056:
        if i60 == 0 goto label058;

     label057:
        virtualinvoke r109.<com.android.server.wm.WindowStateAnimator: void setOpaqueLocked(boolean)>(0);

     label058:
        i1 = r12.<com.android.server.wm.WindowState: int mViewVisibility>;

     label059:
        if i1 == 4 goto label060;

        if i1 != 8 goto label061;

     label060:
        if i40 != 0 goto label061;

        z22 = 1;

        goto label062;

     label061:
        z22 = 0;

     label062:
        $i61 = 131080 & i52;

        if $i61 != 0 goto label064;

        if z22 == 0 goto label063;

        goto label064;

     label063:
        z23 = 0;

        goto label065;

     label064:
        z23 = 1;

     label065:
        i62 = r12.<com.android.server.wm.WindowState: int mViewVisibility>;

     label066:
        if i62 != i40 goto label070;

        $i16 = i52 & 8;

        if $i16 != 0 goto label070;

     label067:
        z24 = r12.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

     label068:
        if z24 != 0 goto label069;

        goto label070;

     label069:
        z25 = 0;

        goto label071;

     label070:
        z25 = 1;

     label071:
        i63 = r12.<com.android.server.wm.WindowState: int mViewVisibility>;

     label072:
        if i63 == i40 goto label075;

     label073:
        $r51 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i64 = $r51.<android.view.WindowManager$LayoutParams: int flags>;

     label074:
        $i15 = i64 & 1048576;

        if $i15 == 0 goto label075;

        z26 = 1;

        goto label076;

     label075:
        z26 = 0;

     label076:
        $i65 = i52 & 1048576;

        if $i65 == 0 goto label077;

        z27 = 1;

        goto label078;

     label077:
        z27 = 0;

     label078:
        z28 = z26 | z27;

        $i7 = i52 & 8192;

        if $i7 == 0 goto label082;

     label079:
        $r49 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r49 == null goto label082;

        $r50 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $z14 = virtualinvoke r12.<com.android.server.wm.WindowState: boolean isSecureLocked()>();

        virtualinvoke $r50.<com.android.server.wm.WindowSurfaceController: void setSecure(boolean)>($z14);

     label080:
        goto label082;

     label081:
        $r80 := @caughtexception;

        r107 = $r80;

        r108 = r11;

        goto label200;

     label082:
        r12.<com.android.server.wm.WindowState: boolean mRelayoutCalled> = 1;

        r12.<com.android.server.wm.WindowState: boolean mInRelayout> = 1;

        virtualinvoke r12.<com.android.server.wm.WindowState: void setViewVisibility(int)>(i40);

        z29 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_SCREEN_ON_enabled>;

     label083:
        if z29 == 0 goto label091;

     label084:
        r112 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

     label085:
        l2 = (long) i1;

        l66 = (long) i40;

     label086:
        r113 = new java.lang.RuntimeException;

        specialinvoke r113.<java.lang.RuntimeException: void <init>()>();

        $r45 = virtualinvoke r113.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r114 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r45);

        r15 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_SCREEN_ON>;

     label087:
        $r46 = newarray (java.lang.Object)[4];

        $r46[0] = r112;

        $r47 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r46[1] = $r47;

        $r48 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l66);

        $r46[2] = $r48;

        $r46[3] = r114;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r15, -754503024, 20, null, $r46);

     label088:
        goto label091;

     label089:
        $r101 := @caughtexception;

        r107 = $r101;

        r108 = r11;

        goto label200;

     label090:
        $r96 := @caughtexception;

        r107 = $r96;

        goto label197;

     label091:
        virtualinvoke r12.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

     label092:
        $i8 = i41 & 1;

        if $i8 == 0 goto label093;

        z30 = 1;

        goto label094;

     label093:
        z30 = 0;

     label094:
        r12.<com.android.server.wm.WindowState: boolean mGivenInsetsPending> = z30;

     label095:
        if i40 != 0 goto label098;

     label096:
        $r42 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r42 == null goto label097;

        $r43 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i14 = $r43.<android.view.WindowManager$LayoutParams: int type>;

        if $i14 == 3 goto label097;

        $r44 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z13 = virtualinvoke $r44.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z13 == 0 goto label098;

     label097:
        z31 = 1;

        goto label099;

     label098:
        z31 = 0;

     label099:
        if z31 != 0 goto label105;

     label100:
        $z10 = virtualinvoke r109.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z10 == 0 goto label105;

        $z11 = r12.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z11 != 0 goto label105;

     label101:
        s46 = s46 | 4;

     label102:
        $z12 = r12.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z12 != 0 goto label104;

        z25 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean tryStartExitingAnimation(com.android.server.wm.WindowState,com.android.server.wm.WindowStateAnimator,boolean)>(r12, r109, z25);

     label103:
        goto label105;

     label104:
        goto label105;

     label105:
        $r115 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r115.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement(boolean)>(1);

     label106:
        if z31 == 0 goto label127;

     label107:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "relayoutWindow: viewVisibility_1");

        i67 = virtualinvoke r12.<com.android.server.wm.WindowState: int relayoutVisibleWindow(int,int)>(s46, i55);

     label108:
        i68 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int createSurfaceControl(android.view.SurfaceControl,android.view.SurfaceControl,int,com.android.server.wm.WindowState,com.android.server.wm.WindowStateAnimator)>(r6, r10, i67, r12, r109);

     label109:
        $i12 = i68 & 2;

        if $i12 == 0 goto label110;

        z25 = 1;

     label110:
        $r40 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i13 = $r40.<android.view.WindowManager$LayoutParams: int type>;

        if $i13 != 2011 goto label114;

     label111:
        z32 = z23;

     label112:
        $r41 = r13.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r41 != null goto label115;

        virtualinvoke r13.<com.android.server.wm.DisplayContent: void setInputMethodWindowLocked(com.android.server.wm.WindowState)>(r12);

     label113:
        z32 = 1;

        goto label115;

     label114:
        z32 = z23;

     label115:
        virtualinvoke r12.<com.android.server.wm.WindowState: void adjustStartingWindowFlags()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label116:
        i69 = i68;

        goto label141;

     label117:
        $r82 := @caughtexception;

        r107 = $r82;

        r108 = r11;

        goto label200;

     label118:
        $r74 := @caughtexception;

     label119:
        $r75 = virtualinvoke r13.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r75.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        $z17 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z17 == 0 goto label122;

        r120 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r103);

        $r76 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r77 = virtualinvoke $r76.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        r121 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r77);

        r122 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r74);

        r123 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

     label120:
        $r78 = newarray (java.lang.Object)[3];

        $r78[0] = r120;

        $r78[1] = r121;

        $r78[2] = r122;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r123, -1750206390, 0, "Exception thrown when creating surface for client %s (%s). %s", $r78);

     label121:
        goto label122;

     label122:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r11;

     label123:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label124:
        $r92 := @caughtexception;

        r107 = $r92;

        r108 = r11;

        goto label200;

     label125:
        $r85 := @caughtexception;

        r107 = $r85;

        r108 = r11;

        goto label200;

     label126:
        $r89 := @caughtexception;

        r107 = $r89;

        r108 = r11;

        goto label200;

     label127:
        r108 = r11;

     label128:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "relayoutWindow: viewVisibility_2");

     label129:
        r109.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 0;

        r109.<com.android.server.wm.WindowStateAnimator: boolean mEnteringAnimation> = 0;

     label130:
        if i40 != 0 goto label137;

     label131:
        $z9 = virtualinvoke r109.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z9 == 0 goto label137;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "relayoutWindow: getSurface");

        r125 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

     label132:
        virtualinvoke r125.<com.android.server.wm.WindowSurfaceController: void getSurfaceControl(android.view.SurfaceControl)>(r6);

        r126 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

     label133:
        virtualinvoke r126.<com.android.server.wm.WindowSurfaceController: void getBLASTSurfaceControl(android.view.SurfaceControl)>(r10);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label134:
        goto label139;

     label135:
        $r90 := @caughtexception;

        r107 = $r90;

        goto label200;

     label136:
        $r100 := @caughtexception;

        r107 = $r100;

        goto label200;

     label137:
        r127 = new java.lang.StringBuilder;

        specialinvoke r127.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wmReleaseOutSurface_");

        $r20 = r12.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r21 = virtualinvoke $r20.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke r127.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r23);

        virtualinvoke r6.<android.view.SurfaceControl: void release()>();

     label138:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label139:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label140:
        z32 = z23;

        i69 = s46;

     label141:
        r108 = r11;

        z33 = z32;

        if z25 == 0 goto label144;

        z33 = z32;

     label142:
        $z8 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

        if $z8 == 0 goto label144;

     label143:
        z33 = 0;

     label144:
        $i70 = i69 & 2;

        if $i70 == 0 goto label145;

        z34 = 1;

        goto label146;

     label145:
        z34 = 0;

     label146:
        if z33 == 0 goto label150;

     label147:
        virtualinvoke r13.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label148:
        if z34 == 0 goto label150;

     label149:
        virtualinvoke r13.<com.android.server.wm.DisplayContent: void assignWindowLayers(boolean)>(0);

     label150:
        if z28 == 0 goto label152;

     label151:
        $i10 = r13.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i11 = $i10 | 4;

        r13.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i11;

     label152:
        $r24 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r24 == null goto label153;

        $r38 = r13.<com.android.server.wm.DisplayContent: com.android.server.wm.UnknownAppVisibilityController mUnknownAppVisibilityController>;

        $r37 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r38.<com.android.server.wm.UnknownAppVisibilityController: void notifyRelayouted(com.android.server.wm.ActivityRecord)>($r37);

     label153:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "relayoutWindow: updateOrientation");

        z35 = virtualinvoke r13.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label154:
        if z34 == 0 goto label156;

     label155:
        $z6 = r12.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z6 == 0 goto label156;

        $r36 = r13.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r36.<com.android.server.wm.WallpaperController: boolean updateWallpaperOffset(com.android.server.wm.WindowState,boolean)>(r12, 0);

     label156:
        $r128 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r128 == null goto label157;

        $r35 = r12.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r35.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

     label157:
        i71 = i69;

     label158:
        $z0 = r109.<com.android.server.wm.WindowStateAnimator: boolean mReportSurfaceResized>;

        if $z0 == 0 goto label160;

        r109.<com.android.server.wm.WindowStateAnimator: boolean mReportSurfaceResized> = 0;

     label159:
        i71 = i69 | 32;

     label160:
        i72 = i71;

     label161:
        $z1 = virtualinvoke r14.<com.android.server.wm.DisplayPolicy: boolean areSystemBarsForcedShownLw(com.android.server.wm.WindowState)>(r12);

        if $z1 == 0 goto label163;

     label162:
        i72 = i71 | 64;

     label163:
        $z2 = virtualinvoke r12.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z2 != 0 goto label164;

        r12.<com.android.server.wm.WindowState: boolean mResizedWhileGone> = 0;

     label164:
        if z31 == 0 goto label167;

     label165:
        virtualinvoke r12.<com.android.server.wm.WindowState: void getMergedConfiguration(android.util.MergedConfiguration)>(r5);

     label166:
        goto label168;

     label167:
        virtualinvoke r12.<com.android.server.wm.WindowState: void getLastReportedMergedConfiguration(android.util.MergedConfiguration)>(r5);

     label168:
        virtualinvoke r12.<com.android.server.wm.WindowState: void setLastReportedMergedConfiguration(android.util.MergedConfiguration)>(r5);

        virtualinvoke r12.<com.android.server.wm.WindowState: void updateLastInsetValues()>();

        virtualinvoke r12.<com.android.server.wm.WindowState: void getCompatFrame(android.graphics.Rect)>(r105);

        virtualinvoke r12.<com.android.server.wm.WindowState: void getInsetsForRelayout(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>(r106, r1, r2);

        $r25 = virtualinvoke r12.<com.android.server.wm.WindowState: com.android.server.wm.utils.WmDisplayCutout getWmDisplayCutout()>();

        $r26 = virtualinvoke $r25.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        virtualinvoke r4.<android.view.DisplayCutout$ParcelableWrapper: void set(android.view.DisplayCutout)>($r26);

        $r27 = virtualinvoke r12.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $r28 = virtualinvoke r12.<com.android.server.wm.WindowState: android.graphics.Rect getBackdropFrame(android.graphics.Rect)>($r27);

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r28);

        $r29 = virtualinvoke r12.<com.android.server.wm.WindowState: android.view.InsetsState getInsetsState()>();

        $z3 = virtualinvoke r12.<com.android.server.wm.WindowState: boolean isClientLocal()>();

        virtualinvoke r7.<android.view.InsetsState: void set(android.view.InsetsState,boolean)>($r29, $z3);

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_enabled>;

        if $z4 == 0 goto label170;

        r129 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

        $r33 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS>;

        $r32 = newarray (java.lang.Object)[2];

        $r32[0] = r129;

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z25);

        $r32[1] = $r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r33, 95902367, 12, null, $r32);

     label169:
        goto label170;

     label170:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        if $z5 == 0 goto label172;

     label171:
        b73 = 1;

        goto label173;

     label172:
        b73 = 0;

     label173:
        r12.<com.android.server.wm.WindowState: boolean mInRelayout> = 0;

     label174:
        if z35 == 0 goto label176;

     label175:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "relayoutWindow: postNewConfigurationToHandler");

        virtualinvoke r13.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label176:
        r130 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

     label177:
        if r130 == null goto label184;

     label178:
        $r30 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        i74 = virtualinvoke $r30.<com.android.server.wm.WindowSurfaceController: int getWidth()>();

        $r31 = r109.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        i75 = virtualinvoke $r31.<com.android.server.wm.WindowSurfaceController: int getHeight()>();

     label179:
        virtualinvoke r9.<android.graphics.Point: void set(int,int)>(i74, i75);

     label180:
        goto label184;

     label181:
        $r83 := @caughtexception;

        r107 = $r83;

        goto label183;

     label182:
        $r93 := @caughtexception;

        r107 = $r93;

     label183:
        goto label200;

     label184:
        r131 = r11;

     label185:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void getInsetsSourceControls(com.android.server.wm.WindowState,android.view.InsetsSourceControl[])>(r12, r8);

     label186:
        r131 = r11;

     label187:
        exitmonitor r11;

     label188:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $i9 = i72 | b73;

        return $i9;

     label189:
        $r79 := @caughtexception;

        r107 = $r79;

        goto label200;

     label190:
        $r99 := @caughtexception;

        r131 = r11;

     label191:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label192:
        r131 = r11;

     label193:
        throw $r99;

     label194:
        $r95 := @caughtexception;

        r108 = r11;

        r107 = $r95;

        goto label200;

     label195:
        $r91 := @caughtexception;

        r107 = $r91;

        r108 = r11;

        goto label200;

     label196:
        $r88 := @caughtexception;

        r107 = $r88;

     label197:
        r108 = r11;

        goto label200;

     label198:
        $r97 := @caughtexception;

        r107 = $r97;

        r108 = r11;

        goto label200;

     label199:
        $r87 := @caughtexception;

        r107 = $r87;

        r108 = r11;

     label200:
        r131 = r108;

     label201:
        exitmonitor r108;

     label202:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r107;

     label203:
        $r86 := @caughtexception;

        r107 = $r86;

        r108 = r131;

        goto label200;

        catch java.lang.Throwable from label001 to label002 with label199;
        catch java.lang.Throwable from label003 to label004 with label005;
        catch java.lang.Throwable from label007 to label008 with label199;
        catch java.lang.Throwable from label009 to label010 with label011;
        catch java.lang.Throwable from label012 to label013 with label198;
        catch java.lang.Throwable from label014 to label015 with label016;
        catch java.lang.Throwable from label017 to label018 with label198;
        catch java.lang.Throwable from label020 to label021 with label046;
        catch java.lang.Throwable from label022 to label023 with label016;
        catch java.lang.Throwable from label024 to label025 with label016;
        catch java.lang.Throwable from label026 to label027 with label016;
        catch java.lang.Throwable from label027 to label028 with label016;
        catch java.lang.Throwable from label028 to label029 with label016;
        catch java.lang.Throwable from label030 to label031 with label016;
        catch java.lang.Throwable from label031 to label032 with label016;
        catch java.lang.Throwable from label033 to label034 with label016;
        catch java.lang.Throwable from label035 to label036 with label016;
        catch java.lang.Throwable from label037 to label038 with label016;
        catch java.lang.Throwable from label039 to label040 with label016;
        catch java.lang.Throwable from label042 to label043 with label016;
        catch java.lang.Throwable from label045 to label046 with label016;
        catch java.lang.Throwable from label050 to label051 with label198;
        catch java.lang.Throwable from label052 to label053 with label016;
        catch java.lang.Throwable from label053 to label054 with label198;
        catch java.lang.Throwable from label055 to label056 with label016;
        catch java.lang.Throwable from label057 to label058 with label198;
        catch java.lang.Throwable from label058 to label059 with label198;
        catch java.lang.Throwable from label065 to label066 with label198;
        catch java.lang.Throwable from label067 to label068 with label016;
        catch java.lang.Throwable from label071 to label072 with label198;
        catch java.lang.Throwable from label073 to label074 with label016;
        catch java.lang.Throwable from label079 to label080 with label081;
        catch java.lang.Throwable from label082 to label083 with label196;
        catch java.lang.Throwable from label084 to label085 with label090;
        catch java.lang.Throwable from label086 to label087 with label089;
        catch java.lang.Throwable from label087 to label088 with label195;
        catch java.lang.Throwable from label091 to label092 with label195;
        catch java.lang.Throwable from label094 to label095 with label195;
        catch java.lang.Throwable from label096 to label097 with label195;
        catch java.lang.Throwable from label100 to label101 with label195;
        catch java.lang.Throwable from label102 to label103 with label195;
        catch java.lang.Throwable from label105 to label106 with label195;
        catch java.lang.Throwable from label107 to label108 with label126;
        catch java.lang.Exception from label108 to label109 with label118;
        catch java.lang.Throwable from label108 to label109 with label117;
        catch java.lang.Throwable from label110 to label111 with label194;
        catch java.lang.Throwable from label112 to label113 with label194;
        catch java.lang.Throwable from label115 to label116 with label194;
        catch java.lang.Throwable from label119 to label120 with label125;
        catch java.lang.Throwable from label120 to label121 with label124;
        catch java.lang.Throwable from label122 to label123 with label124;
        catch java.lang.Throwable from label128 to label129 with label194;
        catch java.lang.Throwable from label129 to label130 with label194;
        catch java.lang.Throwable from label131 to label132 with label136;
        catch java.lang.Throwable from label132 to label133 with label135;
        catch java.lang.Throwable from label133 to label134 with label194;
        catch java.lang.Throwable from label137 to label138 with label190;
        catch java.lang.Throwable from label138 to label139 with label194;
        catch java.lang.Throwable from label139 to label140 with label194;
        catch java.lang.Throwable from label142 to label143 with label194;
        catch java.lang.Throwable from label147 to label148 with label194;
        catch java.lang.Throwable from label149 to label150 with label194;
        catch java.lang.Throwable from label151 to label152 with label194;
        catch java.lang.Throwable from label152 to label153 with label194;
        catch java.lang.Throwable from label153 to label154 with label194;
        catch java.lang.Throwable from label155 to label156 with label194;
        catch java.lang.Throwable from label156 to label157 with label194;
        catch java.lang.Throwable from label158 to label159 with label194;
        catch java.lang.Throwable from label161 to label162 with label194;
        catch java.lang.Throwable from label163 to label164 with label194;
        catch java.lang.Throwable from label165 to label166 with label189;
        catch java.lang.Throwable from label167 to label168 with label189;
        catch java.lang.Throwable from label168 to label169 with label189;
        catch java.lang.Throwable from label170 to label171 with label189;
        catch java.lang.Throwable from label173 to label174 with label189;
        catch java.lang.Throwable from label175 to label176 with label189;
        catch java.lang.Throwable from label176 to label177 with label189;
        catch java.lang.Throwable from label178 to label179 with label182;
        catch java.lang.Throwable from label179 to label180 with label181;
        catch java.lang.Throwable from label185 to label186 with label203;
        catch java.lang.Throwable from label187 to label188 with label203;
        catch java.lang.Throwable from label191 to label192 with label203;
        catch java.lang.Throwable from label193 to label194 with label203;
        catch java.lang.Throwable from label201 to label202 with label203;
    }

    public void removeObsoleteTaskFiles(android.util.ArraySet, int[])
    {
        com.android.server.wm.WindowManagerService r0;
        int[] r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.TaskSnapshotController $r3;
        java.lang.Throwable $r4;
        android.util.ArraySet r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: int[];

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r3.<com.android.server.wm.TaskSnapshotController: void removeObsoleteTaskFiles(android.util.ArraySet,int[])>(r5, r1);

        exitmonitor r2;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeRotationWatcher(android.view.IRotationWatcher)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$RotationWatcher r1, $r6;
        android.os.IBinder r2, $r8, r15;
        java.util.ArrayList $r3, $r4, $r9;
        int $i0, i1, i2;
        java.lang.Object $r5, $r10;
        android.view.IRotationWatcher $r7, $r11, r14;
        android.os.IBinder$DeathRecipient $r12;
        java.lang.Throwable $r13;
        com.android.server.wm.WindowManagerGlobalLock r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r14 := @parameter0: android.view.IRotationWatcher;

        r15 = interfaceinvoke r14.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

     label02:
        i1 = 0;

     label03:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label10;

     label04:
        i2 = i1;

     label05:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r5;

        $r7 = $r6.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher mWatcher>;

        $r8 = interfaceinvoke $r7.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        if r15 != $r8 goto label09;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        r1 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r10;

        $r11 = r1.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher mWatcher>;

        r2 = interfaceinvoke $r11.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

     label06:
        if r2 == null goto label08;

     label07:
        $r12 = r1.<com.android.server.wm.WindowManagerService$RotationWatcher: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke r2.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r12, 0);

     label08:
        i2 = i1 - 1;

     label09:
        i1 = i2 + 1;

        goto label03;

     label10:
        exitmonitor r16;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r16;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void removeWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.EmbeddedWindowController $r3;
        java.lang.Throwable $r4;
        com.android.server.wm.Session r5;
        com.android.server.wm.WindowState r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.view.IWindow;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r6 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r5, r1, 0);

     label2:
        if r6 == null goto label5;

     label3:
        virtualinvoke r6.<com.android.server.wm.WindowState: void removeIfPossible()>();

        exitmonitor r2;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

        virtualinvoke $r3.<com.android.server.wm.EmbeddedWindowController: void remove(android.view.IWindow)>(r1);

        exitmonitor r2;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void removeWindowChangeListener(com.android.server.wm.WindowManagerService$WindowChangeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;
        com.android.server.wm.WindowManagerService$WindowChangeListener r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: com.android.server.wm.WindowManagerService$WindowChangeListener;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeWindowToken(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i4, $i5;
        boolean z0, $z1, $z2;
        long l2, l3;
        com.android.server.wm.RootWindowContainer $r1, $r2;
        com.android.server.wm.InputMonitor $r4;
        java.lang.Object[] $r5, $r9;
        com.android.server.wm.ProtoLogGroup $r6, $r10;
        java.lang.Long $r7;
        java.lang.SecurityException $r8;
        java.lang.Throwable $r11, $r12, $r13;
        android.os.IBinder r14;
        com.android.server.wm.WindowManagerGlobalLock r15, r18;
        com.android.server.wm.WindowToken r16;
        java.lang.String r17, r20;
        com.android.server.wm.DisplayContent r19;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r14 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "removeWindowToken()");

        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r16 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowToken getWindowToken(android.os.IBinder)>(r14);

        exitmonitor r15;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r16 != null goto label04;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label03;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r14);

        $r10 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r10, 1518495446, 0, "removeWindowToken: Attempted to remove non-existing token: %s", $r9);

     label03:
        return;

     label04:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if z0 != 0 goto label06;

        $i4 = virtualinvoke r16.<com.android.server.wm.WindowToken: int getOwnerUid()>();

        if $i4 == -1 goto label05;

        $i5 = virtualinvoke r16.<com.android.server.wm.WindowToken: int getOwnerUid()>();

        if i1 != $i5 goto label05;

        goto label06;

     label05:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("removeWindowToken: Requires MANAGE_APP_TOKENS permission to remove token owned by another uid");

        throw $r8;

     label06:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r18;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r19 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label09:
        if r19 != null goto label15;

     label10:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label13;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r14);

     label11:
        l3 = (long) i0;

     label12:
        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r20;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r5[1] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1739298851, 4, "removeWindowToken: Attempted to remove token: %s for non-exiting displayId=%d", $r5);

     label13:
        exitmonitor r18;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label15:
        virtualinvoke r19.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowToken removeWindowToken(android.os.IBinder)>(r14);

        $r4 = virtualinvoke r19.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r4.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        exitmonitor r18;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label18:
        $r13 := @caughtexception;

     label19:
        exitmonitor r18;

     label20:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

     label21:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

     label22:
        $r12 := @caughtexception;

     label23:
        exitmonitor r15;

     label24:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    void reparentDisplayContent(android.view.IWindow, android.view.SurfaceControl, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.SurfaceControl r1;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        long l1;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.AccessibilityController $r5, $r6;
        boolean $z0;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.Throwable $r9, $r10;
        android.view.IWindow r11;
        java.lang.String r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.view.SurfaceControl;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void checkCallerOwnsDisplay(int)>(i0);

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r11, 0);

     label03:
        if r3 != null goto label07;

     label04:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label05;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 1325649102, 0, "Bad requesting window %s", $r7);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: void reparentDisplayContent(com.android.server.wm.WindowState,android.view.SurfaceControl)>(r3, r1);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r5 == null goto label08;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void handleWindowObserverOfEmbeddedDisplayLocked(int,com.android.server.wm.WindowState)>(i0, r3);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label11:
        $r10 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        throw $r10;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    void reportSystemGestureExclusionChanged(com.android.server.wm.Session, android.view.IWindow, java.util.List)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        java.util.List r2;
        com.android.server.wm.WindowManagerGlobalLock r3;
        boolean $z0;
        com.android.server.wm.DisplayContent $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.Session r6;
        com.android.server.wm.WindowState r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.view.IWindow;

        r2 := @parameter2: java.util.List;

        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r6, r1, 1);

        $z0 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean setSystemGestureExclusion(java.util.List)>(r2);

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r7.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayContent: boolean updateSystemGestureExclusion()>();

     label2:
        exitmonitor r3;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowState r1, $r3;
        android.view.IWindow $r2, $r4;
        android.os.RemoteException $r5;
        com.android.internal.os.IResultReceiver r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r6 := @parameter0: com.android.internal.os.IResultReceiver;

        i0 := @parameter1: int;

     label1:
        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

     label2:
        if r1 == null goto label4;

     label3:
        $r2 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        if $r2 == null goto label4;

        $r3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        $r4 = $r3.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r4.<android.view.IWindow: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>(r6, i0);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean requestAssistScreenshot(android.app.IAssistDataReceiver)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        android.graphics.Bitmap$Config $r4;
        android.os.Handler $r5;
        com.android.server.wm._$$Lambda$WindowManagerService$m8s7DAHVcbhp97hLWdi3Yhx6a6Y $r6;
        java.lang.Throwable $r7;
        android.app.IAssistDataReceiver r8;
        com.android.server.wm.DisplayContent r9;
        android.graphics.Bitmap r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.app.IAssistDataReceiver;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "requestAssistScreenshot()");

        if $z0 == 0 goto label9;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r9 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

     label2:
        if r9 != null goto label3;

        r10 = null;

        goto label4;

     label3:
        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r10 = virtualinvoke r9.<com.android.server.wm.DisplayContent: android.graphics.Bitmap screenshotDisplayLocked(android.graphics.Bitmap$Config)>($r4);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r5 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        $r6 = new com.android.server.wm._$$Lambda$WindowManagerService$m8s7DAHVcbhp97hLWdi3Yhx6a6Y;

        specialinvoke $r6.<com.android.server.wm._$$Lambda$WindowManagerService$m8s7DAHVcbhp97hLWdi3Yhx6a6Y: void <init>(android.app.IAssistDataReceiver,android.graphics.Bitmap)>(r8, r10);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return 1;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label9:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires READ_FRAME_BUFFER permission");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void requestScrollCapture(int, android.os.IBinder, int, android.view.IScrollCaptureController)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        android.view.IScrollCaptureController r1;
        long l2, l3;
        com.android.server.wm.WindowManagerGlobalLock r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.Object[] $r5, $r11, $r17;
        com.android.server.wm.ProtoLogGroup $r6, $r12, $r18;
        java.lang.Long $r7;
        java.lang.Throwable $r8, $r9, $r13, $r21, $r22, r31, r33;
        android.os.RemoteException $r10, $r14, $r19, $r20, r32;
        android.view.IWindow $r15, r27;
        android.os.IBinder $r16, r23;
        com.android.server.wm.DisplayContent r24;
        com.android.server.wm.WindowState r25, r26;
        java.lang.String r30, r34;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r23 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        r1 := @parameter3: android.view.IScrollCaptureController;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "requestScrollCapture()");

        if $z0 == 0 goto label40;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r24 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r24 != null goto label09;

     label04:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label07;

     label05:
        l3 = (long) i0;

     label06:
        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r5[0] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void e(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 646981048, 1, "Invalid displayId for requestScrollCapture: %d", $r5);

     label07:
        interfaceinvoke r1.<android.view.IScrollCaptureController: void onClientUnavailable()>();

        exitmonitor r2;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label09:
        if r23 == null goto label12;

     label10:
        r25 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(null, r23, 1);

     label11:
        goto label13;

     label12:
        r25 = null;

     label13:
        r26 = virtualinvoke r24.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState findScrollCaptureTargetWindow(com.android.server.wm.WindowState,int)>(r25, i1);

     label14:
        if r26 != null goto label17;

     label15:
        interfaceinvoke r1.<android.view.IScrollCaptureController: void onClientUnavailable()>();

        exitmonitor r2;

     label16:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label17:
        r27 = r26.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

     label18:
        interfaceinvoke r27.<android.view.IWindow: void requestScrollCapture(android.view.IScrollCaptureController)>(r1);

     label19:
        goto label25;

     label20:
        $r19 := @caughtexception;

        goto label22;

     label21:
        $r14 := @caughtexception;

     label22:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label24;

        $r15 = r26.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r16 = interfaceinvoke $r15.<android.view.IWindow: android.os.IBinder asBinder()>();

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r30;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, -1517908912, 0, "requestScrollCapture: caught exception dispatching to window.token=%s", $r17);

     label23:
        goto label24;

     label24:
        interfaceinvoke r1.<android.view.IScrollCaptureController: void onClientUnavailable()>();

     label25:
        exitmonitor r2;

     label26:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label27:
        goto label37;

     label28:
        $r9 := @caughtexception;

        r31 = $r9;

        goto label30;

     label29:
        $r22 := @caughtexception;

        r31 = $r22;

     label30:
        exitmonitor r2;

     label31:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r31;

     label32:
        $r20 := @caughtexception;

        r32 = $r20;

        goto label36;

     label33:
        $r21 := @caughtexception;

        r31 = $r21;

        goto label30;

     label34:
        $r13 := @caughtexception;

        r33 = $r13;

        goto label39;

     label35:
        $r10 := @caughtexception;

        r32 = $r10;

     label36:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label37;

        r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r32);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 1046922686, 0, "requestScrollCapture: caught exception dispatching callback: %s", $r11);

     label37:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label38:
        $r8 := @caughtexception;

        r33 = $r8;

     label39:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r33;

     label40:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires READ_FRAME_BUFFER permission");

        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label35;
        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch android.os.RemoteException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch android.os.RemoteException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch android.os.RemoteException from label26 to label27 with label32;
        catch java.lang.Throwable from label26 to label27 with label38;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch android.os.RemoteException from label31 to label32 with label32;
        catch java.lang.Throwable from label31 to label32 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
    }

    void requestTraversal()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowSurfacePlacer $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r1.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        return;
    }

    void restorePointerIconLocked(com.android.server.wm.DisplayContent, float, float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0, f1, $f2, $f3;
        com.android.server.wm.WindowManagerService$MousePositionTracker $r1;
        android.hardware.input.InputManager $r2;
        android.view.IWindow $r3;
        android.os.RemoteException $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        com.android.server.wm.DisplayContent r7;
        com.android.server.wm.WindowState r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: com.android.server.wm.DisplayContent;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$MousePositionTracker: void updatePosition(float,float)>(f0, f1);

        r8 = virtualinvoke r7.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getTouchableWinAtPointLocked(float,float)>(f0, f1);

        if r8 == null goto label5;

     label1:
        $r3 = r8.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $f2 = virtualinvoke r8.<com.android.server.wm.WindowState: float translateToWindowX(float)>(f0);

        $f3 = virtualinvoke r8.<com.android.server.wm.WindowState: float translateToWindowY(float)>(f1);

        interfaceinvoke $r3.<android.view.IWindow: void updatePointerIcon(float,float)>($f2, $f3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label4;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1423418408, 0, "unable to restore pointer icon", $r5);

     label4:
        goto label6;

     label5:
        $r2 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r2.<android.hardware.input.InputManager: void setPointerIconType(int)>(1000);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void saveANRStateLocked(com.android.server.wm.ActivityRecord, com.android.server.wm.WindowState, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1, $r10, $r12, $r15, $r28, $r35, $r39, $r45, $r48, $r50;
        int i0, $i1, i2;
        java.io.StringWriter $r4;
        com.android.internal.util.FastPrintWriter $r5;
        java.lang.StringBuilder $r6, $r22, $r29, $r36, $r40, $r46;
        java.text.DateFormat $r8;
        java.util.Date $r9;
        com.android.server.wm.RootWindowContainer $r13, $r14, $r18;
        com.android.server.wm.WindowManagerService$H $r16, $r17;
        com.android.server.wm.WindowContainer $r19;
        java.util.ArrayList $r20, $r21, $r26, $r33;
        boolean $z1, $z2;
        android.view.WindowManager$LayoutParams $r42;
        java.lang.CharSequence $r43;
        com.android.server.wm.ActivityRecord r51;
        com.android.server.wm.WindowState r52;
        com.android.server.wm.DisplayContent r57;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r51 := @parameter0: com.android.server.wm.ActivityRecord;

        r52 := @parameter1: com.android.server.wm.WindowState;

        r1 := @parameter2: java.lang.String;

        $r4 = new java.io.StringWriter;

        specialinvoke $r4.<java.io.StringWriter: void <init>()>();

        $r5 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r5.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>($r4, 0, 1024);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ANR time: ");

        $r8 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>();

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        $r10 = virtualinvoke $r8.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        if r51 == null goto label1;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Application at fault: ");

        $r48 = r51.<com.android.server.wm.ActivityRecord: java.lang.String stringName>;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r50);

     label1:
        if r52 == null goto label2;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Window at fault: ");

        $r42 = r52.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r43 = virtualinvoke $r42.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r43);

        $r45 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r45);

     label2:
        if r1 == null goto label3;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Reason: ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r39);

     label3:
        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i1 = virtualinvoke $r13.<com.android.server.wm.RootWindowContainer: int getChildCount()>();

        i2 = $i1 - 1;

     label4:
        if i2 < 0 goto label7;

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r19 = virtualinvoke $r18.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowContainer getChildAt(int)>(i2);

        r57 = (com.android.server.wm.DisplayContent) $r19;

        i0 = virtualinvoke r57.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r20 = r57.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinAddedSinceNullFocus>;

        $z1 = virtualinvoke $r20.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Windows added in display #");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since null focus: ");

        $r33 = r57.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinAddedSinceNullFocus>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r35);

     label5:
        $r21 = r57.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinRemovedSinceNullFocus>;

        $z2 = virtualinvoke $r21.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label6;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Windows removed in display #");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since null focus: ");

        $r26 = r57.<com.android.server.wm.DisplayContent: java.util.ArrayList mWinRemovedSinceNullFocus>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>($r28);

     label6:
        i2 = i2 + -1;

        goto label4;

     label7:
        virtualinvoke $r5.<java.io.PrintWriter: void println()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsNoHeaderLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>($r5, 1, null);

        virtualinvoke $r5.<java.io.PrintWriter: void println()>();

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>("Last ANR continued");

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r14.<com.android.server.wm.RootWindowContainer: void dumpDisplayContents(java.io.PrintWriter)>($r5);

        virtualinvoke $r5.<java.io.PrintWriter: void close()>();

        $r15 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        r0.<com.android.server.wm.WindowManagerService: java.lang.String mLastANRState> = $r15;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r16.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(38);

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(38, 7200000L);

        return;
    }

    void scheduleAnimationLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowAnimator r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.WindowAnimator: void scheduleAnimation()>();

     label1:
        return;
    }

    void scheduleClearWillReplaceWindows(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        android.os.IBinder r5;
        java.lang.String r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r5);

        if r1 != null goto label2;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label1;

        r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r6;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 38267433, 0, "Attempted to reset replacing window on non-existing app token %s", $r3);

     label1:
        return;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>(r1);

        goto label4;

     label3:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void clearWillReplaceWindows()>();

     label4:
        return;
    }

    void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ActivityRecord r1;
        java.util.ArrayList $r2, $r5;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r3, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.ActivityRecord;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowReplacementTimeouts>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowReplacementTimeouts>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(46);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(46, 2000L);

        return;
    }

    public void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.policy.WindowManagerPolicy$ScreenOffListener r1;
        com.android.server.wm.TaskSnapshotController $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.policy.WindowManagerPolicy$ScreenOffListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r2.<com.android.server.wm.TaskSnapshotController: void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)>(r1);

        return;
    }

    public android.graphics.Bitmap screenshotWallpaper()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        java.lang.SecurityException $r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.WallpaperController $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.wm.WindowManagerGlobalLock r7;
        android.graphics.Bitmap r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "screenshotWallpaper()");

        if $z0 == 0 goto label8;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "screenshotWallpaper");

        r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r7;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(0);

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        r8 = virtualinvoke $r4.<com.android.server.wm.WallpaperController: android.graphics.Bitmap screenshotWallpaperLocked()>();

        exitmonitor r7;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return r8;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r7;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r5;

     label8:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires READ_FRAME_BUFFER permission");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void setAnimationScale(int, float)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean $z0;
        java.lang.SecurityException $r1;
        float f0, f1;
        com.android.server.wm.WindowManagerService$H $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 == 0 goto label5;

        f1 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>(f0);

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        goto label4;

     label1:
        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = f1;

        goto label4;

     label2:
        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = f1;

        goto label4;

     label3:
        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = f1;

     label4:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(14);

        return;

     label5:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ANIMATION_SCALE permission");

        throw $r1;
    }

    public void setAnimationScales(float[])
    {
        com.android.server.wm.WindowManagerService r0;
        float[] r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.android.server.wm.WindowManagerService$H $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: float[];

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 == 0 goto label4;

        if r1 == null goto label3;

        $i0 = lengthof r1;

        if $i0 < 1 goto label1;

        $f4 = r1[0];

        $f5 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f4);

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = $f5;

     label1:
        $i1 = lengthof r1;

        if $i1 < 2 goto label2;

        $f2 = r1[1];

        $f3 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f2);

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = $f3;

     label2:
        $i2 = lengthof r1;

        if $i2 < 3 goto label3;

        $f0 = r1[2];

        $f1 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f0);

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = $f1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dispatchNewAnimatorScaleLocked(com.android.server.wm.Session)>(null);

     label3:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(14);

        return;

     label4:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ANIMATION_SCALE permission");

        throw $r2;
    }

    public void setAodShowing(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.policy.WindowManagerPolicy $r3;
        com.android.server.wm.WindowSurfacePlacer $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z1 = interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: boolean setAodShowing(boolean)>(z0);

        if $z1 == 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r4.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label2:
        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setCurrentProfileIds(int[])
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2;
        int[] r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r3 := @parameter0: int[];

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = r3;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setCurrentUser(int, int[])
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm._$$Lambda$WindowManagerService$Em0v9TqvDp2RUmLBaOYm_MjKZNo r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        com.android.server.wm.KeyguardDisableHandler $r5;
        com.android.server.wm.RootWindowContainer $r6, r10;
        com.android.server.wm.WindowSurfacePlacer $r7;
        boolean $z0;
        java.lang.Throwable $r8;
        int i0, i1;
        int[] r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r9 := @parameter1: int[];

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId> = i0;

        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = r9;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void setCurrentUserLw(int)>(i0);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        virtualinvoke $r5.<com.android.server.wm.KeyguardDisableHandler: void setCurrentUser(int)>(i0);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r6.<com.android.server.wm.RootWindowContainer: void switchUser(int)>(i0);

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r7.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = new com.android.server.wm._$$Lambda$WindowManagerService$Em0v9TqvDp2RUmLBaOYm_MjKZNo;

        specialinvoke r3.<com.android.server.wm._$$Lambda$WindowManagerService$Em0v9TqvDp2RUmLBaOYm_MjKZNo: void <init>(int)>(i0);

        virtualinvoke r10.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r3);

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z0 == 0 goto label5;

        i1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int getForcedDisplayDensityForUserLocked(int)>(i0);

     label2:
        if i1 == 0 goto label3;

        goto label4;

     label3:
        i1 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

     label4:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void setForcedDensity(int,int)>(i1, -2);

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setDisplayWindowInsetsController(int, android.view.IDisplayWindowInsetsController)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Throwable $r6, $r7;
        android.view.IDisplayWindowInsetsController r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r8 := @parameter1: android.view.IDisplayWindowInsetsController;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_APP_TOKENS");

        if $i2 != 0 goto label13;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void setRemoteInsetsController(android.view.IDisplayWindowInsetsController)>(r8);

        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label12:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

     label13:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_APP_TOKENS");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        android.view.IDisplayWindowRotationController $r4, $r7, r13;
        android.os.IBinder $r5, $r8;
        android.os.IBinder$DeathRecipient $r6, $r9;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r13 := @parameter0: android.view.IDisplayWindowRotationController;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS");

        if $i0 != 0 goto label10;

     label01:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController>;

        if $r4 == null goto label03;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController>;

        $r8 = interfaceinvoke $r7.<android.view.IDisplayWindowRotationController: android.os.IBinder asBinder()>();

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.os.IBinder$DeathRecipient mDisplayRotationControllerDeath>;

        interfaceinvoke $r8.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r9, 0);

        r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController> = null;

     label03:
        $r5 = interfaceinvoke r13.<android.view.IDisplayWindowRotationController: android.os.IBinder asBinder()>();

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.os.IBinder$DeathRecipient mDisplayRotationControllerDeath>;

        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0);

        r0.<com.android.server.wm.WindowManagerService: android.view.IDisplayWindowRotationController mDisplayRotationController> = r13;

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label05:
        return;

     label06:
        $r10 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r10;

     label09:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to set rotation controller");

        throw $r12;

     label10:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_ACTIVITY_STACKS");

        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch android.os.RemoteException from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch android.os.RemoteException from label08 to label09 with label09;
    }

    public void setDockedStackDividerTouchRegion(android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.DockedStackDividerController $r3;
        java.lang.Throwable $r4;
        android.graphics.Rect r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.graphics.Rect;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController getDockedDividerController()>();

        virtualinvoke $r3.<com.android.server.wm.DockedStackDividerController: void setTouchRegion(android.graphics.Rect)>(r5);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void updateTouchExcludeRegion()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setDockedStackResizing(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.DockedStackDividerController $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController getDockedDividerController()>();

        virtualinvoke $r2.<com.android.server.wm.DockedStackDividerController: void setResizing(boolean)>(z0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        return;
    }

    public void setEventDispatching(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.SecurityException $r3;
        com.android.server.wm.InputManagerCallback $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setEventDispatching()");

        if $z1 == 0 goto label7;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mEventDispatchingEnabled> = z0;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z2 == 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        virtualinvoke $r4.<com.android.server.wm.InputManagerCallback: void setEventDispatchingLw(boolean)>(z0);

     label2:
        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label7:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setFixedToUserRotation(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayRotation $r4;
        java.lang.Throwable $r5;
        com.android.server.wm.DisplayContent r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "freezeRotation()");

        if $z0 == 0 goto label10;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r6 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r6 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Trying to set rotate for app for a missing display.");

        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $r4 = virtualinvoke r6.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayRotation: void setFixedToUserRotation(int)>(i1);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label10:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ORIENTATION permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    void setForceDesktopModeOnExternalDisplays(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mForceDesktopModeOnExternalDisplays> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setForceShowSystemBars(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2, $r5;
        android.content.pm.PackageManager $r3;
        int $i0;
        com.android.server.wm.'-$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM' $r7;
        com.android.internal.util.function.pooled.ArgumentPlaceholder $r8;
        java.lang.Boolean $r9;
        com.android.server.wm.RootWindowContainer $r10;
        java.lang.Throwable $r11;
        com.android.internal.util.function.pooled.PooledConsumer r12;
        java.lang.SecurityException r14;
        java.lang.UnsupportedOperationException r15;
        java.util.function.BiConsumer r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z1 == 0 goto label7;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i0 != 0 goto label6;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r7 = <com.android.server.wm._$$Lambda$XcHmyRxMY5ULhjLiV_sIKnPtvOM: com.android.server.wm.'-$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM' INSTANCE>;

        $r8 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.ArgumentPlaceholder __()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r16 = (java.util.function.BiConsumer) $r7;

        r12 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: com.android.internal.util.function.pooled.PooledConsumer obtainConsumer(java.util.function.BiConsumer,com.android.internal.util.function.pooled.ArgumentPlaceholder,java.lang.Object)>(r16, $r8, $r9);

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r10.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r12);

        interfaceinvoke r12.<com.android.internal.util.function.pooled.PooledConsumer: void recycle()>();

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label6:
        r14 = new java.lang.SecurityException;

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR");

        throw r14;

     label7:
        r15 = new java.lang.UnsupportedOperationException;

        specialinvoke r15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Force showing system bars is only supportedfor Automotive use cases.");

        throw r15;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setForcedDisplayDensityForUser(int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i3, $i4, $i5, i6, i7;
        long l2;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i6 := @parameter2: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i3 != 0 goto label12;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i7 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i4, $i5, i6, 0, 1, "setForcedDisplayDensityForUser", null);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r7 == null goto label05;

     label04:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setForcedDensity(int,int)>(i1, i7);

     label05:
        exitmonitor r6;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void setForcedDisplayScalingMode(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i3;
        long l2;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i3 != 0 goto label12;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r7 == null goto label05;

     label04:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setForcedScalingMode(int)>(i1);

     label05:
        exitmonitor r6;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void setForcedDisplaySize(int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i4;
        long l3;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4, $r5;
        com.android.server.wm.WindowManagerGlobalLock r6;
        com.android.server.wm.DisplayContent r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i4 != 0 goto label12;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r6;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r7 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r7 == null goto label05;

     label04:
        virtualinvoke r7.<com.android.server.wm.DisplayContent: void setForcedSize(int,int)>(i1, i2);

     label05:
        exitmonitor r6;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r4;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public void setForwardedInsets(int, android.graphics.Insets) throws android.os.RemoteException
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;
        android.view.Display $r4;
        java.lang.Throwable $r5;
        android.graphics.Insets r6;
        java.lang.SecurityException r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Insets;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label05:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $i2 = virtualinvoke $r4.<android.view.Display: int getOwnerUid()>();

        if $i1 != $i2 goto label07;

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void setForwardedInsets(android.graphics.Insets)>(r6);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        r7 = new java.lang.SecurityException;

        specialinvoke r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Only owner of the display can set ForwardedInsets to it.");

        throw r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void setHoldScreenLocked(com.android.server.wm.Session)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, z2, $z3;
        com.android.server.wm.RootWindowContainer $r1, $r5, $r9, $r13;
        com.android.server.wm.WindowState $r2, $r6, $r10, $r14;
        com.android.server.policy.WindowManagerPolicy $r3, $r12;
        android.os.PowerManager$WakeLock $r4, $r11, $r19, $r21;
        java.lang.Object[] $r7, $r15;
        com.android.server.wm.ProtoLogGroup $r8, $r16;
        com.android.server.wm.Session $r17, r20;
        android.os.WorkSource $r18;
        int $i0;
        java.lang.String r22, r23;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r20 := @parameter0: com.android.server.wm.Session;

        if r20 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Session mHoldingScreenOn>;

        if $r17 == r20 goto label3;

        $r19 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        $r18 = new android.os.WorkSource;

        $i0 = r20.<com.android.server.wm.Session: int mUid>;

        specialinvoke $r18.<android.os.WorkSource: void <init>(int)>($i0);

        virtualinvoke $r19.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r18);

     label3:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Session mHoldingScreenOn> = r20;

        $r21 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        $z3 = virtualinvoke $r21.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if z2 == $z3 goto label7;

        if z2 == 0 goto label5;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_KEEP_SCREEN_ON_enabled>;

        if $z1 == 0 goto label4;

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r14 = $r13.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow>;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_KEEP_SCREEN_ON>;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r22;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, 2096635066, 0, null, $r15);

     label4:
        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r10 = $r9.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow>;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockHoldingWindow> = $r10;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockObscuringWindow> = null;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void acquire()>();

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r12.<com.android.server.policy.WindowManagerPolicy: void keepScreenOnStartedLw()>();

        goto label7;

     label5:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_KEEP_SCREEN_ON_enabled>;

        if $z0 == 0 goto label6;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r6 = $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow>;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_KEEP_SCREEN_ON>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r23;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -2146181682, 0, null, $r7);

     label6:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockHoldingWindow> = null;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow>;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastWakeLockObscuringWindow> = $r2;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<com.android.server.policy.WindowManagerPolicy: void keepScreenOnStoppedLw()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

     label7:
        return;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.input.InputManagerService $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r3.<com.android.server.input.InputManagerService: void setInTouchMode(boolean)>(z0);

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setInsetsWindow(com.android.server.wm.Session, android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        int i0, $i3;
        android.graphics.Rect r2, r3, $r6, $r7, $r14, $r15;
        android.graphics.Region r4, $r8, $r16;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r5;
        float $f0, $f1, $f2, $f3;
        byte $b2;
        com.android.server.wm.WindowSurfacePlacer $r9;
        com.android.server.wm.AccessibilityController $r10, $r12;
        int[] $r11;
        com.android.server.wm.DisplayContent $r13;
        java.lang.Throwable $r17, $r18;
        com.android.server.wm.Session r19;
        com.android.server.wm.WindowState r20;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r19 := @parameter0: com.android.server.wm.Session;

        r1 := @parameter1: android.view.IWindow;

        i0 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        r3 := @parameter4: android.graphics.Rect;

        r4 := @parameter5: android.graphics.Region;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r5;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r20 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r19, r1, 0);

     label03:
        if r20 == null goto label06;

     label04:
        r20.<com.android.server.wm.WindowState: boolean mGivenInsetsPending> = 0;

        $r6 = r20.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        $r7 = r20.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        virtualinvoke $r7.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

        $r8 = r20.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        virtualinvoke $r8.<android.graphics.Region: boolean set(android.graphics.Region)>(r4);

        r20.<com.android.server.wm.WindowState: int mTouchableInsets> = i0;

        $f0 = r20.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b2 = $f0 cmpl 1.0F;

        if $b2 == 0 goto label05;

        $r14 = r20.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        $f1 = r20.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r14.<android.graphics.Rect: void scale(float)>($f1);

        $r15 = r20.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        $f2 = r20.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r15.<android.graphics.Rect: void scale(float)>($f2);

        $r16 = r20.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        $f3 = r20.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r16.<android.graphics.Region: void scale(float)>($f3);

     label05:
        virtualinvoke r20.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r9.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r10 == null goto label06;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r11 = newarray (int)[1];

        $r13 = virtualinvoke r20.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i3 = virtualinvoke $r13.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r11[0] = $i3;

        virtualinvoke $r12.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r11);

     label06:
        exitmonitor r5;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r17 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r17;

     label12:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    void setIsPc(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mIsPc> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setKeyguardGoingAway(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mKeyguardGoingAway> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setKeyguardOrAodShowingOnDefaultDisplay(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mKeyguardOrAodShowingOnDefaultDisplay> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setLayerTracing(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        long l0;
        android.os.IBinder r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        java.lang.Throwable $r3, $r4;
        android.os.RemoteException $r5;
        android.os.Parcel r6, r7, r8;
        byte b1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "setLayerTracing");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r6 = null;

        r7 = null;

        r8 = null;

     label01:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

     label02:
        if r1 == null goto label12;

        r7 = null;

        r8 = null;

     label03:
        r6 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label04:
        r7 = r6;

        r8 = r6;

     label05:
        virtualinvoke r6.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

     label06:
        if z0 == 0 goto label07;

        b1 = 1;

        goto label08;

     label07:
        b1 = 0;

     label08:
        r7 = r6;

        r8 = r6;

     label09:
        virtualinvoke r6.<android.os.Parcel: void writeInt(int)>(b1);

     label10:
        r7 = r6;

        r8 = r6;

     label11:
        interfaceinvoke r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1025, r6, null, 0);

     label12:
        if r6 == null goto label19;

        r8 = r6;

     label13:
        virtualinvoke r8.<android.os.Parcel: void recycle()>();

     label14:
        goto label19;

     label15:
        $r4 := @caughtexception;

        goto label20;

     label16:
        $r5 := @caughtexception;

        r7 = r8;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Failed to set layer tracing");

     label18:
        if r8 == null goto label19;

        goto label13;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label20:
        if r7 == null goto label22;

     label21:
        virtualinvoke r7.<android.os.Parcel: void recycle()>();

     label22:
        throw $r4;

     label23:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label16;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch android.os.RemoteException from label05 to label06 with label16;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch android.os.RemoteException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
    }

    public void setLayerTracingFlags(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        long l1;
        android.os.IBinder r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4, $r5;
        android.os.Parcel r6, r7, r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "setLayerTracingFlags");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r6 = null;

        r7 = null;

     label01:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

     label02:
        r7 = null;

        if r1 == null goto label11;

        r6 = null;

        r7 = null;

     label03:
        r8 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label04:
        r6 = r8;

        r7 = r8;

     label05:
        virtualinvoke r8.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

     label06:
        r6 = r8;

        r7 = r8;

     label07:
        virtualinvoke r8.<android.os.Parcel: void writeInt(int)>(i0);

     label08:
        r6 = r8;

        r7 = r8;

     label09:
        interfaceinvoke r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1033, r8, null, 0);

     label10:
        r7 = r8;

     label11:
        if r7 == null goto label18;

     label12:
        virtualinvoke r7.<android.os.Parcel: void recycle()>();

     label13:
        goto label18;

     label14:
        $r5 := @caughtexception;

        goto label19;

     label15:
        $r3 := @caughtexception;

        r6 = r7;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Failed to set layer tracing flags");

     label17:
        if r7 == null goto label18;

        goto label12;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label19:
        if r6 == null goto label21;

     label20:
        virtualinvoke r6.<android.os.Parcel: void recycle()>();

     label21:
        throw $r5;

     label22:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r3;
        int $i0;
        java.lang.SecurityException $r4;
        com.android.server.policy.WindowManagerPolicy $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i0 != 0 goto label6;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: void setNavBarVirtualKeyHapticFeedbackEnabledLw(boolean)>(z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label6:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setNewDisplayOverrideConfiguration(android.content.res.Configuration, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.DisplayContent r2;
        boolean $z0;
        com.android.server.wm.RootWindowContainer $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        $z0 = r2.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        if $z0 == 0 goto label1;

        r2.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "new-config";

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void setDisplayOverrideConfigurationIfNeeded(android.content.res.Configuration,com.android.server.wm.DisplayContent)>(r1, r2);

        return;
    }

    void setOverrideFoldedArea(android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2;
        int $i1;
        java.lang.SecurityException $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        java.lang.Throwable $r5, $r6;
        android.graphics.Rect r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i1 != 0 goto label9;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void setOverrideFoldedArea(android.graphics.Rect)>(r7);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label8:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

     label9:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void setPipVisibility(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r3;
        int $i0;
        java.lang.SecurityException $r4;
        com.android.server.policy.WindowManagerPolicy $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i0 != 0 goto label6;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: void setPipVisibilityLw(boolean)>(z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

     label6:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setRecentsAnimationController(com.android.server.wm.RecentsAnimationController)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.RecentsAnimationController r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.RecentsAnimationController;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController mRecentsAnimationController> = r1;

        return;
    }

    public void setRecentsVisibility(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityTaskManagerInternal $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: void enforceCallerIsRecentsOrHasPermission(java.lang.String,java.lang.String)>("android.permission.STATUS_BAR", "setRecentsVisibility()");

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void setRecentsVisibilityLw(boolean)>(z0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setRemoveContentMode(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        long l2, l3;
        boolean $z0, $z1;
        java.lang.SecurityException $r1;
        com.android.server.wm.DisplayWindowSettings $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.Long $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.wm.WindowManagerGlobalLock r8;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "setRemoveContentMode()");

        if $z0 == 0 goto label16;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r8;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r9 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

     label03:
        if r9 != null goto label09;

     label04:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label07;

     label05:
        l3 = (long) i0;

     label06:
        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r3[0] = $r5;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 288485303, 1, "Attempted to set remove mode to a display that does not exist: %d", $r3);

     label07:
        exitmonitor r8;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label09:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: void setRemoveContentModeLocked(com.android.server.wm.DisplayContent,int)>(r9, i1);

        virtualinvoke r9.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        exitmonitor r8;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r8;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label15:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r6;

     label16:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void setShellRootAccessibilityWindow(int, int, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i3;
        long l2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7, $r8;
        android.view.IWindow r9;
        com.android.server.wm.DisplayContent r10;
        com.android.server.wm.ShellRoot r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 := @parameter2: android.view.IWindow;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_APP_TOKENS");

        if $i3 != 0 goto label17;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r10 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label03:
        if r10 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label06:
        $r5 = r10.<com.android.server.wm.DisplayContent: android.util.SparseArray mShellRoots>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r11 = (com.android.server.wm.ShellRoot) $r6;

     label07:
        if r11 != null goto label10;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label10:
        virtualinvoke r11.<com.android.server.wm.ShellRoot: void setAccessibilityWindow(android.view.IWindow)>(r9);

        exitmonitor r1;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label16:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r8;

     label17:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_APP_TOKENS");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public void setShouldShowIme(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean z0, $z1, $z2, $z3;
        long l1, l2;
        java.lang.SecurityException r1, $r2;
        java.lang.String $r5;
        com.android.server.wm.DisplayWindowSettings $r6;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.Long $r9;
        java.lang.Throwable $r10, $r11;
        com.android.server.wm.WindowManagerGlobalLock r12;
        com.android.server.wm.DisplayContent r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "setShouldShowIme()");

        if $z1 == 0 goto label17;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r12;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r13 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

     label03:
        if r13 != null goto label09;

     label04:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label07;

     label05:
        l2 = (long) i0;

     label06:
        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r7[0] = $r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 91350919, 1, "Attempted to set IME flag to a display that does not exist: %d", $r7);

     label07:
        exitmonitor r12;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $z2 = virtualinvoke r13.<com.android.server.wm.DisplayContent: boolean isTrusted()>();

        if $z2 == 0 goto label12;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r6.<com.android.server.wm.DisplayWindowSettings: void setShouldShowImeLocked(com.android.server.wm.DisplayContent,boolean)>(r13, z0);

        virtualinvoke r13.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        exitmonitor r12;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        r1 = new java.lang.SecurityException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set IME flag to an untrusted virtual display: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw r1;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label16:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

     label17:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public void setShouldShowSystemDecors(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean z0, $z1, $z2, $z3;
        long l1, l2;
        java.lang.SecurityException r1, $r2;
        java.lang.String $r5;
        com.android.server.wm.DisplayWindowSettings $r6;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.Long $r9;
        java.lang.Throwable $r10, $r11;
        com.android.server.wm.WindowManagerGlobalLock r12;
        com.android.server.wm.DisplayContent r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "setShouldShowSystemDecors()");

        if $z1 == 0 goto label17;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r12;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r13 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

     label03:
        if r13 != null goto label09;

     label04:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label07;

     label05:
        l2 = (long) i0;

     label06:
        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r7[0] = $r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -386552155, 1, "Attempted to set system decors flag to a display that does not exist: %d", $r7);

     label07:
        exitmonitor r12;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $z2 = virtualinvoke r13.<com.android.server.wm.DisplayContent: boolean isTrusted()>();

        if $z2 == 0 goto label12;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r6.<com.android.server.wm.DisplayWindowSettings: void setShouldShowSystemDecorsLocked(com.android.server.wm.DisplayContent,boolean)>(r13, z0);

        virtualinvoke r13.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        exitmonitor r12;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        r1 = new java.lang.SecurityException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set system decors flag to an untrusted virtual display: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw r1;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label16:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

     label17:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public void setShouldShowWithInsecureKeyguard(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean z0, $z1, $z2;
        long l1, l2;
        java.lang.SecurityException $r1;
        com.android.server.wm.DisplayWindowSettings $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.Long $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.wm.WindowManagerGlobalLock r8;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "setShouldShowWithInsecureKeyguard()");

        if $z1 == 0 goto label16;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r8;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r9 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i0, null);

     label03:
        if r9 != null goto label09;

     label04:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label07;

     label05:
        l2 = (long) i0;

     label06:
        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r3[0] = $r5;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 1521476038, 1, "Attempted to set flag to a display that does not exist: %d", $r3);

     label07:
        exitmonitor r8;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: void setShouldShowWithInsecureKeyguardLocked(com.android.server.wm.DisplayContent,boolean)>(r9, z0);

        virtualinvoke r9.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        exitmonitor r8;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r8;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label15:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label16:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void setStrictModeVisualIndicatorPreference(java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.strictmode.visual", r1);

        return;
    }

    public void setSwitchingUser(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.SecurityException $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "setSwitchingUser()");

        if $z1 == 0 goto label6;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: void setSwitchingUser(boolean)>(z0);

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mSwitchingUser> = z0;

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERACT_ACROSS_USERS_FULL permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setTransparentRegionWindow(com.android.server.wm.Session, android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Region r1;
        long l0;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowState r3;
        boolean $z0, $z1;
        com.android.server.wm.WindowStateAnimator $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Throwable $r7, $r8;
        com.android.server.wm.Session r9;
        android.view.IWindow r10;
        java.lang.String r11, r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r9 := @parameter0: com.android.server.wm.Session;

        r10 := @parameter1: android.view.IWindow;

        r1 := @parameter2: android.graphics.Region;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r9, r10, 0);

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z0 == 0 goto label03;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r11;

        $r5[1] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -856025122, 0, null, $r5);

     label03:
        if r3 == null goto label05;

     label04:
        $z1 = r3.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z1 == 0 goto label05;

        $r4 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: void setTransparentRegionHintLocked(android.graphics.Region)>(r1);

     label05:
        exitmonitor r2;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label11:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    void setWillReplaceWindow(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.Object[] $r3, $r5;
        com.android.server.wm.ProtoLogGroup $r4, $r6;
        android.os.IBinder r7;
        java.lang.String r8, r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r7);

        if r1 != null goto label2;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label1;

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r8;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, -1661704580, 0, "Attempted to set replacing window on non-existing app token %s", $r5);

     label1:
        return;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean hasContentToDisplay()>();

        if $z1 != 0 goto label4;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label3;

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -1270731689, 0, "Attempted to set replacing window on app token with no content %s", $r3);

     label3:
        return;

     label4:
        virtualinvoke r1.<com.android.server.wm.ActivityRecord: void setWillReplaceWindows(boolean)>(z0);

        return;
    }

    void setWillReplaceWindows(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.ActivityRecord r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Object[] $r4, $r6;
        com.android.server.wm.ProtoLogGroup $r5, $r7;
        java.lang.Throwable $r8;
        android.os.IBinder r9;
        java.lang.String r10, r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r9 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r9);

     label02:
        if r2 != null goto label06;

     label03:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label04;

        r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r9);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r10;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1661704580, 0, "Attempted to set replacing window on non-existing app token %s", $r6);

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        $z1 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean hasContentToDisplay()>();

        if $z1 != 0 goto label09;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label07;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r9);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -1270731689, 0, "Attempted to set replacing window on app token with no content %s", $r4);

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label09:
        if z0 == 0 goto label12;

     label10:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void setWillReplaceChildWindows()>();

     label11:
        goto label13;

     label12:
        virtualinvoke r2.<com.android.server.wm.ActivityRecord: void setWillReplaceWindows(boolean)>(0);

     label13:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleClearWillReplaceWindows(android.os.IBinder,boolean)>(r9, 1);

        exitmonitor r1;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label15:
        $r8 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    void setWindowOpaqueLocked(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.RootWindowContainer $r1;
        android.os.IBinder r2;
        com.android.server.wm.ActivityRecord r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r2 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r3 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityRecord getActivityRecord(android.os.IBinder)>(r2);

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.wm.ActivityRecord: void setMainWindowOpaque(boolean)>(z0);

     label1:
        return;
    }

    public void setWindowingMode(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i3, i4, i5;
        long l1, l2;
        boolean $z0, $z1;
        java.lang.SecurityException $r1;
        com.android.server.wm.DisplayWindowSettings $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.Long $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.wm.WindowManagerGlobalLock r8;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "setWindowingMode()");

        if $z0 == 0 goto label17;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r8;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r9 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentOrCreate(int,android.os.IBinder)>(i4, null);

     label03:
        if r9 != null goto label09;

     label04:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label07;

     label05:
        l2 = (long) i4;

     label06:
        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r3[0] = $r5;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -1838803135, 1, "Attempted to set windowing mode to a display that does not exist: %d", $r3);

     label07:
        exitmonitor r8;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        i5 = virtualinvoke r9.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        virtualinvoke $r2.<com.android.server.wm.DisplayWindowSettings: void setWindowingModeLocked(com.android.server.wm.DisplayContent,int)>(r9, i0);

        virtualinvoke r9.<com.android.server.wm.DisplayContent: void reconfigureDisplayLocked()>();

        $i3 = virtualinvoke r9.<com.android.server.wm.DisplayContent: int getWindowingMode()>();

        if i5 == $i3 goto label10;

        virtualinvoke r9.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

        virtualinvoke r9.<com.android.server.wm.DisplayContent: void executeAppTransition()>();

     label10:
        exitmonitor r8;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r8;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label16:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label17:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public boolean shouldShowIme(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        long l1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        boolean z0, $z1, $z2;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "shouldShowIme()");

        if $z1 == 0 goto label8;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        if r8 != null goto label2;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label1;

        l1 = (long) i0;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[0] = $r6;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 95281111, 1, "Attempted to get IME flag of a display that does not exist: %d", $r4);

     label1:
        return 0;

     label2:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        z0 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean canShowIme()>();

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label8:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean shouldShowSystemDecors(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        boolean z0, $z1, $z2;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7;
        com.android.server.wm.DisplayContent r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "shouldShowSystemDecors()");

        if $z1 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r8 != null goto label08;

     label03:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label06;

     label04:
        l1 = (long) i0;

     label05:
        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[0] = $r6;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 11060725, 1, "Attempted to get system decors flag of a display that does not exist: %d", $r4);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label08:
        z0 = virtualinvoke r8.<com.android.server.wm.DisplayContent: boolean supportsSystemDecorations()>();

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean shouldShowWithInsecureKeyguard(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l1;
        boolean z0, $z1, $z2;
        java.lang.SecurityException $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.DisplayWindowSettings $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        java.lang.Long $r7;
        java.lang.Throwable $r8;
        com.android.server.wm.DisplayContent r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "shouldShowWithInsecureKeyguard()");

        if $z1 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r9 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r9 != null goto label08;

     label03:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label06;

     label04:
        l1 = (long) i0;

     label05:
        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r5[0] = $r7;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1434383382, 1, "Attempted to get flag of a display that does not exist: %d", $r5);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return 0;

     label08:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowSettings mDisplayWindowSettings>;

        z0 = virtualinvoke $r4.<com.android.server.wm.DisplayWindowSettings: boolean shouldShowWithInsecureKeyguardLocked(com.android.server.wm.DisplayContent)>(r9);

        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return z0;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void showBootMessage(java.lang.CharSequence, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, z8;
        com.android.server.wm.WindowManagerGlobalLock r1;
        java.lang.Throwable $r2, $r9, $r10, r16;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        java.lang.Boolean $r5, $r6, $r7, $r8;
        java.lang.CharSequence r11;
        java.lang.String r12, r14;
        java.lang.RuntimeException r13;
        com.android.server.policy.WindowManagerPolicy r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        z8 = 0;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_BOOT_enabled>;

        if $z4 == 0 goto label02;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);

        z1 = r0.<com.android.server.wm.WindowManagerService: boolean mAllowBootMessages>;

        z2 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        r13 = new java.lang.RuntimeException;

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r2 = virtualinvoke r13.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_BOOT>;

        $r3 = newarray (java.lang.Object)[6];

        $r3[0] = r12;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r3[4] = $r8;

        $r3[5] = r14;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -874446906, 1020, null, $r3);

     label02:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mAllowBootMessages>;

        if $z5 != 0 goto label04;

        exitmonitor r1;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label04:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z6 != 0 goto label09;

     label05:
        if z0 != 0 goto label08;

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        z8 = 1;

     label09:
        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z7 == 0 goto label11;

        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label11:
        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 1;

        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

     label12:
        interfaceinvoke r15.<com.android.server.policy.WindowManagerPolicy: void showBootMessage(java.lang.CharSequence,boolean)>(r11, z0);

        exitmonitor r1;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if z8 == 0 goto label14;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

     label14:
        return;

     label15:
        $r9 := @caughtexception;

        r16 = $r9;

     label16:
        exitmonitor r1;

     label17:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r16;

     label18:
        $r10 := @caughtexception;

        r16 = $r10;

        goto label16;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    public void showEmulatorDisplayOverlay()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.EmulatorDisplayOverlay $r2, $r4, r12;
        android.view.SurfaceControl$Transaction $r3, $r5, $r10;
        java.util.function.Supplier $r6;
        android.content.Context $r7;
        com.android.server.wm.DisplayContent $r8;
        com.android.server.policy.WindowManagerPolicy $r9;
        int $i0, $i1, $i2;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        if $r2 != null goto label2;

        r12 = new com.android.server.wm.EmulatorDisplayOverlay;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mSurfaceFactory>;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r9.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerFromTypeLw(int)>(2018);

        $i1 = $i0 * 10000;

        $i2 = $i1 + 10;

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        specialinvoke r12.<com.android.server.wm.EmulatorDisplayOverlay: void <init>(java.util.function.Supplier,android.content.Context,com.android.server.wm.DisplayContent,int,android.view.SurfaceControl$Transaction)>($r6, $r7, $r8, $i2, $r10);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay> = r12;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r4.<com.android.server.wm.EmulatorDisplayOverlay: void setVisibility(boolean,android.view.SurfaceControl$Transaction)>(1, $r3);

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r11 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void showEmulatorDisplayOverlayIfNeeded()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$H r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        boolean $z0, $z1, $z2;
        android.os.Message $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891592);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.emulator.circular", 0);

        if $z1 == 0 goto label1;

        $z2 = <android.os.Build: boolean IS_EMULATOR>;

        if $z2 == 0 goto label1;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int)>(36);

        virtualinvoke r1.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r4);

     label1:
        return;
    }

    public void showGlobalActions()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        java.lang.SecurityException $r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "showGlobalActions()");

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void showGlobalActions()>();

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r1;
    }

    public void showRecentApps()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.policy.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: void showRecentApps()>();

        return;
    }

    public void showStrictModeViolation(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        int i0;
        android.os.Message $r1, $r2, $r3;
        com.android.server.wm.WindowManagerService$H r4, r5, r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if z0 == 0 goto label1;

        r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r2 = virtualinvoke r4.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(25, 1, i0);

        virtualinvoke r4.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r2);

        r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke r5.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(25, 0, i0);

        virtualinvoke r5.<com.android.server.wm.WindowManagerService$H: boolean sendMessageDelayed(android.os.Message,long)>($r3, 1000L);

        goto label2;

     label1:
        r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r1 = virtualinvoke r6.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(25, 0, i0);

        virtualinvoke r6.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r1);

     label2:
        return;
    }

    public void shutdown(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.app.ActivityThread $r1;
        android.app.ContextImpl $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>();

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.app.ContextImpl getSystemUiContext()>();

        staticinvoke <com.android.server.power.ShutdownThread: void shutdown(android.content.Context,java.lang.String,boolean)>($r2, "userrequested", z0);

        return;
    }

    void startFreezingDisplay(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int,com.android.server.wm.DisplayContent)>(i0, i1, $r1);

        return;
    }

    void startFreezingDisplay(int, int, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.DisplayContent r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.DisplayContent;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int,com.android.server.wm.DisplayContent,int)>(i0, i1, r1, -1);

        return;
    }

    void startFreezingDisplay(int, int, com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i5, i6, i7;
        com.android.server.wm.DisplayContent r1;
        long l2, l3, $l4;
        java.lang.String r2, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.wm.DisplayRotation $r3;
        com.android.server.policy.WindowManagerPolicy $r4;
        android.os.PowerManager$WakeLock $r5;
        com.android.server.wm.InputManagerCallback $r6;
        com.android.server.wm.AppTransition $r7, $r11;
        com.android.internal.util.LatencyTracker $r8;
        android.view.DisplayInfo $r9;
        com.android.server.wm.ScreenRotationAnimation $r10;
        java.lang.Object[] $r13;
        com.android.server.wm.ProtoLogGroup $r14;
        java.lang.Long $r15, $r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.wm.DisplayContent;

        i1 := @parameter3: int;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label8;

        $r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        $z1 = virtualinvoke $r3.<com.android.server.wm.DisplayRotation: boolean isRotatingSeamlessly()>();

        if $z1 == 0 goto label1;

        goto label8;

     label1:
        $z2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isReady()>();

        if $z2 == 0 goto label7;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $z3 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: boolean isScreenOn()>();

        if $z3 == 0 goto label7;

        $z4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean okToAnimate()>();

        if $z4 != 0 goto label2;

        goto label7;

     label2:
        $z5 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z5 == 0 goto label3;

        l2 = (long) i6;

        l3 = (long) i0;

        $r12 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(8);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r14 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r13 = newarray (java.lang.Object)[3];

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r13[0] = $r15;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r13[1] = $r16;

        $r13[2] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r14, 9803449, 5, null, $r13);

     label3:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void acquire()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 1;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime> = $l4;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = null;

        $i5 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        r0.<com.android.server.wm.WindowManagerService: int mFrozenDisplayId> = $i5;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        virtualinvoke $r6.<com.android.server.wm.InputManagerCallback: void freezeInputDispatchingLw()>();

        $r7 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z6 = virtualinvoke $r7.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z6 == 0 goto label4;

        $r11 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r11.<com.android.server.wm.AppTransition: void freeze()>();

     label4:
        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.internal.util.LatencyTracker mLatencyTracker>;

        virtualinvoke $r8.<com.android.internal.util.LatencyTracker: void onActionStart(int)>(6);

        r0.<com.android.server.wm.WindowManagerService: int mExitAnimId> = i6;

        r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId> = i0;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void updateDisplayInfo()>();

        if i1 == -1 goto label5;

        i7 = i1;

        goto label6;

     label5:
        $r9 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i7 = $r9.<android.view.DisplayInfo: int rotation>;

     label6:
        $r10 = new com.android.server.wm.ScreenRotationAnimation;

        specialinvoke $r10.<com.android.server.wm.ScreenRotationAnimation: void <init>(com.android.server.wm.DisplayContent,int)>(r1, i7);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setRotationAnimation(com.android.server.wm.ScreenRotationAnimation)>($r10);

        return;

     label7:
        return;

     label8:
        return;
    }

    public void startFreezingScreen(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l2;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        com.android.server.wm.WindowManagerService$H $r3, $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FREEZE_SCREEN", "startFreezingScreen()");

        if $z0 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z1 != 0 goto label08;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 1;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplay(int,int)>(i0, i1);

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(30);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(30, 5000L);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label04:
        goto label08;

     label05:
        $r6 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label07:
        throw $r6;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FREEZE_SCREEN permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean startViewServer(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        com.android.server.wm.ViewServer $r1, r8, r10;
        java.lang.Throwable $r2, $r5;
        java.lang.Object[] $r3, $r6;
        com.android.server.wm.ProtoLogGroup $r4, $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "startViewServer");

        if $z1 != 0 goto label02;

        return 0;

     label02:
        if i0 >= 1024 goto label03;

        return 0;

     label03:
        r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        if r8 == null goto label08;

        $z2 = virtualinvoke r8.<com.android.server.wm.ViewServer: boolean isRunning()>();

        if $z2 != 0 goto label07;

     label04:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        z5 = virtualinvoke $r1.<com.android.server.wm.ViewServer: boolean start()>();

     label05:
        return z5;

     label06:
        $r2 := @caughtexception;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label07;

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r3 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -1545962566, 0, "View server did not start", $r3);

     label07:
        return 0;

     label08:
        r10 = new com.android.server.wm.ViewServer;

        specialinvoke r10.<com.android.server.wm.ViewServer: void <init>(com.android.server.wm.WindowManagerService,int)>(r0, i0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer> = r10;

        z6 = virtualinvoke r10.<com.android.server.wm.ViewServer: boolean start()>();

     label09:
        return z6;

     label10:
        $r5 := @caughtexception;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z4 == 0 goto label11;

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r6 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1545962566, 0, "View server did not start", $r6);

     label11:
        return 0;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public void startWindowTrace()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowTracing $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing>;

        virtualinvoke $r1.<com.android.server.wm.WindowTracing: void startTrace(java.io.PrintWriter)>(null);

        return;
    }

    public void statusBarVisibilityChanged(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        com.android.server.wm.RootWindowContainer $r4;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        com.android.server.wm.DisplayContent r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i2 != 0 goto label11;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r9 = virtualinvoke $r4.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label02:
        if r9 == null goto label05;

     label03:
        virtualinvoke r9.<com.android.server.wm.DisplayContent: void statusBarVisibilityChanged(int)>(i1);

     label04:
        goto label06;

     label05:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("statusBarVisibilityChanged with invalid displayId=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label11:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void stopFreezingDisplayLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        android.view.DisplayInfo r2;
        long l0, l1, l2, $l8, $l9, $l10, $l13;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, z16, z17, z18, $z19;
        int $i3, $i4, $i5, $i6, $i7, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Object[] $r4, $r19, $r24, $r27, $r32;
        com.android.server.wm.ProtoLogGroup $r5, $r20, $r25, $r28, $r33;
        java.lang.Boolean $r6, $r7, $r10;
        java.lang.Long $r8, $r9, $r11;
        com.android.server.wm.InputManagerCallback $r12;
        java.lang.StringBuilder $r13;
        java.lang.Object $r15, $r30;
        com.android.server.wm.WindowManagerService$H $r16, $r17, $r39, $r40;
        com.android.internal.util.LatencyTracker $r18;
        com.android.server.wm.DisplayRotation $r21, $r35;
        android.view.SurfaceControl$Transaction $r22, $r23;
        float $f0;
        java.lang.String $r26, r37;
        android.util.ArraySet $r34;
        com.android.server.wm.ScreenRotationAnimation r38;
        android.os.PowerManager$WakeLock $r41;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 != 0 goto label01;

        return;

     label01:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $i3 = r0.<com.android.server.wm.WindowManagerService: int mFrozenDisplayId>;

        r1 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>($i3);

        if r1 == null goto label02;

        $r34 = r1.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        i20 = virtualinvoke $r34.<android.util.ArraySet: int size()>();

        z13 = r1.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        $r35 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        z14 = virtualinvoke $r35.<com.android.server.wm.DisplayRotation: boolean isWaitingForRemoteRotation()>();

        goto label03;

     label02:
        z14 = 0;

        z13 = 0;

        i20 = 0;

     label03:
        if z13 != 0 goto label22;

        if z14 != 0 goto label22;

        $i6 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        if $i6 > 0 goto label22;

        $i7 = r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i7 == 1 goto label22;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z2 != 0 goto label22;

        if i20 <= 0 goto label04;

        goto label22;

     label04:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label05;

        $r33 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r32 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r33, 355720268, 0, null, $r32);

     label05:
        r0.<com.android.server.wm.WindowManagerService: int mFrozenDisplayId> = -1;

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 0;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputManagerCallback mInputManagerCallback>;

        virtualinvoke $r12.<com.android.server.wm.InputManagerCallback: void thawInputDispatchingLw()>();

        $l8 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l9 = r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l10 = $l8 - $l9;

        $i11 = (int) $l10;

        r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration> = $i11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen frozen for ");

        $i12 = r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration>;

        $l13 = (long) $i12;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l13, $r13);

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        if $r15 == null goto label06;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

     label06:
        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z4 == 0 goto label07;

        $r26 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        $r28 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = r37;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r28, -583031528, 0, "%s", $r27);

     label07:
        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r16.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(17);

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(30);

        z15 = 0;

        if r1 != null goto label08;

        r38 = null;

        goto label09;

     label08:
        r38 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

     label09:
        if r38 == null goto label14;

        $z9 = virtualinvoke r38.<com.android.server.wm.ScreenRotationAnimation: boolean hasScreenshot()>();

        if $z9 == 0 goto label14;

        $z10 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z10 == 0 goto label10;

        $r25 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r24 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r25, 1634557978, 0, null, $r24);

     label10:
        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r21 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        $i15 = r0.<com.android.server.wm.WindowManagerService: int mExitAnimId>;

        $i14 = r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId>;

        $z11 = virtualinvoke $r21.<com.android.server.wm.DisplayRotation: boolean validateRotationAnimation(int,int,boolean)>($i15, $i14, 0);

        if $z11 != 0 goto label11;

        r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mExitAnimId> = 0;

     label11:
        $r22 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        $f0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: float getTransitionAnimationScaleLocked()>();

        $i19 = r2.<android.view.DisplayInfo: int logicalWidth>;

        $i18 = r2.<android.view.DisplayInfo: int logicalHeight>;

        $i17 = r0.<com.android.server.wm.WindowManagerService: int mExitAnimId>;

        $i16 = r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId>;

        $z12 = virtualinvoke r38.<com.android.server.wm.ScreenRotationAnimation: boolean dismiss(android.view.SurfaceControl$Transaction,long,float,int,int,int,int)>($r22, 10000L, $f0, $i19, $i18, $i17, $i16);

        if $z12 == 0 goto label12;

        $r23 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r23.<android.view.SurfaceControl$Transaction: void apply()>();

        goto label13;

     label12:
        virtualinvoke r38.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setRotationAnimation(com.android.server.wm.ScreenRotationAnimation)>(null);

        z15 = 1;

     label13:
        z16 = z15;

        goto label16;

     label14:
        if r38 == null goto label15;

        virtualinvoke r38.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setRotationAnimation(com.android.server.wm.ScreenRotationAnimation)>(null);

     label15:
        z16 = 1;

     label16:
        if r1 == null goto label17;

        $z8 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        if $z8 == 0 goto label17;

        z17 = 1;

        goto label18;

     label17:
        z17 = 0;

     label18:
        $r39 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r39.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(15);

        $r40 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r40.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(15, 2000L);

        $r41 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r41.<android.os.PowerManager$WakeLock: void release()>();

        z18 = z17;

        if z16 == 0 goto label20;

        z18 = z17;

        if r1 == null goto label20;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z6 == 0 goto label19;

        $r20 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r19 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r20, -783405930, 0, null, $r19);

     label19:
        $z7 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean updateRotationUnchecked()>();

        z18 = z17 | $z7;

     label20:
        if z18 == 0 goto label21;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label21:
        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.internal.util.LatencyTracker mLatencyTracker>;

        virtualinvoke $r18.<com.android.internal.util.LatencyTracker: void onActionEnd(int)>(6);

        return;

     label22:
        $z19 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z19 == 0 goto label23;

        $i4 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        l0 = (long) $i4;

        $i5 = r0.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        l1 = (long) $i5;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        l2 = (long) i20;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r4 = newarray (java.lang.Object)[6];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z13);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z14);

        $r4[1] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4[2] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[3] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4[4] = $r10;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r4[5] = $r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 1246035185, 1887, null, $r4);

        goto label23;

     label23:
        return;
    }

    public void stopFreezingScreen()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l0;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FREEZE_SCREEN", "stopFreezingScreen()");

        if $z0 == 0 goto label13;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z1 == 0 goto label08;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "client";

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label04:
        goto label08;

     label05:
        $r4 := @caughtexception;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label07:
        throw $r4;

     label08:
        exitmonitor r1;

     label09:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FREEZE_SCREEN permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean stopViewServer()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.ViewServer r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "stopViewServer");

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        if r1 == null goto label3;

        $z2 = virtualinvoke r1.<com.android.server.wm.ViewServer: boolean stop()>();

        return $z2;

     label3:
        return 0;
    }

    public void stopWindowTrace()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowTracing $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowTracing mWindowTracing>;

        virtualinvoke $r1.<com.android.server.wm.WindowTracing: void stopTrace(java.io.PrintWriter)>(null);

        return;
    }

    public void switchKeyboardLayout(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r1.<com.android.server.input.InputManagerService: void switchKeyboardLayout(int,int)>(i0, i1);

        return;
    }

    public void syncInputTransactions()
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        com.android.server.wm.RootWindowContainer r1;
        com.android.server.wm._$$Lambda$WindowManagerService$RK9Sd9VCmkCKKEWvwMhIRZTx9Jg r2;
        java.util.function.Supplier $r3;
        java.lang.Object $r4;
        com.android.server.wm.WindowSurfacePlacer $r5;
        android.view.SurfaceControl$Transaction $r6, r9;
        java.lang.Throwable $r7, $r8;
        com.android.server.wm.WindowManagerGlobalLock r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void waitForAnimationsToComplete()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r4 = interfaceinvoke $r3.<java.util.function.Supplier: java.lang.Object get()>();

        r9 = (android.view.SurfaceControl$Transaction) $r4;

        r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r10;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r5.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacementIfScheduled()>();

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = new com.android.server.wm._$$Lambda$WindowManagerService$RK9Sd9VCmkCKKEWvwMhIRZTx9Jg;

        specialinvoke r2.<com.android.server.wm._$$Lambda$WindowManagerService$RK9Sd9VCmkCKKEWvwMhIRZTx9Jg: void <init>(android.view.SurfaceControl$Transaction)>(r9);

        virtualinvoke r1.<com.android.server.wm.RootWindowContainer: void forAllDisplays(java.util.function.Consumer)>(r2);

        exitmonitor r10;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $r6 = virtualinvoke r9.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction syncInputWindows()>();

        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: void apply()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r10;

     label7:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void systemReady()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.policy.WindowManagerPolicy $r1;
        com.android.server.wm.'-$$Lambda$cJE-iQ28Rv-ThCcuht9wXeFzPgo' $r2;
        com.android.server.wm.RootWindowContainer $r3;
        com.android.server.wm.TaskSnapshotController $r4;
        android.os.IBinder $r7;
        android.service.vr.IVrStateCallbacks $r8, $r9;
        android.os.RemoteException $r10;
        java.lang.Throwable $r11;
        android.os.Handler r12;
        com.android.server.wm.WindowManagerService$SettingsObserver r13;
        android.service.vr.IVrManager r14;
        com.android.server.wm.WindowManagerGlobalLock r15;
        com.android.server.wm._$$Lambda$saxKzkaCgueXiijz1VFL4g_SiV0 r18;
        java.util.function.Consumer r19;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService: boolean mSystemReady> = 1;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<com.android.server.policy.WindowManagerPolicy: void systemReady()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2 = <com.android.server.wm._$$Lambda$cJE_iQ28Rv_ThCcuht9wXeFzPgo: com.android.server.wm.'-$$Lambda$cJE-iQ28Rv-ThCcuht9wXeFzPgo' INSTANCE>;

        r19 = (java.util.function.Consumer) $r2;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: void forAllDisplayPolicies(java.util.function.Consumer)>(r19);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.TaskSnapshotController mTaskSnapshotController>;

        virtualinvoke $r4.<com.android.server.wm.TaskSnapshotController: void systemReady()>();

        $z1 = staticinvoke <com.android.server.wm.WindowManagerService: boolean queryWideColorGamutSupport()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mHasWideColorGamutSupport> = $z1;

        $z2 = staticinvoke <com.android.server.wm.WindowManagerService: boolean queryHdrSupport()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mHasHdrSupport> = $z2;

        r12 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r13);

        r18 = new com.android.server.wm._$$Lambda$saxKzkaCgueXiijz1VFL4g_SiV0;

        specialinvoke r18.<com.android.server.wm._$$Lambda$saxKzkaCgueXiijz1VFL4g_SiV0: void <init>(com.android.server.wm.WindowManagerService$SettingsObserver)>(r13);

        virtualinvoke r12.<android.os.Handler: boolean post(java.lang.Runnable)>(r18);

        $r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("vrmanager");

        r14 = staticinvoke <android.service.vr.IVrManager$Stub: android.service.vr.IVrManager asInterface(android.os.IBinder)>($r7);

        if r14 == null goto label12;

     label01:
        z0 = interfaceinvoke r14.<android.service.vr.IVrManager: boolean getVrModeState()>();

        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.service.vr.IVrStateCallbacks mVrStateCallbacks>;

        interfaceinvoke r14.<android.service.vr.IVrManager: void registerListener(android.service.vr.IVrStateCallbacks)>($r8);

     label03:
        if z0 == 0 goto label05;

     label04:
        r0.<com.android.server.wm.WindowManagerService: boolean mVrModeEnabled> = z0;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.service.vr.IVrStateCallbacks mVrStateCallbacks>;

        interfaceinvoke $r9.<android.service.vr.IVrStateCallbacks: void onVrStateChanged(boolean)>(z0);

     label05:
        exitmonitor r15;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label07:
        goto label12;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r15;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r11;

     label11:
        $r10 := @caughtexception;

     label12:
        return;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch android.os.RemoteException from label10 to label11 with label11;
    }

    public void thawDisplayRotation(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2;
        boolean $z0, $z1;
        java.lang.SecurityException $r1;
        com.android.server.wm.RootWindowContainer $r2;
        com.android.server.wm.DisplayRotation $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7, $r8;
        long l3, l4;
        com.android.server.wm.WindowManagerGlobalLock r9;
        com.android.server.wm.DisplayContent r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "thawRotation()");

        if $z0 == 0 goto label14;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z1 == 0 goto label01;

        $i2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int getDefaultDisplayRotation()>();

        l3 = (long) $i2;

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r4[0] = $r6;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, -1076978367, 1, null, $r4);

     label01:
        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r10 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label04:
        if r10 != null goto label07;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Trying to thaw rotation for a missing display.");

        exitmonitor r9;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return;

     label07:
        $r3 = virtualinvoke r10.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r3.<com.android.server.wm.DisplayRotation: void thawRotation()>();

        exitmonitor r9;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r9;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r8;

     label13:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw $r7;

     label14:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ORIENTATION permission");

        throw $r1;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public void thawRotation()
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void thawDisplayRotation(int)>(0);

        return;
    }

    public void triggerAnimationFailsafe()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$H $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(60);

        return;
    }

    void unregisterAppFreezeListener(com.android.server.wm.WindowManagerService$AppFreezeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$AppFreezeListener r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService$AppFreezeListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mAppFreezeListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IDisplayFoldListener r1;
        com.android.server.policy.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<com.android.server.policy.WindowManagerPolicy: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>(r1);

        return;
    }

    public void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IDisplayWindowListener r1;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        com.android.server.wm.DisplayWindowListenerController $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IDisplayWindowListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MANAGE_ACTIVITY_STACKS");

        if $i0 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayWindowListenerController mDisplayNotificationController>;

        virtualinvoke $r4.<com.android.server.wm.DisplayWindowListenerController: void unregisterListener(android.view.IDisplayWindowListener)>(r1);

        return;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.MANAGE_ACTIVITY_STACKS");

        throw $r3;
    }

    public void unregisterPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.RootWindowContainer $r3;
        java.lang.Throwable $r4;
        android.view.WindowManagerPolicyConstants$PointerEventListener r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r5 := @parameter0: android.view.WindowManagerPolicyConstants$PointerEventListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r2 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r2 == null goto label4;

     label3:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void unregisterPointerEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>(r5);

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.view.ISystemGestureExclusionListener r7;
        com.android.server.wm.DisplayContent r8;
        java.lang.IllegalArgumentException r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.view.ISystemGestureExclusionListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r8 = virtualinvoke $r2.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

     label2:
        if r8 == null goto label5;

     label3:
        virtualinvoke r8.<com.android.server.wm.DisplayContent: void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener)>(r7);

        exitmonitor r1;

     label4:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label5:
        r9 = new java.lang.IllegalArgumentException;

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to register visibility event for invalid display: ");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r9;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WallpaperVisibilityListeners $r2;
        java.lang.Throwable $r3;
        android.view.IWallpaperVisibilityListener r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r4 := @parameter0: android.view.IWallpaperVisibilityListener;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WallpaperVisibilityListeners mWallpaperVisibilityListeners>;

        virtualinvoke $r2.<com.android.server.wm.WallpaperVisibilityListeners: void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>(r4, i0);

        exitmonitor r1;

     label2:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void updateDisplayContentLocation(android.view.IWindow, int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2;
        com.android.server.wm.WindowManagerGlobalLock r1;
        long l3;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.RootWindowContainer $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Throwable $r6, $r7;
        android.view.IWindow r8;
        java.lang.String r9;
        com.android.server.wm.DisplayContent r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void checkCallerOwnsDisplay(int)>(i2);

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r8, 0);

     label03:
        if r2 != null goto label07;

     label04:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label05;

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r9;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 1325649102, 0, "Bad requesting window %s", $r4);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        exitmonitor r1;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r10 = virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i2);

     label08:
        if r10 == null goto label10;

     label09:
        virtualinvoke r10.<com.android.server.wm.DisplayContent: void updateLocation(com.android.server.wm.WindowState,int,int)>(r2, i0, i1);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label11:
        exitmonitor r1;

     label12:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label13:
        $r6 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label15:
        throw $r6;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    boolean updateFocusedWindowLocked(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.RootWindowContainer $r1;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "wmUpdateFocus");

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        z1 = virtualinvoke $r1.<com.android.server.wm.RootWindowContainer: boolean updateFocusedWindowLocked(int,boolean)>(i0, z0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return z1;
    }

    void updateInputChannel(android.os.IBinder, int, android.view.SurfaceControl, int, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        android.view.SurfaceControl r1;
        android.graphics.Region r2;
        com.android.server.wm.WindowManagerGlobalLock r3;
        com.android.server.wm.EmbeddedWindowController$EmbeddedWindow r4;
        android.view.InputApplicationHandle r5;
        java.lang.Throwable $r6, $r7, r11;
        android.os.IBinder r8;
        com.android.server.wm.EmbeddedWindowController r9;
        java.lang.String r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r8 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.SurfaceControl;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Region;

        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r3;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmbeddedWindowController mEmbeddedWindowController>;

     label02:
        r4 = virtualinvoke r9.<com.android.server.wm.EmbeddedWindowController: com.android.server.wm.EmbeddedWindowController$EmbeddedWindow get(android.os.IBinder)>(r8);

     label03:
        if r4 != null goto label06;

     label04:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Couldn\'t find window for provided channelToken.");

        exitmonitor r3;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        r10 = virtualinvoke r4.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: java.lang.String getName()>();

        r5 = virtualinvoke r4.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: android.view.InputApplicationHandle getApplicationHandle()>();

        exitmonitor r3;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        $i4 = r4.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: int mOwnerUid>;

        $i3 = r4.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: int mOwnerPid>;

        $i2 = r4.<com.android.server.wm.EmbeddedWindowController$EmbeddedWindow: int mWindowType>;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateInputChannel(android.os.IBinder,int,int,int,android.view.SurfaceControl,java.lang.String,android.view.InputApplicationHandle,int,int,android.graphics.Region)>(r8, $i4, $i3, i0, r1, r10, r5, i1, $i2, r2);

        return;

     label08:
        $r7 := @caughtexception;

        r11 = $r7;

     label09:
        exitmonitor r3;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw r11;

     label11:
        $r6 := @caughtexception;

        r11 = $r6;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    void updateNonSystemOverlayWindowsVisibilityIfNeeded(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1, $z3, $z4, $z6, z7, $z8, z9, $z10;
        java.util.ArrayList $r2, $r3, $r6, $r7, $r8, $r9;
        com.android.server.wm._$$Lambda$WindowManagerService$bscBt2WjnzY2C7IsghhRMzmBxrE $r4;
        com.android.server.wm.RootWindowContainer $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z7 := @parameter1: boolean;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hideNonSystemOverlayWindowsWhenVisible()>();

        if $z1 != 0 goto label1;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $z6 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z6 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if z7 == 0 goto label2;

        $z3 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hideNonSystemOverlayWindowsWhenVisible()>();

        if $z3 == 0 goto label2;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $z4 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z4 != 0 goto label3;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

     label3:
        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mHidingNonSystemOverlayWindows>;

        $z8 = virtualinvoke $r9.<java.util.ArrayList: boolean isEmpty()>();

        z9 = $z8 ^ 1;

        $z10 = z0 ^ 1;

        if $z10 != z9 goto label4;

        return;

     label4:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r4 = new com.android.server.wm._$$Lambda$WindowManagerService$bscBt2WjnzY2C7IsghhRMzmBxrE;

        specialinvoke $r4.<com.android.server.wm._$$Lambda$WindowManagerService$bscBt2WjnzY2C7IsghhRMzmBxrE: void <init>(boolean)>(z9);

        virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>($r4, 0);

        return;
    }

    void updatePointerIcon(android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0, f1, $f2, $f3;
        com.android.server.wm.WindowState r1, r19;
        com.android.server.wm.WindowManagerService$MousePositionTracker $r2, $r3, $r4, r15;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.DragDropController $r5;
        android.view.IWindow $r6, r14;
        java.lang.Object[] $r7, $r12;
        com.android.server.wm.ProtoLogGroup $r8, $r13;
        java.lang.Throwable $r9, $r10;
        android.os.RemoteException $r11;
        com.android.server.wm.WindowManagerGlobalLock r16;
        java.lang.String r17;
        com.android.server.wm.DisplayContent r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r14 := @parameter0: android.view.IWindow;

        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        entermonitor r15;

     label01:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        $z0 = staticinvoke <com.android.server.wm.WindowManagerService$MousePositionTracker: boolean access$1800(com.android.server.wm.WindowManagerService$MousePositionTracker)>($r2);

        if $z0 != 0 goto label03;

        exitmonitor r15;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        f0 = staticinvoke <com.android.server.wm.WindowManagerService$MousePositionTracker: float access$1900(com.android.server.wm.WindowManagerService$MousePositionTracker)>($r3);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$MousePositionTracker mMousePositionTracker>;

        f1 = staticinvoke <com.android.server.wm.WindowManagerService$MousePositionTracker: float access$2000(com.android.server.wm.WindowManagerService$MousePositionTracker)>($r4);

        exitmonitor r15;

     label04:
        r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r16;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragDropController mDragDropController>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.DragDropController: boolean dragDropActiveLocked()>();

        if $z1 == 0 goto label07;

        exitmonitor r16;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label07:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r14, 0);

     label08:
        if r1 != null goto label12;

     label09:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label10;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r14);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 1325649102, 0, "Bad requesting window %s", $r7);

     label10:
        exitmonitor r16;

     label11:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label12:
        r18 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label13:
        if r18 != null goto label16;

     label14:
        exitmonitor r16;

     label15:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label16:
        r19 = virtualinvoke r18.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getTouchableWinAtPointLocked(float,float)>(f0, f1);

     label17:
        if r19 == r1 goto label20;

     label18:
        exitmonitor r16;

     label19:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label20:
        $r6 = r19.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $f2 = virtualinvoke r19.<com.android.server.wm.WindowState: float translateToWindowX(float)>(f0);

        $f3 = virtualinvoke r19.<com.android.server.wm.WindowState: float translateToWindowY(float)>(f1);

        interfaceinvoke $r6.<android.view.IWindow: void updatePointerIcon(float,float)>($f2, $f3);

     label21:
        goto label24;

     label22:
        $r11 := @caughtexception;

     label23:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label24;

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r12 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, -393505149, 0, "unable to update pointer icon", $r12);

     label24:
        exitmonitor r16;

     label25:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label26:
        $r9 := @caughtexception;

     label27:
        exitmonitor r16;

     label28:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r9;

     label29:
        $r10 := @caughtexception;

     label30:
        exitmonitor r15;

     label31:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label30 to label31 with label29;
    }

    public void updateRotation(boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(z0, z1);

        return;
    }

    void updateTapExcludeRegion(android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Region r1;
        com.android.server.wm.WindowManagerGlobalLock r2;
        com.android.server.wm.WindowState r3;
        boolean $z0;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        java.lang.Throwable $r6;
        android.view.IWindow r7;
        java.lang.String r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r7 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.graphics.Region;

        r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r2;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(null, r7, 0);

     label02:
        if r3 != null goto label06;

     label03:
        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z0 == 0 goto label04;

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r7);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r8;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 1325649102, 0, "Bad requesting window %s", $r4);

     label04:
        exitmonitor r2;

     label05:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label06:
        virtualinvoke r3.<com.android.server.wm.WindowState: void updateTapExcludeRegion(android.graphics.Region)>(r1);

        exitmonitor r2;

     label07:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean useBLAST()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mUseBLAST>;

        return $z0;
    }

    boolean viewServerGetFocusedWindow(java.net.Socket)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        java.io.OutputStream r2;
        java.io.OutputStreamWriter r3;
        boolean $z0, z1;
        int $i0;
        java.lang.String $r4;
        android.view.WindowManager$LayoutParams $r5;
        java.lang.CharSequence $r6;
        java.lang.Throwable $r7, $r9, $r10;
        java.lang.Exception $r8;
        java.net.Socket r11;
        java.io.BufferedWriter r12, r13, r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r11 := @parameter0: java.net.Socket;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        z1 = 1;

        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        r12 = null;

        r13 = null;

     label02:
        r2 = virtualinvoke r11.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label03:
        r12 = null;

        r13 = null;

     label04:
        r14 = new java.io.BufferedWriter;

     label05:
        r12 = null;

        r13 = null;

     label06:
        r3 = new java.io.OutputStreamWriter;

     label07:
        r12 = null;

        r13 = null;

     label08:
        specialinvoke r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r2);

     label09:
        r12 = null;

        r13 = null;

     label10:
        specialinvoke r14.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r3, 8192);

     label11:
        if r1 == null goto label17;

        r12 = r14;

        r13 = r14;

     label12:
        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r14.<java.io.BufferedWriter: void write(java.lang.String)>($r4);

     label13:
        r12 = r14;

        r13 = r14;

     label14:
        virtualinvoke r14.<java.io.BufferedWriter: void write(int)>(32);

     label15:
        r12 = r14;

        r13 = r14;

     label16:
        $r5 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r6 = virtualinvoke $r5.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r14.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>($r6);

     label17:
        r12 = r14;

        r13 = r14;

     label18:
        virtualinvoke r14.<java.io.BufferedWriter: void write(int)>(10);

     label19:
        r12 = r14;

        r13 = r14;

     label20:
        virtualinvoke r14.<java.io.BufferedWriter: void flush()>();

     label21:
        virtualinvoke r14.<java.io.BufferedWriter: void close()>();

     label22:
        goto label32;

     label23:
        $r9 := @caughtexception;

        if r12 == null goto label27;

     label24:
        virtualinvoke r12.<java.io.BufferedWriter: void close()>();

     label25:
        goto label27;

     label26:
        $r10 := @caughtexception;

     label27:
        throw $r9;

     label28:
        $r8 := @caughtexception;

        z1 = 0;

        if r13 == null goto label32;

     label29:
        virtualinvoke r13.<java.io.BufferedWriter: void close()>();

     label30:
        z1 = 0;

        goto label32;

     label31:
        $r7 := @caughtexception;

        z1 = 0;

     label32:
        return z1;

        catch java.lang.Exception from label02 to label03 with label28;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.Exception from label04 to label05 with label28;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Exception from label06 to label07 with label28;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Exception from label08 to label09 with label28;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Exception from label10 to label11 with label28;
        catch java.lang.Throwable from label10 to label11 with label23;
        catch java.lang.Exception from label12 to label13 with label28;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Exception from label14 to label15 with label28;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Exception from label16 to label17 with label28;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Exception from label18 to label19 with label28;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Exception from label20 to label21 with label28;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.io.IOException from label21 to label22 with label31;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.io.IOException from label29 to label30 with label31;
    }

    boolean viewServerListWindows(java.net.Socket)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.OutputStream r2;
        java.io.OutputStreamWriter r3;
        int i0, $i1, i2;
        boolean $z0, z1;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        android.view.WindowManager$LayoutParams $r7;
        java.lang.CharSequence $r8;
        java.lang.Throwable $r9, $r10, $r12, $r13;
        java.lang.Exception $r11;
        java.net.Socket r14;
        com.android.server.wm.WindowManagerGlobalLock r15;
        com.android.server.wm.RootWindowContainer r16;
        com.android.server.wm._$$Lambda$WindowManagerService$rX4HxGQ0OV3ZmF_qp5BG_mP7Sfo r17;
        java.io.BufferedWriter r18, r19, r20;
        com.android.server.wm.WindowState r21;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r14 := @parameter0: java.net.Socket;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        z1 = 1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r15;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r17 = new com.android.server.wm._$$Lambda$WindowManagerService$rX4HxGQ0OV3ZmF_qp5BG_mP7Sfo;

        specialinvoke r17.<com.android.server.wm._$$Lambda$WindowManagerService$rX4HxGQ0OV3ZmF_qp5BG_mP7Sfo: void <init>(java.util.ArrayList)>($r4);

        virtualinvoke r16.<com.android.server.wm.RootWindowContainer: void forAllWindows(java.util.function.Consumer,boolean)>(r17, 0);

        exitmonitor r15;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        r18 = null;

        r19 = null;

     label04:
        r2 = virtualinvoke r14.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label05:
        r18 = null;

        r19 = null;

     label06:
        r20 = new java.io.BufferedWriter;

     label07:
        r18 = null;

        r19 = null;

     label08:
        r3 = new java.io.OutputStreamWriter;

     label09:
        r18 = null;

        r19 = null;

     label10:
        specialinvoke r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r2);

     label11:
        r18 = null;

        r19 = null;

     label12:
        specialinvoke r20.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r3, 8192);

     label13:
        r18 = r20;

        r19 = r20;

     label14:
        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label15:
        i2 = 0;

     label16:
        if i2 >= i0 goto label27;

        r18 = r20;

        r19 = r20;

     label17:
        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r21 = (com.android.server.wm.WindowState) $r5;

     label18:
        r18 = r20;

        r19 = r20;

     label19:
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r21);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r20.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

     label20:
        r18 = r20;

        r19 = r20;

     label21:
        virtualinvoke r20.<java.io.BufferedWriter: void write(int)>(32);

     label22:
        r18 = r20;

        r19 = r20;

     label23:
        $r7 = r21.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r8 = virtualinvoke $r7.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r20.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>($r8);

     label24:
        r18 = r20;

        r19 = r20;

     label25:
        virtualinvoke r20.<java.io.BufferedWriter: void write(int)>(10);

     label26:
        i2 = i2 + 1;

        goto label16;

     label27:
        r18 = r20;

        r19 = r20;

     label28:
        virtualinvoke r20.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.\n");

     label29:
        r18 = r20;

        r19 = r20;

     label30:
        virtualinvoke r20.<java.io.BufferedWriter: void flush()>();

     label31:
        virtualinvoke r20.<java.io.BufferedWriter: void close()>();

     label32:
        goto label42;

     label33:
        $r10 := @caughtexception;

        if r18 == null goto label37;

     label34:
        virtualinvoke r18.<java.io.BufferedWriter: void close()>();

     label35:
        goto label37;

     label36:
        $r12 := @caughtexception;

     label37:
        throw $r10;

     label38:
        $r11 := @caughtexception;

        z1 = 0;

        if r19 == null goto label42;

     label39:
        virtualinvoke r19.<java.io.BufferedWriter: void close()>();

     label40:
        z1 = 0;

        goto label42;

     label41:
        $r9 := @caughtexception;

        z1 = 0;

     label42:
        return z1;

     label43:
        $r13 := @caughtexception;

     label44:
        exitmonitor r15;

     label45:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label43;
        catch java.lang.Exception from label04 to label05 with label38;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Exception from label06 to label07 with label38;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch java.lang.Exception from label08 to label09 with label38;
        catch java.lang.Throwable from label08 to label09 with label33;
        catch java.lang.Exception from label10 to label11 with label38;
        catch java.lang.Throwable from label10 to label11 with label33;
        catch java.lang.Exception from label12 to label13 with label38;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Exception from label14 to label15 with label38;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Exception from label17 to label18 with label38;
        catch java.lang.Throwable from label17 to label18 with label33;
        catch java.lang.Exception from label19 to label20 with label38;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Exception from label21 to label22 with label38;
        catch java.lang.Throwable from label21 to label22 with label33;
        catch java.lang.Exception from label23 to label24 with label38;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Exception from label25 to label26 with label38;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch java.lang.Exception from label28 to label29 with label38;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Exception from label30 to label31 with label38;
        catch java.lang.Throwable from label30 to label31 with label33;
        catch java.io.IOException from label31 to label32 with label41;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.io.IOException from label39 to label40 with label41;
        catch java.lang.Throwable from label44 to label45 with label43;
    }

    boolean viewServerWindowCommand(java.net.Socket, java.lang.String, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3, i4;
        boolean $z0, $z1, z2, $z3;
        java.lang.String $r1, r21, r22, r27, r28, r43, r44, r45;
        long $l1;
        android.os.ParcelFileDescriptor $r2;
        android.view.IWindow $r3;
        android.os.IBinder $r4;
        java.io.OutputStream $r5;
        java.lang.Throwable $r9, $r10, $r15, $r17, $r19, r41;
        java.lang.Exception $r11, $r14, $r16, r40;
        java.lang.Object[] $r12;
        com.android.server.wm.ProtoLogGroup $r13;
        java.net.Socket r20;
        android.os.Parcel r24, r29, r30, r32, r33, r34, r36;
        java.io.BufferedWriter r25, r26, r35, r37, r42;
        com.android.server.wm.WindowState r31;
        java.io.OutputStreamWriter r38;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r20 := @parameter0: java.net.Socket;

        r21 := @parameter1: java.lang.String;

        r22 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        z2 = 1;

        r24 = null;

        r25 = null;

        r26 = null;

     label02:
        i4 = virtualinvoke r22.<java.lang.String: int indexOf(int)>(32);

     label03:
        if i4 != -1 goto label06;

     label04:
        i4 = virtualinvoke r22.<java.lang.String: int length()>();

     label05:
        goto label06;

     label06:
        $r1 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r1, 16);

        i0 = (int) $l1;

        $i2 = virtualinvoke r22.<java.lang.String: int length()>();

        if i4 >= $i2 goto label08;

        $i3 = i4 + 1;

        r27 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>($i3);

     label07:
        r28 = r27;

        goto label09;

     label08:
        r28 = "";

     label09:
        r29 = null;

        r30 = null;

     label10:
        r31 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState findWindow(int)>(i0);

     label11:
        if r31 != null goto label15;

        goto label12;

     label12:
        goto label13;

     label13:
        goto label14;

     label14:
        return 0;

     label15:
        r29 = null;

        r30 = null;

     label16:
        r32 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label17:
        r29 = r32;

        r30 = r32;

     label18:
        virtualinvoke r32.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.view.IWindow");

     label19:
        r24 = null;

        r25 = null;

        r33 = r32;

        r34 = null;

        r35 = null;

     label20:
        virtualinvoke r32.<android.os.Parcel: void writeString(java.lang.String)>(r21);

     label21:
        r24 = null;

        r25 = null;

        r33 = r32;

        r34 = null;

        r35 = null;

     label22:
        virtualinvoke r32.<android.os.Parcel: void writeString(java.lang.String)>(r28);

     label23:
        r24 = null;

        r25 = null;

        r33 = r32;

        r34 = null;

        r35 = null;

     label24:
        virtualinvoke r32.<android.os.Parcel: void writeInt(int)>(1);

     label25:
        r24 = null;

        r25 = null;

        r33 = r32;

        r34 = null;

        r35 = null;

     label26:
        $r2 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>(r20);

        virtualinvoke $r2.<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>(r32, 0);

     label27:
        r24 = null;

        r25 = null;

        r33 = r32;

        r34 = null;

        r35 = null;

     label28:
        r36 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label29:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label30:
        $r3 = r31.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = interfaceinvoke $r3.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r32, r36, 0);

     label31:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label32:
        virtualinvoke r36.<android.os.Parcel: void readException()>();

     label33:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label34:
        $z1 = virtualinvoke r20.<java.net.Socket: boolean isOutputShutdown()>();

        if $z1 != 0 goto label48;

     label35:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label36:
        r37 = new java.io.BufferedWriter;

     label37:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label38:
        r38 = new java.io.OutputStreamWriter;

     label39:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label40:
        $r5 = virtualinvoke r20.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r38.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5);

     label41:
        r24 = r36;

        r25 = null;

        r33 = r32;

        r34 = r36;

        r35 = null;

     label42:
        specialinvoke r37.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r38);

     label43:
        r24 = r36;

        r25 = r37;

        r33 = r32;

        r34 = r36;

        r35 = r37;

     label44:
        virtualinvoke r37.<java.io.BufferedWriter: void write(java.lang.String)>("DONE\n");

     label45:
        r24 = r36;

        r25 = r37;

        r33 = r32;

        r34 = r36;

        r35 = r37;

     label46:
        virtualinvoke r37.<java.io.BufferedWriter: void flush()>();

     label47:
        r26 = r37;

     label48:
        if r32 == null goto label49;

        virtualinvoke r32.<android.os.Parcel: void recycle()>();

     label49:
        if r36 == null goto label50;

        virtualinvoke r36.<android.os.Parcel: void recycle()>();

     label50:
        if r26 == null goto label75;

     label51:
        virtualinvoke r26.<java.io.BufferedWriter: void close()>();

     label52:
        z2 = 1;

     label53:
        goto label75;

     label54:
        $r10 := @caughtexception;

        z2 = 0;

        goto label53;

     label55:
        $r14 := @caughtexception;

        r40 = $r14;

        goto label60;

     label56:
        $r17 := @caughtexception;

        r41 = $r17;

        r34 = null;

        r42 = null;

        goto label77;

     label57:
        $r16 := @caughtexception;

        r40 = $r16;

        r32 = r30;

        goto label60;

     label58:
        $r9 := @caughtexception;

        r41 = $r9;

        r29 = null;

        r34 = null;

        r42 = null;

        goto label77;

     label59:
        $r11 := @caughtexception;

        r40 = $r11;

        r32 = null;

        r28 = r22;

     label60:
        r33 = r32;

        r34 = r24;

        r35 = r25;

     label61:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z3 == 0 goto label70;

     label62:
        r33 = r32;

        r34 = r24;

        r35 = r25;

     label63:
        r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

     label64:
        r33 = r32;

        r34 = r24;

        r35 = r25;

     label65:
        r44 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r28);

     label66:
        r33 = r32;

        r34 = r24;

        r35 = r25;

     label67:
        r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r40);

     label68:
        r33 = r32;

        r34 = r24;

        r35 = r25;

     label69:
        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = r43;

        $r12[1] = r44;

        $r12[2] = r45;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, 2086878461, 0, "Could not send command %s with parameters %s. %s", $r12);

     label70:
        z2 = 0;

        if r32 == null goto label71;

        virtualinvoke r32.<android.os.Parcel: void recycle()>();

     label71:
        if r24 == null goto label72;

        virtualinvoke r24.<android.os.Parcel: void recycle()>();

     label72:
        if r25 == null goto label75;

     label73:
        virtualinvoke r25.<java.io.BufferedWriter: void close()>();

     label74:
        z2 = 0;

        goto label53;

     label75:
        return z2;

     label76:
        $r15 := @caughtexception;

        r41 = $r15;

        r42 = r35;

        r29 = r33;

     label77:
        if r29 == null goto label78;

        virtualinvoke r29.<android.os.Parcel: void recycle()>();

     label78:
        if r34 == null goto label79;

        virtualinvoke r34.<android.os.Parcel: void recycle()>();

     label79:
        if r42 == null goto label83;

     label80:
        virtualinvoke r42.<java.io.BufferedWriter: void close()>();

     label81:
        goto label83;

     label82:
        $r19 := @caughtexception;

     label83:
        throw r41;

        catch java.lang.Exception from label02 to label03 with label59;
        catch java.lang.Throwable from label02 to label03 with label58;
        catch java.lang.Exception from label04 to label05 with label59;
        catch java.lang.Throwable from label04 to label05 with label58;
        catch java.lang.Exception from label06 to label07 with label59;
        catch java.lang.Throwable from label06 to label07 with label58;
        catch java.lang.Exception from label10 to label11 with label57;
        catch java.lang.Throwable from label10 to label11 with label56;
        catch java.lang.Exception from label16 to label17 with label57;
        catch java.lang.Throwable from label16 to label17 with label56;
        catch java.lang.Exception from label18 to label19 with label57;
        catch java.lang.Throwable from label18 to label19 with label56;
        catch java.lang.Exception from label20 to label21 with label55;
        catch java.lang.Throwable from label20 to label21 with label76;
        catch java.lang.Exception from label22 to label23 with label55;
        catch java.lang.Throwable from label22 to label23 with label76;
        catch java.lang.Exception from label24 to label25 with label55;
        catch java.lang.Throwable from label24 to label25 with label76;
        catch java.lang.Exception from label26 to label27 with label55;
        catch java.lang.Throwable from label26 to label27 with label76;
        catch java.lang.Exception from label28 to label29 with label55;
        catch java.lang.Throwable from label28 to label29 with label76;
        catch java.lang.Exception from label30 to label31 with label55;
        catch java.lang.Throwable from label30 to label31 with label76;
        catch java.lang.Exception from label32 to label33 with label55;
        catch java.lang.Throwable from label32 to label33 with label76;
        catch java.lang.Exception from label34 to label35 with label55;
        catch java.lang.Throwable from label34 to label35 with label76;
        catch java.lang.Exception from label36 to label37 with label55;
        catch java.lang.Throwable from label36 to label37 with label76;
        catch java.lang.Exception from label38 to label39 with label55;
        catch java.lang.Throwable from label38 to label39 with label76;
        catch java.lang.Exception from label40 to label41 with label55;
        catch java.lang.Throwable from label40 to label41 with label76;
        catch java.lang.Exception from label42 to label43 with label55;
        catch java.lang.Throwable from label42 to label43 with label76;
        catch java.lang.Exception from label44 to label45 with label55;
        catch java.lang.Throwable from label44 to label45 with label76;
        catch java.lang.Exception from label46 to label47 with label55;
        catch java.lang.Throwable from label46 to label47 with label76;
        catch java.io.IOException from label51 to label52 with label54;
        catch java.lang.Throwable from label61 to label62 with label76;
        catch java.lang.Throwable from label63 to label64 with label76;
        catch java.lang.Throwable from label65 to label66 with label76;
        catch java.lang.Throwable from label67 to label68 with label76;
        catch java.lang.Throwable from label69 to label70 with label76;
        catch java.io.IOException from label73 to label74 with label54;
        catch java.io.IOException from label80 to label81 with label82;
    }

    public int watchRotation(android.view.IRotationWatcher, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        java.util.ArrayList r3;
        com.android.server.wm.WindowManagerService$RotationWatcher r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r10;
        com.android.server.wm.WindowManagerService$10 $r11;
        android.os.IBinder $r12, $r13;
        java.lang.Throwable $r14, $r15;
        android.os.RemoteException $r16;
        android.view.IRotationWatcher r17;
        int i0, i1;
        com.android.server.wm.WindowManagerGlobalLock r18, r19;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r17 := @parameter0: android.view.IRotationWatcher;

        i0 := @parameter1: int;

        r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r18;

     label01:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r1 = virtualinvoke $r5.<com.android.server.wm.RootWindowContainer: com.android.server.wm.DisplayContent getDisplayContent(int)>(i0);

        exitmonitor r18;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        if r1 == null goto label11;

        $r11 = new com.android.server.wm.WindowManagerService$10;

        $r12 = interfaceinvoke r17.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        specialinvoke $r11.<com.android.server.wm.WindowManagerService$10: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder)>(r0, $r12);

        r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r19;

     label03:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r13 = interfaceinvoke r17.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        interfaceinvoke $r13.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r11, 0);

        r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        r4 = new com.android.server.wm.WindowManagerService$RotationWatcher;

        specialinvoke r4.<com.android.server.wm.WindowManagerService$RotationWatcher: void <init>(com.android.server.wm.WindowManagerService,android.view.IRotationWatcher,android.os.IBinder$DeathRecipient,int)>(r0, r17, $r11, i0);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label04:
        goto label07;

     label05:
        $r15 := @caughtexception;

        goto label09;

     label06:
        $r16 := @caughtexception;

     label07:
        i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getRotation()>();

        exitmonitor r19;

     label08:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return i1;

     label09:
        exitmonitor r19;

     label10:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r15;

     label11:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to register rotation event for invalid display: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label12:
        $r14 := @caughtexception;

     label13:
        exitmonitor r18;

     label14:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    final com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session, android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.wm.WindowState r1;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.wm.Session $r5, $r10, r28;
        java.lang.StringBuilder $r6, $r19;
        java.lang.IllegalArgumentException $r14, $r23;
        java.lang.String $r15, $r16, $r24, $r25, r30, r31, r33, r34;
        java.lang.Object[] $r17, $r26;
        com.android.server.wm.ProtoLogGroup $r18, $r27;
        android.os.IBinder r29;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r28 := @parameter0: com.android.server.wm.Session;

        r29 := @parameter1: android.os.IBinder;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r29);

        r1 = (com.android.server.wm.WindowState) $r4;

        if r1 != null goto label3;

        if z0 != 0 goto label2;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z2 == 0 goto label1;

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r28);

        $r25 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        $r27 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r26 = newarray (java.lang.Object)[2];

        $r26[0] = r30;

        $r26[1] = r31;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r27, -2101985723, 0, "Failed looking up window session=%s callers=%s", $r26);

     label1:
        return null;

     label2:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label3:
        if r28 == null goto label6;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        if $r5 == r28 goto label6;

        if z0 != 0 goto label5;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_ERROR_enabled>;

        if $z1 == 0 goto label4;

        r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r28);

        $r16 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        $r18 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_ERROR>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r33;

        $r17[1] = r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void w(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r18, -2101985723, 0, "Failed looking up window session=%s callers=%s", $r17);

     label4:
        return null;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in session ");

        $r10 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label6:
        return r1;
    }

    final com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session, android.view.IWindow, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        boolean z0;
        android.os.IBinder $r3;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        z0 := @parameter2: boolean;

        $r3 = interfaceinvoke r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r1, $r3, z0);

        return $r4;
    }
}
