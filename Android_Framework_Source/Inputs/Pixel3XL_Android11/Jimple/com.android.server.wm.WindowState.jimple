class com.android.server.wm.WindowState extends com.android.server.wm.WindowContainer implements com.android.server.policy.WindowManagerPolicy$WindowState, com.android.server.wm.InsetsControlTarget
{
    static final int BLAST_TIMEOUT_DURATION;
    private static final float DEFAULT_DIM_AMOUNT_DEAD_WINDOW;
    static final int EXCLUSION_LEFT;
    static final int EXCLUSION_RIGHT;
    static final int LEGACY_POLICY_VISIBILITY;
    static final int MINIMUM_VISIBLE_HEIGHT_IN_DP;
    static final int MINIMUM_VISIBLE_WIDTH_IN_DP;
    private static final int POLICY_VISIBILITY_ALL;
    static final int RESIZE_HANDLE_WIDTH_IN_DP;
    static final java.lang.String TAG;
    private static final int VISIBLE_FOR_USER;
    private static final java.lang.StringBuilder sTmpSB;
    private static final java.util.Comparator sWindowSubLayerComparator;
    com.android.server.wm.ActivityRecord mActivityRecord;
    private boolean mAnimateReplacingWindow;
    boolean mAnimatingExit;
    boolean mAppDied;
    boolean mAppFreezing;
    final int mAppOp;
    private boolean mAppOpVisibility;
    final android.view.WindowManager$LayoutParams mAttrs;
    final int mBaseLayer;
    boolean mBehindIme;
    final android.view.IWindow mClient;
    private android.view.InputChannel mClientChannel;
    final android.content.Context mContext;
    private com.android.server.wm.InsetsSourceProvider mControllableInsetProvider;
    private com.android.server.wm.WindowState$DeadWindowEventReceiver mDeadWindowEventReceiver;
    final com.android.server.wm.WindowState$DeathRecipient mDeathRecipient;
    boolean mDestroying;
    private boolean mDragResizing;
    private boolean mDragResizingChangeReported;
    private android.os.PowerManager$WakeLock mDrawLock;
    private boolean mDrawnStateEvaluated;
    private final android.util.ArraySet mEmbeddedDisplayContents;
    private final java.util.List mExclusionRects;
    long mFinishSeamlessRotateFrameNumber;
    private android.os.RemoteCallbackList mFocusCallbacks;
    private boolean mForceHideNonSystemOverlayWindow;
    final boolean mForceSeamlesslyRotate;
    private long mFrameNumber;
    int mFrameRateSelectionPriority;
    final android.graphics.Rect mGivenContentInsets;
    boolean mGivenInsetsPending;
    final android.graphics.Region mGivenTouchableRegion;
    final android.graphics.Rect mGivenVisibleInsets;
    float mGlobalScale;
    float mHScale;
    boolean mHasSurface;
    boolean mHaveFrame;
    boolean mHidden;
    private boolean mHiddenWhileSuspended;
    boolean mInRelayout;
    android.view.InputChannel mInputChannel;
    final android.view.InputWindowHandle mInputWindowHandle;
    private final android.graphics.Rect mInsetFrame;
    float mInvGlobalScale;
    private boolean mIsChildWindow;
    private boolean mIsDimming;
    private final boolean mIsFloatingLayer;
    final boolean mIsImWindow;
    final boolean mIsWallpaper;
    private com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo;
    private boolean mLastConfigReportedToClient;
    private final long[] mLastExclusionLogUptimeMillis;
    int mLastFreezeDuration;
    private final int[] mLastGrantedExclusionHeight;
    float mLastHScale;
    final android.graphics.Rect mLastRelayoutContentInsets;
    private final android.util.MergedConfiguration mLastReportedConfiguration;
    private final android.graphics.Point mLastReportedDisplayOffset;
    private final int[] mLastRequestedExclusionHeight;
    private int mLastRequestedHeight;
    private int mLastRequestedWidth;
    private boolean mLastShownChangedReported;
    final android.graphics.Rect mLastSurfaceInsets;
    private java.lang.CharSequence mLastTitle;
    float mLastVScale;
    int mLastVisibleLayoutRotation;
    int mLayer;
    final boolean mLayoutAttached;
    boolean mLayoutNeeded;
    int mLayoutSeq;
    boolean mLegacyPolicyVisibilityAfterAnim;
    private int mLocalSyncId;
    private boolean mMovedByResize;
    private boolean mNotifyBlastOnSurfacePlacement;
    boolean mObscured;
    private boolean mOrientationChangeTimedOut;
    private boolean mOrientationChanging;
    final boolean mOwnerCanAddInternalSystemWindow;
    final int mOwnerUid;
    com.android.server.wm.SeamlessRotator mPendingSeamlessRotate;
    boolean mPermanentlyHidden;
    final com.android.server.policy.WindowManagerPolicy mPolicy;
    private int mPolicyVisibility;
    private com.android.server.wm.WindowState$PowerManagerWrapper mPowerManagerWrapper;
    private boolean mRedrawForSyncReported;
    boolean mRelayoutCalled;
    boolean mRemoveOnExit;
    boolean mRemoved;
    private com.android.server.wm.WindowState mReplacementWindow;
    private boolean mReplacingRemoveRequested;
    boolean mReportOrientationChanged;
    int mRequestedHeight;
    private final android.view.InsetsState mRequestedInsetsState;
    int mRequestedWidth;
    private int mResizeMode;
    boolean mResizedWhileGone;
    boolean mSeamlesslyRotated;
    int mSeq;
    final com.android.server.wm.Session mSession;
    boolean mShouldScaleWallpaper;
    final int mShowUserId;
    private com.android.server.wm.WindowFrames mSimulatedWindowFrames;
    boolean mSkipEnterAnimationForSeamlessReplacement;
    private java.lang.String mStringNameCache;
    final int mSubLayer;
    private final android.graphics.Point mSurfacePosition;
    int mSystemUiVisibility;
    private final android.graphics.Region mTapExcludeRegion;
    private final android.content.res.Configuration mTempConfiguration;
    final android.graphics.Matrix mTmpMatrix;
    final float[] mTmpMatrixArray;
    private final android.graphics.Point mTmpPoint;
    private final android.graphics.Rect mTmpRect;
    com.android.server.wm.WindowToken mToken;
    int mTouchableInsets;
    float mVScale;
    int mViewVisibility;
    int mWallpaperDisplayOffsetX;
    int mWallpaperDisplayOffsetY;
    boolean mWallpaperVisible;
    float mWallpaperX;
    float mWallpaperXStep;
    float mWallpaperY;
    float mWallpaperYStep;
    float mWallpaperZoomOut;
    private boolean mWasExiting;
    boolean mWillReplaceWindow;
    final com.android.server.wm.WindowStateAnimator mWinAnimator;
    private final com.android.server.wm.WindowFrames mWindowFrames;
    final com.android.server.wm.WindowState$WindowId mWindowId;
    boolean mWindowRemovalAllowed;
    private final com.android.server.wm.WindowProcessController mWpcForDisplayConfigChanges;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0;
        com.android.server.wm.WindowState$1 $r1;

        <com.android.server.wm.WindowState: int VISIBLE_FOR_USER> = 2;

        <com.android.server.wm.WindowState: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.WindowState: int RESIZE_HANDLE_WIDTH_IN_DP> = 30;

        <com.android.server.wm.WindowState: int POLICY_VISIBILITY_ALL> = 3;

        <com.android.server.wm.WindowState: int MINIMUM_VISIBLE_WIDTH_IN_DP> = 48;

        <com.android.server.wm.WindowState: int MINIMUM_VISIBLE_HEIGHT_IN_DP> = 32;

        <com.android.server.wm.WindowState: int LEGACY_POLICY_VISIBILITY> = 1;

        <com.android.server.wm.WindowState: int EXCLUSION_RIGHT> = 1;

        <com.android.server.wm.WindowState: int EXCLUSION_LEFT> = 0;

        <com.android.server.wm.WindowState: float DEFAULT_DIM_AMOUNT_DEAD_WINDOW> = 0.5F;

        <com.android.server.wm.WindowState: int BLAST_TIMEOUT_DURATION> = 5000;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        <com.android.server.wm.WindowState: java.lang.StringBuilder sTmpSB> = $r0;

        $r1 = new com.android.server.wm.WindowState$1;

        specialinvoke $r1.<com.android.server.wm.WindowState$1: void <init>()>();

        <com.android.server.wm.WindowState: java.util.Comparator sWindowSubLayerComparator> = $r1;

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.Session, android.view.IWindow, com.android.server.wm.WindowToken, com.android.server.wm.WindowState, int, int, android.view.WindowManager$LayoutParams, int, int, int, boolean)
    {
        com.android.server.wm.WindowState r0, r5;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.Session r2;
        android.view.IWindow r3;
        com.android.server.wm.WindowToken r4;
        int i0, i1, i2, i3, i4;
        android.view.WindowManager$LayoutParams r6;
        boolean z0;
        com.android.server.wm.WindowState$2 $r7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.Session;

        r3 := @parameter2: android.view.IWindow;

        r4 := @parameter3: com.android.server.wm.WindowToken;

        r5 := @parameter4: com.android.server.wm.WindowState;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        r6 := @parameter7: android.view.WindowManager$LayoutParams;

        i2 := @parameter8: int;

        i3 := @parameter9: int;

        i4 := @parameter10: int;

        z0 := @parameter11: boolean;

        $r7 = new com.android.server.wm.WindowState$2;

        specialinvoke $r7.<com.android.server.wm.WindowState$2: void <init>(com.android.server.wm.WindowManagerService)>(r1);

        specialinvoke r0.<com.android.server.wm.WindowState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.Session,android.view.IWindow,com.android.server.wm.WindowToken,com.android.server.wm.WindowState,int,int,android.view.WindowManager$LayoutParams,int,int,int,boolean,com.android.server.wm.WindowState$PowerManagerWrapper)>(r1, r2, r3, r4, r5, i0, i1, r6, i2, i3, i4, z0, $r7);

        return;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.Session, android.view.IWindow, com.android.server.wm.WindowToken, com.android.server.wm.WindowState, int, int, android.view.WindowManager$LayoutParams, int, int, int, boolean, com.android.server.wm.WindowState$PowerManagerWrapper)
    {
        com.android.server.wm.WindowState r0, r2;
        com.android.server.wm.Session r1;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        android.view.WindowManager$LayoutParams r3, $r6, $r31, $r32, $r41, $r43, $r49, $r50, $r53, $r54, $r55, $r60, $r61, r63;
        com.android.server.wm.WindowState$PowerManagerWrapper r4;
        android.util.ArraySet $r7;
        android.util.MergedConfiguration $r8;
        android.content.res.Configuration $r9;
        android.graphics.Rect $r10, $r11, $r12, $r17, $r22, $r25, $r33, $r34;
        android.graphics.Region $r13, $r27;
        android.graphics.Matrix $r14;
        float[] $r15;
        com.android.server.wm.WindowFrames $r16;
        java.util.ArrayList $r18;
        int[] $r19, $r20;
        long[] $r21;
        android.graphics.Point $r23, $r24, $r26;
        android.view.InsetsState $r28;
        com.android.server.wm.ActivityRecord $r29, r62, r66;
        com.android.server.wm.WindowState$WindowId $r30;
        com.android.server.wm.WindowManagerService $r35, $r37, r57;
        com.android.server.policy.WindowManagerPolicy $r36, $r42, $r51, $r52;
        android.content.Context $r38;
        com.android.server.wm.WindowState$DeathRecipient $r39;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9, z10, $z11, z12;
        android.os.IBinder $r40;
        android.view.InputWindowHandle $r44;
        com.android.server.wm.ActivityTaskManagerService $r45;
        java.util.Comparator $r46;
        java.lang.Object[] $r47;
        com.android.server.wm.ProtoLogGroup $r48;
        android.os.RemoteException $r56;
        android.view.IWindow r58;
        com.android.server.wm.WindowToken r59;
        com.android.server.wm.WindowStateAnimator $r64;
        float $f0;
        android.view.InputApplicationHandle r67;
        java.lang.String r68, r69;
        com.android.server.wm.WindowProcessController r70;

        r0 := @this: com.android.server.wm.WindowState;

        r57 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: com.android.server.wm.Session;

        r58 := @parameter2: android.view.IWindow;

        r59 := @parameter3: com.android.server.wm.WindowToken;

        r2 := @parameter4: com.android.server.wm.WindowState;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        r3 := @parameter7: android.view.WindowManager$LayoutParams;

        i2 := @parameter8: int;

        i3 := @parameter9: int;

        i4 := @parameter10: int;

        z5 := @parameter11: boolean;

        r4 := @parameter12: com.android.server.wm.WindowState$PowerManagerWrapper;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void <init>(com.android.server.wm.WindowManagerService)>(r57);

        $r6 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r6.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs> = $r6;

        r0.<com.android.server.wm.WindowState: int mPolicyVisibility> = 3;

        r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim> = 1;

        r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility> = 1;

        r0.<com.android.server.wm.WindowState: boolean mHidden> = 1;

        r0.<com.android.server.wm.WindowState: boolean mDragResizingChangeReported> = 1;

        r0.<com.android.server.wm.WindowState: int mLayoutSeq> = -1;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents> = $r7;

        $r8 = new android.util.MergedConfiguration;

        specialinvoke $r8.<android.util.MergedConfiguration: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration> = $r8;

        $r9 = new android.content.res.Configuration;

        specialinvoke $r9.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.content.res.Configuration mTempConfiguration> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastRelayoutContentInsets> = $r10;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets> = $r12;

        $r13 = new android.graphics.Region;

        specialinvoke $r13.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion> = $r13;

        r0.<com.android.server.wm.WindowState: int mTouchableInsets> = 0;

        r0.<com.android.server.wm.WindowState: float mGlobalScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mInvGlobalScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mHScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mVScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mLastHScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mLastVScale> = 1.0F;

        $r14 = new android.graphics.Matrix;

        specialinvoke $r14.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Matrix mTmpMatrix> = $r14;

        $r15 = newarray (float)[9];

        r0.<com.android.server.wm.WindowState: float[] mTmpMatrixArray> = $r15;

        $r16 = new com.android.server.wm.WindowFrames;

        specialinvoke $r16.<com.android.server.wm.WindowFrames: void <init>()>();

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames> = $r16;

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame> = $r17;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowState: java.util.List mExclusionRects> = $r18;

        $r19 = newarray (int)[2];

        $r19[0] = 0;

        $r19[1] = 0;

        r0.<com.android.server.wm.WindowState: int[] mLastRequestedExclusionHeight> = $r19;

        $r20 = newarray (int)[2];

        $r20[0] = 0;

        $r20[1] = 0;

        r0.<com.android.server.wm.WindowState: int[] mLastGrantedExclusionHeight> = $r20;

        $r21 = newarray (long)[2];

        $r21[0] = 0L;

        $r21[1] = 0L;

        r0.<com.android.server.wm.WindowState: long[] mLastExclusionLogUptimeMillis> = $r21;

        r0.<com.android.server.wm.WindowState: float mWallpaperX> = -1.0F;

        r0.<com.android.server.wm.WindowState: float mWallpaperY> = -1.0F;

        r0.<com.android.server.wm.WindowState: float mWallpaperZoomOut> = -1.0F;

        r0.<com.android.server.wm.WindowState: float mWallpaperXStep> = -1.0F;

        r0.<com.android.server.wm.WindowState: float mWallpaperYStep> = -1.0F;

        r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX> = -2147483648;

        r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY> = -2147483648;

        r0.<com.android.server.wm.WindowState: int mLastVisibleLayoutRotation> = -1;

        r0.<com.android.server.wm.WindowState: boolean mHasSurface> = 0;

        r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mReplacingRemoveRequested> = 0;

        r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow> = 0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow> = null;

        r0.<com.android.server.wm.WindowState: boolean mSkipEnterAnimationForSeamlessReplacement> = 0;

        $r22 = new android.graphics.Rect;

        specialinvoke $r22.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect> = $r22;

        $r23 = new android.graphics.Point;

        specialinvoke $r23.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint> = $r23;

        $r24 = new android.graphics.Point;

        specialinvoke $r24.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Point mLastReportedDisplayOffset> = $r24;

        r0.<com.android.server.wm.WindowState: boolean mResizedWhileGone> = 0;

        r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated> = 0;

        r0.<com.android.server.wm.WindowState: boolean mBehindIme> = 0;

        $r25 = new android.graphics.Rect;

        specialinvoke $r25.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastSurfaceInsets> = $r25;

        $r26 = new android.graphics.Point;

        specialinvoke $r26.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition> = $r26;

        $r27 = new android.graphics.Region;

        specialinvoke $r27.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion> = $r27;

        r0.<com.android.server.wm.WindowState: long mFrameNumber> = -1L;

        r0.<com.android.server.wm.WindowState: boolean mIsDimming> = 0;

        $r28 = new android.view.InsetsState;

        specialinvoke $r28.<android.view.InsetsState: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.view.InsetsState mRequestedInsetsState> = $r28;

        r0.<com.android.server.wm.WindowState: int mFrameRateSelectionPriority> = -1;

        r0.<com.android.server.wm.WindowState: int mLocalSyncId> = -1;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession> = r1;

        r0.<com.android.server.wm.WindowState: android.view.IWindow mClient> = r58;

        r0.<com.android.server.wm.WindowState: int mAppOp> = i0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken> = r59;

        $r29 = virtualinvoke r59.<com.android.server.wm.WindowToken: com.android.server.wm.ActivityRecord asActivityRecord()>();

        r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord> = $r29;

        r0.<com.android.server.wm.WindowState: int mOwnerUid> = i3;

        r0.<com.android.server.wm.WindowState: int mShowUserId> = i4;

        r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow> = z5;

        $r30 = new com.android.server.wm.WindowState$WindowId;

        specialinvoke $r30.<com.android.server.wm.WindowState$WindowId: void <init>(com.android.server.wm.WindowState,com.android.server.wm.WindowState$1)>(r0, null);

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$WindowId mWindowId> = $r30;

        $r31 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        virtualinvoke $r31.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r3);

        $r34 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastSurfaceInsets>;

        $r32 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r33 = $r32.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r34.<android.graphics.Rect: void set(android.graphics.Rect)>($r33);

        r0.<com.android.server.wm.WindowState: int mViewVisibility> = i2;

        $r35 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r36 = $r35.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        r0.<com.android.server.wm.WindowState: com.android.server.policy.WindowManagerPolicy mPolicy> = $r36;

        $r37 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r38 = $r37.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r0.<com.android.server.wm.WindowState: android.content.Context mContext> = $r38;

        $r39 = new com.android.server.wm.WindowState$DeathRecipient;

        specialinvoke $r39.<com.android.server.wm.WindowState$DeathRecipient: void <init>(com.android.server.wm.WindowState,com.android.server.wm.WindowState$1)>(r0, null);

        r0.<com.android.server.wm.WindowState: int mSeq> = i1;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$PowerManagerWrapper mPowerManagerWrapper> = r4;

        $z0 = r59.<com.android.server.wm.WindowToken: boolean mRoundedCornerOverlay>;

        r0.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate> = $z0;

     label01:
        $r40 = interfaceinvoke r58.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r40.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r39, 0);

     label02:
        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeathRecipient mDeathRecipient> = $r39;

        $r41 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r41.<android.view.WindowManager$LayoutParams: int type>;

        if $i6 < 1000 goto label10;

        $r50 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i18 = $r50.<android.view.WindowManager$LayoutParams: int type>;

        if $i18 > 1999 goto label10;

        $r51 = r0.<com.android.server.wm.WindowState: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i19 = interfaceinvoke $r51.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r2);

        $i20 = $i19 * 10000;

        $i21 = $i20 + 1000;

        r0.<com.android.server.wm.WindowState: int mBaseLayer> = $i21;

        $r52 = r0.<com.android.server.wm.WindowState: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i22 = r3.<android.view.WindowManager$LayoutParams: int type>;

        $i23 = interfaceinvoke $r52.<com.android.server.policy.WindowManagerPolicy: int getSubWindowLayerFromTypeLw(int)>($i22);

        r0.<com.android.server.wm.WindowState: int mSubLayer> = $i23;

        r0.<com.android.server.wm.WindowState: boolean mIsChildWindow> = 1;

        $r53 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i24 = $r53.<android.view.WindowManager$LayoutParams: int type>;

        if $i24 == 1003 goto label03;

        z6 = 1;

        goto label04;

     label03:
        z6 = 0;

     label04:
        r0.<com.android.server.wm.WindowState: boolean mLayoutAttached> = z6;

        $r54 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i25 = $r54.<android.view.WindowManager$LayoutParams: int type>;

        if $i25 == 2011 goto label06;

        $r55 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i26 = $r55.<android.view.WindowManager$LayoutParams: int type>;

        if $i26 != 2012 goto label05;

        goto label06;

     label05:
        z7 = 0;

        goto label07;

     label06:
        z7 = 1;

     label07:
        r0.<com.android.server.wm.WindowState: boolean mIsImWindow> = z7;

        $r60 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i27 = $r60.<android.view.WindowManager$LayoutParams: int type>;

        if $i27 != 2013 goto label08;

        z8 = 1;

        goto label09;

     label08:
        z8 = 0;

     label09:
        r0.<com.android.server.wm.WindowState: boolean mIsWallpaper> = z8;

        goto label16;

     label10:
        $r42 = r0.<com.android.server.wm.WindowState: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $i7 = interfaceinvoke $r42.<com.android.server.policy.WindowManagerPolicy: int getWindowLayerLw(com.android.server.policy.WindowManagerPolicy$WindowState)>(r0);

        $i8 = $i7 * 10000;

        $i9 = $i8 + 1000;

        r0.<com.android.server.wm.WindowState: int mBaseLayer> = $i9;

        r0.<com.android.server.wm.WindowState: int mSubLayer> = 0;

        r0.<com.android.server.wm.WindowState: boolean mIsChildWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mLayoutAttached> = 0;

        $r43 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i10 = $r43.<android.view.WindowManager$LayoutParams: int type>;

        if $i10 == 2011 goto label12;

        $r49 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i17 = $r49.<android.view.WindowManager$LayoutParams: int type>;

        if $i17 != 2012 goto label11;

        goto label12;

     label11:
        z9 = 0;

        goto label13;

     label12:
        z9 = 1;

     label13:
        r0.<com.android.server.wm.WindowState: boolean mIsImWindow> = z9;

        $r61 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i28 = $r61.<android.view.WindowManager$LayoutParams: int type>;

        if $i28 != 2013 goto label14;

        z10 = 1;

        goto label15;

     label14:
        z10 = 0;

     label15:
        r0.<com.android.server.wm.WindowState: boolean mIsWallpaper> = z10;

     label16:
        $z11 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z11 != 0 goto label18;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z4 == 0 goto label17;

        goto label18;

     label17:
        z12 = 0;

        goto label19;

     label18:
        z12 = 1;

     label19:
        r0.<com.android.server.wm.WindowState: boolean mIsFloatingLayer> = z12;

        r62 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r62 == null goto label20;

        $z3 = r62.<com.android.server.wm.ActivityRecord: boolean mShowForAllUsers>;

        if $z3 == 0 goto label20;

        r63 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i15 = r63.<android.view.WindowManager$LayoutParams: int flags>;

        $i16 = $i15 | 524288;

        r63.<android.view.WindowManager$LayoutParams: int flags> = $i16;

     label20:
        $r64 = new com.android.server.wm.WindowStateAnimator;

        specialinvoke $r64.<com.android.server.wm.WindowStateAnimator: void <init>(com.android.server.wm.WindowState)>(r0);

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator> = $r64;

        $f0 = r3.<android.view.WindowManager$LayoutParams: float alpha>;

        $r64.<com.android.server.wm.WindowStateAnimator: float mAlpha> = $f0;

        r0.<com.android.server.wm.WindowState: int mRequestedWidth> = 0;

        r0.<com.android.server.wm.WindowState: int mRequestedHeight> = 0;

        r0.<com.android.server.wm.WindowState: int mLastRequestedWidth> = 0;

        r0.<com.android.server.wm.WindowState: int mLastRequestedHeight> = 0;

        r0.<com.android.server.wm.WindowState: int mLayer> = 0;

        r66 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r66 == null goto label21;

        r67 = r66.<com.android.server.wm.ActivityRecord: android.view.InputApplicationHandle mInputApplicationHandle>;

        goto label22;

     label21:
        r67 = null;

     label22:
        $r44 = new android.view.InputWindowHandle;

        $i11 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        specialinvoke $r44.<android.view.InputWindowHandle: void <init>(android.view.InputApplicationHandle,int)>(r67, $i11);

        r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle> = $r44;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z1 == 0 goto label24;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z2 == 0 goto label23;

        r68 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r69 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r48 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r47 = newarray (java.lang.Object)[2];

        $r47[0] = r68;

        $r47[1] = r69;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r48, -916108501, 0, null, $r47);

     label23:
        $r46 = <com.android.server.wm.WindowState: java.util.Comparator sWindowSubLayerComparator>;

        virtualinvoke r2.<com.android.server.wm.WindowState: void addChild(com.android.server.wm.WindowContainer,java.util.Comparator)>(r0, $r46);

     label24:
        $i29 = r1.<com.android.server.wm.Session: int mPid>;

        $i30 = <com.android.server.am.ActivityManagerService: int MY_PID>;

        if $i29 == $i30 goto label26;

        $i12 = r1.<com.android.server.wm.Session: int mPid>;

        if $i12 >= 0 goto label25;

        goto label26;

     label25:
        $r45 = r57.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $i14 = r1.<com.android.server.wm.Session: int mPid>;

        $i13 = r1.<com.android.server.wm.Session: int mUid>;

        r70 = virtualinvoke $r45.<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.WindowProcessController getProcessController(int,int)>($i14, $i13);

        goto label27;

     label26:
        r70 = null;

     label27:
        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowProcessController mWpcForDisplayConfigChanges> = r70;

        return;

     label28:
        $r56 := @caughtexception;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeathRecipient mDeathRecipient> = null;

        r0.<com.android.server.wm.WindowState: boolean mIsChildWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mLayoutAttached> = 0;

        r0.<com.android.server.wm.WindowState: boolean mIsImWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mIsWallpaper> = 0;

        r0.<com.android.server.wm.WindowState: boolean mIsFloatingLayer> = 0;

        r0.<com.android.server.wm.WindowState: int mBaseLayer> = 0;

        r0.<com.android.server.wm.WindowState: int mSubLayer> = 0;

        r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle> = null;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator> = null;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowProcessController mWpcForDisplayConfigChanges> = null;

        return;

        catch android.os.RemoteException from label01 to label02 with label28;
    }

    static boolean access$200(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean shouldKeepVisibleDeadAppWindow()>();

        return $z0;
    }

    static void access$300(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wm.WindowState: void removeIfPossible(boolean)>(z0);

        return;
    }

    private void adjustRegionInFreefromWindowMode(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1;
        int i0, $i1, $i2;
        boolean $z0;
        com.android.server.wm.DisplayContent $r2;
        android.util.DisplayMetrics $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = staticinvoke <com.android.server.wm.WindowManagerService: int dipToPixel(int,android.util.DisplayMetrics)>(30, $r3);

        $i2 = neg i0;

        $i1 = neg i0;

        virtualinvoke r1.<android.graphics.Rect: void inset(int,int)>($i2, $i1);

        return;
    }

    private void applyDims()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, $z3;
        android.view.WindowManager$LayoutParams $r1, $r4;
        int $i0, $i1;
        com.android.server.wm.Dimmer $r2, $r5;
        android.view.SurfaceControl$Transaction $r3, $r6;
        float $f0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z0 != 0 goto label1;

        $z3 = r0.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z3 == 0 goto label1;

        r0.<com.android.server.wm.WindowState: boolean mIsDimming> = 1;

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Dimmer getDimmer()>();

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        virtualinvoke $r5.<com.android.server.wm.Dimmer: void dimAbove(android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer,float)>($r6, r0, 0.5F);

        goto label2;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label2;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mHidden>;

        if $z2 != 0 goto label2;

        r0.<com.android.server.wm.WindowState: boolean mIsDimming> = 1;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Dimmer getDimmer()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getSyncTransaction()>();

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f0 = $r4.<android.view.WindowManager$LayoutParams: float dimAmount>;

        virtualinvoke $r2.<com.android.server.wm.Dimmer: void dimBelow(android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer,float)>($r3, r0, $f0);

     label2:
        return;
    }

    private void applyGravityAndUpdateFrame(com.android.server.wm.WindowFrames, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames r1;
        android.graphics.Rect r2, r3, $r9, $r10, $r11, $r13, $r28;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, i21, i22, i23, i24, $i25, i26, i27, $i28, $i29, $i30;
        com.android.server.wm.Task r4;
        boolean z0, $z1, z2, z4, z5, z6;
        android.view.WindowManager$LayoutParams $r5, $r6, $r7, $r8, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, f21, f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowFrames;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        i0 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        i1 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean inAppWindowThatMatchesParentBounds()>();

        z0 = z2 ^ 1;

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 & 512;

        if $i3 == 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        z5 = 1;

        if r4 == null goto label04;

        z5 = 1;

        if z0 == 0 goto label04;

        $r21 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i15 = $r21.<android.view.WindowManager$LayoutParams: int type>;

        if $i15 == 1 goto label03;

        if z4 != 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        $r22 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i16 = $r22.<android.view.WindowManager$LayoutParams: int flags>;

        $i17 = $i16 & 16384;

        if $i17 == 0 goto label10;

        $r16 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i12 = $r16.<android.view.WindowManager$LayoutParams: int width>;

        if $i12 >= 0 goto label05;

        i18 = i0;

        goto label07;

     label05:
        if z6 == 0 goto label06;

        $r20 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i14 = $r20.<android.view.WindowManager$LayoutParams: int width>;

        $f18 = (float) $i14;

        $f17 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f19 = $f18 * $f17;

        $f20 = $f19 + 0.5F;

        i18 = (int) $f20;

        goto label07;

     label06:
        $r17 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i18 = $r17.<android.view.WindowManager$LayoutParams: int width>;

     label07:
        $r23 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i19 = $r23.<android.view.WindowManager$LayoutParams: int height>;

        if $i19 >= 0 goto label08;

        i21 = i18;

        i22 = i1;

        goto label16;

     label08:
        if z6 == 0 goto label09;

        $r19 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i13 = $r19.<android.view.WindowManager$LayoutParams: int height>;

        $f14 = (float) $i13;

        $f13 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f15 = $f14 * $f13;

        $f16 = $f15 + 0.5F;

        i23 = (int) $f16;

        i21 = i18;

        i22 = i23;

        goto label16;

     label09:
        $r18 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i24 = $r18.<android.view.WindowManager$LayoutParams: int height>;

        i21 = i18;

        i22 = i24;

        goto label16;

     label10:
        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r6.<android.view.WindowManager$LayoutParams: int width>;

        if $i4 != -1 goto label11;

        i21 = i0;

        goto label13;

     label11:
        if z6 == 0 goto label12;

        $i11 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        $f10 = (float) $i11;

        $f9 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f11 = $f10 * $f9;

        $f12 = $f11 + 0.5F;

        i21 = (int) $f12;

        goto label13;

     label12:
        i21 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

     label13:
        $r24 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i25 = $r24.<android.view.WindowManager$LayoutParams: int height>;

        if $i25 != -1 goto label14;

        i22 = i1;

        goto label16;

     label14:
        if z6 == 0 goto label15;

        $i10 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        $f6 = (float) $i10;

        $f5 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f7 = $f6 * $f5;

        $f8 = $f7 + 0.5F;

        i22 = (int) $f8;

        goto label16;

     label15:
        i22 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

     label16:
        if z6 == 0 goto label17;

        $r14 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i8 = $r14.<android.view.WindowManager$LayoutParams: int x>;

        $f2 = (float) $i8;

        $f1 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        f21 = $f2 * $f1;

        $r15 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i9 = $r15.<android.view.WindowManager$LayoutParams: int y>;

        $f4 = (float) $i9;

        $f3 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        f22 = $f4 * $f3;

        goto label18;

     label17:
        $r7 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r7.<android.view.WindowManager$LayoutParams: int x>;

        f21 = (float) $i5;

        $r8 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r8.<android.view.WindowManager$LayoutParams: int y>;

        f22 = (float) $i6;

     label18:
        i26 = i21;

        i27 = i22;

        if z0 == 0 goto label19;

        i26 = i21;

        i27 = i22;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean layoutInParentFrame()>();

        if $z1 != 0 goto label19;

        i26 = staticinvoke <java.lang.Math: int min(int,int)>(i21, i0);

        i27 = staticinvoke <java.lang.Math: int min(int,int)>(i22, i1);

     label19:
        $r25 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i28 = $r25.<android.view.WindowManager$LayoutParams: int gravity>;

        $r26 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f23 = $r26.<android.view.WindowManager$LayoutParams: float horizontalMargin>;

        $f24 = (float) i0;

        $f25 = $f23 * $f24;

        $f26 = $f25 + f21;

        $i29 = (int) $f26;

        $r27 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f27 = $r27.<android.view.WindowManager$LayoutParams: float verticalMargin>;

        $f28 = (float) i1;

        $f29 = $f27 * $f28;

        $f30 = $f29 + f22;

        $i30 = (int) $f30;

        $r28 = r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>($i28, i26, i27, r2, $i29, $i30, $r28);

        if z5 == 0 goto label20;

        $r12 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i7 = $r12.<android.view.WindowManager$LayoutParams: int gravity>;

        $r13 = r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        staticinvoke <android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>($i7, r3, $r13);

        goto label20;

     label20:
        $r10 = r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $r9 = r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r10.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

        if z6 == 0 goto label21;

        $r11 = r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $f0 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        virtualinvoke $r11.<android.graphics.Rect: void scale(float)>($f0);

     label21:
        return;
    }

    private boolean applyImeWindowsIfNeeded(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.WindowState r0;
        com.android.internal.util.ToBooleanFunction r1;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isInputMethodTarget()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSplitScreenWindowingMode()>();

        if $z2 != 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z3 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean forAllImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        if $z3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.WindowState r0;
        com.android.internal.util.ToBooleanFunction r1;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $z3 = specialinvoke r0.<com.android.server.wm.WindowState: boolean applyImeWindowsIfNeeded(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        if $z3 != 0 goto label1;

        $z4 = interfaceinvoke r1.<com.android.internal.util.ToBooleanFunction: boolean apply(java.lang.Object)>(r0);

        if $z4 == 0 goto label3;

     label1:
        return 1;

     label2:
        $z1 = interfaceinvoke r1.<com.android.internal.util.ToBooleanFunction: boolean apply(java.lang.Object)>(r0);

        if $z1 != 0 goto label4;

        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean applyImeWindowsIfNeeded(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    private static void applyInsets(android.graphics.Region, android.graphics.Rect, android.graphics.Rect)
    {
        android.graphics.Region r0;
        android.graphics.Rect r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @parameter0: android.graphics.Region;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Rect;

        $i1 = r1.<android.graphics.Rect: int left>;

        $i0 = r2.<android.graphics.Rect: int left>;

        $i11 = $i1 + $i0;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r2.<android.graphics.Rect: int top>;

        $i10 = $i3 + $i2;

        $i5 = r1.<android.graphics.Rect: int right>;

        $i4 = r2.<android.graphics.Rect: int right>;

        $i9 = $i5 - $i4;

        $i7 = r1.<android.graphics.Rect: int bottom>;

        $i6 = r2.<android.graphics.Rect: int bottom>;

        $i8 = $i7 - $i6;

        virtualinvoke r0.<android.graphics.Region: boolean set(int,int,int,int)>($i11, $i10, $i9, $i8);

        return;
    }

    private void calculateSystemDecorRect(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2, $r6, $r8, $r10, $r12;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26;
        boolean z0, $z2, $z3, $z4, $z6, z7;
        android.view.DisplayInfo r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        com.android.server.wm.WindowFrames $r4, $r5, $r7, $r9, $r11;
        byte $b3;
        com.android.server.wm.DisplayContent $r13;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r2 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mDecorFrame>;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r6 = $r5.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i0 = virtualinvoke $r6.<android.graphics.Rect: int width()>();

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r8 = $r7.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i26 = virtualinvoke $r8.<android.graphics.Rect: int height()>();

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r10 = $r9.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i1 = $r10.<android.graphics.Rect: int left>;

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r12 = $r11.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i2 = $r12.<android.graphics.Rect: int top>;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDockedResizing()>();

        if z0 == 0 goto label1;

        $r13 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r3 = virtualinvoke $r13.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $i22 = r3.<android.view.DisplayInfo: int logicalWidth>;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i22);

        $i24 = r3.<android.view.DisplayInfo: int logicalHeight>;

        $i25 = staticinvoke <java.lang.Math: int max(int,int)>(i26, $i24);

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i23, $i25);

        goto label2;

     label1:
        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i0, i26);

     label2:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z2 == 0 goto label3;

        z7 = 0;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z6 != 0 goto label4;

     label3:
        z7 = 0;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDockedResizing()>();

        if $z3 != 0 goto label4;

        z7 = 1;

     label4:
        if z7 == 0 goto label5;

        $i14 = r2.<android.graphics.Rect: int left>;

        $i21 = $i14 - i1;

        $i15 = r2.<android.graphics.Rect: int top>;

        $i20 = $i15 - i2;

        $i16 = r2.<android.graphics.Rect: int right>;

        $i19 = $i16 - i1;

        $i17 = r2.<android.graphics.Rect: int bottom>;

        $i18 = $i17 - i2;

        virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>($i21, $i20, $i19, $i18);

     label5:
        $f1 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        $b3 = $f1 cmpl 1.0F;

        if $b3 == 0 goto label6;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z4 == 0 goto label6;

        f0 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $f2 = (float) $i4;

        $f3 = $f2 * f0;

        $f4 = $f3 - 0.5F;

        $i5 = (int) $f4;

        r1.<android.graphics.Rect: int left> = $i5;

        $i6 = r1.<android.graphics.Rect: int top>;

        $f5 = (float) $i6;

        $f6 = $f5 * f0;

        $f7 = $f6 - 0.5F;

        $i7 = (int) $f7;

        r1.<android.graphics.Rect: int top> = $i7;

        $i8 = r1.<android.graphics.Rect: int right>;

        $i9 = $i8 + 1;

        $f8 = (float) $i9;

        $f9 = $f8 * f0;

        $f10 = $f9 - 0.5F;

        $i10 = (int) $f10;

        r1.<android.graphics.Rect: int right> = $i10;

        $i11 = r1.<android.graphics.Rect: int bottom>;

        $i12 = $i11 + 1;

        $f11 = (float) $i12;

        $f12 = $f11 * f0;

        $f13 = $f12 - 0.5F;

        $i13 = (int) $f13;

        r1.<android.graphics.Rect: int bottom> = $i13;

     label6:
        return;
    }

    private boolean canWindowInEmbeddedDisplayBeImeTarget()
    {
        com.android.server.wm.WindowState r0;
        android.util.ArraySet $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.wm.'-$$Lambda$vNw1FL8qoJwmKQm6_fCaVoUasrM' $r4;
        com.android.server.wm.DisplayContent $r5;
        boolean $z0;
        com.android.internal.util.ToBooleanFunction r6;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $i0 = virtualinvoke $r1.<android.util.ArraySet: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $r3 = virtualinvoke $r2.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.wm.DisplayContent) $r3;

        $r4 = <com.android.server.wm._$$Lambda$vNw1FL8qoJwmKQm6_fCaVoUasrM: com.android.server.wm.'-$$Lambda$vNw1FL8qoJwmKQm6_fCaVoUasrM' INSTANCE>;

        r6 = (com.android.internal.util.ToBooleanFunction) $r4;

        $z0 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: boolean forAllWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r6, 1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    private boolean computeDragResizing()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        int $i0, $i1, $i2;
        android.view.WindowManager$LayoutParams $r3, $r4;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.DockedStackDividerController $r6;
        java.util.ArrayDeque $r7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        z7 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSplitScreenWindowingMode()>();

        if $z0 != 0 goto label2;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z6 != 0 goto label2;

        return 0;

     label2:
        $i0 = virtualinvoke r1.<com.android.server.wm.Task: int getActivityType()>();

        if $i0 != 2 goto label3;

        return 0;

     label3:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int width>;

        if $i1 != -1 goto label8;

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r4.<android.view.WindowManager$LayoutParams: int height>;

        if $i2 == -1 goto label4;

        goto label8;

     label4:
        $z1 = virtualinvoke r1.<com.android.server.wm.Task: boolean isDragResizing()>();

        if $z1 == 0 goto label5;

        return 1;

     label5:
        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r6 = $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked>;

        $z2 = virtualinvoke $r6.<com.android.server.wm.DockedStackDividerController: boolean isResizing()>();

        if $z2 != 0 goto label6;

        r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r2 == null goto label7;

        $r7 = r2.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $z5 = virtualinvoke $r7.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z5 != 0 goto label7;

     label6:
        $z3 = virtualinvoke r1.<com.android.server.wm.Task: boolean inFreeformWindowingMode()>();

        if $z3 != 0 goto label7;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z4 != 0 goto label7;

        z7 = 1;

        goto label7;

     label7:
        return z7;

     label8:
        return 0;
    }

    private void cropRegionToStackBoundsIfNeeded(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1;
        boolean $z0, $z1;
        android.graphics.Rect $r2, $r3, $r5;
        android.graphics.Region$Op $r4;
        com.android.server.wm.Task r6;
        com.android.server.wm.ActivityStack r7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        r6 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r6 == null goto label4;

        $z0 = virtualinvoke r6.<com.android.server.wm.Task: boolean cropWindowsToStackBounds()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        r7 = virtualinvoke r6.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r7 == null goto label3;

        $z1 = r7.<com.android.server.wm.ActivityStack: boolean mCreatedByOrganizer>;

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r2 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r7.<com.android.server.wm.ActivityStack: void getDimBounds(android.graphics.Rect)>($r2);

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.WindowState: void adjustRegionInFreefromWindowMode(android.graphics.Rect)>($r3);

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>($r5, $r4);

        return;

     label3:
        return;

     label4:
        return;
    }

    private void cutRect(android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i1 = r2.<android.graphics.Rect: int top>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        if $i1 >= $i0 goto label3;

        $i15 = r2.<android.graphics.Rect: int bottom>;

        $i14 = r1.<android.graphics.Rect: int top>;

        if $i15 <= $i14 goto label3;

        $i17 = r2.<android.graphics.Rect: int right>;

        $i16 = r1.<android.graphics.Rect: int right>;

        if $i17 < $i16 goto label2;

        $i24 = r2.<android.graphics.Rect: int left>;

        $i23 = r1.<android.graphics.Rect: int left>;

        if $i24 < $i23 goto label2;

        $i25 = r2.<android.graphics.Rect: int left>;

        r1.<android.graphics.Rect: int right> = $i25;

        goto label3;

     label2:
        $i19 = r2.<android.graphics.Rect: int left>;

        $i18 = r1.<android.graphics.Rect: int left>;

        if $i19 > $i18 goto label3;

        $i21 = r2.<android.graphics.Rect: int right>;

        $i20 = r1.<android.graphics.Rect: int right>;

        if $i21 > $i20 goto label3;

        $i22 = r2.<android.graphics.Rect: int right>;

        r1.<android.graphics.Rect: int left> = $i22;

     label3:
        $i26 = r2.<android.graphics.Rect: int left>;

        $i27 = r1.<android.graphics.Rect: int right>;

        if $i26 >= $i27 goto label5;

        $i3 = r2.<android.graphics.Rect: int right>;

        $i2 = r1.<android.graphics.Rect: int left>;

        if $i3 <= $i2 goto label5;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        $i4 = r1.<android.graphics.Rect: int bottom>;

        if $i5 < $i4 goto label4;

        $i12 = r2.<android.graphics.Rect: int top>;

        $i11 = r1.<android.graphics.Rect: int top>;

        if $i12 < $i11 goto label4;

        $i13 = r2.<android.graphics.Rect: int top>;

        r1.<android.graphics.Rect: int bottom> = $i13;

        goto label5;

     label4:
        $i7 = r2.<android.graphics.Rect: int top>;

        $i6 = r1.<android.graphics.Rect: int top>;

        if $i7 > $i6 goto label5;

        $i9 = r2.<android.graphics.Rect: int bottom>;

        $i8 = r1.<android.graphics.Rect: int bottom>;

        if $i9 > $i8 goto label5;

        $i10 = r2.<android.graphics.Rect: int bottom>;

        r1.<android.graphics.Rect: int top> = $i10;

     label5:
        return;
    }

    private boolean forAllWindowBottomToTop(com.android.internal.util.ToBooleanFunction)
    {
        com.android.server.wm.WindowState r0, r9;
        com.android.internal.util.ToBooleanFunction r1;
        int i0, $i1, i2, i3;
        com.android.server.wm.WindowList $r2, $r3, $r5, $r7;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        i2 = 0;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        r9 = (com.android.server.wm.WindowState) $r4;

     label1:
        i3 = i2;

        if i2 >= i0 goto label4;

        i3 = i2;

        $i1 = r9.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i1 >= 0 goto label4;

        $z1 = specialinvoke r9.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        if i2 < i0 goto label3;

        i3 = i2;

        goto label4;

     label3:
        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r9 = (com.android.server.wm.WindowState) $r8;

        goto label1;

     label4:
        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 0);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        if i3 >= i0 goto label8;

        $z0 = specialinvoke r9.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 0);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        i3 = i3 + 1;

        if i3 < i0 goto label7;

        goto label8;

     label7:
        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r9 = (com.android.server.wm.WindowState) $r6;

        goto label5;

     label8:
        return 0;
    }

    private boolean forAllWindowTopToBottom(com.android.internal.util.ToBooleanFunction)
    {
        com.android.server.wm.WindowState r0, r9;
        com.android.internal.util.ToBooleanFunction r1;
        com.android.server.wm.WindowList $r2, $r3, $r5, $r7;
        int $i0, $i1, i2, i3;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i0 - 1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r9 = (com.android.server.wm.WindowState) $r4;

     label1:
        i3 = i2;

        if i2 < 0 goto label4;

        i3 = i2;

        $i1 = r9.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i1 < 0 goto label4;

        $z1 = specialinvoke r9.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + -1;

        if i2 >= 0 goto label3;

        i3 = i2;

        goto label4;

     label3:
        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r9 = (com.android.server.wm.WindowState) $r8;

        goto label1;

     label4:
        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 1);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        if i3 < 0 goto label8;

        $z0 = specialinvoke r9.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, 1);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        i3 = i3 + -1;

        if i3 >= 0 goto label7;

        goto label8;

     label7:
        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r9 = (com.android.server.wm.WindowState) $r6;

        goto label5;

     label8:
        return 0;
    }

    private boolean frameCoversEntireAppTokenBounds()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord $r1, $r7;
        android.graphics.Rect $r2, $r3, $r5, $r6, $r8, $r9;
        com.android.server.wm.WindowFrames $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r3 = virtualinvoke $r1.<com.android.server.wm.ActivityRecord: android.graphics.Rect getBounds()>();

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r6.<android.graphics.Rect: void intersectUnchecked(android.graphics.Rect)>($r5);

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.ActivityRecord: android.graphics.Rect getBounds()>();

        $r9 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $z0 = virtualinvoke $r8.<android.graphics.Rect: boolean equals(java.lang.Object)>($r9);

        return $z0;
    }

    private android.content.res.Configuration getLastReportedConfiguration()
    {
        com.android.server.wm.WindowState r0;
        android.util.MergedConfiguration $r1;
        android.content.res.Configuration $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration>;

        $r2 = virtualinvoke $r1.<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()>();

        return $r2;
    }

    private android.content.res.Configuration getProcessGlobalConfiguration()
    {
        com.android.server.wm.WindowState r0, r4;
        int i0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.ActivityTaskManagerService $r2;
        android.content.res.Configuration $r3;
        com.android.server.wm.Session r5;

        r0 := @this: com.android.server.wm.WindowState;

        r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        if r4 == null goto label1;

        r5 = r4.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        goto label2;

     label1:
        r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

     label2:
        i0 = r5.<com.android.server.wm.Session: int mPid>;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerService mAtmService>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.ActivityTaskManagerService: android.content.res.Configuration getGlobalConfigurationForPid(int)>(i0);

        return $r3;
    }

    private int getRootTaskId()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityStack r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        if r1 != null goto label1;

        return -1;

     label1:
        $i0 = r1.<com.android.server.wm.ActivityStack: int mTaskId>;

        return $i0;
    }

    private boolean hasMoved()
    {
        com.android.server.wm.WindowState r0, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        com.android.server.wm.WindowFrames $r1, $r2, $r4, $r7, $r9;
        android.graphics.Rect $r3, $r5, $r8, $r10;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label4;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.WindowFrames: boolean hasContentChanged()>();

        if $z1 != 0 goto label1;

        $z5 = r0.<com.android.server.wm.WindowState: boolean mMovedByResize>;

        if $z5 == 0 goto label4;

     label1:
        $z2 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z2 != 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        $i1 = $r3.<android.graphics.Rect: int top>;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastRelFrame>;

        $i0 = $r5.<android.graphics.Rect: int top>;

        if $i1 != $i0 goto label2;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r8 = $r7.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        $i3 = $r8.<android.graphics.Rect: int left>;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r10 = $r9.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastRelFrame>;

        $i2 = $r10.<android.graphics.Rect: int left>;

        if $i3 == $i2 goto label4;

     label2:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z3 == 0 goto label3;

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $z4 = specialinvoke $r6.<com.android.server.wm.WindowState: boolean hasMoved()>();

        if $z4 != 0 goto label4;

     label3:
        z6 = 1;

        goto label5;

     label4:
        z6 = 0;

     label5:
        return z6;
    }

    private boolean inAppWindowThatMatchesParentBounds()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean matchParentBounds()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inMultiWindowMode()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private void initExclusionRestrictions()
    {
        com.android.server.wm.WindowState r0;
        long l0;
        long[] r1;

        r0 := @this: com.android.server.wm.WindowState;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1 = r0.<com.android.server.wm.WindowState: long[] mLastExclusionLogUptimeMillis>;

        r1[0] = l0;

        r1[1] = l0;

        return;
    }

    private boolean isDragResizingChangeReported()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mDragResizingChangeReported>;

        return $z0;
    }

    private boolean isLegacyPolicyVisibility()
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        i0 = r0.<com.android.server.wm.WindowState: int mPolicyVisibility>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isOpaqueDrawn()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int format>;

        if $i0 == -1 goto label2;

     label1:
        $z1 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z1 == 0 goto label3;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z2 == 0 goto label3;

     label2:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z3 == 0 goto label3;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z4 != 0 goto label3;

        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        return z5;
    }

    private boolean isParentWindowGoneForLayout()
    {
        com.android.server.wm.WindowState r0, r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isRecentsAnimationConsumingAppInput()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.RecentsAnimationController r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.ActivityRecord $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RecentsAnimationController getRecentsAnimationController()>();

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z0 = virtualinvoke r1.<com.android.server.wm.RecentsAnimationController: boolean shouldApplyInputConsumer(com.android.server.wm.ActivityRecord)>($r3);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void logExclusionRestrictions(int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i3, i4, $i10, $i11, $i12, $i13, $i15;
        long l1, l2, $l5, $l6, $l7, $l8, $l14;
        boolean $z0, $z1, z2;
        long[] $r1, r8;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowManagerConstants $r3;
        byte $b9;
        int[] $r4, $r5;
        android.view.WindowManager$LayoutParams $r6;
        android.content.res.Configuration $r7;
        java.lang.String r9;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.wm.DisplayContent: boolean logsGestureExclusionRestrictions(com.android.server.wm.WindowState)>(r0);

        if $z0 == 0 goto label4;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = r0.<com.android.server.wm.WindowState: long[] mLastExclusionLogUptimeMillis>;

        $l7 = $r1[i0];

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        $l6 = $r3.<com.android.server.wm.WindowManagerConstants: long mSystemGestureExclusionLogDebounceTimeoutMillis>;

        $l8 = $l7 + $l6;

        $b9 = $l5 cmp $l8;

        if $b9 >= 0 goto label1;

        goto label4;

     label1:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r8 = r0.<com.android.server.wm.WindowState: long[] mLastExclusionLogUptimeMillis>;

        l2 = r8[i0];

        r8[i0] = l1;

        $r4 = r0.<com.android.server.wm.WindowState: int[] mLastRequestedExclusionHeight>;

        i3 = $r4[i0];

        $r5 = r0.<com.android.server.wm.WindowState: int[] mLastGrantedExclusionHeight>;

        i4 = $r5[i0];

        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r9 = $r6.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        $i10 = $r7.<android.content.res.Configuration: int orientation>;

        if $i10 != 2 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        $i11 = i3 - i4;

        $i12 = i0 + 1;

        $i13 = virtualinvoke r0.<com.android.server.wm.WindowState: int getWindowingMode()>();

        $z1 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>($i13);

        $l14 = l1 - l2;

        $i15 = (int) $l14;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,java.lang.String,int,int,int,boolean,boolean,int)>(223, r9, i3, $i11, $i12, z2, $z1, $i15);

        return;

     label4:
        return;
    }

    private void logPerformShow(java.lang.String)
    {
        com.android.server.wm.WindowState r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private boolean matchesDisplayBounds()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r4, $r5, $r6;
        com.android.server.wm.WindowToken $r2;
        com.android.server.wm.DisplayContent $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowToken: android.graphics.Rect getFixedRotationTransformDisplayBounds()>();

        if r1 == null goto label1;

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getBounds()>();

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r6);

        return $z1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: android.graphics.Rect getBounds()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke $r4.<android.graphics.Rect: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    private void notifyBlastSyncTransaction()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.WindowManagerService$H $r2;
        boolean $z0;
        com.android.server.wm.BLASTSyncEngine$TransactionReadyListener $r3, $r4;
        int $i0, $i1, $i2;
        java.util.Set $r5;
        com.android.server.wm.BLASTSyncEngine $r6;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(64, r0);

        $z0 = r0.<com.android.server.wm.WindowState: boolean mNotifyBlastOnSurfacePlacement>;

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.BLASTSyncEngine$TransactionReadyListener mWaitingListener>;

        if $r3 != null goto label1;

        goto label3;

     label1:
        $i0 = r0.<com.android.server.wm.WindowState: int mLocalSyncId>;

        if $i0 < 0 goto label2;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.BLASTSyncEngine mBLASTSyncEngine>;

        $i2 = r0.<com.android.server.wm.WindowState: int mLocalSyncId>;

        virtualinvoke $r6.<com.android.server.wm.BLASTSyncEngine: void setReady(int)>($i2);

        return;

     label2:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.BLASTSyncEngine$TransactionReadyListener mWaitingListener>;

        $i1 = r0.<com.android.server.wm.WindowState: int mWaitingSyncId>;

        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r0);

        interfaceinvoke $r4.<com.android.server.wm.BLASTSyncEngine$TransactionReadyListener: void onTransactionReady(int,java.util.Set)>($i1, $r5);

        r0.<com.android.server.wm.WindowState: int mWaitingSyncId> = 0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.BLASTSyncEngine$TransactionReadyListener mWaitingListener> = null;

        r0.<com.android.server.wm.WindowState: boolean mNotifyBlastOnSurfacePlacement> = 0;

        return;

     label3:
        r0.<com.android.server.wm.WindowState: boolean mNotifyBlastOnSurfacePlacement> = 0;

        return;
    }

    private boolean registeredForDisplayConfigChanges()
    {
        com.android.server.wm.WindowState r0, r1;
        boolean $z0, z1;
        com.android.server.wm.WindowProcessController r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        if r1 == null goto label1;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowProcessController mWpcForDisplayConfigChanges>;

        goto label2;

     label1:
        r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowProcessController mWpcForDisplayConfigChanges>;

     label2:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<com.android.server.wm.WindowProcessController: boolean registeredForDisplayConfigChanges()>();

        if $z0 == 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    private void removeIfPossible(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, z23, z24, $z25, z26, z28, $z29, z30, z31, $z32, z33, $z34;
        java.lang.String r1, $r35, $r41, r45, r46, r47, r48, r49, r50, r51, $r53, r64, r65, r67;
        android.view.WindowManager$LayoutParams $r2;
        int $i0, $i1;
        com.android.server.wm.WindowToken $r3;
        com.android.server.wm.ActivityRecord $r4, $r5, $r8, $r9, $r10, $r11, $r29, $r30;
        java.lang.Object[] $r6, $r22, $r24, $r36, $r39, $r42, $r55;
        com.android.server.wm.ProtoLogGroup $r7, $r23, $r25, $r37, $r40, $r43, $r54;
        com.android.server.wm.WindowStateAnimator $r12, $r26, $r28, $r33, $r66;
        com.android.server.wm.WindowManagerService $r13, $r15, $r17, $r18, $r52, r69;
        com.android.server.wm.AccessibilityController $r14, $r16;
        com.android.server.wm.WindowSurfacePlacer $r19;
        com.android.server.wm.DisplayContent $r20, r68;
        com.android.server.wm.InputMonitor $r21;
        com.android.server.wm.WindowSurfaceController $r27, $r34;
        android.view.IWindow $r31;
        android.os.IBinder $r32;
        java.lang.Long $r38;
        java.lang.Throwable $r44;
        long l2, l3;
        java.lang.Boolean $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63;
        byte b4, b5;

        r0 := @this: com.android.server.wm.WindowState;

        z23 := @parameter0: boolean;

        r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed> = 1;

        $z7 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z7 == 0 goto label01;

        r45 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r41 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r46 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r41);

        $r43 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r42 = newarray (java.lang.Object)[2];

        $r42[0] = r45;

        $r42[1] = r46;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r43, 1504168072, 0, null, $r42);

     label01:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label02;

        z24 = 1;

        goto label03;

     label02:
        z24 = 0;

     label03:
        if z24 == 0 goto label04;

        $z22 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z22 == 0 goto label04;

        r47 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r40 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r39 = newarray (java.lang.Object)[1];

        $r39[0] = r47;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r40, -986746907, 0, null, $r39);

     label04:
        $z25 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_enabled>;

        if $z25 == 0 goto label05;

        $r31 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r32 = interfaceinvoke $r31.<android.view.IWindow: android.os.IBinder asBinder()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r32);

        l2 = (long) $i1;

        $r33 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r34 = $r33.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r48 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r34);

        $r35 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r35);

        $r37 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS>;

        $r36 = newarray (java.lang.Object)[3];

        $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r36[0] = $r38;

        $r36[1] = r48;

        $r36[2] = r49;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r37, -1047945589, 1, null, $r36);

     label05:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        virtualinvoke r0.<com.android.server.wm.WindowState: void disposeInputChannel()>();

        $z8 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_APP_TRANSITIONS_enabled>;

        if $z8 == 0 goto label11;

        r50 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r26 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r27 = $r26.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r51 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        z1 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        z2 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        $r28 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z3 = virtualinvoke $r28.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        $r29 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r29 == null goto label08;

        $r30 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z21 = virtualinvoke $r30.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z21 == 0 goto label08;

     label07:
        z26 = 1;

        goto label09;

     label08:
        z26 = 0;

     label09:
        z5 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        $r52 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        z6 = $r52.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        $r53 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(6);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r53);

        $r54 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_APP_TRANSITIONS>;

        $r55 = newarray (java.lang.Object)[11];

        $r55[0] = r50;

        $r55[1] = r51;

        $r56 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r55[2] = $r56;

        $r57 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r55[3] = $r57;

        $r58 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r55[4] = $r58;

        $r59 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $r55[5] = $r59;

        $r60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $r55[6] = $r60;

        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z26);

        $r55[7] = $r61;

        $r62 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        $r55[8] = $r62;

        $r63 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6);

        $r55[9] = $r63;

        $r55[10] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r54, 594260654, 1048560, null, $r55);

     label10:
        goto label11;

     label11:
        $z9 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z9 == 0 goto label37;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z12 = virtualinvoke $r3.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z12 == 0 goto label37;

        $z13 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z13 == 0 goto label14;

        $z20 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z20 == 0 goto label12;

        r64 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r25 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r64;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r25, 1921821199, 0, null, $r24);

     label12:
        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        r0.<com.android.server.wm.WindowState: boolean mReplacingRemoveRequested> = 1;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label14:
        z28 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isWinVisibleLw()>();

     label15:
        if z23 == 0 goto label19;

     label16:
        $z19 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z19 == 0 goto label17;

        r65 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r23 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r65;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r23, 2114149926, 0, null, $r22);

     label17:
        r0.<com.android.server.wm.WindowState: boolean mAppDied> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r18 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r19 = $r18.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r19.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void openInputChannel(android.view.InputChannel)>(null);

        $r20 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r21 = virtualinvoke $r20.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r21.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label19:
        if z28 == 0 goto label23;

        if z24 != 0 goto label20;

        b4 = 2;

        goto label21;

     label20:
        b4 = 5;

     label21:
        $r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z18 = virtualinvoke $r12.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(b4, 0);

        if $z18 == 0 goto label22;

        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r17 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

     label22:
        $r13 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r14 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r14 == null goto label23;

        $r15 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r16.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r0, b4);

     label23:
        $z29 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z29 == 0 goto label25;

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r10 == null goto label24;

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z17 = virtualinvoke $r11.<com.android.server.wm.ActivityRecord: boolean isWaitingForTransitionStart()>();

        if $z17 != 0 goto label25;

     label24:
        z30 = 1;

        goto label26;

     label25:
        z30 = 0;

     label26:
        if z24 == 0 goto label29;

     label27:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r8 == null goto label29;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z16 = virtualinvoke $r9.<com.android.server.wm.ActivityRecord: boolean isLastWindow(com.android.server.wm.WindowState)>(r0);

        if $z16 == 0 goto label29;

     label28:
        z31 = 1;

        goto label30;

     label29:
        z31 = 0;

     label30:
        $r66 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z32 = virtualinvoke $r66.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        if $z32 == 0 goto label36;

        $z14 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z14 == 0 goto label36;

     label31:
        if z31 == 0 goto label33;

        if z30 == 0 goto label32;

        goto label33;

     label32:
        z33 = z28;

        goto label38;

     label33:
        $z15 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z15 == 0 goto label34;

        r67 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r67;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1103716954, 0, null, $r6);

     label34:
        specialinvoke r0.<com.android.server.wm.WindowState: void setupWindowForRemoveOnExit()>();

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r4 == null goto label35;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r5.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

     label35:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label36:
        z33 = z28;

        goto label38;

     label37:
        z33 = 0;

     label38:
        virtualinvoke r0.<com.android.server.wm.WindowState: void removeImmediately()>();

     label39:
        if z33 == 0 goto label41;

     label40:
        r68 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z11 = virtualinvoke r68.<com.android.server.wm.DisplayContent: boolean updateOrientation()>();

        if $z11 == 0 goto label41;

        virtualinvoke r68.<com.android.server.wm.DisplayContent: void sendNewConfiguration()>();

     label41:
        r69 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $z34 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z34 == 0 goto label43;

     label42:
        b5 = 4;

        goto label44;

     label43:
        b5 = 0;

     label44:
        virtualinvoke r69.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(b5, 1);

     label45:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label46:
        $r44 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r44;

        catch java.lang.Throwable from label06 to label07 with label46;
        catch java.lang.Throwable from label09 to label10 with label46;
        catch java.lang.Throwable from label11 to label12 with label46;
        catch java.lang.Throwable from label12 to label13 with label46;
        catch java.lang.Throwable from label14 to label15 with label46;
        catch java.lang.Throwable from label16 to label17 with label46;
        catch java.lang.Throwable from label17 to label18 with label46;
        catch java.lang.Throwable from label21 to label22 with label46;
        catch java.lang.Throwable from label22 to label23 with label46;
        catch java.lang.Throwable from label23 to label24 with label46;
        catch java.lang.Throwable from label27 to label28 with label46;
        catch java.lang.Throwable from label30 to label31 with label46;
        catch java.lang.Throwable from label33 to label34 with label46;
        catch java.lang.Throwable from label34 to label35 with label46;
        catch java.lang.Throwable from label38 to label39 with label46;
        catch java.lang.Throwable from label40 to label41 with label46;
        catch java.lang.Throwable from label41 to label42 with label46;
        catch java.lang.Throwable from label44 to label45 with label46;
    }

    private void removeReplacedWindow()
    {
        com.android.server.wm.WindowState r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.Object[] $r2;
        com.android.server.wm.ProtoLogGroup $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r3, -320419645, 0, null, $r2);

     label1:
        r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow> = 0;

        r0.<com.android.server.wm.WindowState: boolean mReplacingRemoveRequested> = 0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow> = null;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z1 != 0 goto label2;

     label2:
        virtualinvoke r0.<com.android.server.wm.WindowState: void removeImmediately()>();

        return;
    }

    private void setAppOpVisibilityLw(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z1 == z0 goto label2;

        r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility> = z0;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)>(1, 1);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(1, 1);

     label2:
        return;
    }

    private void setTouchableRegionCropIfNeeded(android.view.InputWindowHandle)
    {
        com.android.server.wm.WindowState r0;
        android.view.InputWindowHandle r1;
        boolean $z0, $z1;
        android.view.SurfaceControl $r2;
        com.android.server.wm.Task r3;
        com.android.server.wm.ActivityStack r4;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.InputWindowHandle;

        r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<com.android.server.wm.Task: boolean cropWindowsToStackBounds()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        r4 = virtualinvoke r3.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r4 == null goto label3;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r2 = virtualinvoke r4.<com.android.server.wm.ActivityStack: android.view.SurfaceControl getSurfaceControl()>();

        virtualinvoke r1.<android.view.InputWindowHandle: void setTouchableRegionCrop(android.view.SurfaceControl)>($r2);

        return;

     label3:
        virtualinvoke r1.<android.view.InputWindowHandle: void setTouchableRegionCrop(android.view.SurfaceControl)>(null);

        return;

     label4:
        virtualinvoke r1.<android.view.InputWindowHandle: void setTouchableRegionCrop(android.view.SurfaceControl)>(null);

        return;
    }

    private void setupWindowForRemoveOnExit()
    {
        com.android.server.wm.WindowState r0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1, $r2;
        com.android.server.wm.WindowSurfacePlacer $r3;
        com.android.server.wm.DisplayContent $r4;
        com.android.server.wm.InputMonitor $r5;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        z0 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r3.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        if z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r5.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label1:
        return;
    }

    private boolean shouldKeepVisibleDeadAppWindow()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, $z2;
        android.view.WindowManager$LayoutParams $r2, $r6;
        android.view.IWindow $r3;
        android.os.IBinder $r4, $r5;
        int $i0;
        android.app.WindowConfiguration $r7;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isWinVisibleLw()>();

        if $z0 == 0 goto label4;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label4;

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        if $z1 != 0 goto label1;

        goto label4;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r4 = $r2.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r5 = interfaceinvoke $r3.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r4 == $r5 goto label2;

        return 0;

     label2:
        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label3;

        return 0;

     label3:
        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $z2 = virtualinvoke $r7.<android.app.WindowConfiguration: boolean keepVisibleDeadAppWindowOnScreen()>();

        return $z2;

     label4:
        return 0;
    }

    private boolean shouldSendRedrawForSync()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Task r1;
        boolean $z0, $z1, $z2, $z3, z4;
        android.view.SurfaceControl$Transaction $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        z4 = 1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getMainWindowSizeChangeTransaction()>();

        if $r2 == null goto label1;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported>;

        $z3 = 1 ^ $z2;

        return $z3;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean useBLASTSync()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported>;

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    private boolean skipDecorCrop()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;
        boolean $z0, $z1;
        com.android.server.wm.ActivityRecord $r3;
        com.android.server.wm.WindowToken $r4;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mDecorFrame>;

        $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r3 == null goto label2;

        return 0;

     label2:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z1 = virtualinvoke $r4.<com.android.server.wm.WindowToken: boolean canLayerAboveSystemBars()>();

        return $z1;
    }

    private void startAnimation(android.view.SurfaceControl$Transaction, com.android.server.wm.AnimationAdapter)
    {
        com.android.server.wm.WindowState r0;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.AnimationAdapter r2;
        com.android.server.wm.WindowStateAnimator $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: com.android.server.wm.AnimationAdapter;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z0 = $r3.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        virtualinvoke r0.<com.android.server.wm.WindowState: void startAnimation(android.view.SurfaceControl$Transaction,com.android.server.wm.AnimationAdapter,boolean,int)>(r1, r2, $z0, 16);

        return;
    }

    private void startMoveAnimation(int, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.InsetsSourceProvider $r2;
        android.graphics.Point $r3, $r4;
        com.android.server.wm.WindowFrames $r5, $r7;
        android.graphics.Rect $r6, $r8;
        com.android.server.wm.LocalAnimationAdapter $r9;
        com.android.server.wm.WindowState$MoveAnimationSpec $r10;
        com.android.server.wm.WindowManagerService $r11;
        com.android.server.wm.SurfaceAnimationRunner $r12;
        android.view.SurfaceControl$Transaction $r13;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if $r2 == null goto label1;

        return;

     label1:
        $r3 = new android.graphics.Point;

        specialinvoke $r3.<android.graphics.Point: void <init>()>();

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r6 = $r5.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastFrame>;

        $i3 = $r6.<android.graphics.Rect: int left>;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r8 = $r7.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastFrame>;

        $i2 = $r8.<android.graphics.Rect: int top>;

        specialinvoke r0.<com.android.server.wm.WindowState: void transformFrameToSurfacePosition(int,int,android.graphics.Point)>($i3, $i2, $r3);

        specialinvoke r0.<com.android.server.wm.WindowState: void transformFrameToSurfacePosition(int,int,android.graphics.Point)>(i0, i1, $r4);

        $r9 = new com.android.server.wm.LocalAnimationAdapter;

        $r10 = new com.android.server.wm.WindowState$MoveAnimationSpec;

        $i7 = $r3.<android.graphics.Point: int x>;

        $i6 = $r3.<android.graphics.Point: int y>;

        $i5 = $r4.<android.graphics.Point: int x>;

        $i4 = $r4.<android.graphics.Point: int y>;

        specialinvoke $r10.<com.android.server.wm.WindowState$MoveAnimationSpec: void <init>(com.android.server.wm.WindowState,int,int,int,int,com.android.server.wm.WindowState$1)>(r0, $i7, $i6, $i5, $i4, null);

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.SurfaceAnimationRunner mSurfaceAnimationRunner>;

        specialinvoke $r9.<com.android.server.wm.LocalAnimationAdapter: void <init>(com.android.server.wm.LocalAnimationAdapter$AnimationSpec,com.android.server.wm.SurfaceAnimationRunner)>($r10, $r12);

        $r13 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        specialinvoke r0.<com.android.server.wm.WindowState: void startAnimation(android.view.SurfaceControl$Transaction,com.android.server.wm.AnimationAdapter)>($r13, $r9);

        return;
    }

    private void subtractInsets(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2, r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        $i2 = r3.<android.graphics.Rect: int left>;

        $i1 = r2.<android.graphics.Rect: int left>;

        $i0 = r4.<android.graphics.Rect: int left>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $i4 = $i2 - $i3;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        $i8 = r3.<android.graphics.Rect: int top>;

        $i7 = r2.<android.graphics.Rect: int top>;

        $i6 = r4.<android.graphics.Rect: int top>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        $i10 = $i8 - $i9;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);

        $i13 = r2.<android.graphics.Rect: int right>;

        $i12 = r4.<android.graphics.Rect: int right>;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i12);

        $i15 = r3.<android.graphics.Rect: int right>;

        $i16 = $i14 - $i15;

        $i17 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i16);

        $i19 = r2.<android.graphics.Rect: int bottom>;

        $i18 = r4.<android.graphics.Rect: int bottom>;

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i18);

        $i21 = r3.<android.graphics.Rect: int bottom>;

        $i22 = $i20 - $i21;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i22);

        virtualinvoke r1.<android.graphics.Rect: void inset(int,int,int,int)>($i5, $i11, $i17, $i23);

        return;
    }

    private void subtractTouchExcludeRegionIfNeeded(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1, r2, $r3;
        boolean $z0, $z1;
        android.graphics.Region$Op $r4;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion>;

        $z0 = virtualinvoke $r3.<android.graphics.Region: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r2 = staticinvoke <android.graphics.Region: android.graphics.Region obtain()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void getTapExcludeRegion(android.graphics.Region)>(r2);

        $z1 = virtualinvoke r2.<android.graphics.Region: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r2, $r4);

     label2:
        virtualinvoke r2.<android.graphics.Region: void recycle()>();

        return;
    }

    private void transformFrameToSurfacePosition(int, int, android.graphics.Point)
    {
        com.android.server.wm.WindowState r0, r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        android.graphics.Point r1, $r4, $r5, $r6, $r9, $r12, $r15;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r2, $r7;
        android.graphics.Rect $r3, $r8, $r11, $r14, r18;
        com.android.server.wm.WindowFrames $r10, $r13;
        com.android.server.wm.WindowContainer r16;
        com.android.server.wm.ActivityStack r19;

        r0 := @this: com.android.server.wm.WindowState;

        i17 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Point;

        virtualinvoke r1.<android.graphics.Point: void set(int,int)>(i17, i0);

        r16 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isChildWindow()>();

        if $z0 == 0 goto label1;

        r17 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $r9 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $r7 = r17.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r8 = $r7.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        specialinvoke r0.<com.android.server.wm.WindowState: void transformSurfaceInsetsPosition(android.graphics.Point,android.graphics.Rect)>($r9, $r8);

        $r10 = r17.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r11 = $r10.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i9 = $r11.<android.graphics.Rect: int left>;

        $i11 = neg $i9;

        $r12 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i10 = $r12.<android.graphics.Point: int x>;

        $i16 = $i11 + $i10;

        $r13 = r17.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r14 = $r13.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i12 = $r14.<android.graphics.Rect: int top>;

        $i14 = neg $i12;

        $r15 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i13 = $r15.<android.graphics.Point: int y>;

        $i15 = $i14 + $i13;

        virtualinvoke r1.<android.graphics.Point: void offset(int,int)>($i16, $i15);

        goto label2;

     label1:
        if r16 == null goto label2;

        r18 = virtualinvoke r16.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        $i5 = r18.<android.graphics.Rect: int left>;

        $i8 = neg $i5;

        $i6 = r18.<android.graphics.Rect: int top>;

        $i7 = neg $i6;

        virtualinvoke r1.<android.graphics.Point: void offset(int,int)>($i8, $i7);

        goto label2;

     label2:
        r19 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        if r19 == null goto label3;

        i18 = virtualinvoke r19.<com.android.server.wm.ActivityStack: int getTaskOutset()>();

        virtualinvoke r1.<android.graphics.Point: void offset(int,int)>(i18, i18);

     label3:
        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r3 = $r2.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        specialinvoke r0.<com.android.server.wm.WindowState: void transformSurfaceInsetsPosition(android.graphics.Point,android.graphics.Rect)>($r4, $r3);

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i1 = $r5.<android.graphics.Point: int x>;

        $i4 = neg $i1;

        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i2 = $r6.<android.graphics.Point: int y>;

        $i3 = neg $i2;

        virtualinvoke r1.<android.graphics.Point: void offset(int,int)>($i4, $i3);

        return;
    }

    private void transformSurfaceInsetsPosition(android.graphics.Point, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Point r1;
        android.graphics.Rect r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z0 != 0 goto label1;

        $i4 = r2.<android.graphics.Rect: int left>;

        r1.<android.graphics.Point: int x> = $i4;

        $i5 = r2.<android.graphics.Rect: int top>;

        r1.<android.graphics.Point: int y> = $i5;

        return;

     label1:
        $i0 = r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        $f0 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f2 = $f1 * $f0;

        $f3 = $f2 + 0.5F;

        $i1 = (int) $f3;

        r1.<android.graphics.Point: int x> = $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f5 = (float) $i2;

        $f4 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f6 = $f5 * $f4;

        $f7 = $f6 + 0.5F;

        $i3 = (int) $f7;

        r1.<android.graphics.Point: int y> = $i3;

        return;
    }

    private void updateRegionForModalActivityWindow(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1;
        com.android.server.wm.Task r2;
        android.graphics.Rect $r3, $r5, $r8, $r9, $r10, $r11;
        com.android.server.wm.ActivityRecord $r4;
        boolean $z0;
        com.android.server.wm.ActivityStack $r6, $r7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r4.<com.android.server.wm.ActivityRecord: void getLetterboxInnerBounds(android.graphics.Rect)>($r3);

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $z0 = virtualinvoke $r5.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r2 == null goto label1;

        $r9 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r2.<com.android.server.wm.Task: void getDimBounds(android.graphics.Rect)>($r9);

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        $r8 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r7.<com.android.server.wm.ActivityStack: void getDimBounds(android.graphics.Rect)>($r8);

     label2:
        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.WindowState: void adjustRegionInFreefromWindowMode(android.graphics.Rect)>($r10);

        $r11 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Rect)>($r11);

        specialinvoke r0.<com.android.server.wm.WindowState: void cropRegionToStackBoundsIfNeeded(android.graphics.Region)>(r1);

        return;
    }

    boolean addEmbeddedDisplayContent(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayContent r1;
        android.util.ArraySet $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    void addWinAnimatorToList(java.util.ArrayList)
    {
        com.android.server.wm.WindowState r0, $r6;
        java.util.ArrayList r1;
        com.android.server.wm.WindowStateAnimator $r2;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.WindowState) $r5;

        virtualinvoke $r6.<com.android.server.wm.WindowState: void addWinAnimatorToList(java.util.ArrayList)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void adjustStartingWindowFlags()
    {
        com.android.server.wm.WindowState r0, $r2, $r4;
        android.view.WindowManager$LayoutParams $r1, $r5, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.ActivityRecord $r3, r6;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 1 goto label1;

        r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r6 == null goto label1;

        $r2 = r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r4 = $r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        r7 = $r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = r7.<android.view.WindowManager$LayoutParams: int flags>;

        $i4 = $i1 & -4718594;

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 & 4718593;

        $i5 = $i4 | $i3;

        r7.<android.view.WindowManager$LayoutParams: int flags> = $i5;

     label1:
        return;
    }

    public void assignChildLayers(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.WindowState r0, r2;
        android.view.SurfaceControl$Transaction r1;
        com.android.server.wm.WindowList $r3, $r4;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r5;
        android.view.WindowManager$LayoutParams $r6, $r7;
        com.android.server.wm.WindowStateAnimator $r8, $r9, $r12, $r13;
        boolean $z0, $z1;
        com.android.server.wm.WindowSurfaceController $r10, $r14;
        android.view.SurfaceControl $r11, $r15;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        i3 = 2;

        i4 = 0;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        if i4 >= $i0 goto label7;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.wm.WindowState) $r5;

        $r6 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 1001 goto label3;

        $r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = virtualinvoke $r12.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z1 == 0 goto label2;

        $r13 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r14 = $r13.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r15 = $r14.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r2.<com.android.server.wm.WindowState: void assignRelativeLayer(android.view.SurfaceControl$Transaction,android.view.SurfaceControl,int)>(r1, $r15, -2);

        goto label6;

     label2:
        virtualinvoke r2.<com.android.server.wm.WindowState: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, -2);

        goto label6;

     label3:
        $r7 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 1004 goto label5;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z0 = virtualinvoke $r8.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z0 == 0 goto label4;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r10 = $r9.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r11 = $r10.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke r2.<com.android.server.wm.WindowState: void assignRelativeLayer(android.view.SurfaceControl$Transaction,android.view.SurfaceControl,int)>(r1, $r11, -1);

        goto label6;

     label4:
        virtualinvoke r2.<com.android.server.wm.WindowState: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, -1);

        goto label6;

     label5:
        virtualinvoke r2.<com.android.server.wm.WindowState: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, i3);

     label6:
        virtualinvoke r2.<com.android.server.wm.WindowState: void assignChildLayers(android.view.SurfaceControl$Transaction)>(r1);

        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label7:
        return;
    }

    void assignLayer(android.view.SurfaceControl$Transaction, int)
    {
        com.android.server.wm.WindowState r0;
        android.view.SurfaceControl$Transaction r1;
        int i0;
        boolean $z0;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean needsRelativeLayeringToIme()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayContent: void assignRelativeLayerForImeTargetChild(android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer)>(r1, r0);

        return;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void assignLayer(android.view.SurfaceControl$Transaction,int)>(r1, i0);

        return;
    }

    void attach()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        java.lang.String $r2;
        com.android.server.wm.Session $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        virtualinvoke $r3.<com.android.server.wm.Session: void windowAddedLocked(java.lang.String)>($r2);

        return;
    }

    void calculatePolicyCrop(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowFrames $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        com.android.server.wm.DisplayContent r18;
        android.view.DisplayInfo r19;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r18 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z0 = r18.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r18.<com.android.server.wm.DisplayContent: boolean supportsSystemDecorations()>();

        if $z2 != 0 goto label1;

        r19 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r7 = $r6.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i2 = virtualinvoke $r7.<android.graphics.Rect: int width()>();

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r9 = $r8.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i3 = virtualinvoke $r9.<android.graphics.Rect: int height()>();

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i2, $i3);

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r11 = $r10.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i4 = $r11.<android.graphics.Rect: int left>;

        $i13 = neg $i4;

        $r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r13 = $r12.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i5 = $r13.<android.graphics.Rect: int top>;

        $i12 = neg $i5;

        $i7 = r19.<android.view.DisplayInfo: int logicalWidth>;

        $r14 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r15 = $r14.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i6 = $r15.<android.graphics.Rect: int left>;

        $i11 = $i7 - $i6;

        $i9 = r19.<android.view.DisplayInfo: int logicalHeight>;

        $r16 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r17 = $r16.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i8 = $r17.<android.graphics.Rect: int top>;

        $i10 = $i9 - $i8;

        virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>($i13, $i12, $i11, $i10);

        goto label3;

     label1:
        $z1 = specialinvoke r0.<com.android.server.wm.WindowState: boolean skipDecorCrop()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i1 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i0, $i1);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowState: void calculateSystemDecorRect(android.graphics.Rect)>(r1);

     label3:
        return;
    }

    public boolean canAcquireSleepToken()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Session $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $z0 = $r1.<com.android.server.wm.Session: boolean mCanAcquireSleepToken>;

        return $z0;
    }

    public boolean canAddInternalSystemWindow()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        return $z0;
    }

    boolean canAffectSystemUiFlags()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.ActivityRecord $r2, $r3;
        boolean $z1, $z2, $z3, $z4, z5, z7, z8, z9, z10, z11;
        com.android.server.wm.WindowStateAnimator $r4;

        r0 := @this: com.android.server.wm.WindowState;

        z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFullyTransparent()>();

        if z5 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 != null goto label6;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z7 = virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: boolean getShown()>();

        $z3 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z3 != 0 goto label3;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z4 == 0 goto label2;

        goto label3;

     label2:
        z8 = 0;

        goto label4;

     label3:
        z8 = 1;

     label4:
        z9 = 0;

        if z7 == 0 goto label5;

        z9 = 0;

        if z8 != 0 goto label5;

        z9 = 1;

     label5:
        return z9;

     label6:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r1 == null goto label7;

        $z2 = virtualinvoke r1.<com.android.server.wm.Task: boolean canAffectSystemUiFlags()>();

        if $z2 == 0 goto label7;

        z10 = 1;

        goto label8;

     label7:
        z10 = 0;

     label8:
        z11 = 0;

        if z10 == 0 goto label9;

        z11 = 0;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityRecord: boolean isVisible()>();

        if $z1 == 0 goto label9;

        z11 = 1;

     label9:
        return z11;
    }

    boolean canBeImeTarget()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z2, $z3, $z4, $z5, z6, $z7;
        android.view.WindowManager$LayoutParams $r1, $r2, $r3;
        int $i0, $i1, $i2, i3;
        com.android.server.wm.ActivityRecord r4;
        com.android.server.wm.ActivityStack r5;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean canWindowInEmbeddedDisplayBeImeTarget()>();

        if z0 == 0 goto label01;

        return 1;

     label01:
        $z2 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z2 == 0 goto label02;

        return 0;

     label02:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inPinnedWindowingMode()>();

        if $z3 == 0 goto label03;

        return 0;

     label03:
        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2036 goto label04;

        return 0;

     label04:
        r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z6 = 1;

        if r4 == null goto label06;

        $z5 = virtualinvoke r4.<com.android.server.wm.ActivityRecord: boolean windowsAreFocusable()>();

        if $z5 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        if z6 != 0 goto label07;

        return 0;

     label07:
        r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        if r5 == null goto label08;

        $z4 = virtualinvoke r5.<com.android.server.wm.ActivityStack: boolean isFocusable()>();

        if $z4 != 0 goto label08;

        return 0;

     label08:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label09;

        goto label10;

     label09:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        i3 = $i2 & 131080;

        if i3 == 0 goto label10;

        if i3 == 131080 goto label10;

        return 0;

     label10:
        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        return $z7;
    }

    public boolean canReceiveKeys()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean canReceiveKeys(boolean)>(0);

        return $z0;
    }

    public boolean canReceiveKeys(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.DisplayContent $r2, $r3;
        int $i0, $i1, $i2;
        android.view.WindowManager$LayoutParams $r4;

        r0 := @this: com.android.server.wm.WindowState;

        z7 := @parameter0: boolean;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        if z0 == 0 goto label2;

        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 != 0 goto label2;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z4 != 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 8;

        if $i2 != 0 goto label2;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z6 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean windowsAreFocusable(boolean)>(z7);

        if $z6 == 0 goto label2;

     label1:
        $z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean cantReceiveTouchInput()>();

        if $z5 != 0 goto label2;

        z8 = 1;

        goto label3;

     label2:
        z8 = 0;

     label3:
        if z8 != 0 goto label4;

        return 0;

     label4:
        if z7 != 0 goto label6;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z2 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: boolean isOnTop()>();

        if $z2 != 0 goto label6;

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z3 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: boolean isTrusted()>();

        if $z3 == 0 goto label5;

        goto label6;

     label5:
        z9 = 0;

        goto label7;

     label6:
        z9 = 1;

     label7:
        return z9;
    }

    public boolean canShowTransient()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.InsetsFlags $r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $i0 = $r2.<android.view.InsetsFlags: int behavior>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canShowWhenLocked()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z1, z2, z3, z4;
        android.view.WindowManager$LayoutParams $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canShowWhenLocked()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 524288;

        if $i1 == 0 goto label3;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        z4 = 1;

        if z2 != 0 goto label6;

        if z3 == 0 goto label5;

        z4 = 1;

        goto label6;

     label5:
        z4 = 0;

     label6:
        return z4;
    }

    boolean cantReceiveTouchInput()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1, $r3, $r6;
        com.android.server.wm.Task $r2, $r4;
        com.android.server.wm.ActivityStack $r5;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z3 = 0;

        if r1 == null goto label4;

        $r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        if $r2 != null goto label1;

        goto label4;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $z0 = virtualinvoke $r5.<com.android.server.wm.ActivityStack: boolean shouldIgnoreInput()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = $r6.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isRecentsAnimationConsumingAppInput()>();

        if $z2 == 0 goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;

     label4:
        return 0;
    }

    void checkPolicyVisibilityChange()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.server.wm.WindowStateAnimator $r1;
        com.android.server.wm.WindowManagerService $r2, $r5;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isLegacyPolicyVisibility()>();

        z1 = r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim>;

        if z0 == z1 goto label5;

        if z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setPolicyVisibilityFlag(int)>(1);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowState: void clearPolicyVisibilityFlag(int)>(1);

     label2:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z2 != 0 goto label5;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: void hide(java.lang.String)>("checkPolicyVisibilityChange");

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z3 == 0 goto label4;

        $z4 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z4 == 0 goto label3;

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r3 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, 693423992, 0, null, $r3);

     label3:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

     label4:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

     label5:
        return;
    }

    boolean clearAnimatingFlags()
    {
        com.android.server.wm.WindowState r0, $r3;
        boolean $z2, $z3, $z4, $z5, $z6, z8;
        com.android.server.wm.WindowList $r1, $r6;
        java.lang.Object $r2;
        com.android.server.wm.WindowManagerService $r4;
        java.util.ArrayList $r5;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        z8 = 0;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z2 != 0 goto label2;

        z8 = 0;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z4 != 0 goto label2;

        z8 = 0;

        $z5 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z5 == 0 goto label1;

        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 0;

        z8 = 1;

     label1:
        $z6 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z6 == 0 goto label2;

        r0.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

        z8 = 1;

     label2:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label3:
        if i1 < 0 goto label4;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r3 = (com.android.server.wm.WindowState) $r2;

        $z3 = virtualinvoke $r3.<com.android.server.wm.WindowState: boolean clearAnimatingFlags()>();

        z8 = z8 | $z3;

        i1 = i1 + -1;

        goto label3;

     label4:
        return z8;
    }

    void clearPolicyVisibilityFlag(int)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.WindowState: int mPolicyVisibility>;

        $i2 = $i1 & i0;

        r0.<com.android.server.wm.WindowState: int mPolicyVisibility> = $i2;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        return;
    }

    void clearWillReplaceWindow()
    {
        com.android.server.wm.WindowState r0, $r4;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow> = 0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow> = null;

        r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow> = 0;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void clearWillReplaceWindow()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void computeFrame(com.android.server.wm.DisplayFrames)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1, $r3;
        com.android.server.wm.utils.WmDisplayCutout $r2;
        com.android.server.wm.DisplayFrames r4;
        com.android.server.wm.InsetsSourceProvider r5;

        r0 := @this: com.android.server.wm.WindowState;

        r4 := @parameter0: com.android.server.wm.DisplayFrames;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames getLayoutingWindowFrames()>();

        $r2 = r4.<com.android.server.wm.DisplayFrames: com.android.server.wm.utils.WmDisplayCutout mDisplayCutout>;

        virtualinvoke $r1.<com.android.server.wm.WindowFrames: void setDisplayCutout(com.android.server.wm.utils.WmDisplayCutout)>($r2);

        virtualinvoke r0.<com.android.server.wm.WindowState: void computeFrameLw()>();

        r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if r5 == null goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mSimulatedWindowFrames>;

        if $r3 != null goto label1;

        virtualinvoke r5.<com.android.server.wm.InsetsSourceProvider: void updateSourceFrame()>();

     label1:
        return;
    }

    public void computeFrameLw()
    {
        com.android.server.wm.WindowState r0, $r42, $r45, $r103, $r104, r111;
        com.android.server.wm.DisplayContent r1;
        android.view.DisplayInfo r2;
        com.android.server.wm.WindowFrames r3, $r43, $r46;
        int i0, i1, i2, i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, i74, i75, $i76, $i77, i78, $i79, $i80, i81, $i82, $i83, $i84, $i85, $i86, i87, i88, $i89, $i90, $i91, $i92;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20, z21, z22, $z23, $z24;
        android.graphics.Rect $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r36, $r37, $r40, $r41, $r44, $r47, $r48, $r50, $r51, $r52, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r99, $r100, $r101, $r102, $r107, $r108, r113, $r114, $r115, r116, $r117, $r118, $r119, $r120, $r121, $r122, r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r132, $r133, r135, $r136, $r137, $r138;
        android.view.WindowManager$LayoutParams $r6, $r131;
        com.android.server.wm.DisplayFrames $r34, $r35;
        com.android.server.wm.utils.WmDisplayCutout $r38, $r39, $r53, $r54;
        com.android.server.wm.WallpaperController $r49;
        float $f0, $f1;
        android.view.DisplayCutout $r55;
        java.util.ArrayDeque $r95, $r97;
        com.android.server.wm.ActivityRecord $r96, r112;
        java.lang.Object $r98;
        com.android.server.wm.Task $r105, r106;
        com.android.server.wm.WindowManagerService $r109;
        com.android.server.wm.RootWindowContainer $r110;
        com.android.server.wm.WindowContainer r134;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z0 == 0 goto label02;

        $z17 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z17 != 0 goto label01;

        $z18 = r0.<com.android.server.wm.WindowState: boolean mReplacingRemoveRequested>;

        if $z18 != 0 goto label02;

     label01:
        return;

     label02:
        r0.<com.android.server.wm.WindowState: boolean mHaveFrame> = 1;

        r106 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inMultiWindowMode()>();

        if $z1 != 0 goto label03;

        $z16 = specialinvoke r0.<com.android.server.wm.WindowState: boolean matchesDisplayBounds()>();

        if $z16 == 0 goto label03;

        z19 = 1;

        goto label04;

     label03:
        z19 = 0;

     label04:
        if r106 == null goto label05;

        $z15 = virtualinvoke r106.<com.android.server.wm.Task: boolean isFloating()>();

        if $z15 == 0 goto label05;

        z20 = 1;

        goto label06;

     label05:
        z20 = 0;

     label06:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames getLayoutingWindowFrames()>();

        $r107 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $r108 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getBounds()>();

        virtualinvoke $r107.<android.graphics.Rect: void set(android.graphics.Rect)>($r108);

        $r109 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r110 = $r109.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        r111 = virtualinvoke $r110.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState getCurrentInputMethodWindow()>();

        if z20 == 0 goto label08;

        $r103 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r103 == null goto label07;

        $r104 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $r105 = virtualinvoke $r104.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r106 != $r105 goto label07;

        z21 = 1;

        goto label09;

     label07:
        z21 = 0;

        goto label09;

     label08:
        z21 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isInputMethodTarget()>();

     label09:
        if r111 == null goto label10;

        $z14 = virtualinvoke r111.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z14 == 0 goto label10;

        if z21 == 0 goto label10;

        z22 = 1;

        goto label11;

     label10:
        z22 = 0;

     label11:
        if z19 != 0 goto label18;

        $z8 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean layoutInParentFrame()>();

        if $z8 == 0 goto label12;

        goto label18;

     label12:
        $r74 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r75 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getBounds()>();

        virtualinvoke $r74.<android.graphics.Rect: void set(android.graphics.Rect)>($r75);

        r112 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r112 == null goto label13;

        $r95 = r112.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $z13 = virtualinvoke $r95.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z13 != 0 goto label13;

        $r96 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r97 = $r96.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenBounds>;

        $r98 = virtualinvoke $r97.<java.util.ArrayDeque: java.lang.Object peek()>();

        r113 = (android.graphics.Rect) $r98;

        $r100 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r99 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i68 = $r99.<android.graphics.Rect: int left>;

        $i69 = virtualinvoke r113.<android.graphics.Rect: int width()>();

        $i70 = $i68 + $i69;

        $r100.<android.graphics.Rect: int right> = $i70;

        $r102 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r101 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i71 = $r101.<android.graphics.Rect: int top>;

        $i72 = virtualinvoke r113.<android.graphics.Rect: int height()>();

        $i73 = $i71 + $i72;

        $r102.<android.graphics.Rect: int bottom> = $i73;

     label13:
        if z22 == 0 goto label15;

        $z11 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z11 == 0 goto label14;

        $r89 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i61 = $r89.<android.graphics.Rect: int bottom>;

        $r90 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i60 = $r90.<android.graphics.Rect: int bottom>;

        i74 = $i61 - $i60;

        if i74 <= 0 goto label15;

        $r91 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i63 = $r91.<android.graphics.Rect: int top>;

        $r92 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i62 = $r92.<android.graphics.Rect: int top>;

        $i64 = $i63 - $i62;

        $i65 = staticinvoke <java.lang.Math: int max(int,int)>($i64, 0);

        i75 = staticinvoke <java.lang.Math: int min(int,int)>(i74, $i65);

        $r93 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i66 = neg i75;

        virtualinvoke $r93.<android.graphics.Rect: void offset(int,int)>(0, $i66);

        $r94 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $i67 = neg i75;

        virtualinvoke $r94.<android.graphics.Rect: void offset(int,int)>(0, $i67);

        goto label15;

     label14:
        $z12 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inPinnedWindowingMode()>();

        if $z12 != 0 goto label15;

        $r85 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i58 = $r85.<android.graphics.Rect: int bottom>;

        $r86 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        $i57 = $r86.<android.graphics.Rect: int bottom>;

        if $i58 <= $i57 goto label15;

        $r88 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r87 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        $i59 = $r87.<android.graphics.Rect: int bottom>;

        $r88.<android.graphics.Rect: int bottom> = $i59;

     label15:
        if z20 == 0 goto label16;

        $r82 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $z10 = virtualinvoke $r82.<android.graphics.Rect: boolean isEmpty()>();

        if $z10 == 0 goto label16;

        $r84 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r83 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        virtualinvoke $r84.<android.graphics.Rect: void set(android.graphics.Rect)>($r83);

     label16:
        $r114 = new android.graphics.Rect;

        $r115 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        specialinvoke $r114.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r115);

        r116 = $r114;

        $r117 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        $r118 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        virtualinvoke $r117.<android.graphics.Rect: void set(android.graphics.Rect)>($r118);

        $r119 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $i76 = $r119.<android.graphics.Rect: int left>;

        $r120 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i77 = $r120.<android.graphics.Rect: int left>;

        i78 = $i76 - $i77;

        $r121 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $i79 = $r121.<android.graphics.Rect: int top>;

        $r122 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $i80 = $r122.<android.graphics.Rect: int top>;

        i81 = $i79 - $i80;

        r123 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $r124 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $i82 = r2.<android.view.DisplayInfo: int logicalWidth>;

        $i83 = r2.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke $r124.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i82, $i83);

        $r125 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        $r126 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.WindowState: void subtractInsets(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r125, r123, $r114, $r126);

        $z23 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean layoutInParentFrame()>();

        if $z23 != 0 goto label17;

        $r78 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r77 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        $r76 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.WindowState: void subtractInsets(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r78, r123, $r77, $r76);

        $r81 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mInsetFrame>;

        $r80 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        $r79 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        specialinvoke r0.<com.android.server.wm.WindowState: void subtractInsets(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r81, r123, $r80, $r79);

     label17:
        virtualinvoke $r114.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r123);

        goto label19;

     label18:
        $r5 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        $r4 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        r116 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        r123 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        i78 = 0;

        i81 = 0;

     label19:
        $r127 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        virtualinvoke $r127.<android.graphics.Rect: int width()>();

        $r128 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        virtualinvoke $r128.<android.graphics.Rect: int height()>();

        $i84 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        $i85 = r0.<com.android.server.wm.WindowState: int mLastRequestedWidth>;

        if $i84 != $i85 goto label20;

        $i56 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        $i55 = r0.<com.android.server.wm.WindowState: int mLastRequestedHeight>;

        if $i56 == $i55 goto label21;

     label20:
        $i6 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        r0.<com.android.server.wm.WindowState: int mLastRequestedWidth> = $i6;

        $i7 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        r0.<com.android.server.wm.WindowState: int mLastRequestedHeight> = $i7;

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void setContentChanged(boolean)>(1);

     label21:
        $r129 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i0 = virtualinvoke $r129.<android.graphics.Rect: int width()>();

        $r130 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i1 = virtualinvoke $r130.<android.graphics.Rect: int height()>();

        specialinvoke r0.<com.android.server.wm.WindowState: void applyGravityAndUpdateFrame(com.android.server.wm.WindowFrames,android.graphics.Rect,android.graphics.Rect)>(r3, r123, r116);

        if z20 == 0 goto label24;

        $r61 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $z6 = virtualinvoke $r61.<android.graphics.Rect: boolean isEmpty()>();

        if $z6 != 0 goto label24;

        $r62 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        i2 = $r62.<android.graphics.Rect: int bottom>;

        $r63 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        i3 = $r63.<android.graphics.Rect: int bottom>;

        $r65 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $r64 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r65.<android.graphics.Rect: void set(android.graphics.Rect)>($r64);

        $r67 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $r66 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        virtualinvoke $r67.<android.graphics.Rect: void set(android.graphics.Rect)>($r66);

        $r69 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $r68 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        virtualinvoke $r69.<android.graphics.Rect: void set(android.graphics.Rect)>($r68);

        if z22 == 0 goto label23;

        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z7 == 0 goto label23;

        $i50 = i3 + i81;

        $r70 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i49 = $r70.<android.graphics.Rect: int bottom>;

        if $i50 >= $i49 goto label22;

        $r73 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i54 = i3 + i81;

        $r73.<android.graphics.Rect: int bottom> = $i54;

     label22:
        $i52 = i2 + i81;

        $r71 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i51 = $r71.<android.graphics.Rect: int bottom>;

        if $i52 >= $i51 goto label23;

        $r72 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i53 = i2 + i81;

        $r72.<android.graphics.Rect: int bottom> = $i53;

     label23:
        goto label27;

     label24:
        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i8 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i8 != 2034 goto label26;

        $r58 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $r57 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r58.<android.graphics.Rect: void set(android.graphics.Rect)>($r57);

        $r60 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $r59 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastFrame>;

        $z5 = virtualinvoke $r60.<android.graphics.Rect: boolean equals(java.lang.Object)>($r59);

        if $z5 != 0 goto label25;

        r0.<com.android.server.wm.WindowState: boolean mMovedByResize> = 1;

        goto label27;

     label25:
        goto label27;

     label26:
        $r9 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $r7 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i10 = $r7.<android.graphics.Rect: int left>;

        $r8 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i9 = $r8.<android.graphics.Rect: int left>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i9);

        $r10 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i13 = $r10.<android.graphics.Rect: int top>;

        $r11 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i12 = $r11.<android.graphics.Rect: int top>;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i12);

        $r12 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i16 = $r12.<android.graphics.Rect: int right>;

        $r13 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i15 = $r13.<android.graphics.Rect: int right>;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i15);

        $r14 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        $i19 = $r14.<android.graphics.Rect: int bottom>;

        $r15 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i18 = $r15.<android.graphics.Rect: int bottom>;

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i18);

        virtualinvoke $r9.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i14, $i17, $i20);

        $r18 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $r16 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i22 = $r16.<android.graphics.Rect: int left>;

        $r17 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i21 = $r17.<android.graphics.Rect: int left>;

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>($i22, $i21);

        $r19 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i25 = $r19.<android.graphics.Rect: int top>;

        $r20 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i24 = $r20.<android.graphics.Rect: int top>;

        $i26 = staticinvoke <java.lang.Math: int max(int,int)>($i25, $i24);

        $r21 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i28 = $r21.<android.graphics.Rect: int right>;

        $r22 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i27 = $r22.<android.graphics.Rect: int right>;

        $i29 = staticinvoke <java.lang.Math: int min(int,int)>($i28, $i27);

        $r23 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i31 = $r23.<android.graphics.Rect: int bottom>;

        $r24 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i30 = $r24.<android.graphics.Rect: int bottom>;

        $i32 = staticinvoke <java.lang.Math: int min(int,int)>($i31, $i30);

        virtualinvoke $r18.<android.graphics.Rect: void set(int,int,int,int)>($i23, $i26, $i29, $i32);

        $r27 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $r25 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $i34 = $r25.<android.graphics.Rect: int left>;

        $r26 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i33 = $r26.<android.graphics.Rect: int left>;

        $i35 = staticinvoke <java.lang.Math: int max(int,int)>($i34, $i33);

        $r28 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $i37 = $r28.<android.graphics.Rect: int top>;

        $r29 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i36 = $r29.<android.graphics.Rect: int top>;

        $i38 = staticinvoke <java.lang.Math: int max(int,int)>($i37, $i36);

        $r30 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $i40 = $r30.<android.graphics.Rect: int right>;

        $r31 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i39 = $r31.<android.graphics.Rect: int right>;

        $i41 = staticinvoke <java.lang.Math: int min(int,int)>($i40, $i39);

        $r32 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        $i43 = $r32.<android.graphics.Rect: int bottom>;

        $r33 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i42 = $r33.<android.graphics.Rect: int bottom>;

        $i44 = staticinvoke <java.lang.Math: int min(int,int)>($i43, $i42);

        virtualinvoke $r27.<android.graphics.Rect: void set(int,int,int,int)>($i35, $i38, $i41, $i44);

     label27:
        $r131 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i86 = $r131.<android.view.WindowManager$LayoutParams: int type>;

        if $i86 != 2034 goto label28;

        $r53 = r3.<com.android.server.wm.WindowFrames: com.android.server.wm.utils.WmDisplayCutout mDisplayCutout>;

        $r52 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        $r54 = virtualinvoke $r53.<com.android.server.wm.utils.WmDisplayCutout: com.android.server.wm.utils.WmDisplayCutout calculateRelativeTo(android.graphics.Rect)>($r52);

        $r55 = virtualinvoke $r54.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        $r56 = virtualinvoke $r55.<android.view.DisplayCutout: android.graphics.Rect getSafeInsets()>();

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void calculateDockedDividerInsets(android.graphics.Rect)>($r56);

        goto label29;

     label28:
        $r34 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayFrames mDisplayFrames>;

        $r35 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayFrames getDisplayFrames(com.android.server.wm.DisplayFrames)>($r34);

        $r36 = $r35.<com.android.server.wm.DisplayFrames: android.graphics.Rect mUnrestricted>;

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void calculateInsets(boolean,boolean,android.graphics.Rect)>(z20, z19, $r36);

     label29:
        $r38 = r3.<com.android.server.wm.WindowFrames: com.android.server.wm.utils.WmDisplayCutout mDisplayCutout>;

        $r37 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $r39 = virtualinvoke $r38.<com.android.server.wm.utils.WmDisplayCutout: com.android.server.wm.utils.WmDisplayCutout calculateRelativeTo(android.graphics.Rect)>($r37);

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void setDisplayCutout(com.android.server.wm.utils.WmDisplayCutout)>($r39);

        $i46 = neg i78;

        $i45 = neg i81;

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void offsetFrames(int,int)>($i46, $i45);

        $r41 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $r40 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r41.<android.graphics.Rect: void set(android.graphics.Rect)>($r40);

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z2 == 0 goto label30;

        $f0 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        virtualinvoke r3.<com.android.server.wm.WindowFrames: void scaleInsets(float)>($f0);

        $r51 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $f1 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        virtualinvoke $r51.<android.graphics.Rect: void scale(float)>($f1);

     label30:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z3 == 0 goto label32;

        $r48 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i47 = virtualinvoke $r48.<android.graphics.Rect: int width()>();

        if i0 != $i47 goto label31;

        $r50 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i48 = virtualinvoke $r50.<android.graphics.Rect: int height()>();

        if i1 == $i48 goto label32;

     label31:
        $r49 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r49.<com.android.server.wm.WallpaperController: boolean updateWallpaperOffset(com.android.server.wm.WindowState,boolean)>(r0, 0);

     label32:
        $r132 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        $r133 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r132.<android.graphics.Rect: void set(android.graphics.Rect)>($r133);

        r134 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        i87 = 0;

        i88 = 0;

        $z24 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z24 == 0 goto label33;

        $r42 = (com.android.server.wm.WindowState) r134;

        $r43 = $r42.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r44 = $r43.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i87 = $r44.<android.graphics.Rect: int left>;

        $r45 = (com.android.server.wm.WindowState) r134;

        $r46 = $r45.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r47 = $r46.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i88 = $r47.<android.graphics.Rect: int top>;

        goto label34;

     label33:
        if r134 == null goto label34;

        r135 = virtualinvoke r134.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        i87 = r135.<android.graphics.Rect: int left>;

        i88 = r135.<android.graphics.Rect: int top>;

     label34:
        $r136 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        $r137 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i89 = $r137.<android.graphics.Rect: int left>;

        $i90 = $i89 - i87;

        $r138 = r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i91 = $r138.<android.graphics.Rect: int top>;

        $i92 = $i91 - i88;

        virtualinvoke $r136.<android.graphics.Rect: void offsetTo(int,int)>($i90, $i92);

        return;
    }

    boolean destroySurface(boolean, boolean)
    {
        com.android.server.wm.WindowState r0, $r17;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, $z11, z12, $z13;
        java.util.ArrayList $r1;
        com.android.server.wm.WindowList $r2;
        int $i0, i1;
        com.android.server.wm.WindowStateAnimator $r3;
        com.android.server.wm.DisplayContent $r4, $r6;
        com.android.server.wm.AppTransition $r5;
        com.android.server.wm.ActivityRecord $r7;
        android.util.ArraySet $r8;
        com.android.server.wm.WindowManagerService $r9;
        com.android.server.wm.WindowSurfacePlacer $r10;
        java.lang.Object[] $r11;
        com.android.server.wm.ProtoLogGroup $r12;
        java.lang.Boolean $r13, $r14, $r15;
        java.lang.Object $r16;
        java.lang.String r19;

        r0 := @this: com.android.server.wm.WindowState;

        z9 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        z10 = 0;

        $r1 = new java.util.ArrayList;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label01:
        if i1 < 0 goto label02;

        $r16 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r17 = (com.android.server.wm.WindowState) $r16;

        $z8 = virtualinvoke $r17.<com.android.server.wm.WindowState: boolean destroySurface(boolean,boolean)>(z9, z0);

        z10 = z10 | $z8;

        i1 = i1 + -1;

        goto label01;

     label02:
        if z0 != 0 goto label03;

        $z7 = r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed>;

        if $z7 != 0 goto label03;

        if z9 != 0 goto label03;

        return z10;

     label03:
        if z0 != 0 goto label04;

        $z6 = r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed>;

        if $z6 == 0 goto label05;

     label04:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r3.<com.android.server.wm.WindowStateAnimator: void destroyPreservedSurfaceLocked()>();

     label05:
        $z11 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z11 == 0 goto label11;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z2 == 0 goto label06;

        r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        z1 = r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed>;

        z12 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r11 = newarray (java.lang.Object)[4];

        $r11[0] = r19;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r11[2] = $r14;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z12);

        $r11[3] = $r15;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void e(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, 1577579529, 252, null, $r11);

     label06:
        if z9 == 0 goto label07;

        $z5 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z5 == 0 goto label08;

     label07:
        virtualinvoke r0.<com.android.server.wm.WindowState: void destroySurfaceUnchecked()>();

     label08:
        $z13 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z13 == 0 goto label09;

        virtualinvoke r0.<com.android.server.wm.WindowState: void removeImmediately()>();

     label09:
        if z9 == 0 goto label10;

        virtualinvoke r0.<com.android.server.wm.WindowState: void requestUpdateWallpaperIfNeeded()>();

     label10:
        r0.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        z10 = 1;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z3 = virtualinvoke $r5.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z3 == 0 goto label11;

        z10 = 1;

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = $r6.<com.android.server.wm.DisplayContent: android.util.ArraySet mOpeningApps>;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z4 = virtualinvoke $r8.<android.util.ArraySet: boolean contains(java.lang.Object)>($r7);

        if $z4 == 0 goto label11;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r10.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

        z10 = 1;

     label11:
        return z10;
    }

    void destroySurfaceUnchecked()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 0;

        return;
    }

    void dispatchWallpaperVisibility(boolean)
    {
        com.android.server.wm.WindowState r0, $r4;
        boolean z0, $z1, z2;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.WallpaperController $r3;
        android.view.IWindow $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r4 = $r3.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper>;

        if $r4 != null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $z1 = r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z1 == z0 goto label7;

        if z2 != 0 goto label3;

        if z0 == 0 goto label7;

     label3:
        r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible> = z0;

     label4:
        $r5 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r5.<android.view.IWindow: void dispatchAppVisibility(boolean)>(z0);

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void disposeInputChannel()
    {
        com.android.server.wm.WindowState r0;
        android.view.InputChannel $r1, $r14, $r16, r18;
        com.android.server.wm.WindowManagerService $r2, $r7, $r13;
        android.view.InputWindowHandle $r3, $r8, $r12;
        android.os.IBinder $r4, $r9;
        java.util.Map $r5;
        java.util.HashMap $r10;
        com.android.server.input.InputManagerService $r15;
        com.android.server.wm.WindowState$DeadWindowEventReceiver r17;

        r0 := @this: com.android.server.wm.WindowState;

        r17 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeadWindowEventReceiver mDeadWindowEventReceiver>;

        if r17 == null goto label1;

        virtualinvoke r17.<com.android.server.wm.WindowState$DeadWindowEventReceiver: void dispose()>();

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeadWindowEventReceiver mDeadWindowEventReceiver> = null;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        if $r1 == null goto label2;

        $r13 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r15 = $r13.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r14 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        virtualinvoke $r15.<com.android.server.input.InputManagerService: void unregisterInputChannel(android.view.InputChannel)>($r14);

        $r16 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        virtualinvoke $r16.<android.view.InputChannel: void dispose()>();

        r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel> = null;

     label2:
        r18 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel>;

        if r18 == null goto label3;

        virtualinvoke r18.<android.view.InputChannel: void dispose()>();

        r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel> = null;

     label3:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r2.<com.android.server.wm.WindowManagerService: java.util.Map mKeyInterceptionInfoForToken>;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $r4 = $r3.<android.view.InputWindowHandle: android.os.IBinder token>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r7.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r8 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $r9 = $r8.<android.view.InputWindowHandle: android.os.IBinder token>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r9);

        $r12 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $r12.<android.view.InputWindowHandle: android.os.IBinder token> = null;

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.WindowState r0, $r58;
        java.io.PrintWriter r1;
        java.lang.String r2, $r7, $r17, $r26, $r29, $r31, $r36, $r38, $r47, $r54, $r62, $r93, $r106, $r110, $r129, $r135, $r139, $r146, $r153, $r160, $r167, $r172, $r177, $r184, $r190, $r195, $r200, $r206, $r211, $r215, $r223, $r225, $r232, $r234, $r240, $r245, $r247, $r254, $r260, $r272, $r277, $r283, $r289, $r291, $r297, $r302, $r307, $r312, $r316, $r327, $r337, $r346, $r350, $r353, $r361;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, z63;
        java.lang.StringBuilder $r3, $r9, $r18, $r32, $r39, $r48, $r55, $r87, $r101, $r107, $r130, $r136, $r140, $r147, $r154, $r161, $r168, $r173, $r179, $r185, $r191, $r196, $r201, $r207, $r212, $r217, $r221, $r226, $r230, $r235, $r238, $r243, $r248, $r256, $r267, $r274, $r284, $r292, $r298, $r303, $r308, $r313, $r325, $r335, $r343, $r347, $r351, $r359, $r362;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        com.android.server.wm.ActivityStack $r8;
        com.android.server.wm.Session $r11;
        android.view.IWindow $r14;
        android.os.IBinder $r15;
        android.view.WindowManager$LayoutParams $r25, $r35, $r220;
        com.android.server.wm.WindowStateAnimator $r103, r357;
        long $l10, $l20;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        byte $b11, $b16, $b17, $b18, $b34, $b35, $b36;
        android.util.ArraySet $r178, $r188;
        android.view.InsetsState $r182;
        android.os.PowerManager$WakeLock $r204, $r375;
        com.android.server.wm.WindowFrames $r216, $r229;
        android.graphics.Rect $r222, $r231, $r239, $r244;
        android.graphics.Region $r255;
        com.android.server.wm.WindowToken $r270;
        com.android.server.wm.ActivityRecord $r273, $r295;
        android.content.res.Configuration $r345, $r349, $r364, $r365;
        com.android.server.wm.SeamlessRotator r368;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDisplayId=");

        $i0 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        $r8 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        if $r8 == null goto label01;

        $r313 = new java.lang.StringBuilder;

        specialinvoke $r313.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r313.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rootTaskId=");

        $i30 = specialinvoke r0.<com.android.server.wm.WindowState: int getRootTaskId()>();

        virtualinvoke $r313.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r316 = virtualinvoke $r313.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r316);

     label01:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSession=");

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mClient=");

        $r14 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r15 = interfaceinvoke $r14.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOwnerUid=");

        $i1 = r0.<com.android.server.wm.WindowState: int mOwnerUid>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" showForAllUsers=");

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean showForAllUsers()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" package=");

        $r25 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r26 = $r25.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appop=");

        $i2 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        $r29 = staticinvoke <android.app.AppOpsManager: java.lang.String opToName(int)>($i2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAttrs=");

        $r35 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r36 = virtualinvoke $r35.<android.view.WindowManager$LayoutParams: java.lang.String toString(java.lang.String)>(r2);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested w=");

        $i3 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" h=");

        $i4 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLayoutSeq=");

        $i5 = r0.<com.android.server.wm.WindowState: int mLayoutSeq>;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r47 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        $i7 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        $i6 = r0.<com.android.server.wm.WindowState: int mLastRequestedWidth>;

        if $i7 != $i6 goto label02;

        $i29 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        $i28 = r0.<com.android.server.wm.WindowState: int mLastRequestedHeight>;

        if $i29 == $i28 goto label03;

     label02:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LastRequested w=");

        $i8 = r0.<com.android.server.wm.WindowState: int mLastRequestedWidth>;

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" h=");

        $i9 = r0.<com.android.server.wm.WindowState: int mLastRequestedHeight>;

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r54);

     label03:
        $z38 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z38 != 0 goto label04;

        $z37 = r0.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        if $z37 == 0 goto label05;

     label04:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mParentWindow=");

        $r58 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r58);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLayoutAttached=");

        $z2 = r0.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r62 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

     label05:
        $z39 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z39 != 0 goto label06;

        $z35 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z35 != 0 goto label06;

        $z36 = r0.<com.android.server.wm.WindowState: boolean mIsFloatingLayer>;

        if $z36 == 0 goto label07;

     label06:
        $r325 = new java.lang.StringBuilder;

        specialinvoke $r325.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsImWindow=");

        $z40 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z40);

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsWallpaper=");

        $z41 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z41);

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsFloatingLayer=");

        $z42 = r0.<com.android.server.wm.WindowState: boolean mIsFloatingLayer>;

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z42);

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWallpaperVisible=");

        $z43 = r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z43);

        $r327 = virtualinvoke $r325.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r327);

     label07:
        if z0 == 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mBaseLayer=");

        $i26 = r0.<com.android.server.wm.WindowState: int mBaseLayer>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i26);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSubLayer=");

        $i27 = r0.<com.android.server.wm.WindowState: int mSubLayer>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i27);

     label08:
        if z0 == 0 goto label10;

        $r267 = new java.lang.StringBuilder;

        specialinvoke $r267.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mToken=");

        $r270 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r270);

        $r272 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r272);

        $r273 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r273 == null goto label09;

        $r292 = new java.lang.StringBuilder;

        specialinvoke $r292.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r292.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r292.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mActivityRecord=");

        $r295 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r292.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r295);

        $r297 = virtualinvoke $r292.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r297);

        $r298 = new java.lang.StringBuilder;

        specialinvoke $r298.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r298.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r298.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAppDied=");

        $z32 = r0.<com.android.server.wm.WindowState: boolean mAppDied>;

        virtualinvoke $r298.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z32);

        $r302 = virtualinvoke $r298.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r302);

        $r303 = new java.lang.StringBuilder;

        specialinvoke $r303.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r303.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r303.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("drawnStateEvaluated=");

        $z33 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getDrawnStateEvaluated()>();

        virtualinvoke $r303.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z33);

        $r307 = virtualinvoke $r303.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r307);

        $r308 = new java.lang.StringBuilder;

        specialinvoke $r308.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mightAffectAllDrawn=");

        $z34 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean mightAffectAllDrawn()>();

        virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z34);

        $r312 = virtualinvoke $r308.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r312);

     label09:
        $r274 = new java.lang.StringBuilder;

        specialinvoke $r274.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mViewVisibility=0x");

        $i23 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        $r277 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i23);

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r277);

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mHaveFrame=");

        $z30 = r0.<com.android.server.wm.WindowState: boolean mHaveFrame>;

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z30);

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mObscured=");

        $z31 = r0.<com.android.server.wm.WindowState: boolean mObscured>;

        virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z31);

        $r283 = virtualinvoke $r274.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r283);

        $r284 = new java.lang.StringBuilder;

        specialinvoke $r284.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSeq=");

        $i24 = r0.<com.android.server.wm.WindowState: int mSeq>;

        virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSystemUiVisibility=0x");

        $i25 = r0.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        $r289 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i25);

        virtualinvoke $r284.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r289);

        $r291 = virtualinvoke $r284.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r291);

     label10:
        $z44 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z44 == 0 goto label11;

        $z24 = r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim>;

        if $z24 == 0 goto label11;

        $z25 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z25 == 0 goto label11;

        $z26 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z26 != 0 goto label11;

        $z27 = r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden>;

        if $z27 != 0 goto label11;

        $z28 = r0.<com.android.server.wm.WindowState: boolean mForceHideNonSystemOverlayWindow>;

        if $z28 != 0 goto label11;

        $z29 = r0.<com.android.server.wm.WindowState: boolean mHiddenWhileSuspended>;

        if $z29 == 0 goto label12;

     label11:
        $r335 = new java.lang.StringBuilder;

        specialinvoke $r335.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPolicyVisibility=");

        $z45 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z45);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLegacyPolicyVisibilityAfterAnim=");

        $z46 = r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim>;

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z46);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAppOpVisibility=");

        $z47 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z47);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parentHidden=");

        $z48 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z48);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPermanentlyHidden=");

        $z49 = r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden>;

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z49);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mHiddenWhileSuspended=");

        $z50 = r0.<com.android.server.wm.WindowState: boolean mHiddenWhileSuspended>;

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z50);

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mForceHideNonSystemOverlayWindow=");

        $z51 = r0.<com.android.server.wm.WindowState: boolean mForceHideNonSystemOverlayWindow>;

        virtualinvoke $r335.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z51);

        $r337 = virtualinvoke $r335.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r337);

     label12:
        $z52 = r0.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z52 == 0 goto label13;

        $z23 = r0.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        if $z23 == 0 goto label14;

     label13:
        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRelayoutCalled=");

        $z3 = r0.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLayoutNeeded=");

        $z4 = r0.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r93 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r93);

     label14:
        if z0 == 0 goto label17;

        $r235 = new java.lang.StringBuilder;

        specialinvoke $r235.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mGivenContentInsets=");

        $r239 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        $r238 = <com.android.server.wm.WindowState: java.lang.StringBuilder sTmpSB>;

        $r240 = virtualinvoke $r239.<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>($r238);

        virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r240);

        virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mGivenVisibleInsets=");

        $r244 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        $r243 = <com.android.server.wm.WindowState: java.lang.StringBuilder sTmpSB>;

        $r245 = virtualinvoke $r244.<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>($r243);

        virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r245);

        $r247 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r247);

        $i21 = r0.<com.android.server.wm.WindowState: int mTouchableInsets>;

        if $i21 != 0 goto label15;

        $z22 = r0.<com.android.server.wm.WindowState: boolean mGivenInsetsPending>;

        if $z22 == 0 goto label16;

     label15:
        $r248 = new java.lang.StringBuilder;

        specialinvoke $r248.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTouchableInsets=");

        $i22 = r0.<com.android.server.wm.WindowState: int mTouchableInsets>;

        virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mGivenInsetsPending=");

        $z21 = r0.<com.android.server.wm.WindowState: boolean mGivenInsetsPending>;

        virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z21);

        $r254 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r254);

        $r255 = new android.graphics.Region;

        specialinvoke $r255.<android.graphics.Region: void <init>()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>($r255);

        $r256 = new java.lang.StringBuilder;

        specialinvoke $r256.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("touchable region=");

        virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r255);

        $r260 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r260);

     label16:
        $r343 = new java.lang.StringBuilder;

        specialinvoke $r343.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r343.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r343.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFullConfiguration=");

        $r345 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        virtualinvoke $r343.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r345);

        $r346 = virtualinvoke $r343.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r346);

        $r347 = new java.lang.StringBuilder;

        specialinvoke $r347.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r347.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r347.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastReportedConfiguration=");

        $r349 = specialinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getLastReportedConfiguration()>();

        virtualinvoke $r347.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r349);

        $r350 = virtualinvoke $r347.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r350);

     label17:
        $r351 = new java.lang.StringBuilder;

        specialinvoke $r351.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mHasSurface=");

        $z53 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z53);

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isReadyForDisplay()=");

        $z54 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isReadyForDisplay()>();

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z54);

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWindowRemovalAllowed=");

        $z55 = r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed>;

        virtualinvoke $r351.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z55);

        $r353 = virtualinvoke $r351.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r353);

        $z56 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z56 == 0 goto label18;

        $r226 = new java.lang.StringBuilder;

        specialinvoke $r226.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCompatFrame=");

        $r229 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r231 = $r229.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $r230 = <com.android.server.wm.WindowState: java.lang.StringBuilder sTmpSB>;

        $r232 = virtualinvoke $r231.<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>($r230);

        virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r232);

        $r234 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r234);

     label18:
        if z0 == 0 goto label19;

        $r216 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r216.<com.android.server.wm.WindowFrames: void dump(java.io.PrintWriter,java.lang.String)>(r1, r2);

        $r217 = new java.lang.StringBuilder;

        specialinvoke $r217.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r220 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r222 = $r220.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $r221 = <com.android.server.wm.WindowState: java.lang.StringBuilder sTmpSB>;

        $r223 = virtualinvoke $r222.<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>($r221);

        virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r223);

        $r225 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r225);

     label19:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r103 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r103);

        virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r106 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r106);

        r357 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r110 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r357.<com.android.server.wm.WindowStateAnimator: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, $r110, z0);

        $z5 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z5 != 0 goto label20;

        $z18 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z18 != 0 goto label20;

        $z19 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z19 != 0 goto label20;

        $z20 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z20 == 0 goto label21;

     label20:
        $r359 = new java.lang.StringBuilder;

        specialinvoke $r359.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAnimatingExit=");

        $z57 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z57);

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mRemoveOnExit=");

        $z58 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z58);

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDestroying=");

        $z59 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z59);

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mRemoved=");

        $z60 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        virtualinvoke $r359.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z60);

        $r361 = virtualinvoke $r359.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r361);

     label21:
        $z61 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z61 != 0 goto label22;

        $z16 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z16 != 0 goto label22;

        $z17 = r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged>;

        if $z17 == 0 goto label25;

     label22:
        $r362 = new java.lang.StringBuilder;

        specialinvoke $r362.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOrientationChanging=");

        $z62 = r0.<com.android.server.wm.WindowState: boolean mOrientationChanging>;

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z62);

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configOrientationChanging=");

        $r364 = specialinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getLastReportedConfiguration()>();

        $i31 = $r364.<android.content.res.Configuration: int orientation>;

        $r365 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        $i32 = $r365.<android.content.res.Configuration: int orientation>;

        if $i31 == $i32 goto label23;

        z63 = 1;

        goto label24;

     label23:
        z63 = 0;

     label24:
        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z63);

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAppFreezing=");

        $z6 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mReportOrientationChanged=");

        $z7 = r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged>;

        virtualinvoke $r362.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r129 = virtualinvoke $r362.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r129);

     label25:
        $i33 = r0.<com.android.server.wm.WindowState: int mLastFreezeDuration>;

        if $i33 == 0 goto label26;

        $r212 = new java.lang.StringBuilder;

        specialinvoke $r212.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLastFreezeDuration=");

        $r215 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r215);

        $i19 = r0.<com.android.server.wm.WindowState: int mLastFreezeDuration>;

        $l20 = (long) $i19;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l20, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label26:
        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mForceSeamlesslyRotate=");

        $z8 = r0.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seamlesslyRotate: pending=");

        $r135 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r135);

        r368 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate>;

        if r368 == null goto label27;

        virtualinvoke r368.<com.android.server.wm.SeamlessRotator: void dump(java.io.PrintWriter)>(r1);

        goto label28;

     label27:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("null");

     label28:
        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" finishedFrameNumber=");

        $l10 = r0.<com.android.server.wm.WindowState: long mFinishSeamlessRotateFrameNumber>;

        virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r139 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r139);

        $f0 = r0.<com.android.server.wm.WindowState: float mHScale>;

        $b11 = $f0 cmpl 1.0F;

        if $b11 != 0 goto label29;

        $f10 = r0.<com.android.server.wm.WindowState: float mVScale>;

        $b18 = $f10 cmpl 1.0F;

        if $b18 == 0 goto label30;

     label29:
        $r140 = new java.lang.StringBuilder;

        specialinvoke $r140.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mHScale=");

        $f1 = r0.<com.android.server.wm.WindowState: float mHScale>;

        virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mVScale=");

        $f2 = r0.<com.android.server.wm.WindowState: float mVScale>;

        virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r146 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r146);

     label30:
        $f11 = r0.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b34 = $f11 cmpl -1.0F;

        if $b34 != 0 goto label31;

        $f9 = r0.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b17 = $f9 cmpl -1.0F;

        if $b17 == 0 goto label32;

     label31:
        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWallpaperX=");

        $f3 = r0.<com.android.server.wm.WindowState: float mWallpaperX>;

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWallpaperY=");

        $f4 = r0.<com.android.server.wm.WindowState: float mWallpaperY>;

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r153 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r153);

     label32:
        $f12 = r0.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $b35 = $f12 cmpl -1.0F;

        if $b35 != 0 goto label33;

        $f8 = r0.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        $b16 = $f8 cmpl -1.0F;

        if $b16 == 0 goto label34;

     label33:
        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWallpaperXStep=");

        $f5 = r0.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWallpaperYStep=");

        $f6 = r0.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f6);

        $r160 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r160);

     label34:
        $f13 = r0.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        $b36 = $f13 cmpl -1.0F;

        if $b36 == 0 goto label35;

        $r207 = new java.lang.StringBuilder;

        specialinvoke $r207.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWallpaperZoomOut=");

        $f7 = r0.<com.android.server.wm.WindowState: float mWallpaperZoomOut>;

        virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f7);

        $r211 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r211);

     label35:
        $i12 = r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i12 != -2147483648 goto label36;

        $i15 = r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i15 == -2147483648 goto label37;

     label36:
        $r161 = new java.lang.StringBuilder;

        specialinvoke $r161.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWallpaperDisplayOffsetX=");

        $i13 = r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWallpaperDisplayOffsetY=");

        $i14 = r0.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r167 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r167);

     label37:
        $r375 = r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock>;

        if $r375 == null goto label38;

        $r201 = new java.lang.StringBuilder;

        specialinvoke $r201.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDrawLock=");

        $r204 = r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock>;

        virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r204);

        $r206 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r206);

     label38:
        $z9 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z9 == 0 goto label39;

        $r196 = new java.lang.StringBuilder;

        specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isDragResizing=");

        $z15 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r200 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r200);

     label39:
        $z10 = specialinvoke r0.<com.android.server.wm.WindowState: boolean computeDragResizing()>();

        if $z10 == 0 goto label40;

        $r191 = new java.lang.StringBuilder;

        specialinvoke $r191.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("computeDragResizing=");

        $z14 = specialinvoke r0.<com.android.server.wm.WindowState: boolean computeDragResizing()>();

        virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r195 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r195);

     label40:
        $r168 = new java.lang.StringBuilder;

        specialinvoke $r168.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isOnScreen=");

        $z11 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r172 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r172);

        $r173 = new java.lang.StringBuilder;

        specialinvoke $r173.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isVisible=");

        $z12 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r177 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r177);

        $r178 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $z13 = virtualinvoke $r178.<android.util.ArraySet: boolean isEmpty()>();

        if $z13 != 0 goto label41;

        $r185 = new java.lang.StringBuilder;

        specialinvoke $r185.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mEmbeddedDisplayContents=");

        $r188 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r188);

        $r190 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r190);

     label41:
        if z0 == 0 goto label42;

        $r179 = new java.lang.StringBuilder;

        specialinvoke $r179.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRequestedInsetsState: ");

        $r182 = r0.<com.android.server.wm.WindowState: android.view.InsetsState mRequestedInsetsState>;

        virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r182);

        $r184 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r184);

     label42:
        return;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long, int)
    {
        com.android.server.wm.WindowState r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.WindowManager$LayoutParams $r2, $r5;
        android.graphics.Rect $r3, $r6;
        com.android.server.wm.WindowFrames $r4;
        android.graphics.Point $r7;
        com.android.server.wm.WindowStateAnimator $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        com.android.server.wm.SeamlessRotator $r9;
        long $l7, l8, l9;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l8 := @parameter1: long;

        i0 := @parameter2: int;

        z8 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        if i0 != 2 goto label1;

        if z8 != 0 goto label1;

        return;

     label1:
        l9 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l8);

        specialinvoke r0.<com.android.server.wm.WindowContainer: void dumpDebug(android.util.proto.ProtoOutputStream,long,int)>(r1, 1146756268033L, i0);

        virtualinvoke r0.<com.android.server.wm.WindowState: void writeIdentifierToProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268034L);

        $i1 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464259L, $i1);

        $i2 = specialinvoke r0.<com.android.server.wm.WindowState: int getRootTaskId()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464260L, $i2);

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        virtualinvoke $r2.<android.view.WindowManager$LayoutParams: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268037L);

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        virtualinvoke $r3.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268038L);

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r4.<com.android.server.wm.WindowFrames: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268073L);

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r6 = $r5.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r6.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268044L);

        $r7 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        virtualinvoke $r7.<android.graphics.Point: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268048L);

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r8.<com.android.server.wm.WindowStateAnimator: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268045L);

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366158L, $z0);

        $i3 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464274L, $i3);

        $i4 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464275L, $i4);

        $i5 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464276L, $i5);

        $i6 = r0.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464277L, $i6);

        $z1 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366166L, $z1);

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isReadyForDisplay()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366167L, $z2);

        $z3 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366178L, $z3);

        $z4 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366179L, $z4);

        $z5 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366180L, $z5);

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366181L, $z6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366182L, z8);

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate>;

        if $r9 == null goto label2;

        z9 = 1;

        goto label3;

     label2:
        z9 = 0;

     label3:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366183L, z9);

        $l7 = r0.<com.android.server.wm.WindowState: long mFinishSeamlessRotateFrameNumber>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529704L, $l7);

        $z7 = r0.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366186L, $z7);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l9);

        return;
    }

    void expandForSurfaceInsets(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3, $r5, $r7, $r9;
        android.view.WindowManager$LayoutParams $r2, $r4, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r3 = $r2.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i0 = $r3.<android.graphics.Rect: int left>;

        $i7 = neg $i0;

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r5 = $r4.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i1 = $r5.<android.graphics.Rect: int top>;

        $i6 = neg $i1;

        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r7 = $r6.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i2 = $r7.<android.graphics.Rect: int right>;

        $i5 = neg $i2;

        $r8 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r9 = $r8.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i3 = $r9.<android.graphics.Rect: int bottom>;

        $i4 = neg $i3;

        virtualinvoke r1.<android.graphics.Rect: void inset(int,int,int,int)>($i7, $i6, $i5, $i4);

        return;
    }

    boolean fillsDisplay()
    {
        com.android.server.wm.WindowState r0;
        android.view.DisplayInfo r1;
        com.android.server.wm.WindowFrames $r2, $r4, $r6, $r8;
        android.graphics.Rect $r3, $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = $r3.<android.graphics.Rect: int left>;

        if $i0 > 0 goto label1;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i1 = $r5.<android.graphics.Rect: int top>;

        if $i1 > 0 goto label1;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r7 = $r6.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i3 = $r7.<android.graphics.Rect: int right>;

        $i2 = r1.<android.view.DisplayInfo: int appWidth>;

        if $i3 < $i2 goto label1;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r9 = $r8.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i5 = $r9.<android.graphics.Rect: int bottom>;

        $i4 = r1.<android.view.DisplayInfo: int appHeight>;

        if $i5 < $i4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean finishDrawing(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.WindowState r0;
        android.view.SurfaceControl$Transaction r1, $r3;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowStateAnimator $r2, $r5;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mUsingBLASTSyncTransaction>;

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z2 = virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: boolean finishDrawingLocked(android.view.SurfaceControl$Transaction)>(r1);

        return $z2;

     label1:
        if r1 == null goto label2;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction mBLASTSyncTransaction>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>(r1);

     label2:
        r0.<com.android.server.wm.WindowState: boolean mNotifyBlastOnSurfacePlacement> = 1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.WindowStateAnimator: boolean finishDrawingLocked(android.view.SurfaceControl$Transaction)>(null);

        return $z1;
    }

    void finishSeamlessRotation(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;
        long $l0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.DisplayRotation $r2;
        com.android.server.wm.SeamlessRotator r3;
        com.android.server.wm.InsetsSourceProvider r4;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.wm.SeamlessRotator: void finish(com.android.server.wm.WindowState,boolean)>(r0, z0);

        $l0 = virtualinvoke r0.<com.android.server.wm.WindowState: long getFrameNumber()>();

        r0.<com.android.server.wm.WindowState: long mFinishSeamlessRotateFrameNumber> = $l0;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate> = null;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r2.<com.android.server.wm.DisplayRotation: void markForSeamlessRotation(com.android.server.wm.WindowState,boolean)>(r0, 0);

        r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.server.wm.InsetsSourceProvider: void finishSeamlessRotation(boolean)>(z0);

     label1:
        return;
    }

    boolean forAllWindows(com.android.internal.util.ToBooleanFunction, boolean)
    {
        com.android.server.wm.WindowState r0;
        com.android.internal.util.ToBooleanFunction r1;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WindowList $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.internal.util.ToBooleanFunction;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z4 = specialinvoke r0.<com.android.server.wm.WindowState: boolean applyInOrderWithImeWindows(com.android.internal.util.ToBooleanFunction,boolean)>(r1, z0);

        return $z4;

     label1:
        if z0 == 0 goto label2;

        $z3 = specialinvoke r0.<com.android.server.wm.WindowState: boolean forAllWindowTopToBottom(com.android.internal.util.ToBooleanFunction)>(r1);

        return $z3;

     label2:
        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean forAllWindowBottomToTop(com.android.internal.util.ToBooleanFunction)>(r1);

        return $z2;
    }

    void forceWindowsScaleableInTransaction(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1;
        com.android.server.wm.WindowStateAnimator r1, $r2;
        com.android.server.wm.WindowSurfaceController $r3;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z1 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r3 = $r2.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r3.<com.android.server.wm.WindowSurfaceController: void forceScaleableInTransaction(boolean)>(z0);

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void forceWindowsScaleableInTransaction(boolean)>(z0);

        return;
    }

    void getAnimationFrames(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2, r3, r4, $r6, $r8, $r11, $r12, $r14;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.Task $r5, $r9;
        com.android.server.wm.WindowToken $r7;
        com.android.server.wm.WindowContainer $r10;
        android.view.WindowManager$LayoutParams $r13;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inFreeformWindowingMode()>();

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r12);

        goto label5;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isLetterboxedAppWindow()>();

        if $z1 != 0 goto label4;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z2 = virtualinvoke $r7.<com.android.server.wm.WindowToken: boolean isFixedRotationTransforming()>();

        if $z2 == 0 goto label2;

        goto label4;

     label2:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDockedResizing()>();

        if $z3 == 0 goto label3;

        $r9 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $r10 = virtualinvoke $r9.<com.android.server.wm.Task: com.android.server.wm.WindowContainer getParent()>();

        $r11 = virtualinvoke $r10.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

        goto label5;

     label3:
        $r8 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getContainingFrame()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r8);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $r6 = virtualinvoke $r5.<com.android.server.wm.Task: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r6);

     label5:
        $r13 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $r14 = $r13.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r14);

        virtualinvoke r0.<com.android.server.wm.WindowState: void getContentInsets(android.graphics.Rect)>(r2);

        virtualinvoke r0.<com.android.server.wm.WindowState: void getStableInsets(android.graphics.Rect)>(r3);

        return;
    }

    public android.view.IApplicationToken getAppToken()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.ActivityRecord$Token r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        r2 = r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.view.WindowManager$LayoutParams getAttrs()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        return $r1;
    }

    android.graphics.Rect getBackdropFrame(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2, $z3;
        android.graphics.Rect $r1, $r2, $r3, $r4, $r5, r6;
        int $i0, $i1;
        android.app.WindowConfiguration $r7;
        android.view.DisplayInfo r8;

        r0 := @this: com.android.server.wm.WindowState;

        r6 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $z3 = virtualinvoke $r7.<android.app.WindowConfiguration: boolean useWindowFrameForBackdrop()>();

        if $z3 != 0 goto label5;

        if z2 != 0 goto label4;

        goto label5;

     label4:
        r8 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $i1 = r8.<android.view.DisplayInfo: int logicalWidth>;

        $i0 = r8.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke $r4.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        return $r5;

     label5:
        $r1 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r6);

        $r2 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r2.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        return $r3;
    }

    public int getBaseType()
    {
        com.android.server.wm.WindowState r0, $r1;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getTopParentWindow()>();

        $r2 = $r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        return $i0;
    }

    public android.graphics.Rect getBounds()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        android.graphics.Rect $r2, $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: android.graphics.Rect getBounds()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        return $r2;
    }

    android.view.SurfaceControl getClientViewRootSurface()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1;
        android.view.SurfaceControl $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl getClientViewRootSurface()>();

        return $r2;
    }

    void getCompatFrame(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.WindowFrames $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        return;
    }

    void getCompatFrameSize(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3, $r5;
        com.android.server.wm.WindowFrames $r2, $r4;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $i1 = virtualinvoke $r5.<android.graphics.Rect: int height()>();

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i0, $i1);

        return;
    }

    public android.content.res.Configuration getConfiguration()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1, $r9;
        boolean $z0;
        android.content.res.Configuration $r2, $r3, $r4, $r5, $r6, $r7, $r12;
        java.util.ArrayDeque $r8, $r10;
        int $i1;
        java.lang.Object $r11;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $r8 = r1.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        $i1 = virtualinvoke $r8.<java.util.ArrayDeque: int size()>();

        if $i1 <= 0 goto label1;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r10 = $r9.<com.android.server.wm.ActivityRecord: java.util.ArrayDeque mFrozenMergedConfig>;

        $r11 = virtualinvoke $r10.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r12 = (android.content.res.Configuration) $r11;

        return $r12;

     label1:
        $z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean registeredForDisplayConfigChanges()>();

        if $z0 != 0 goto label2;

        $r7 = specialinvoke r0.<com.android.server.wm.WindowContainer: android.content.res.Configuration getConfiguration()>();

        return $r7;

     label2:
        $r2 = r0.<com.android.server.wm.WindowState: android.content.res.Configuration mTempConfiguration>;

        $r3 = specialinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getProcessGlobalConfiguration()>();

        virtualinvoke $r2.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r3);

        $r4 = r0.<com.android.server.wm.WindowState: android.content.res.Configuration mTempConfiguration>;

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getMergedOverrideConfiguration()>();

        virtualinvoke $r4.<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>($r5);

        $r6 = r0.<com.android.server.wm.WindowState: android.content.res.Configuration mTempConfiguration>;

        return $r6;
    }

    android.graphics.Rect getContainingFrame()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mContainingFrame>;

        return $r2;
    }

    public android.graphics.Rect getContentFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentFrame>;

        return $r2;
    }

    android.graphics.Rect getContentInsets()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentInsets>;

        return $r2;
    }

    void getContentInsets(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.WindowFrames $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentInsets>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        return;
    }

    com.android.server.wm.InsetsSourceProvider getControllableInsetProvider()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.InsetsSourceProvider $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        return $r1;
    }

    android.graphics.Rect getDecorFrame()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mDecorFrame>;

        return $r2;
    }

    com.android.server.wm.DisplayContent getDisplayContent()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowToken $r1;
        com.android.server.wm.DisplayContent $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayContent getDisplayContent()>();

        return $r2;
    }

    public android.graphics.Rect getDisplayFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mDisplayFrame>;

        return $r2;
    }

    com.android.server.wm.DisplayFrames getDisplayFrames(com.android.server.wm.DisplayFrames)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayFrames r1, r2;
        com.android.server.wm.WindowToken $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.DisplayFrames;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r2 = virtualinvoke $r3.<com.android.server.wm.WindowToken: com.android.server.wm.DisplayFrames getFixedRotationTransformDisplayFrames()>();

        if r2 == null goto label1;

        return r2;

     label1:
        return r1;
    }

    public int getDisplayId()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayContent r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        return $i0;
    }

    android.view.DisplayInfo getDisplayInfo()
    {
        com.android.server.wm.WindowState r0;
        android.view.DisplayInfo r1, $r4;
        com.android.server.wm.WindowToken $r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowToken: android.view.DisplayInfo getFixedRotationTransformDisplayInfo()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        return $r4;
    }

    boolean getDrawnStateEvaluated()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mDrawnStateEvaluated>;

        return $z0;
    }

    void getEffectiveTouchableRegion(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1;
        com.android.server.wm.DisplayContent r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1;
        android.graphics.Rect $r4;
        boolean z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 40;

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if z1 == 0 goto label3;

        if r2 == null goto label3;

        $r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.graphics.Rect getBounds()>();

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Rect)>($r4);

        specialinvoke r0.<com.android.server.wm.WindowState: void cropRegionToStackBoundsIfNeeded(android.graphics.Region)>(r1);

        specialinvoke r0.<com.android.server.wm.WindowState: void subtractTouchExcludeRegionIfNeeded(android.graphics.Region)>(r1);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r1);

     label4:
        return;
    }

    public android.graphics.Rect getFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        return $r2;
    }

    long getFrameNumber()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect $r1;
        boolean $z0;
        long l0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $z0 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        l0 = -1L;

        goto label2;

     label1:
        l0 = r0.<com.android.server.wm.WindowState: long mFrameNumber>;

     label2:
        return l0;
    }

    public android.graphics.Rect getGivenContentInsetsLw()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        return $r1;
    }

    public boolean getGivenInsetsPendingLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mGivenInsetsPending>;

        return $z0;
    }

    public android.graphics.Rect getGivenVisibleInsetsLw()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        return $r1;
    }

    com.android.server.wm.InsetsControlTarget getImeControlTarget()
    {
        com.android.server.wm.WindowState r0, r3;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.InsetsControlTarget $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if r3 == null goto label1;

        goto label2;

     label1:
        r3 = r0;

     label2:
        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsControlTarget getImeHostOrFallback(com.android.server.wm.WindowState)>(r3);

        return $r2;
    }

    public long getInputDispatchingTimeoutNanos()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        long l0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        l0 = r1.<com.android.server.wm.ActivityRecord: long mInputDispatchingTimeoutNanos>;

        goto label2;

     label1:
        l0 = 5000000000L;

     label2:
        return l0;
    }

    void getInsetsForRelayout(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2, r3, $r5, $r7, $r9, $r11, $r12;
        com.android.server.wm.WindowFrames $r4, $r6, $r8, $r10;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentInsets>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r7 = $r6.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleInsets>;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r9 = $r8.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableInsets>;

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

        $r12 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastRelayoutContentInsets>;

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r11 = $r10.<com.android.server.wm.WindowFrames: android.graphics.Rect mContentInsets>;

        virtualinvoke $r12.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

        return;
    }

    android.view.InsetsState getInsetsState()
    {
        com.android.server.wm.WindowState r0;
        android.view.InsetsState r1, $r5;
        com.android.server.wm.WindowToken $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.InsetsPolicy $r4;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowToken: android.view.InsetsState getFixedRotationTransformInsetsState()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsPolicy getInsetsPolicy()>();

        $r5 = virtualinvoke $r4.<com.android.server.wm.InsetsPolicy: android.view.InsetsState getInsetsForDispatch(com.android.server.wm.WindowState)>(r0);

        return $r5;
    }

    com.android.internal.policy.KeyInterceptionInfo getKeyInterceptionInfo()
    {
        com.android.server.wm.WindowState r0;
        com.android.internal.policy.KeyInterceptionInfo r1, $r3, $r5, $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.WindowManager$LayoutParams $r2, $r4, $r9, $r10;
        java.lang.String $r6, $r12;
        java.lang.CharSequence $r7, $r11;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo>;

        if r1 == null goto label1;

        $i0 = r1.<com.android.internal.policy.KeyInterceptionInfo: int layoutParamsPrivateFlags>;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        if $i0 != $i1 goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo>;

        $i2 = $r3.<com.android.internal.policy.KeyInterceptionInfo: int layoutParamsType>;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i3 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != $i3 goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo>;

        $r6 = $r5.<com.android.internal.policy.KeyInterceptionInfo: java.lang.String windowTitle>;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        if $r6 == $r7 goto label2;

     label1:
        $r8 = new com.android.internal.policy.KeyInterceptionInfo;

        $r9 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i4 = $r9.<android.view.WindowManager$LayoutParams: int type>;

        $r10 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i5 = $r10.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $r11 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        $r12 = interfaceinvoke $r11.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke $r8.<com.android.internal.policy.KeyInterceptionInfo: void <init>(int,int,java.lang.String)>($i4, $i5, $r12);

        r0.<com.android.server.wm.WindowState: com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo> = $r8;

     label2:
        $r13 = r0.<com.android.server.wm.WindowState: com.android.internal.policy.KeyInterceptionInfo mKeyInterceptionInfo>;

        return $r13;
    }

    void getLastReportedMergedConfiguration(android.util.MergedConfiguration)
    {
        com.android.server.wm.WindowState r0;
        android.util.MergedConfiguration r1, $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.util.MergedConfiguration;

        $r2 = r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration>;

        virtualinvoke r1.<android.util.MergedConfiguration: void setTo(android.util.MergedConfiguration)>($r2);

        return;
    }

    com.android.server.wm.WindowFrames getLayoutingWindowFrames()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames r1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mSimulatedWindowFrames>;

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

     label2:
        return r1;
    }

    public void getMaxVisibleBounds(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        boolean $z0;
        com.android.server.wm.WindowFrames $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r18 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r19 = $r18.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r19);

        return;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i1 = $r3.<android.graphics.Rect: int left>;

        $i0 = r1.<android.graphics.Rect: int left>;

        if $i1 >= $i0 goto label2;

        $r16 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r17 = $r16.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i11 = $r17.<android.graphics.Rect: int left>;

        r1.<android.graphics.Rect: int left> = $i11;

     label2:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i3 = $r5.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int top>;

        if $i3 >= $i2 goto label3;

        $r14 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r15 = $r14.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i10 = $r15.<android.graphics.Rect: int top>;

        r1.<android.graphics.Rect: int top> = $i10;

     label3:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r7 = $r6.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i5 = $r7.<android.graphics.Rect: int right>;

        $i4 = r1.<android.graphics.Rect: int right>;

        if $i5 <= $i4 goto label4;

        $r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r13 = $r12.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i9 = $r13.<android.graphics.Rect: int right>;

        r1.<android.graphics.Rect: int right> = $i9;

     label4:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r9 = $r8.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i7 = $r9.<android.graphics.Rect: int bottom>;

        $i6 = r1.<android.graphics.Rect: int bottom>;

        if $i7 <= $i6 goto label5;

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r11 = $r10.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        $i8 = $r11.<android.graphics.Rect: int bottom>;

        r1.<android.graphics.Rect: int bottom> = $i8;

     label5:
        return;
    }

    void getMergedConfiguration(android.util.MergedConfiguration)
    {
        com.android.server.wm.WindowState r0;
        android.util.MergedConfiguration r1;
        android.content.res.Configuration $r2, $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.util.MergedConfiguration;

        $r2 = specialinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getProcessGlobalConfiguration()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getMergedOverrideConfiguration()>();

        virtualinvoke r1.<android.util.MergedConfiguration: void setConfiguration(android.content.res.Configuration,android.content.res.Configuration)>($r2, $r3);

        return;
    }

    java.lang.String getName()
    {
        com.android.server.wm.WindowState r0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r3, $r8;
        java.lang.CharSequence $r6;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    boolean getOrientationChanging()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, $z3, z4;
        android.content.res.Configuration $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mOrientationChanging>;

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z3 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        $i0 = $r1.<android.content.res.Configuration: int orientation>;

        $r2 = specialinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getLastReportedConfiguration()>();

        $i1 = $r2.<android.content.res.Configuration: int orientation>;

        if $i0 == $i1 goto label2;

     label1:
        $z1 = r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mOrientationChangeTimedOut>;

        if $z2 != 0 goto label2;

        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    public java.lang.String getOwningPackage()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        return $r2;
    }

    public int getOwningUid()
    {
        com.android.server.wm.WindowState r0;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mOwnerUid>;

        return $i0;
    }

    android.graphics.Rect getParentFrame()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mParentFrame>;

        return $r2;
    }

    com.android.server.wm.WindowState getParentWindow()
    {
        com.android.server.wm.WindowState r0, r2;
        boolean $z0;
        com.android.server.wm.WindowContainer $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowContainer: com.android.server.wm.WindowContainer getParent()>();

        r2 = (com.android.server.wm.WindowState) $r1;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    long getProtoFieldId()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        return 1146756268040L;
    }

    android.graphics.Rect getRelativeFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        return $r2;
    }

    com.android.server.wm.WindowState getReplacingWindow()
    {
        com.android.server.wm.WindowState r0, r1, $r4;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowList $r2, $r5;
        java.lang.Object $r3;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow>;

        if $z2 == 0 goto label1;

        return r0;

     label1:
        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        r1 = virtualinvoke $r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getReplacingWindow()>();

        if r1 == null goto label3;

        return r1;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return null;
    }

    android.view.InsetsState getRequestedInsetsState()
    {
        com.android.server.wm.WindowState r0;
        android.view.InsetsState $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.InsetsState mRequestedInsetsState>;

        return $r1;
    }

    int getResizeMode()
    {
        com.android.server.wm.WindowState r0;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mResizeMode>;

        return $i0;
    }

    com.android.server.wm.ActivityStack getRootTask()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;
        com.android.server.wm.TaskDisplayArea $r2;
        com.android.server.wm.Task $r3, r5;
        com.android.server.wm.ActivityStack $r4, r7;
        com.android.server.wm.DisplayContent r6;

        r0 := @this: com.android.server.wm.WindowState;

        r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<com.android.server.wm.Task: com.android.server.wm.Task getRootTask()>();

        $r4 = (com.android.server.wm.ActivityStack) $r3;

        return $r4;

     label1:
        r6 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 < 2000 goto label2;

        if r6 == null goto label2;

        $r2 = virtualinvoke r6.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskDisplayArea getDefaultTaskDisplayArea()>();

        r7 = virtualinvoke $r2.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootHomeTask()>();

        goto label3;

     label2:
        r7 = null;

     label3:
        return r7;
    }

    public int getRotationAnimationHint()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $i0 = r1.<com.android.server.wm.ActivityRecord: int mRotationAnimationHint>;

        return $i0;

     label1:
        return -1;
    }

    android.view.SurfaceSession getSession()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Session $r1, $r5;
        android.view.SurfaceSession $r2, $r4, $r6;
        com.android.server.wm.WindowContainer $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r2 = $r1.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r6 = $r5.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        $r4 = virtualinvoke $r3.<com.android.server.wm.WindowContainer: android.view.SurfaceSession getSession()>();

        return $r4;
    }

    android.graphics.Rect getStableFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableFrame>;

        return $r2;
    }

    android.graphics.Rect getStableInsets()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableInsets>;

        return $r2;
    }

    void getStableInsets(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r3;
        com.android.server.wm.WindowFrames $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mStableInsets>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        return;
    }

    public int getSurfaceLayer()
    {
        com.android.server.wm.WindowState r0;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mLayer>;

        return $i0;
    }

    int getSurfaceTouchableRegion(android.view.InputWindowHandle, int)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, i11, i12;
        com.android.server.wm.WindowFrames $r2, $r4;
        android.graphics.Rect $r3, $r5, $r8, $r9, $r10;
        boolean $z0, z2;
        float $f0, $f1;
        byte $b6;
        com.android.server.wm.ActivityRecord $r6, r12;
        com.android.server.wm.DisplayContent $r7;
        android.view.InputWindowHandle r11;

        r0 := @this: com.android.server.wm.WindowState;

        r11 := @parameter0: android.view.InputWindowHandle;

        i11 := @parameter1: int;

        $i1 = i11 & 40;

        if $i1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        r1 = r11.<android.view.InputWindowHandle: android.graphics.Region touchableRegion>;

        specialinvoke r0.<com.android.server.wm.WindowState: void setTouchableRegionCropIfNeeded(android.view.InputWindowHandle)>(r11);

        if z2 == 0 goto label5;

        i11 = i11 | 32;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r6 == null goto label3;

        specialinvoke r0.<com.android.server.wm.WindowState: void updateRegionForModalActivityWindow(android.graphics.Region)>(r1);

        goto label4;

     label3:
        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r7.<com.android.server.wm.DisplayContent: void getBounds(android.graphics.Rect)>($r8);

        $r9 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        i0 = virtualinvoke $r9.<android.graphics.Rect: int width()>();

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        i12 = virtualinvoke $r10.<android.graphics.Rect: int height()>();

        $i10 = neg i0;

        $i9 = neg i12;

        $i8 = i0 + i0;

        $i7 = i12 + i12;

        virtualinvoke r1.<android.graphics.Region: boolean set(int,int,int,int)>($i10, $i9, $i8, $i7);

     label4:
        specialinvoke r0.<com.android.server.wm.WindowState: void subtractTouchExcludeRegionIfNeeded(android.graphics.Region)>(r1);

        goto label6;

     label5:
        virtualinvoke r0.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r1);

     label6:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i2 = $r3.<android.graphics.Rect: int left>;

        $i5 = neg $i2;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i3 = $r5.<android.graphics.Rect: int top>;

        $i4 = neg $i3;

        virtualinvoke r1.<android.graphics.Region: void translate(int,int)>($i5, $i4);

        r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r12 == null goto label7;

        $z0 = virtualinvoke r12.<com.android.server.wm.ActivityRecord: boolean hasSizeCompatBounds()>();

        if $z0 == 0 goto label7;

        $f0 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b6 = $f0 cmpl 1.0F;

        if $b6 == 0 goto label7;

        $f1 = r0.<com.android.server.wm.WindowState: float mInvGlobalScale>;

        virtualinvoke r1.<android.graphics.Region: void scale(float)>($f1);

     label7:
        return i11;
    }

    java.util.List getSystemGestureExclusion()
    {
        com.android.server.wm.WindowState r0;
        java.util.List $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: java.util.List mExclusionRects>;

        return $r1;
    }

    public int getSystemUiVisibility()
    {
        com.android.server.wm.WindowState r0;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        return $i0;
    }

    void getTapExcludeRegion(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1, $r6;
        com.android.server.wm.WindowFrames $r2, $r9, $r11;
        android.graphics.Rect $r3, $r4, $r5, $r8, $r10, $r12;
        android.graphics.Region$Op $r7;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r5.<android.graphics.Rect: void offsetTo(int,int)>(0, 0);

        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion>;

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Region)>($r6);

        $r8 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>($r8, $r7);

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r10 = $r9.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i1 = $r10.<android.graphics.Rect: int left>;

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r12 = $r11.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = $r12.<android.graphics.Rect: int top>;

        virtualinvoke r1.<android.graphics.Region: void translate(int,int)>($i1, $i0);

        return;
    }

    com.android.server.wm.Task getTask()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.Task r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: com.android.server.wm.Task getTask()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    com.android.server.wm.WindowState getTopParentWindow()
    {
        com.android.server.wm.WindowState r0, r1, r2, r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r2 = r0;

        r3 = r0;

     label1:
        if r2 == null goto label2;

        $z0 = r2.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        r2 = r1;

        if r1 == null goto label1;

        r3 = r1;

        r2 = r1;

        goto label1;

     label2:
        return r3;
    }

    void getTouchableRegion(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1, $r6;
        android.graphics.Rect r2, $r4, $r5;
        int i0, $i1, $i2;
        com.android.server.wm.WindowFrames $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r2 = $r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i0 = r0.<com.android.server.wm.WindowState: int mTouchableInsets>;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Rect)>(r2);

        goto label4;

     label1:
        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Region)>($r6);

        $i2 = r2.<android.graphics.Rect: int left>;

        $i1 = r2.<android.graphics.Rect: int top>;

        virtualinvoke r1.<android.graphics.Region: void translate(int,int)>($i2, $i1);

        goto label4;

     label2:
        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        staticinvoke <com.android.server.wm.WindowState: void applyInsets(android.graphics.Region,android.graphics.Rect,android.graphics.Rect)>(r1, r2, $r5);

        goto label4;

     label3:
        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        staticinvoke <com.android.server.wm.WindowState: void applyInsets(android.graphics.Region,android.graphics.Rect,android.graphics.Rect)>(r1, r2, $r4);

     label4:
        specialinvoke r0.<com.android.server.wm.WindowState: void cropRegionToStackBoundsIfNeeded(android.graphics.Region)>(r1);

        specialinvoke r0.<com.android.server.wm.WindowState: void subtractTouchExcludeRegionIfNeeded(android.graphics.Region)>(r1);

        return;
    }

    void getTransformationMatrix(float[], android.graphics.Matrix)
    {
        com.android.server.wm.WindowState r0, r3, $r23, r32;
        float[] r1;
        android.graphics.Matrix r2;
        com.android.server.wm.WindowStateAnimator $r4, $r5, $r6, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21;
        android.view.WindowManager$LayoutParams $r8, $r17, $r21;
        android.graphics.Rect $r9, $r16, $r18, $r20, $r22, $r25, $r28, r33;
        android.graphics.Point $r10, $r11, $r12, $r13, $r14, $r26, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        boolean $z0;
        com.android.server.wm.WindowFrames $r15, $r19, $r24, $r27;
        com.android.server.wm.DisplayContent r30;
        com.android.server.wm.WindowContainer r31;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Matrix;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f0 = $r4.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        r1[0] = $f0;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f1 = $r5.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        r1[3] = $f1;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f2 = $r6.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        r1[1] = $f2;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f3 = $r7.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        r1[4] = $f3;

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $r8 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r9 = $r8.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        specialinvoke r0.<com.android.server.wm.WindowState: void transformSurfaceInsetsPosition(android.graphics.Point,android.graphics.Rect)>($r10, $r9);

        $r11 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i1 = $r11.<android.graphics.Point: int x>;

        $r12 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i0 = $r12.<android.graphics.Point: int x>;

        i16 = $i1 + $i0;

        $r13 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i3 = $r13.<android.graphics.Point: int y>;

        $r14 = r0.<com.android.server.wm.WindowState: android.graphics.Point mTmpPoint>;

        $i2 = $r14.<android.graphics.Point: int y>;

        i17 = $i3 + $i2;

        r30 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

     label1:
        if r30 == null goto label2;

        $r23 = virtualinvoke r30.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if $r23 == null goto label2;

        r3 = virtualinvoke r30.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        $f4 = (float) i16;

        $r24 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r25 = $r24.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i12 = $r25.<android.graphics.Rect: int left>;

        $f5 = (float) $i12;

        $r26 = virtualinvoke r30.<com.android.server.wm.DisplayContent: android.graphics.Point getLocationInParentWindow()>();

        $i13 = $r26.<android.graphics.Point: int x>;

        $f7 = (float) $i13;

        $f6 = r3.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f8 = $f7 * $f6;

        $f9 = $f8 + 0.5F;

        $f10 = $f5 + $f9;

        $f11 = $f4 + $f10;

        i16 = (int) $f11;

        $f12 = (float) i17;

        $r27 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r28 = $r27.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i14 = $r28.<android.graphics.Rect: int top>;

        $f13 = (float) $i14;

        $r29 = virtualinvoke r30.<com.android.server.wm.DisplayContent: android.graphics.Point getLocationInParentWindow()>();

        $i15 = $r29.<android.graphics.Point: int y>;

        $f15 = (float) $i15;

        $f14 = r3.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f16 = $f15 * $f14;

        $f17 = $f16 + 0.5F;

        $f18 = $f13 + $f17;

        $f19 = $f12 + $f18;

        i17 = (int) $f19;

        r30 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        goto label1;

     label2:
        r31 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isChildWindow()>();

        if $z0 == 0 goto label3;

        r32 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $r15 = r32.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r16 = $r15.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i7 = $r16.<android.graphics.Rect: int left>;

        $r17 = r32.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r18 = $r17.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i6 = $r18.<android.graphics.Rect: int left>;

        $i8 = $i7 - $i6;

        i18 = i16 + $i8;

        $r19 = r32.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r20 = $r19.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i10 = $r20.<android.graphics.Rect: int top>;

        $r21 = r32.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r22 = $r21.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i9 = $r22.<android.graphics.Rect: int top>;

        $i11 = $i10 - $i9;

        i19 = i17 + $i11;

        goto label4;

     label3:
        i18 = i16;

        i19 = i17;

        if r31 == null goto label4;

        r33 = virtualinvoke r31.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        $i4 = r33.<android.graphics.Rect: int left>;

        i18 = i16 + $i4;

        $i5 = r33.<android.graphics.Rect: int top>;

        i19 = i17 + $i5;

        goto label4;

     label4:
        $f20 = (float) i18;

        r1[2] = $f20;

        $f21 = (float) i19;

        r1[5] = $f21;

        r1[6] = 0.0F;

        r1[7] = 0.0F;

        r1[8] = 1.0F;

        virtualinvoke r2.<android.graphics.Matrix: void setValues(float[])>(r1);

        return;
    }

    void getVisibleBounds(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r16;
        com.android.server.wm.ActivityStack r2, r13;
        boolean $z0, $z3, $z4, $z5, $z6, $z7, z8, z9;
        com.android.server.wm.WindowFrames $r3, $r15;
        com.android.server.wm.TaskDisplayArea $r7;
        com.android.server.wm.Task r11;
        com.android.server.wm.WindowContainer r14;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r11 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r11 == null goto label1;

        $z7 = virtualinvoke r11.<com.android.server.wm.Task: boolean cropWindowsToStackBounds()>();

        if $z7 == 0 goto label1;

        z8 = 1;

        goto label2;

     label1:
        z8 = 0;

     label2:
        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        $r12 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke $r12.<android.graphics.Rect: void setEmpty()>();

        z9 = z8;

        if z8 == 0 goto label6;

        r2 = virtualinvoke r11.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if r2 == null goto label3;

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r2.<com.android.server.wm.ActivityStack: void getDimBounds(android.graphics.Rect)>($r10);

        goto label4;

     label3:
        z8 = 0;

     label4:
        z9 = z8;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSplitScreenPrimaryWindowingMode()>();

        if $z3 == 0 goto label6;

        $r7 = virtualinvoke r11.<com.android.server.wm.Task: com.android.server.wm.TaskDisplayArea getDisplayArea()>();

        r13 = virtualinvoke $r7.<com.android.server.wm.TaskDisplayArea: com.android.server.wm.ActivityStack getRootSplitScreenSecondaryTask()>();

        $z4 = virtualinvoke r13.<com.android.server.wm.ActivityStack: boolean isActivityTypeHome()>();

        if $z4 != 0 goto label5;

        z9 = z8;

        $z6 = virtualinvoke r13.<com.android.server.wm.ActivityStack: boolean isActivityTypeRecents()>();

        if $z6 == 0 goto label6;

     label5:
        r14 = virtualinvoke r13.<com.android.server.wm.ActivityStack: com.android.server.wm.WindowContainer getTopChild()>();

        z9 = z8;

        $z5 = virtualinvoke r14.<com.android.server.wm.WindowContainer: boolean isVisible()>();

        if $z5 == 0 goto label6;

        $r8 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        $r9 = virtualinvoke r14.<com.android.server.wm.WindowContainer: android.graphics.Rect getBounds()>();

        specialinvoke r0.<com.android.server.wm.WindowState: void cutRect(android.graphics.Rect,android.graphics.Rect)>($r8, $r9);

        z9 = z8;

     label6:
        $r15 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r16 = $r15.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r16);

        if z9 == 0 goto label7;

        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r6);

     label7:
        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r4 = $r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        if z9 == 0 goto label8;

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mTmpRect>;

        virtualinvoke r1.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r5);

     label8:
        return;

     label9:
        return;
    }

    public android.graphics.Rect getVisibleFrameLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleFrame>;

        return $r2;
    }

    android.graphics.Rect getVisibleInsets()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mVisibleInsets>;

        return $r2;
    }

    public com.android.server.wm.WindowState getWindow()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        return r0;
    }

    com.android.server.wm.WindowState getWindow(java.util.function.Predicate)
    {
        com.android.server.wm.WindowState r0, r10, r11;
        java.util.function.Predicate r1;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WindowList $r2, $r3, $r4, $r6, $r8;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5, $r7, $r9;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.util.function.Predicate;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        z0 = virtualinvoke $r2.<com.android.server.wm.WindowList: boolean isEmpty()>();

        r10 = null;

        if z0 == 0 goto label02;

        $z3 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z3 == 0 goto label01;

        r10 = r0;

     label01:
        return r10;

     label02:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r3.<com.android.server.wm.WindowList: int size()>();

        i2 = $i0 - 1;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r11 = (com.android.server.wm.WindowState) $r5;

     label03:
        i3 = i2;

        if i2 < 0 goto label06;

        i3 = i2;

        $i1 = r11.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i1 < 0 goto label06;

        $z2 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r11);

        if $z2 == 0 goto label04;

        return r11;

     label04:
        i3 = i2 - 1;

        if i3 >= 0 goto label05;

        goto label06;

     label05:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r11 = (com.android.server.wm.WindowState) $r9;

        i2 = i3;

        goto label03;

     label06:
        $z4 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z4 == 0 goto label07;

        return r0;

     label07:
        if i3 < 0 goto label10;

        $z1 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r11);

        if $z1 == 0 goto label08;

        return r11;

     label08:
        i3 = i3 + -1;

        if i3 >= 0 goto label09;

        goto label10;

     label09:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r11 = (com.android.server.wm.WindowState) $r7;

        goto label07;

     label10:
        return null;
    }

    public com.android.server.wm.WindowFrames getWindowFrames()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        return $r1;
    }

    android.view.WindowInfo getWindowInfo()
    {
        com.android.server.wm.WindowState r0, $r17, r29;
        android.view.WindowInfo r1;
        int $i0, $i1, $i2, $i3, i4, $i5, $i7, $i8, i9, i10;
        android.view.WindowManager$LayoutParams $r2, $r5, $r7, $r20, $r21, $r26, $r28;
        android.view.IWindow $r3, $r13, $r18;
        android.os.IBinder $r4, $r15, $r19, $r23;
        java.lang.CharSequence $r6, $r8, r25;
        boolean $z1, $z2, $z4, $z5, z6, z7, $z8, z9, z10;
        com.android.server.wm.WindowList $r9, $r11;
        java.util.List $r10, $r14;
        java.lang.Object $r12;
        java.util.ArrayList $r16;
        com.android.server.wm.ActivityRecord$Token $r22;
        com.android.server.wm.ActivityRecord r24;
        long $l6;
        com.android.server.wm.Task r27;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = staticinvoke <android.view.WindowInfo: android.view.WindowInfo obtain()>();

        $i0 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        r1.<android.view.WindowInfo: int displayId> = $i0;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        r1.<android.view.WindowInfo: int type> = $i1;

        $i2 = r0.<com.android.server.wm.WindowState: int mLayer>;

        r1.<android.view.WindowInfo: int layer> = $i2;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = interfaceinvoke $r3.<android.view.IWindow: android.os.IBinder asBinder()>();

        r1.<android.view.WindowInfo: android.os.IBinder token> = $r4;

        r24 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r24 == null goto label01;

        $r22 = r24.<com.android.server.wm.ActivityRecord: com.android.server.wm.ActivityRecord$Token appToken>;

        $r23 = virtualinvoke $r22.<com.android.server.wm.ActivityRecord$Token: android.os.IBinder asBinder()>();

        r1.<android.view.WindowInfo: android.os.IBinder activityToken> = $r23;

     label01:
        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r6 = $r5.<android.view.WindowManager$LayoutParams: java.lang.CharSequence accessibilityTitle>;

        r1.<android.view.WindowInfo: java.lang.CharSequence title> = $r6;

        $r7 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i4 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if i4 < 1000 goto label02;

        $r21 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r21.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 > 1999 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        $i5 = r1.<android.view.WindowInfo: int type>;

        if $i5 != 2032 goto label04;

        z7 = 1;

        goto label05;

     label04:
        z7 = 0;

     label05:
        $r8 = r1.<android.view.WindowInfo: java.lang.CharSequence title>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

        if $z1 == 0 goto label08;

        if z6 != 0 goto label06;

        if z7 == 0 goto label08;

     label06:
        $r20 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r25 = virtualinvoke $r20.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r25);

        if $z5 == 0 goto label07;

        r25 = null;

        goto label07;

     label07:
        r1.<android.view.WindowInfo: java.lang.CharSequence title> = r25;

     label08:
        $r26 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l6 = $r26.<android.view.WindowManager$LayoutParams: long accessibilityIdOfAnchor>;

        r1.<android.view.WindowInfo: long accessibilityIdOfAnchor> = $l6;

        $z8 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        r1.<android.view.WindowInfo: boolean focused> = $z8;

        r27 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r27 == null goto label09;

        $z4 = virtualinvoke r27.<com.android.server.wm.Task: boolean inPinnedWindowingMode()>();

        if $z4 == 0 goto label09;

        z9 = 1;

        goto label10;

     label09:
        z9 = 0;

     label10:
        r1.<android.view.WindowInfo: boolean inPictureInPicture> = z9;

        z10 = 0;

        $r28 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i7 = $r28.<android.view.WindowManager$LayoutParams: int flags>;

        $i8 = $i7 & 262144;

        if $i8 == 0 goto label11;

        z10 = 1;

     label11:
        r1.<android.view.WindowInfo: boolean hasFlagWatchOutsideTouch> = z10;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z2 == 0 goto label12;

        $r17 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $r18 = $r17.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r19 = interfaceinvoke $r18.<android.view.IWindow: android.os.IBinder asBinder()>();

        r1.<android.view.WindowInfo: android.os.IBinder parentToken> = $r19;

     label12:
        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        i9 = virtualinvoke $r9.<com.android.server.wm.WindowList: int size()>();

        if i9 <= 0 goto label15;

        $r10 = r1.<android.view.WindowInfo: java.util.List childTokens>;

        if $r10 != null goto label13;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(i9);

        r1.<android.view.WindowInfo: java.util.List childTokens> = $r16;

     label13:
        i10 = 0;

     label14:
        if i10 >= i9 goto label15;

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i10);

        r29 = (com.android.server.wm.WindowState) $r12;

        $r14 = r1.<android.view.WindowInfo: java.util.List childTokens>;

        $r13 = r29.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r15 = interfaceinvoke $r13.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        i10 = i10 + 1;

        goto label14;

     label15:
        return r1;
    }

    java.lang.CharSequence getWindowTag()
    {
        com.android.server.wm.WindowState r0;
        java.lang.CharSequence r1, r5;
        android.view.WindowManager$LayoutParams $r2, $r3;
        int $i0;
        java.lang.Object r4;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r1 = virtualinvoke $r2.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        if r1 == null goto label1;

        r4 = r1;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i0 > 0 goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r4 = $r3.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

     label2:
        r5 = (java.lang.CharSequence) r4;

        return r5;
    }

    com.android.server.wm.utils.WmDisplayCutout getWmDisplayCutout()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        com.android.server.wm.utils.WmDisplayCutout $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: com.android.server.wm.utils.WmDisplayCutout mDisplayCutout>;

        return $r2;
    }

    void handleWindowMovedIfNeeded()
    {
        com.android.server.wm.WindowState r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.wm.WindowFrames $r2, $r4;
        android.graphics.Rect $r3, $r5;
        com.android.server.wm.WindowToken $r6;
        android.view.IWindow $r7;
        com.android.server.wm.WindowManagerService $r8, $r15;
        int[] $r9;
        com.android.server.wm.AccessibilityController $r10, $r16;
        android.view.WindowManager$LayoutParams $r11;
        android.app.WindowConfiguration $r12;
        com.android.server.wm.WindowStateAnimator $r13;
        android.os.RemoteException $r14;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean hasMoved()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i0 = $r3.<android.graphics.Rect: int left>;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r5 = $r4.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        i1 = $r5.<android.graphics.Rect: int top>;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z1 = virtualinvoke $r6.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z1 == 0 goto label2;

        $r11 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r11.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i4 = $i3 & 64;

        if $i4 != 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z2 != 0 goto label2;

        $r12 = virtualinvoke r0.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $z3 = virtualinvoke $r12.<android.app.WindowConfiguration: boolean hasMovementAnimations()>();

        if $z3 == 0 goto label2;

        $r13 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z4 = $r13.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z4 != 0 goto label2;

        $z5 = r0.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z5 != 0 goto label2;

        specialinvoke r0.<com.android.server.wm.WindowState: void startMoveAnimation(int,int)>(i0, i1);

     label2:
        $r15 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r16 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r16 == null goto label3;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r9 = newarray (int)[1];

        $i2 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r9[0] = $i2;

        virtualinvoke $r10.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r9);

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowState: void updateLocationInParentDisplayIfNeeded()>();

     label4:
        $r7 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r7.<android.view.IWindow: void moved(int,int)>(i0, i1);

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

     label7:
        r0.<com.android.server.wm.WindowState: boolean mMovedByResize> = 0;

        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public boolean hasAppShownWindows()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label2;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean firstWindowDrawn>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = $r2.<com.android.server.wm.ActivityRecord: boolean startingDisplayed>;

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean hasContentToDisplay()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.AppTransition $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z1 == 0 goto label2;

        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z2 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z3 = virtualinvoke $r2.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z3 != 0 goto label2;

     label1:
        return 1;

     label2:
        $z4 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean hasContentToDisplay()>();

        return $z4;
    }

    public boolean hasDrawnLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i0 = $r1.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasTapExcludeRegion()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion>;

        $z0 = virtualinvoke $r1.<android.graphics.Region: boolean isEmpty()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    boolean hasVisibleNotDrawnWallpaper()
    {
        com.android.server.wm.WindowState r0, $r4;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z2 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z1 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean hasVisibleNotDrawnWallpaper()>();

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return 0;
    }

    public void hideInsets(int, boolean)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        boolean z0;
        android.view.IWindow $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r2.<android.view.IWindow: void hideInsets(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to deliver showInsets", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hideLw(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(z0, 1);

        return $z1;
    }

    boolean hideLw(boolean, boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z2, $z4, $z5, z6, z7, z8, z9, z10;
        com.android.server.wm.WindowManagerService $r1, $r2, $r3, $r4;
        java.lang.Object[] $r5;
        com.android.server.wm.ProtoLogGroup $r6;
        com.android.server.wm.WindowStateAnimator $r7;
        com.android.server.wm.WindowToken $r8;

        r0 := @this: com.android.server.wm.WindowState;

        z6 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        z7 = z6;

        if z6 == 0 goto label1;

        z7 = z6;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z5 = virtualinvoke $r8.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z5 != 0 goto label1;

        z7 = 0;

     label1:
        if z7 == 0 goto label2;

        z8 = r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim>;

        goto label3;

     label2:
        z8 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isLegacyPolicyVisibility()>();

     label3:
        if z8 != 0 goto label4;

        return 0;

     label4:
        z9 = z7;

        if z7 == 0 goto label5;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r7.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(2, 0);

        z9 = z7;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z4 != 0 goto label5;

        z9 = 0;

     label5:
        r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim> = 0;

        z10 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        if z9 != 0 goto label7;

        virtualinvoke r0.<com.android.server.wm.WindowState: void clearPolicyVisibilityFlag(int)>(1);

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        if z10 == 0 goto label7;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_FOCUS_LIGHT_enabled>;

        if $z2 == 0 goto label6;

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_FOCUS_LIGHT>;

        $r5 = (java.lang.Object[]) null;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 1288731814, 0, null, $r5);

     label6:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r4.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

     label7:
        if z0 == 0 goto label8;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label8:
        if z10 == 0 goto label9;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 0);

     label9:
        return 1;
    }

    boolean hideNonSystemOverlayWindowsWhenVisible()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        com.android.server.wm.Session $r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 & 524288;

        if $i1 == 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $z0 = $r2.<com.android.server.wm.Session: boolean mCanHideNonSystemOverlayWindows>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void hidePermanentlyLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(1, 1);

     label1:
        return;
    }

    void hideWallpaperWindow(boolean, java.lang.String)
    {
        com.android.server.wm.WindowState r0, $r8;
        boolean z0, $z1;
        com.android.server.wm.WindowList $r1, $r6;
        int $i0, $i1, $i2, i3;
        com.android.server.wm.WindowStateAnimator $r2, $r3;
        com.android.server.wm.DisplayContent $r4, r10;
        com.android.server.wm.WallpaperController $r5;
        java.lang.Object $r7;
        java.lang.String r9;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r9 := @parameter1: java.lang.String;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label2;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r8 = (com.android.server.wm.WindowState) $r7;

        virtualinvoke $r8.<com.android.server.wm.WindowState: void hideWallpaperWindow(boolean,java.lang.String)>(z0, r9);

        i3 = i3 + -1;

        goto label1;

     label2:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = $r2.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z1 == 0 goto label3;

        if z0 == 0 goto label4;

     label3:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r3.<com.android.server.wm.WindowStateAnimator: void hide(java.lang.String)>(r9);

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r5 = $r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r5.<com.android.server.wm.WallpaperController: com.android.server.wm.WindowState mDeferredHideWallpaper> = null;

        virtualinvoke r0.<com.android.server.wm.WindowState: void dispatchWallpaperVisibility(boolean)>(0);

        r10 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r10 == null goto label4;

        $i1 = r10.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i2 = $i1 | 4;

        r10.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i2;

     label4:
        return;
    }

    void immediatelyNotifyBlastSync()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean finishDrawing(android.view.SurfaceControl$Transaction)>(null);

        specialinvoke r0.<com.android.server.wm.WindowState: void notifyBlastSyncTransaction()>();

        return;
    }

    boolean inSizeCompatMode()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        android.view.WindowManager$LayoutParams $r2, $r3;
        int $i0, $i1, $i2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 & 128;

        if $i1 != 0 goto label2;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean hasSizeCompatBounds()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 == 3 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    void initAppOpsState()
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r1;
        android.app.AppOpsManager $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $i1 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        if $i1 == -1 goto label3;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i2 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        $i3 = virtualinvoke r0.<com.android.server.wm.WindowState: int getOwningUid()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        i0 = virtualinvoke $r2.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>($i2, $i3, $r3, 1, null, "init-default-visibility");

        if i0 == 0 goto label2;

        if i0 == 3 goto label2;

        specialinvoke r0.<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)>(0);

     label2:
        return;

     label3:
        return;
    }

    public boolean isAlive()
    {
        com.android.server.wm.WindowState r0;
        android.view.IWindow $r1;
        android.os.IBinder $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r2 = interfaceinvoke $r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        $z0 = interfaceinvoke $r2.<android.os.IBinder: boolean isBinderAlive()>();

        return $z0;
    }

    public boolean isAnimatingLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        return $z0;
    }

    boolean isChildWindow()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        return $z0;
    }

    boolean isClientLocal()
    {
        com.android.server.wm.WindowState r0;
        android.view.IWindow $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $z0 = $r1 instanceof android.view.IWindow$Stub;

        return $z0;
    }

    boolean isClosing()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z0 != 0 goto label2;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isClosingOrEnteringPip()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isDefaultDisplay()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayContent r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        return $z0;
    }

    public boolean isDimming()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsDimming>;

        return $z0;
    }

    public boolean isDisplayedLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z2 != 0 goto label1;

        if r1 == null goto label2;

        $z4 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z4 != 0 goto label2;

     label1:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z3 == 0 goto label3;

     label2:
        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        return z5;
    }

    boolean isDockedResizing()
    {
        com.android.server.wm.WindowState r0, $r1;
        boolean z0, $z1, $z2, z3;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = r0.<com.android.server.wm.WindowState: boolean mDragResizing>;

        z3 = 1;

        if z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.android.server.wm.WindowState: int getResizeMode()>();

        if $i0 == 1 goto label2;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isChildWindow()>();

        if $z1 == 0 goto label3;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $z2 = virtualinvoke $r1.<com.android.server.wm.WindowState: boolean isDockedResizing()>();

        if $z2 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z3 = 0;

     label4:
        return z3;
    }

    boolean isDragResizeChanged()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mDragResizing>;

        $z1 = specialinvoke r0.<com.android.server.wm.WindowState: boolean computeDragResizing()>();

        if $z0 == $z1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isDragResizing()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mDragResizing>;

        return $z0;
    }

    public boolean isDrawFinishedLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2;
        com.android.server.wm.WindowStateAnimator $r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z1 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i0 = $r1.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i0 == 2 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i1 = $r2.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i1 == 3 goto label1;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i2 = $r3.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i2 != 4 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    public boolean isDrawnLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2;
        com.android.server.wm.WindowStateAnimator $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z1 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i0 = $r1.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i0 == 3 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i1 = $r2.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i1 != 4 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean isDreamWindow()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: int getActivityType()>();

        if $i0 != 5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isFocused()
    {
        com.android.server.wm.WindowState r0, $r2;
        com.android.server.wm.DisplayContent $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mCurrentFocus>;

        if $r2 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isFullyTransparent()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        float $f0;
        byte $b0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f0 = $r1.<android.view.WindowManager$LayoutParams: float alpha>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isGoneForLayoutLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 == 8 goto label6;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z0 == 0 goto label6;

        if r1 != null goto label1;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean wouldBeVisibleIfPolicyIgnored()>();

        if $z6 == 0 goto label6;

        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z7 == 0 goto label6;

     label1:
        if r1 == null goto label2;

        $z5 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z5 == 0 goto label6;

     label2:
        $z1 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowGoneForLayout()>();

        if $z1 != 0 goto label6;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z2 == 0 goto label3;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z4 == 0 goto label4;

     label3:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z3 == 0 goto label5;

     label4:
        goto label6;

     label5:
        z8 = 0;

        goto label7;

     label6:
        z8 = 1;

     label7:
        return z8;
    }

    boolean isIdentityMatrix(float, float, float, float)
    {
        com.android.server.wm.WindowState r0;
        float f0, f1, f2, f3;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;

        r0 := @this: com.android.server.wm.WindowState;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f0 cmpg 0.99999F;

        if $b0 < 0 goto label8;

        $b1 = f0 cmpl 1.00001F;

        if $b1 <= 0 goto label1;

        goto label8;

     label1:
        $b2 = f3 cmpg 0.99999F;

        if $b2 < 0 goto label7;

        $b3 = f3 cmpl 1.00001F;

        if $b3 <= 0 goto label2;

        goto label7;

     label2:
        $b4 = f1 cmpg -1.0E-6F;

        if $b4 < 0 goto label6;

        $b5 = f1 cmpl 1.0E-6F;

        if $b5 <= 0 goto label3;

        goto label6;

     label3:
        $b6 = f2 cmpg -1.0E-6F;

        if $b6 < 0 goto label5;

        $b7 = f2 cmpl 1.0E-6F;

        if $b7 <= 0 goto label4;

        goto label5;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        return 0;

     label7:
        return 0;

     label8:
        return 0;
    }

    boolean isImplicitlyExcludingAllSystemGestures()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        int $i0, $i1, i2;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.WindowManagerConstants $r3;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        i2 = r0.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        z1 = 1;

        $i0 = i2 & 4098;

        if $i0 != 4098 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerConstants mConstants>;

        $z0 = $r3.<com.android.server.wm.WindowManagerConstants: boolean mSystemGestureExcludedByPreQStickyImmersive>;

        if $z0 == 0 goto label3;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label3;

        $i1 = r1.<com.android.server.wm.ActivityRecord: int mTargetSdk>;

        if $i1 >= 29 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean isInputMethodTarget()
    {
        com.android.server.wm.WindowState r0, $r2;
        com.android.server.wm.DisplayContent $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r2 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isInputMethodWindow()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        return $z0;
    }

    boolean isInteresting()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, $z2, z3;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label2;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean isFreezingScreen()>();

        if $z1 == 0 goto label1;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z2 != 0 goto label2;

     label1:
        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 != 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean isLaidOut()
    {
        com.android.server.wm.WindowState r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mLayoutSeq>;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isLastConfigReportedToClient()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mLastConfigReportedToClient>;

        return $z0;
    }

    boolean isLetterboxedAppWindow()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inMultiWindowMode()>();

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean matchesDisplayBounds()>();

        if $z2 == 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isLetterboxedForDisplayCutoutLw()>();

        if $z1 == 0 goto label3;

     label2:
        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        return z3;
    }

    public boolean isLetterboxedForDisplayCutoutLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord $r1;
        com.android.server.wm.WindowFrames $r2;
        boolean $z0, $z1, $z2, $z3;
        android.view.WindowManager$LayoutParams $r3, $r4;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.WindowFrames: boolean parentFrameWasClippedByDisplayCutout()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int layoutInDisplayCutoutMode>;

        if $i0 != 3 goto label3;

        return 0;

     label3:
        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z1 = virtualinvoke $r4.<android.view.WindowManager$LayoutParams: boolean isFullscreen()>();

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean frameCoversEntireAppTokenBounds()>();

        $z3 = $z2 ^ 1;

        return $z3;
    }

    public boolean isLetterboxedOverlappingWith(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1;
        com.android.server.wm.ActivityRecord r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean isLetterboxOverlappingWith(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isNonToastOrStarting()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1, $r2;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2005 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isNonToastWindowVisibleForPid(int)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1;
        com.android.server.wm.Session $r1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i1 = $r1.<com.android.server.wm.Session: int mPid>;

        if $i1 != i0 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isNonToastOrStarting()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isNonToastWindowVisibleForUid(int)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.wm.WindowState: int getOwningUid()>();

        if $i1 != i0 goto label1;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isNonToastOrStarting()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isObscuringDisplay()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.Task r1;
        boolean $z1, $z2, z3, $z4;
        com.android.server.wm.ActivityStack $r2, $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $z2 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: boolean fillsParent()>();

        if $z2 != 0 goto label1;

        return 0;

     label1:
        z3 = 0;

        $z4 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isOpaqueDrawn()>();

        if $z4 == 0 goto label2;

        z3 = 0;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean fillsDisplay()>();

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    boolean isOnScreen()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10;
        com.android.server.wm.ActivityRecord r1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        z9 = 0;

        if z0 == 0 goto label8;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z2 != 0 goto label8;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z3 != 0 goto label1;

        goto label8;

     label1:
        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label5;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z6 != 0 goto label2;

        $z8 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z8 != 0 goto label3;

     label2:
        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z7 == 0 goto label4;

     label3:
        z9 = 1;

     label4:
        return z9;

     label5:
        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z4 == 0 goto label6;

        z10 = 0;

        $z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z5 == 0 goto label7;

     label6:
        z10 = 1;

     label7:
        return z10;

     label8:
        return 0;
    }

    boolean isParentWindowHidden()
    {
        com.android.server.wm.WindowState r0, r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        if r1 == null goto label1;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mHidden>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isPotentialDragTarget()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, z2;
        android.view.InputChannel $r1;
        android.view.InputWindowHandle $r2;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        if $r2 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    boolean isReadyForDisplay()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, $z9;
        com.android.server.wm.WindowToken $r1, $r2;
        int $i0;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.AppTransition $r4;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        z0 = $r1.<com.android.server.wm.WindowToken: boolean waitingToShow>;

        z7 = 0;

        if z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r4 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $z6 = virtualinvoke $r4.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z6 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z1 != 0 goto label2;

        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 != 0 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z5 = virtualinvoke $r2.<com.android.server.wm.WindowToken: boolean isVisible()>();

        if $z5 == 0 goto label2;

        z8 = 1;

        goto label3;

     label2:
        z8 = 0;

     label3:
        $z9 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z9 == 0 goto label5;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z2 == 0 goto label5;

        $z3 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z3 != 0 goto label5;

        if z8 != 0 goto label4;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z4 == 0 goto label5;

     label4:
        z7 = 1;

        goto label5;

     label5:
        return z7;
    }

    public boolean isRtl()
    {
        com.android.server.wm.WindowState r0;
        int i0;
        android.content.res.Configuration $r1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.content.res.Configuration getConfiguration()>();

        i0 = virtualinvoke $r1.<android.content.res.Configuration: int getLayoutDirection()>();

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isSecureLocked()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1, $i2;
        android.app.admin.DevicePolicyCache $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        $r2 = staticinvoke <android.app.admin.DevicePolicyCache: android.app.admin.DevicePolicyCache getInstance()>();

        $i2 = r0.<com.android.server.wm.WindowState: int mShowUserId>;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        $z1 = virtualinvoke $r2.<android.app.admin.DevicePolicyCache: boolean isScreenCaptureAllowed(int,boolean)>($i2, $z0);

        $z2 = $z1 ^ 1;

        return $z2;
    }

    protected boolean isSelfAnimating(int, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i1;
        com.android.server.wm.InsetsSourceProvider $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if $r1 == null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.wm.WindowContainer: boolean isSelfAnimating(int,int)>(i0, i1);

        return $z0;
    }

    boolean isSelfOrAncestorWindowAnimatingExit()
    {
        com.android.server.wm.WindowState r0, r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0;

     label1:
        $z0 = r1.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        if r1 != null goto label3;

        return 0;

     label3:
        goto label1;
    }

    boolean isVisible()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.InsetsSourceProvider r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean wouldBeVisibleIfPolicyIgnored()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z1 == 0 goto label2;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if r1 == null goto label1;

        $z2 = virtualinvoke r1.<com.android.server.wm.InsetsSourceProvider: boolean isClientVisible()>();

        if $z2 == 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean isVisibleByPolicy()
    {
        com.android.server.wm.WindowState r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mPolicyVisibility>;

        $i1 = $i0 & 3;

        if $i1 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isVisibleLw()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        return $z0;
    }

    boolean isVisibleNow()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowToken $r1;
        boolean $z0, $z1, z2;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowToken: boolean isVisible()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label2;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    boolean isVisibleOrAdding()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        int $i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 != 0 goto label1;

        $z6 = r0.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z6 != 0 goto label3;

        $i0 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i0 != 0 goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z2 != 0 goto label3;

        if r1 == null goto label2;

        $z5 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z5 == 0 goto label3;

     label2:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z3 != 0 goto label3;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z4 != 0 goto label3;

        z7 = 1;

        goto label4;

     label3:
        z7 = 0;

     label4:
        return z7;
    }

    public boolean isVoiceInteraction()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean mVoiceInteraction>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isWinVisibleLw()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ActivityRecord r1, $r2;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label1;

        $z0 = r1.<com.android.server.wm.ActivityRecord: boolean mVisibleRequested>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r2.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    boolean layoutInParentFrame()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, z1;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 & 65536;

        if $i1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean letterboxNotIntersectsOrFullyContains(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1;
        com.android.server.wm.ActivityRecord r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<com.android.server.wm.ActivityRecord: boolean letterboxNotIntersectsOrFullyContains(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean mightAffectAllDrawn()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1, $r2;
        boolean $z1, $z2, z3, $z4, z5;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i1 = $r1.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if i1 == 1 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i0 = $r2.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if $i0 != 4 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z4 != 0 goto label4;

        z5 = 0;

        if z3 == 0 goto label5;

     label4:
        z5 = 0;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z1 != 0 goto label5;

        z5 = 0;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z2 != 0 goto label5;

        z5 = 1;

     label5:
        return z5;
    }

    boolean needsRelativeLayeringToIme()
    {
        com.android.server.wm.WindowState r0, r1, $r8;
        boolean z0, $z1, $z2, z3;
        com.android.server.wm.ActivityRecord $r2;
        com.android.server.wm.DisplayContent $r3;
        com.android.server.wm.WindowToken $r4, $r5;
        android.view.WindowManager$LayoutParams $r6;
        int $i0, $i1;
        com.android.server.wm.WindowContainer $r7;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSplitScreenWindowingMode()>();

        z3 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isChildWindow()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getParentWindow()>();

        $z2 = virtualinvoke $r8.<com.android.server.wm.WindowState: boolean isInputMethodTarget()>();

        if $z2 == 0 goto label4;

        return 1;

     label2:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 == null goto label4;

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r1 = $r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        if r1 == null goto label3;

        if r1 == r0 goto label3;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        if $r5 != $r4 goto label3;

        $r6 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 3 goto label3;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowContainer getParent()>();

        if $r7 == null goto label3;

        $i1 = virtualinvoke r1.<com.android.server.wm.WindowState: int compareTo(com.android.server.wm.WindowContainer)>(r0);

        if $i1 > 0 goto label3;

        z3 = 1;

        goto label3;

     label3:
        return z3;

     label4:
        return 0;
    }

    boolean needsZBoost()
    {
        com.android.server.wm.WindowState r0, r2;
        com.android.server.wm.DisplayContent $r1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ActivityRecord r3;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r2 = $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodTarget>;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z0 == 0 goto label1;

        if r2 == null goto label1;

        r3 = r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r3 == null goto label1;

        $z1 = virtualinvoke r3.<com.android.server.wm.ActivityRecord: boolean needsZBoost()>();

        return $z1;

     label1:
        $z2 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        return $z2;
    }

    void notifyInsetsChanged()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;
        android.view.IWindow $r2;
        android.view.InsetsState $r3;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10, r11;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z0 == 0 goto label1;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r11;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 1533154777, 0, null, $r4);

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.InsetsState getInsetsState()>();

        interfaceinvoke $r2.<android.view.IWindow: void insetsChanged(android.view.InsetsState)>($r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to deliver inset state change w=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r10, $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyInsetsControlChanged()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2;
        com.android.server.wm.DisplayContent $r2;
        android.view.IWindow $r3;
        android.view.InsetsState $r4;
        android.view.InsetsSourceControl[] $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r12, r13;
        com.android.server.wm.InsetsStateController r14;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_IME_enabled>;

        if $z0 == 0 goto label1;

        r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_IME>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r13;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1312861660, 0, null, $r6);

     label1:
        $z1 = r0.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z1 != 0 goto label7;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z2 == 0 goto label2;

        goto label7;

     label2:
        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r14 = virtualinvoke $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InsetsStateController getInsetsStateController()>();

     label3:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.InsetsState getInsetsState()>();

        $r5 = virtualinvoke r14.<com.android.server.wm.InsetsStateController: android.view.InsetsSourceControl[] getControlsForDispatch(com.android.server.wm.InsetsControlTarget)>(r0);

        interfaceinvoke $r3.<android.view.IWindow: void insetsControlChanged(android.view.InsetsState,android.view.InsetsSourceControl[])>($r4, $r5);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to deliver inset state change to w=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r12, $r8);

     label6:
        return;

     label7:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    protected void onAnimationFinished(int, com.android.server.wm.AnimationAdapter)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        com.android.server.wm.AnimationAdapter r1;
        com.android.server.wm.WindowStateAnimator $r2;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.AnimationAdapter;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onAnimationFinished(int,com.android.server.wm.AnimationAdapter)>(i0, r1);

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r2.<com.android.server.wm.WindowStateAnimator: void onAnimationFinished()>();

        return;
    }

    void onAppVisibilityChanged(boolean, boolean)
    {
        com.android.server.wm.WindowState r0, $r9;
        boolean z0, z1, z2, $z4;
        com.android.server.wm.AccessibilityController r1;
        com.android.server.wm.WindowList $r2, $r7;
        int $i0, $i1, i2;
        android.view.WindowManager$LayoutParams $r3;
        com.android.server.wm.WindowManagerService $r4;
        com.android.server.wm.WindowStateAnimator $r5;
        com.android.server.wm.ActivityRecord $r6;
        java.lang.Object $r8;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.wm.WindowState) $r8;

        virtualinvoke $r9.<com.android.server.wm.WindowState: void onAppVisibilityChanged(boolean,boolean)>(z0, z1);

        i2 = i2 + -1;

        goto label1;

     label2:
        z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label3;

        if z0 != 0 goto label5;

        if z2 == 0 goto label5;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z4 = virtualinvoke $r6.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(3);

        if $z4 == 0 goto label5;

        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 1;

        r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit> = 1;

        r0.<com.android.server.wm.WindowState: boolean mWindowRemovalAllowed> = 1;

        goto label5;

     label3:
        if z0 == z2 goto label5;

        if z1 != 0 goto label4;

        if z2 == 0 goto label4;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(2, 0);

        if r1 == null goto label4;

        virtualinvoke r1.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r0, 2);

     label4:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

     label5:
        return;
    }

    void onDisplayChanged(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowState r0, $r7, $r9;
        com.android.server.wm.DisplayContent r1, $r4, $r5, $r6, $r8, $r10;
        android.view.InputWindowHandle $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        if $r4 == null goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        if r1 == $r5 goto label1;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        $r7 = $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        if $r7 != r0 goto label1;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        $r9 = $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setInputMethodInputTarget(com.android.server.wm.WindowState)>($r9);

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent>;

        $r10.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget> = null;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void onDisplayChanged(com.android.server.wm.DisplayContent)>(r1);

        if r1 == null goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $i0 = $r2.<android.view.InputWindowHandle: int displayId>;

        $i1 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i0 == $i1 goto label2;

        $i2 = r1.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        $i3 = $i2 - 1;

        r0.<com.android.server.wm.WindowState: int mLayoutSeq> = $i3;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $i4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r3.<android.view.InputWindowHandle: int displayId> = $i4;

     label2:
        return;
    }

    void onExitAnimationDone()
    {
        com.android.server.wm.WindowState r0, $r25;
        com.android.server.wm.WindowList $r1, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z7, z8, z9;
        com.android.server.wm.WindowStateAnimator $r2, $r5, $r6, $r18;
        com.android.server.wm.WindowManagerService $r3, $r8, $r10, $r15, $r19;
        com.android.server.wm.AccessibilityController $r4, $r17;
        android.view.SurfaceControl$Transaction $r7;
        java.util.ArrayList $r9, $r11, $r22;
        java.lang.Object[] $r12;
        com.android.server.wm.ProtoLogGroup $r13;
        java.lang.Boolean $r14;
        int[] $r16;
        int $i0, $i1, i2;
        com.android.server.wm.ActivityRecord $r20, r30;
        android.view.IWindow $r21;
        java.lang.Object $r24;
        android.os.RemoteException $r26;
        java.lang.String r29;
        com.android.server.wm.DisplayContent $r31;
        com.android.server.wm.WallpaperController $r32;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        $r22 = new java.util.ArrayList;

        $r23 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r23);

        $i1 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label01:
        if i2 < 0 goto label02;

        $r24 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r25 = (com.android.server.wm.WindowState) $r24;

        virtualinvoke $r25.<com.android.server.wm.WindowState: void onExitAnimationDone()>();

        i2 = i2 + -1;

        goto label01;

     label02:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = $r2.<com.android.server.wm.WindowStateAnimator: boolean mEnteringAnimation>;

        if $z1 == 0 goto label06;

        $r18 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r18.<com.android.server.wm.WindowStateAnimator: boolean mEnteringAnimation> = 0;

        $r19 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r19.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        $r20 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r20 != null goto label06;

     label03:
        $r21 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r21.<android.view.IWindow: void dispatchWindowShown()>();

     label04:
        goto label06;

     label05:
        $r26 := @caughtexception;

     label06:
        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating()>();

        if $z7 == 0 goto label07;

        return;

     label07:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r4 == null goto label08;

        $r15 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r17 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r16 = newarray (int)[1];

        $i0 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r16[0] = $i0;

        virtualinvoke $r17.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r16);

     label08:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isSelfOrAncestorWindowAnimatingExit()>();

        if $z2 != 0 goto label09;

        return;

     label09:
        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z3 == 0 goto label10;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        z8 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r29;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z8);

        $r12[1] = $r14;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, 1051545910, 12, null, $r12);

     label10:
        r0.<com.android.server.wm.WindowState: boolean mDestroying> = 1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z9 = virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        virtualinvoke $r6.<com.android.server.wm.WindowStateAnimator: void hide(android.view.SurfaceControl$Transaction,java.lang.String)>($r7, "onExitAnimationDone");

        r30 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r30 == null goto label11;

        virtualinvoke r30.<com.android.server.wm.ActivityRecord: void destroySurfaces()>();

        goto label13;

     label11:
        if z9 == 0 goto label12;

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label12:
        $z4 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        if $z4 == 0 goto label13;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit> = 0;

     label13:
        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 0;

        $r31 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r32 = $r31.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        virtualinvoke $r32.<com.android.server.wm.WallpaperController: void hideWallpapers(com.android.server.wm.WindowState)>(r0);

        return;

        catch android.os.RemoteException from label03 to label04 with label05;
    }

    void onMergedOverrideConfigurationChanged()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onMergedOverrideConfigurationChanged()>();

        r0.<com.android.server.wm.WindowState: boolean mLastConfigReportedToClient> = 0;

        return;
    }

    void onMovedByResize()
    {
        com.android.server.wm.WindowState r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Object[] $r2;
        com.android.server.wm.ProtoLogGroup $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z0 == 0 goto label1;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r3 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r3, 1635462459, 0, null, $r2);

     label1:
        r0.<com.android.server.wm.WindowState: boolean mMovedByResize> = 1;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onMovedByResize()>();

        return;
    }

    void onParentChanged(com.android.server.wm.ConfigurationContainer, com.android.server.wm.ConfigurationContainer)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.ConfigurationContainer r1, r2;
        com.android.server.wm.DisplayContent $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.ConfigurationContainer;

        r2 := @parameter1: com.android.server.wm.ConfigurationContainer;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void onParentChanged(com.android.server.wm.ConfigurationContainer,com.android.server.wm.ConfigurationContainer)>(r1, r2);

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDrawnStateEvaluated(boolean)>(0);

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r3.<com.android.server.wm.DisplayContent: void reapplyMagnificationSpec()>();

        return;
    }

    void onResize()
    {
        com.android.server.wm.WindowState r0;
        java.util.ArrayList r1;
        java.lang.String r2;
        com.android.server.wm.WindowManagerService $r3;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object[] $r4;
        com.android.server.wm.ProtoLogGroup $r5;

        r0 := @this: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label2;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z3 == 0 goto label1;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r5 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void d(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r5, 417311568, 0, null, $r4);

     label1:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        $z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z5 == 0 goto label3;

        r0.<com.android.server.wm.WindowState: boolean mResizedWhileGone> = 1;

     label3:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void onResize()>();

        return;
    }

    boolean onSetAppExiting()
    {
        com.android.server.wm.WindowState r0, $r4;
        com.android.server.wm.DisplayContent r1;
        boolean $z1, $z2, z4;
        com.android.server.wm.WindowList $r2, $r10;
        java.lang.Object $r3;
        com.android.server.wm.WindowStateAnimator $r5;
        com.android.server.wm.WindowManagerService $r6, $r8;
        com.android.server.wm.AccessibilityController $r7, $r9;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        z4 = 0;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label2;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(2, 0);

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 == null goto label1;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r9.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r0, 2);

     label1:
        z4 = 1;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        z4 = 1;

     label2:
        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label3:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z2 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean onSetAppExiting()>();

        z4 = z4 | $z2;

        i1 = i1 + -1;

        goto label3;

     label4:
        return z4;
    }

    void onStartFreezingScreen()
    {
        com.android.server.wm.WindowState r0, $r4;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mAppFreezing> = 1;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void onStartFreezingScreen()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    boolean onStopFreezingScreen()
    {
        com.android.server.wm.WindowState r0, $r10;
        java.lang.String r1;
        com.android.server.wm.WindowList $r2, $r8;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.android.server.wm.WindowManagerService $r3, $r4;
        com.android.server.wm.RootWindowContainer $r5;
        java.lang.Object[] $r6;
        com.android.server.wm.ProtoLogGroup $r7;
        java.lang.Object $r9;

        r0 := @this: com.android.server.wm.WindowState;

        z5 = 0;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label2;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r10 = (com.android.server.wm.WindowState) $r9;

        $z4 = virtualinvoke $r10.<com.android.server.wm.WindowState: boolean onStopFreezingScreen()>();

        z5 = z5 | $z4;

        i2 = i2 + -1;

        goto label1;

     label2:
        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z0 != 0 goto label3;

        return z5;

     label3:
        r0.<com.android.server.wm.WindowState: boolean mAppFreezing> = 0;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z2 != 0 goto label5;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $i1 = $r3.<com.android.server.wm.WindowManagerService: int mWindowsFreezingScreen>;

        if $i1 == 2 goto label5;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z3 == 0 goto label4;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r7, -1747461042, 0, null, $r6);

     label4:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(1);

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r5.<com.android.server.wm.RootWindowContainer: boolean mOrientationChangeComplete> = 0;

     label5:
        r0.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        return 1;
    }

    void onSurfaceShownChanged(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mLastShownChangedReported>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.WindowState: boolean mLastShownChangedReported> = z0;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.WindowState: void initExclusionRestrictions()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowState: void logExclusionRestrictions(int)>(0);

        specialinvoke r0.<com.android.server.wm.WindowState: void logExclusionRestrictions(int)>(1);

     label3:
        return;
    }

    void onUnfreezeBounds()
    {
        com.android.server.wm.WindowState r0, $r8;
        com.android.server.wm.WindowList $r1, $r6;
        int $i0, i1;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r2, $r4;
        java.util.ArrayList $r3, $r5;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.WindowState) $r7;

        virtualinvoke $r8.<com.android.server.wm.WindowState: void onUnfreezeBounds()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 != 0 goto label3;

        return;

     label3:
        r0.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label4;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label4:
        return;
    }

    void onWindowReplacementTimeout()
    {
        com.android.server.wm.WindowState r0, $r4;
        boolean $z0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void removeImmediately()>();

        goto label3;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void onWindowReplacementTimeout()>();

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    void openInputChannel(android.view.InputChannel)
    {
        com.android.server.wm.WindowState r0;
        android.view.InputChannel r1, $r3, $r6, $r7, $r9, $r11, $r15, $r21, $r22;
        android.view.InputChannel[] r2;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        com.android.server.wm.WindowManagerService $r8, $r16;
        com.android.server.input.InputManagerService $r10;
        android.view.InputWindowHandle $r12, $r17;
        android.os.IBinder $r13, $r18;
        com.android.server.wm.WindowState$DeadWindowEventReceiver $r14;
        java.util.HashMap $r19;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.InputChannel;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        if $r3 != null goto label3;

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.String getName()>();

        r2 = staticinvoke <android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>($r5);

        $r6 = r2[0];

        r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel> = $r6;

        $r7 = r2[1];

        r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel> = $r7;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r10 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r9 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        virtualinvoke $r10.<com.android.server.input.InputManagerService: void registerInputChannel(android.view.InputChannel)>($r9);

        $r12 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $r11 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        $r13 = virtualinvoke $r11.<android.view.InputChannel: android.os.IBinder getToken()>();

        $r12.<android.view.InputWindowHandle: android.os.IBinder token> = $r13;

        if r1 == null goto label1;

        $r21 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel>;

        virtualinvoke $r21.<android.view.InputChannel: void transferTo(android.view.InputChannel)>(r1);

        $r22 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel>;

        virtualinvoke $r22.<android.view.InputChannel: void dispose()>();

        r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel> = null;

        goto label2;

     label1:
        $r14 = new com.android.server.wm.WindowState$DeadWindowEventReceiver;

        $r15 = r0.<com.android.server.wm.WindowState: android.view.InputChannel mClientChannel>;

        specialinvoke $r14.<com.android.server.wm.WindowState$DeadWindowEventReceiver: void <init>(com.android.server.wm.WindowState,android.view.InputChannel)>(r0, $r15);

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeadWindowEventReceiver mDeadWindowEventReceiver> = $r14;

     label2:
        $r16 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r19 = $r16.<com.android.server.wm.WindowManagerService: java.util.HashMap mInputToWindowMap>;

        $r17 = r0.<com.android.server.wm.WindowState: android.view.InputWindowHandle mInputWindowHandle>;

        $r18 = $r17.<android.view.InputWindowHandle: android.os.IBinder token>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r0);

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Window already has an input channel.");

        throw $r4;
    }

    void orientationChangeTimedOut()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mOrientationChangeTimedOut> = 1;

        return;
    }

    boolean performShowLocked()
    {
        com.android.server.wm.WindowState r0, r2;
        com.android.server.wm.DisplayContent r1;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowStateAnimator $r3, $r6, $r7, $r8, $r13, $r17, $r19;
        com.android.server.wm.ActivityRecord $r4, $r16, $r18;
        com.android.server.wm.WindowManagerService $r5, $r9;
        com.android.server.wm.WindowList $r10, $r11;
        int $i0, $i1, i2, $i3, i4;
        java.lang.Object $r12;
        com.android.server.wm.WindowSurfaceController $r14;
        android.view.WindowManager$LayoutParams $r15;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean showToCurrentUser()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void clearPolicyVisibilityFlag(int)>(2);

        return 0;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowState: void logPerformShow(java.lang.String)>("performShow on ");

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i2 = $r3.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if i2 == 4 goto label2;

        if i2 != 3 goto label4;

     label2:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r4 == null goto label4;

        $r15 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r15.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 3 goto label3;

        $r18 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r17 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r18.<com.android.server.wm.ActivityRecord: void onFirstWindowDrawn(com.android.server.wm.WindowState,com.android.server.wm.WindowStateAnimator)>(r0, $r17);

        goto label4;

     label3:
        $r16 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r16.<com.android.server.wm.ActivityRecord: void onStartingWindowDrawn()>();

     label4:
        $r19 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i3 = $r19.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i3 != 3 goto label9;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isReadyForDisplay()>();

        if $z1 != 0 goto label5;

        goto label9;

     label5:
        specialinvoke r0.<com.android.server.wm.WindowState: void logPerformShow(java.lang.String)>("Showing ");

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r6.<com.android.server.wm.WindowStateAnimator: void applyEnterAnimationLocked()>();

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r7.<com.android.server.wm.WindowStateAnimator: float mLastAlpha> = -1.0F;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r8.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 4;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        $z2 = r0.<com.android.server.wm.WindowState: boolean mHidden>;

        if $z2 == 0 goto label8;

        r0.<com.android.server.wm.WindowState: boolean mHidden> = 0;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

        i4 = $i0 - 1;

     label6:
        if i4 < 0 goto label8;

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r12 = virtualinvoke $r11.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.wm.WindowState) $r12;

        $r13 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r14 = $r13.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r14 == null goto label7;

        virtualinvoke r2.<com.android.server.wm.WindowState: boolean performShowLocked()>();

        if r1 == null goto label7;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label7:
        i4 = i4 + -1;

        goto label6;

     label8:
        return 1;

     label9:
        return 0;
    }

    public void pokeDrawLockLw(long)
    {
        com.android.server.wm.WindowState r0;
        long l0;
        java.lang.CharSequence r1;
        boolean $z0;
        android.os.PowerManager$WakeLock $r3, $r4, $r13, r15;
        com.android.server.wm.WindowManagerService $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, $r12;
        android.os.WorkSource $r10;
        android.view.WindowManager$LayoutParams $r11;
        int $i1;
        android.os.PowerManager r14;

        r0 := @this: com.android.server.wm.WindowState;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock>;

        if $r3 != null goto label1;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r14 = $r5.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window:");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r15 = virtualinvoke r14.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(128, $r9);

        r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock> = r15;

        virtualinvoke r15.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r13 = r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock>;

        $r10 = new android.os.WorkSource;

        $i1 = r0.<com.android.server.wm.WindowState: int mOwnerUid>;

        $r11 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r12 = $r11.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        specialinvoke $r10.<android.os.WorkSource: void <init>(int,java.lang.String)>($i1, $r12);

        virtualinvoke $r13.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r10);

     label1:
        $r4 = r0.<com.android.server.wm.WindowState: android.os.PowerManager$WakeLock mDrawLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire(long)>(l0);

     label2:
        return;
    }

    void prelayout()
    {
        com.android.server.wm.WindowState r0;
        float f0, $f1;
        boolean $z0;
        com.android.server.wm.WindowToken $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        f0 = virtualinvoke $r1.<com.android.server.wm.WindowToken: float getSizeCompatScale()>();

        r0.<com.android.server.wm.WindowState: float mGlobalScale> = f0;

        $f1 = 1.0F / f0;

        r0.<com.android.server.wm.WindowState: float mInvGlobalScale> = $f1;

        goto label2;

     label1:
        r0.<com.android.server.wm.WindowState: float mInvGlobalScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mGlobalScale> = 1.0F;

     label2:
        return;
    }

    boolean prepareForSync(com.android.server.wm.BLASTSyncEngine$TransactionReadyListener, int)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.BLASTSyncEngine$TransactionReadyListener r1;
        boolean $z0;
        com.android.server.wm.BLASTSyncEngine $r2;
        com.android.server.wm.WindowManagerService $r3, $r5;
        com.android.server.wm.WindowManagerService$H $r4, $r6;
        int i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.BLASTSyncEngine$TransactionReadyListener;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean setPendingListener(com.android.server.wm.BLASTSyncEngine$TransactionReadyListener,int)>(r1, i0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowState: void requestRedrawForSync()>();

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.BLASTSyncEngine mBLASTSyncEngine>;

        i1 = virtualinvoke $r2.<com.android.server.wm.BLASTSyncEngine: int startSyncSet(com.android.server.wm.BLASTSyncEngine$TransactionReadyListener)>(r0);

        r0.<com.android.server.wm.WindowState: int mLocalSyncId> = i1;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean addChildrenToSyncSet(int)>(i1);

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(64, r0);

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r6 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: void sendNewMessageDelayed(int,java.lang.Object,long)>(64, r0, 5000L);

        return 1;
    }

    void prepareSurfaces()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowStateAnimator $r1;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mIsDimming> = 0;

        specialinvoke r0.<com.android.server.wm.WindowState: void applyDims()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void updateSurfacePosition()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void updateFrameRateSelectionPriorityIfNeeded()>();

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r1.<com.android.server.wm.WindowStateAnimator: void prepareSurfaceLocked(boolean)>(1);

        specialinvoke r0.<com.android.server.wm.WindowState: void notifyBlastSyncTransaction()>();

        specialinvoke r0.<com.android.server.wm.WindowContainer: void prepareSurfaces()>();

        return;
    }

    void prepareWindowToDisplayDuringRelayout(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        android.view.WindowManager$LayoutParams $r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        com.android.server.wm.WindowToken $r3;
        com.android.server.wm.WindowStateAnimator $r4;
        com.android.server.wm.WindowManagerService $r5, $r6, $r10;
        com.android.server.wm.ActivityTaskManagerInternal $r7;
        com.android.server.wm.WindowState$PowerManagerWrapper $r8, $r9;
        long $l4;
        android.content.Context $r11;
        android.content.ContentResolver $r12;
        com.android.server.wm.ActivityRecord r13, r14, r15;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 2097152;

        if $i1 != 0 goto label02;

        r13 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r13 == null goto label01;

        $z7 = virtualinvoke r13.<com.android.server.wm.ActivityRecord: boolean canTurnScreenOn()>();

        if $z7 == 0 goto label01;

        goto label02;

     label01:
        z8 = 0;

        goto label03;

     label02:
        z8 = 1;

     label03:
        if z8 == 0 goto label12;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $z3 = $r5.<com.android.server.wm.WindowManagerService: boolean mAllowTheaterModeWakeFromLayout>;

        if $z3 != 0 goto label05;

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i5 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r12, "theater_mode_on", 0);

        if $i5 != 0 goto label04;

        goto label05;

     label04:
        z9 = 0;

        goto label06;

     label05:
        z9 = 1;

     label06:
        r14 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r14 == null goto label08;

        $z6 = virtualinvoke r14.<com.android.server.wm.ActivityRecord: boolean currentLaunchCanTurnScreenOn()>();

        if $z6 == 0 goto label07;

        goto label08;

     label07:
        z10 = 0;

        goto label09;

     label08:
        z10 = 1;

     label09:
        if z9 == 0 goto label11;

        if z10 == 0 goto label11;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.ActivityTaskManagerInternal mAtmInternal>;

        $z4 = virtualinvoke $r7.<com.android.server.wm.ActivityTaskManagerInternal: boolean isDreaming()>();

        if $z4 != 0 goto label10;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$PowerManagerWrapper mPowerManagerWrapper>;

        $z5 = interfaceinvoke $r9.<com.android.server.wm.WindowState$PowerManagerWrapper: boolean isInteractive()>();

        if $z5 != 0 goto label11;

     label10:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$PowerManagerWrapper mPowerManagerWrapper>;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke $r8.<com.android.server.wm.WindowState$PowerManagerWrapper: void wakeUp(long,int,java.lang.String)>($l4, 2, "android.server.wm:SCREEN_ON_FLAG");

     label11:
        r15 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r15 == null goto label12;

        virtualinvoke r15.<com.android.server.wm.ActivityRecord: void setCurrentLaunchCanTurnScreenOn(boolean)>(0);

     label12:
        if z0 == 0 goto label13;

        return;

     label13:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i3 = $i2 & 240;

        if $i3 != 16 goto label14;

        r0.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

     label14:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z1 == 0 goto label15;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z2 = virtualinvoke $r3.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z2 == 0 goto label15;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: void applyEnterAnimationLocked()>();

     label15:
        return;
    }

    public void registerFocusObserver(android.view.IWindowFocusObserver)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        android.os.RemoteCallbackList r2, $r4, $r5;
        com.android.server.wm.WindowManagerService $r3;
        java.lang.Throwable $r6;
        android.view.IWindowFocusObserver r7;

        r0 := @this: com.android.server.wm.WindowState;

        r7 := @parameter0: android.view.IWindowFocusObserver;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r3.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r4 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        if $r4 != null goto label2;

        r2 = new android.os.RemoteCallbackList;

        specialinvoke r2.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks> = r2;

     label2:
        $r5 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        virtualinvoke $r5.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r7);

        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    int relayoutVisibleWindow(int, int)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, z16;
        com.android.server.wm.DisplayContent $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i11, i12, i13;
        com.android.server.wm.WindowStateAnimator $r2, $r3, $r4, $r5, $r6;
        com.android.server.wm.WindowManagerService $r7;
        java.util.ArrayList $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r16;
        java.lang.Throwable $r17;
        byte b9, b10, b14;

        r0 := @this: com.android.server.wm.WindowState;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        b9 = 0;

        if z0 == 0 goto label02;

        $z9 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z9 != 0 goto label01;

        goto label02;

     label01:
        b10 = 0;

        goto label03;

     label02:
        b10 = 2;

     label03:
        i11 = i7 | b10;

        $z10 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z10 == 0 goto label05;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("relayoutVisibleWindow: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAnimatingExit=true, mRemoveOnExit=");

        $z6 = r0.<com.android.server.wm.WindowState: boolean mRemoveOnExit>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDestroying=");

        $z7 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WindowManager", $r16);

        $z8 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating()>();

        if $z8 == 0 goto label04;

        virtualinvoke r0.<com.android.server.wm.WindowState: void cancelAnimation()>();

        virtualinvoke r0.<com.android.server.wm.WindowState: void destroySurfaceUnchecked()>();

     label04:
        r0.<com.android.server.wm.WindowState: boolean mAnimatingExit> = 0;

     label05:
        $z11 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z11 == 0 goto label06;

        r0.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r8 = $r7.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r8.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label06:
        if z0 != 0 goto label07;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r6.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 1;

     label07:
        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i0 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: int getRotation()>();

        r0.<com.android.server.wm.WindowState: int mLastVisibleLayoutRotation> = $i0;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r2.<com.android.server.wm.WindowStateAnimator: boolean mEnteringAnimation> = 1;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "prepareToDisplay");

     label08:
        virtualinvoke r0.<com.android.server.wm.WindowState: void prepareWindowToDisplayDuringRelayout(boolean)>(z0);

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        i12 = i11;

        $i1 = i8 & 8;

        if $i1 == 0 goto label10;

        i12 = i11;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z4 = virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: boolean tryChangeFormatInPlaceLocked()>();

        if $z4 != 0 goto label10;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: void preserveSurfaceLocked()>();

        i12 = i11 | 6;

     label10:
        i13 = i12;

        $z12 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z12 == 0 goto label11;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setDragResizing()>();

        i13 = i12;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z2 == 0 goto label11;

        i13 = i12;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isChildWindow()>();

        if $z3 != 0 goto label11;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r3.<com.android.server.wm.WindowStateAnimator: void preserveSurfaceLocked()>();

        i13 = i12 | 6;

     label11:
        $z13 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z13 == 0 goto label12;

        $i5 = virtualinvoke r0.<com.android.server.wm.WindowState: int getResizeMode()>();

        if $i5 != 0 goto label12;

        z14 = 1;

        goto label13;

     label12:
        z14 = 0;

     label13:
        $z15 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z15 == 0 goto label14;

        $i4 = virtualinvoke r0.<com.android.server.wm.WindowState: int getResizeMode()>();

        if $i4 != 1 goto label14;

        z16 = 1;

        goto label15;

     label14:
        z16 = 0;

     label15:
        if z14 == 0 goto label16;

        b14 = 16;

        goto label17;

     label16:
        b14 = 0;

     label17:
        if z16 == 0 goto label18;

        b9 = 8;

     label18:
        $i2 = i13 | b14;

        $i3 = $i2 | b9;

        return $i3;

     label19:
        $r17 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r17;

        catch java.lang.Throwable from label08 to label09 with label19;
    }

    boolean removeEmbeddedDisplayContent(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayContent r1;
        android.util.ArraySet $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r2 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    void removeIfPossible()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeIfPossible()>();

        specialinvoke r0.<com.android.server.wm.WindowState: void removeIfPossible(boolean)>(0);

        virtualinvoke r0.<com.android.server.wm.WindowState: void immediatelyNotifyBlastSync()>();

        return;
    }

    void removeImmediately()
    {
        com.android.server.wm.WindowState r0, $r1, r18;
        boolean $z0, $z1, $z2, $z6;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;
        android.util.ArraySet $r3;
        com.android.server.wm.DisplayPolicy $r4;
        com.android.server.wm.WindowStateAnimator $r5, $r6;
        com.android.server.wm.Session $r7;
        android.view.IWindow $r8;
        android.os.IBinder $r9;
        com.android.server.wm.WindowState$DeathRecipient $r10;
        com.android.server.wm.WindowManagerService $r11;
        java.util.ArrayList $r12;
        java.lang.Object[] $r14;
        com.android.server.wm.ProtoLogGroup $r15;
        java.lang.RuntimeException $r16;
        java.lang.String r17;
        com.android.server.wm.DisplayContent r19;

        r0 := @this: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void removeImmediately()>();

        $z0 = r0.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z0 == 0 goto label02;

        $z6 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ADD_REMOVE_enabled>;

        if $z6 == 0 goto label01;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r15 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ADD_REMOVE>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r17;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r15, 2018454757, 0, null, $r14);

     label01:
        return;

     label02:
        r0.<com.android.server.wm.WindowState: boolean mRemoved> = 1;

        r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow> = 0;

        r18 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow>;

        if r18 == null goto label03;

        r18.<com.android.server.wm.WindowState: boolean mSkipEnterAnimationForSeamlessReplacement> = 0;

     label03:
        r19 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isInputMethodTarget()>();

        if $z1 == 0 goto label04;

        virtualinvoke r19.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState computeImeTarget(boolean)>(1);

     label04:
        $r1 = r19.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState mInputMethodInputTarget>;

        if $r1 != r0 goto label05;

        virtualinvoke r19.<com.android.server.wm.DisplayContent: void setInputMethodInputTarget(com.android.server.wm.WindowState)>(null);

     label05:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        $z2 = staticinvoke <com.android.server.wm.WindowManagerService: boolean excludeWindowTypeFromTapOutTask(int)>($i0);

        if $z2 == 0 goto label06;

        $r12 = r19.<com.android.server.wm.DisplayContent: java.util.ArrayList mTapExcludedWindows>;

        virtualinvoke $r12.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label06:
        $r3 = r19.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows>;

        virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

        $r4 = virtualinvoke r19.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        virtualinvoke $r4.<com.android.server.wm.DisplayPolicy: void removeWindowLw(com.android.server.wm.WindowState)>(r0);

        virtualinvoke r0.<com.android.server.wm.WindowState: void disposeInputChannel()>();

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r5.<com.android.server.wm.WindowStateAnimator: void destroyDeferredSurfaceLocked()>();

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r6.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke $r7.<com.android.server.wm.Session: void windowRemovedLocked()>();

     label07:
        $r8 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r9 = interfaceinvoke $r8.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeathRecipient mDeathRecipient>;

        interfaceinvoke $r9.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r10, 0);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

     label10:
        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r11.<com.android.server.wm.WindowManagerService: void postWindowRemoveCleanupLocked(com.android.server.wm.WindowState)>(r0);

        return;

        catch java.lang.RuntimeException from label07 to label08 with label09;
    }

    boolean removeReplacedWindowIfNeeded(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0, r1, $r4, $r5;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowList $r2, $r6;
        java.lang.Object $r3;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow>;

        if $r5 != r1 goto label1;

        $z2 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hasDrawnLw()>();

        if $z2 == 0 goto label1;

        r1.<com.android.server.wm.WindowState: boolean mSkipEnterAnimationForSeamlessReplacement> = 0;

        specialinvoke r0.<com.android.server.wm.WindowState: void removeReplacedWindow()>();

        return 1;

     label1:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z1 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean removeReplacedWindowIfNeeded(com.android.server.wm.WindowState)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return 0;
    }

    void reportFocusChangedSerialized(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;
        int i0, i1;
        android.os.RemoteCallbackList $r1, $r2, r9;
        android.os.IInterface $r3;
        com.android.server.wm.WindowState$WindowId $r4, $r6;
        android.os.IBinder $r5, $r7;
        android.os.RemoteException $r8;
        android.view.IWindowFocusObserver r10;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r9 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        if r9 == null goto label9;

        i0 = virtualinvoke r9.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label8;

        $r2 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        $r3 = virtualinvoke $r2.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        r10 = (android.view.IWindowFocusObserver) $r3;

        if z0 == 0 goto label4;

     label2:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$WindowId mWindowId>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowState$WindowId: android.os.IBinder asBinder()>();

        interfaceinvoke r10.<android.view.IWindowFocusObserver: void focusGained(android.os.IBinder)>($r7);

     label3:
        goto label5;

     label4:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$WindowId mWindowId>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowState$WindowId: android.os.IBinder asBinder()>();

        interfaceinvoke r10.<android.view.IWindowFocusObserver: void focusLost(android.os.IBinder)>($r5);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        $r1 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        virtualinvoke $r1.<android.os.RemoteCallbackList: void finishBroadcast()>();

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void reportResized()
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1, r2, r3, $r15, r41, r46;
        android.util.MergedConfiguration r4, $r36;
        int i0, $i1, $i5, $i7;
        android.view.DisplayCutout r5;
        android.view.IWindow r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        android.view.DisplayCutout$ParcelableWrapper r7;
        com.android.server.wm.WindowStateAnimator $r8, $r37, $r44;
        com.android.server.wm.WindowManagerService $r9, $r24, $r49;
        int[] $r10;
        com.android.server.wm.AccessibilityController $r11, $r50;
        java.lang.Object[] $r12, $r16;
        com.android.server.wm.ProtoLogGroup $r13, $r17;
        com.android.server.wm.WindowFrames $r14, $r38, $r39, $r40, $r42, $r43;
        java.lang.StringBuilder $r18, $r25;
        java.lang.CharSequence $r20;
        java.lang.String $r22, $r30, r33, r34, r35;
        android.os.RemoteException $r23, $r31, r51;
        long $l2, $l3, $l4;
        com.android.server.wm.utils.WmDisplayCutout $r45;
        com.android.server.wm.DisplayContent $r47;
        com.android.server.wm.DisplayPolicy $r48;

        r0 := @this: com.android.server.wm.WindowState;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(32L);

        if $z1 == 0 goto label01;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wm.reportResized_");

        $r20 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, $r22);

     label01:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z2 == 0 goto label02;

        r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r14 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r15 = $r14.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        $r17 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r33;

        $r16[1] = r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r17, -1824578273, 0, null, $r16);

     label02:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i1 = $r8.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i1 != 1 goto label03;

        $z7 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z7 == 0 goto label03;

        r35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r13 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r35;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r13, -1130868271, 0, null, $r12);

     label03:
        $r36 = r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration>;

        virtualinvoke r0.<com.android.server.wm.WindowState: void getMergedConfiguration(android.util.MergedConfiguration)>($r36);

        r0.<com.android.server.wm.WindowState: boolean mLastConfigReportedToClient> = 1;

        z8 = r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged>;

        r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged> = 0;

        r0.<com.android.server.wm.WindowState: boolean mDragResizingChangeReported> = 1;

        $r37 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r37.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized> = 0;

        $r38 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r38.<com.android.server.wm.WindowFrames: void resetInsetsChanged()>();

        $r39 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r1 = $r39.<com.android.server.wm.WindowFrames: android.graphics.Rect mCompatFrame>;

        $r40 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r41 = $r40.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastContentInsets>;

        $r42 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r2 = $r42.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastVisibleInsets>;

        $r43 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        r3 = $r43.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastStableInsets>;

        r4 = r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration>;

        $r44 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i7 = $r44.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i7 == 1 goto label05;

        $z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean useBLASTSync()>();

        if $z5 != 0 goto label05;

        $z6 = r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported>;

        if $z6 != 0 goto label04;

        goto label05;

     label04:
        z9 = 0;

        goto label06;

     label05:
        z9 = 1;

     label06:
        if z8 != 0 goto label08;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z3 != 0 goto label08;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported>;

        if $z4 != 0 goto label07;

        goto label08;

     label07:
        z10 = 0;

        goto label09;

     label08:
        z10 = 1;

     label09:
        i0 = virtualinvoke r0.<com.android.server.wm.WindowState: int getDisplayId()>();

        $r45 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.utils.WmDisplayCutout getWmDisplayCutout()>();

        r5 = virtualinvoke $r45.<com.android.server.wm.utils.WmDisplayCutout: android.view.DisplayCutout getDisplayCutout()>();

        r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported> = 1;

     label10:
        r6 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r46 = virtualinvoke r0.<com.android.server.wm.WindowState: android.graphics.Rect getBackdropFrame(android.graphics.Rect)>(r1);

        $r47 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r48 = virtualinvoke $r47.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        z0 = virtualinvoke $r48.<com.android.server.wm.DisplayPolicy: boolean areSystemBarsForcedShownLw(com.android.server.wm.WindowState)>(r0);

        r7 = new android.view.DisplayCutout$ParcelableWrapper;

        specialinvoke r7.<android.view.DisplayCutout$ParcelableWrapper: void <init>(android.view.DisplayCutout)>(r5);

     label11:
        interfaceinvoke r6.<android.view.IWindow: void resized(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,boolean,android.util.MergedConfiguration,android.graphics.Rect,boolean,boolean,int,android.view.DisplayCutout$ParcelableWrapper)>(r1, r41, r2, r3, z9, r4, r46, z10, z0, i0, r7);

        $r49 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r50 = $r49.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r50 == null goto label12;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r11 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r10 = newarray (int)[1];

        $r10[0] = i0;

        virtualinvoke $r11.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked(int[])>($r10);

     label12:
        virtualinvoke r0.<com.android.server.wm.WindowState: void updateLocationInParentDisplayIfNeeded()>();

     label13:
        goto label17;

     label14:
        $r23 := @caughtexception;

        r51 = $r23;

        goto label16;

     label15:
        $r31 := @caughtexception;

        r51 = $r31;

     label16:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r24 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $l3 = $r24.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l4 = $l2 - $l3;

        $i5 = (int) $l4;

        r0.<com.android.server.wm.WindowState: int mLastFreezeDuration> = $i5;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report \'resized\' to ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r51);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r30);

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

        catch android.os.RemoteException from label10 to label11 with label15;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch android.os.RemoteException from label12 to label13 with label14;
    }

    void requestDrawIfNeeded(java.util.List)
    {
        com.android.server.wm.WindowState r0, $r7;
        java.util.List r1;
        com.android.server.wm.ActivityRecord r2, $r6;
        boolean $z0, $z1, $z3, $z4;
        android.view.WindowManager$LayoutParams $r3, $r5;
        com.android.server.policy.WindowManagerPolicy $r4;
        int $i0;
        com.android.server.wm.WindowStateAnimator $r8;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.util.List;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisible()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r2 == null goto label4;

        $z3 = r2.<com.android.server.wm.ActivityRecord: boolean allDrawn>;

        if $z3 == 0 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label3;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z4 == 0 goto label5;

        return;

     label3:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $r7 = $r6.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r7 == null goto label5;

        return;

     label4:
        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.policy.WindowManagerPolicy mPolicy>;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z1 = interfaceinvoke $r4.<com.android.server.policy.WindowManagerPolicy: boolean isKeyguardHostWindow(android.view.WindowManager$LayoutParams)>($r3);

        if $z1 != 0 goto label5;

        return;

     label5:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r8.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void resetLastContentInsets()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    void requestRedrawForSync()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mRedrawForSyncReported> = 0;

        return;
    }

    void requestUpdateWallpaperIfNeeded()
    {
        com.android.server.wm.WindowState r0, $r4;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList $r2, $r8;
        java.lang.Object $r3;
        android.view.WindowManager$LayoutParams $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        com.android.server.wm.WindowManagerService $r6;
        com.android.server.wm.WindowSurfacePlacer $r7;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 == null goto label1;

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label1;

        $i2 = r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = $i2 | 4;

        r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r7.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label1:
        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i4 = virtualinvoke $r8.<com.android.server.wm.WindowList: int size()>();

        i5 = $i4 - 1;

     label2:
        if i5 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void requestUpdateWallpaperIfNeeded()>();

        i5 = i5 + -1;

        goto label2;

     label3:
        return;
    }

    void resetAppOpsState()
    {
        com.android.server.wm.WindowState r0;
        int $i0, $i1, $i2;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r1;
        android.app.AppOpsManager $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $i0 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        if $i0 == -1 goto label1;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i1 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        $i2 = virtualinvoke r0.<com.android.server.wm.WindowState: int getOwningUid()>();

        $r3 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        virtualinvoke $r2.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>($i1, $i2, $r3, null);

     label1:
        return;
    }

    void resetContentChanged()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r1.<com.android.server.wm.WindowFrames: void setContentChanged(boolean)>(0);

        return;
    }

    void resetDragResizingChangeReported()
    {
        com.android.server.wm.WindowState r0;

        r0 := @this: com.android.server.wm.WindowState;

        r0.<com.android.server.wm.WindowState: boolean mDragResizingChangeReported> = 0;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void resetDragResizingChangeReported()>();

        return;
    }

    void resetLastContentInsets()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r1.<com.android.server.wm.WindowFrames: void resetLastContentInsets()>();

        return;
    }

    void seamlesslyRotateIfAllowed(android.view.SurfaceControl$Transaction, int, int, boolean)
    {
        com.android.server.wm.WindowState r0;
        android.view.SurfaceControl$Transaction r1;
        int i0, $i1, i2;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WindowToken $r2;
        com.android.server.wm.SeamlessRotator $r3, r8;
        android.view.DisplayInfo $r4;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.DisplayRotation $r6;
        android.view.InsetsSource $r7;
        com.android.server.wm.InsetsSourceProvider r9, r10;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label8;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z2 == 0 goto label1;

        goto label8;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z3 = virtualinvoke $r2.<com.android.server.wm.WindowToken: boolean hasFixedRotationTransform()>();

        if $z3 == 0 goto label2;

        return;

     label2:
        r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate>;

        if r8 == null goto label3;

        i2 = virtualinvoke r8.<com.android.server.wm.SeamlessRotator: int getOldRotation()>();

     label3:
        r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if r9 == null goto label4;

        $r7 = virtualinvoke r9.<com.android.server.wm.InsetsSourceProvider: android.view.InsetsSource getSource()>();

        $i1 = virtualinvoke $r7.<android.view.InsetsSource: int getType()>();

        if $i1 != 13 goto label4;

        return;

     label4:
        $z4 = r0.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        if $z4 != 0 goto label5;

        if z0 == 0 goto label7;

     label5:
        r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if r10 == null goto label6;

        virtualinvoke r10.<com.android.server.wm.InsetsSourceProvider: void startSeamlessRotation()>();

     label6:
        $r3 = new com.android.server.wm.SeamlessRotator;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        specialinvoke $r3.<com.android.server.wm.SeamlessRotator: void <init>(int,int,android.view.DisplayInfo,boolean)>(i2, i0, $r4, 0);

        r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate> = $r3;

        virtualinvoke $r3.<com.android.server.wm.SeamlessRotator: void unrotate(android.view.SurfaceControl$Transaction,com.android.server.wm.WindowContainer)>(r1, r0);

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r6 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayRotation getDisplayRotation()>();

        virtualinvoke $r6.<com.android.server.wm.DisplayRotation: void markForSeamlessRotation(com.android.server.wm.WindowState,boolean)>(r0, 1);

     label7:
        return;

     label8:
        return;
    }

    void sendAppVisibilityToClients()
    {
        com.android.server.wm.WindowState r0, $r9;
        boolean z0;
        com.android.server.wm.ActivityRecord $r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1, i2;
        android.view.IWindow $r4;
        com.android.server.wm.WindowList $r5, $r7;
        com.android.server.wm.WindowStateAnimator $r6, $r10;
        java.lang.Object $r8;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void sendAppVisibilityToClients()>();

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        z0 = virtualinvoke $r2.<com.android.server.wm.ActivityRecord: boolean isClientVisible()>();

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label1;

        if z0 != 0 goto label1;

        return;

     label1:
        if z0 != 0 goto label4;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i1 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label3;

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.wm.WindowState) $r8;

        $r10 = $r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r10.<com.android.server.wm.WindowStateAnimator: void detachChildren()>();

        i2 = i2 + -1;

        goto label2;

     label3:
        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r6.<com.android.server.wm.WindowStateAnimator: void detachChildren()>();

     label4:
        $r4 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r4.<android.view.IWindow: void dispatchAppVisibility(boolean)>(z0);

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    void setControllableInsetProvider(com.android.server.wm.InsetsSourceProvider)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.InsetsSourceProvider r1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.InsetsSourceProvider;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider> = r1;

        return;
    }

    void setDisplayLayoutNeeded()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.DisplayContent r1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label1:
        return;
    }

    void setDragResizing()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.Task r1;
        com.android.server.wm.DisplayContent $r2;
        com.android.server.wm.DockedStackDividerController $r3;
        int $i0;
        byte b1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 = specialinvoke r0.<com.android.server.wm.WindowState: boolean computeDragResizing()>();

        $z1 = r0.<com.android.server.wm.WindowState: boolean mDragResizing>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.WindowState: boolean mDragResizing> = z0;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r1 == null goto label2;

        $z4 = virtualinvoke r1.<com.android.server.wm.Task: boolean isDragResizing()>();

        if $z4 == 0 goto label2;

        $i0 = virtualinvoke r1.<com.android.server.wm.Task: int getDragResizeMode()>();

        r0.<com.android.server.wm.WindowState: int mResizeMode> = $i0;

        goto label5;

     label2:
        $z2 = r0.<com.android.server.wm.WindowState: boolean mDragResizing>;

        if $z2 == 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r3 = $r2.<com.android.server.wm.DisplayContent: com.android.server.wm.DockedStackDividerController mDividerControllerLocked>;

        $z3 = virtualinvoke $r3.<com.android.server.wm.DockedStackDividerController: boolean isResizing()>();

        if $z3 == 0 goto label3;

        b1 = 1;

        goto label4;

     label3:
        b1 = 0;

     label4:
        r0.<com.android.server.wm.WindowState: int mResizeMode> = b1;

     label5:
        return;
    }

    void setDrawnStateEvaluated(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.WindowState: boolean mDrawnStateEvaluated> = z0;

        return;
    }

    void setForceHideNonSystemOverlayWindowIfNeeded(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1, $z2, $z3;
        android.view.WindowManager$LayoutParams $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        if $z1 != 0 goto label5;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        $z2 = staticinvoke <android.view.WindowManager$LayoutParams: boolean isSystemAlertWindowType(int)>($i0);

        if $z2 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 2005 goto label1;

        goto label5;

     label1:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mForceHideNonSystemOverlayWindow>;

        if $z3 != z0 goto label2;

        return;

     label2:
        r0.<com.android.server.wm.WindowState: boolean mForceHideNonSystemOverlayWindow> = z0;

        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(1, 1);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)>(1, 1);

     label4:
        return;

     label5:
        return;
    }

    void setFrameNumber(long)
    {
        com.android.server.wm.WindowState r0;
        long l0;

        r0 := @this: com.android.server.wm.WindowState;

        l0 := @parameter0: long;

        r0.<com.android.server.wm.WindowState: long mFrameNumber> = l0;

        return;
    }

    void setHasSurface(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.WindowState: boolean mHasSurface> = z0;

        return;
    }

    void setHiddenWhileSuspended(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1, $z2, $z3;
        android.view.WindowManager$LayoutParams $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        if $z1 != 0 goto label5;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        $z2 = staticinvoke <android.view.WindowManager$LayoutParams: boolean isSystemAlertWindowType(int)>($i0);

        if $z2 != 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 2005 goto label1;

        goto label5;

     label1:
        $z3 = r0.<com.android.server.wm.WindowState: boolean mHiddenWhileSuspended>;

        if $z3 != z0 goto label2;

        return;

     label2:
        r0.<com.android.server.wm.WindowState: boolean mHiddenWhileSuspended> = z0;

        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)>(1, 1);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)>(1, 1);

     label4:
        return;

     label5:
        return;
    }

    void setLastExclusionHeights(int, int, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i1, i2, $i3, $i4;
        int[] $r1, $r2, $r3, $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.wm.WindowState: int[] mLastGrantedExclusionHeight>;

        $i3 = $r1[i0];

        if $i3 != i2 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: int[] mLastRequestedExclusionHeight>;

        $i4 = $r4[i0];

        if $i4 == i1 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        if z1 == 0 goto label5;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mLastShownChangedReported>;

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.wm.WindowState: void logExclusionRestrictions(int)>(i0);

     label4:
        $r2 = r0.<com.android.server.wm.WindowState: int[] mLastGrantedExclusionHeight>;

        $r2[i0] = i2;

        $r3 = r0.<com.android.server.wm.WindowState: int[] mLastRequestedExclusionHeight>;

        $r3[i0] = i1;

     label5:
        return;
    }

    void setLastReportedMergedConfiguration(android.util.MergedConfiguration)
    {
        com.android.server.wm.WindowState r0;
        android.util.MergedConfiguration r1, $r2;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.util.MergedConfiguration;

        $r2 = r0.<com.android.server.wm.WindowState: android.util.MergedConfiguration mLastReportedConfiguration>;

        virtualinvoke $r2.<android.util.MergedConfiguration: void setTo(android.util.MergedConfiguration)>(r1);

        r0.<com.android.server.wm.WindowState: boolean mLastConfigReportedToClient> = 1;

        return;
    }

    void setOrientationChanging(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.WindowState: boolean mOrientationChanging> = z0;

        r0.<com.android.server.wm.WindowState: boolean mOrientationChangeTimedOut> = 0;

        return;
    }

    void setPolicyVisibilityFlag(int)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.wm.WindowState: int mPolicyVisibility>;

        $i2 = $i1 | i0;

        r0.<com.android.server.wm.WindowState: int mPolicyVisibility> = $i2;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        return;
    }

    boolean setReplacementWindowIfNeeded(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0, r1, $r4, $r5;
        boolean $z1, $z2, $z3, $z4, $z5, z6;
        com.android.server.wm.WindowList $r2, $r10;
        java.lang.Object $r3;
        java.lang.CharSequence $r6, $r8;
        java.lang.String $r7, $r9;
        int $i0, i1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z6 = 0;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z1 == 0 goto label1;

        z6 = 0;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow>;

        if $r5 != null goto label1;

        z6 = 0;

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        $r8 = virtualinvoke r1.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        $r9 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label1;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow> = r1;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow>;

        $z5 = $z4 ^ 1;

        r1.<com.android.server.wm.WindowState: boolean mSkipEnterAnimationForSeamlessReplacement> = $z5;

        z6 = 1;

     label1:
        $r10 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z2 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean setReplacementWindowIfNeeded(com.android.server.wm.WindowState)>(r1);

        z6 = z6 | $z2;

        i1 = i1 + -1;

        goto label2;

     label3:
        return z6;
    }

    boolean setReportResizeHints()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowFrames: boolean setReportResizeHints()>();

        return $z0;
    }

    void setRequestedSize(int, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i1, $i2, $i3;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.server.wm.WindowState: int mRequestedWidth>;

        if $i2 != i0 goto label1;

        $i3 = r0.<com.android.server.wm.WindowState: int mRequestedHeight>;

        if $i3 == i1 goto label2;

     label1:
        r0.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

        r0.<com.android.server.wm.WindowState: int mRequestedWidth> = i0;

        r0.<com.android.server.wm.WindowState: int mRequestedHeight> = i1;

     label2:
        return;
    }

    void setSimulatedWindowFrames(com.android.server.wm.WindowFrames)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames r1;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowFrames;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mSimulatedWindowFrames> = r1;

        return;
    }

    boolean setSystemGestureExclusion(java.util.List)
    {
        com.android.server.wm.WindowState r0;
        java.util.List r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.wm.WindowState: java.util.List mExclusionRects>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: java.util.List mExclusionRects>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<com.android.server.wm.WindowState: java.util.List mExclusionRects>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return 1;
    }

    void setViewVisibility(int)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.WindowState: int mViewVisibility> = i0;

        if i0 != 8 goto label1;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mUsingBLASTSyncTransaction>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void immediatelyNotifyBlastSync()>();

     label1:
        return;
    }

    void setWaitingForDrawnIfResizingChanged()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.RootWindowContainer $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r3 = $r2.<com.android.server.wm.RootWindowContainer: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label1:
        specialinvoke r0.<com.android.server.wm.WindowContainer: void setWaitingForDrawnIfResizingChanged()>();

        return;
    }

    void setWillReplaceChildWindows()
    {
        com.android.server.wm.WindowState r0, $r4;
        boolean $z0;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean shouldBeReplacedWithChildren()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setWillReplaceWindow(boolean)>(0);

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowState: void setWillReplaceChildWindows()>();

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    void setWillReplaceWindow(boolean)
    {
        com.android.server.wm.WindowState r0, $r6;
        boolean z0;
        com.android.server.wm.WindowList $r1, $r4;
        int $i0, $i1, $i2, $i3, i4;
        android.view.WindowManager$LayoutParams $r2, $r3;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        $r6 = (com.android.server.wm.WindowState) $r5;

        virtualinvoke $r6.<com.android.server.wm.WindowState: void setWillReplaceWindow(boolean)>(z0);

        i4 = i4 + -1;

        goto label1;

     label2:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i2 = $i1 & 32768;

        if $i2 != 0 goto label4;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 3 goto label3;

        goto label4;

     label3:
        r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow> = 1;

        r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mReplacementWindow> = null;

        r0.<com.android.server.wm.WindowState: boolean mAnimateReplacingWindow> = z0;

        return;

     label4:
        return;
    }

    void setWindowScale(int, int)
    {
        com.android.server.wm.WindowState r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.WindowManager$LayoutParams $r1, $r2, $r3, $r4, $r5;
        float $f1, $f2, $f3, $f4, f5, f6;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 & 16384;

        if $i3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label7;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i4 == i0 goto label3;

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i7 = $r5.<android.view.WindowManager$LayoutParams: int width>;

        $f4 = (float) $i7;

        $f3 = (float) i0;

        f5 = $f4 / $f3;

        goto label4;

     label3:
        f5 = 1.0F;

     label4:
        r0.<com.android.server.wm.WindowState: float mHScale> = f5;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r3.<android.view.WindowManager$LayoutParams: int height>;

        if $i5 == i1 goto label5;

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r4.<android.view.WindowManager$LayoutParams: int height>;

        $f2 = (float) $i6;

        $f1 = (float) i1;

        f6 = $f2 / $f1;

        goto label6;

     label5:
        f6 = 1.0F;

     label6:
        r0.<com.android.server.wm.WindowState: float mVScale> = f6;

        goto label8;

     label7:
        r0.<com.android.server.wm.WindowState: float mVScale> = 1.0F;

        r0.<com.android.server.wm.WindowState: float mHScale> = 1.0F;

     label8:
        return;
    }

    boolean shouldBeReplacedWithChildren()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, z1;
        android.view.WindowManager$LayoutParams $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mIsChildWindow>;

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 4 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean shouldMagnify()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2011 goto label2;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 2012 goto label2;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 == 2027 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 == 2019 goto label2;

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i4 != 2024 goto label1;

        goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    boolean showForAllUsers()
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2;
        android.view.WindowManager$LayoutParams $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if i0 == 3 goto label4;

        if i0 == 2024 goto label4;

        if i0 == 2030 goto label4;

        if i0 == 2034 goto label4;

        if i0 == 2037 goto label4;

        if i0 == 2026 goto label4;

        if i0 == 2027 goto label4;

        if i0 == 2040 goto label4;

        if i0 == 2041 goto label4;

        tableswitch(i0)
        {
            case 2000: goto label4;
            case 2001: goto label4;
            case 2002: goto label4;
            default: goto label1;
        };

     label1:
        tableswitch(i0)
        {
            case 2007: goto label4;
            case 2008: goto label4;
            case 2009: goto label4;
            default: goto label2;
        };

     label2:
        tableswitch(i0)
        {
            case 2017: goto label4;
            case 2018: goto label4;
            case 2019: goto label4;
            case 2020: goto label4;
            case 2021: goto label4;
            case 2022: goto label4;
            default: goto label3;
        };

     label3:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i2 = $i1 & 16;

        if $i2 != 0 goto label4;

        return 0;

     label4:
        $z0 = r0.<com.android.server.wm.WindowState: boolean mOwnerCanAddInternalSystemWindow>;

        return $z0;
    }

    public void showInsets(int, boolean)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        boolean z0;
        android.view.IWindow $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r2.<android.view.IWindow: void showInsets(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to deliver showInsets", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean showLw(boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)>(z0, 1);

        return $z1;
    }

    boolean showLw(boolean, boolean)
    {
        com.android.server.wm.WindowState r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z10, $z11, $z12, $z13, z14;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService $r2, $r3;
        com.android.server.wm.WindowStateAnimator $r4;
        com.android.server.wm.WindowToken $r5;

        r0 := @this: com.android.server.wm.WindowState;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isLegacyPolicyVisibility()>();

        if $z2 == 0 goto label01;

        $z13 = r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim>;

        if $z13 == 0 goto label01;

        return 0;

     label01:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean showToCurrentUser()>();

        if $z3 != 0 goto label02;

        return 0;

     label02:
        $z4 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z4 != 0 goto label03;

        return 0;

     label03:
        $z5 = r0.<com.android.server.wm.WindowState: boolean mPermanentlyHidden>;

        if $z5 == 0 goto label04;

        return 0;

     label04:
        $z6 = r0.<com.android.server.wm.WindowState: boolean mHiddenWhileSuspended>;

        if $z6 == 0 goto label05;

        return 0;

     label05:
        $z7 = r0.<com.android.server.wm.WindowState: boolean mForceHideNonSystemOverlayWindow>;

        if $z7 == 0 goto label06;

        return 0;

     label06:
        z14 = z0;

        if z0 == 0 goto label08;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z10 = virtualinvoke $r5.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z10 != 0 goto label07;

        z14 = 0;

        goto label08;

     label07:
        z14 = z0;

        $z11 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isLegacyPolicyVisibility()>();

        if $z11 == 0 goto label08;

        z14 = z0;

        $z12 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z12 != 0 goto label08;

        z14 = 0;

     label08:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setPolicyVisibilityFlag(int)>(1);

        r0.<com.android.server.wm.WindowState: boolean mLegacyPolicyVisibilityAfterAnim> = 1;

        if z14 == 0 goto label09;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(1, 1);

     label09:
        if z1 == 0 goto label10;

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label10:
        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label11;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 0);

     label11:
        return 1;
    }

    boolean showToCurrentUser()
    {
        com.android.server.wm.WindowState r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.wm.ActivityRecord r2;
        android.view.WindowManager$LayoutParams $r3;
        com.android.server.wm.WindowManagerService $r4;
        boolean $z0, $z1, z2, $z3;
        android.graphics.Rect $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.wm.WindowState;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState getTopParentWindow()>();

        $r3 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        z2 = 1;

        if i0 >= 2000 goto label1;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r2 == null goto label1;

        $z1 = r2.<com.android.server.wm.ActivityRecord: boolean mShowForAllUsers>;

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i2 = $r5.<android.graphics.Rect: int left>;

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>();

        $i3 = $r6.<android.graphics.Rect: int left>;

        if $i2 > $i3 goto label1;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i4 = $r7.<android.graphics.Rect: int top>;

        $r8 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getDisplayFrameLw()>();

        $i5 = $r8.<android.graphics.Rect: int top>;

        if $i4 > $i5 goto label1;

        $r9 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i6 = $r9.<android.graphics.Rect: int right>;

        $r10 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getStableFrameLw()>();

        $i7 = $r10.<android.graphics.Rect: int right>;

        if $i6 < $i7 goto label1;

        $r11 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $i8 = $r11.<android.graphics.Rect: int bottom>;

        $r12 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getStableFrameLw()>();

        $i9 = $r12.<android.graphics.Rect: int bottom>;

        if $i8 < $i9 goto label1;

        return 1;

     label1:
        $z3 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean showForAllUsers()>();

        if $z3 != 0 goto label3;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $i1 = r1.<com.android.server.wm.WindowState: int mShowUserId>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService: boolean isCurrentProfile(int)>($i1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

        goto label3;

     label3:
        return z2;
    }

    void startAnimation(android.view.animation.Animation)
    {
        com.android.server.wm.WindowState r0;
        android.view.DisplayInfo r1;
        com.android.server.wm.InsetsSourceProvider $r2;
        com.android.server.wm.WindowFrames $r3, $r5;
        android.graphics.Rect $r4, $r6;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerService $r7, $r11;
        float $f0;
        com.android.server.wm.LocalAnimationAdapter $r8;
        com.android.server.wm.WindowAnimationSpec $r9;
        android.graphics.Point $r10;
        com.android.server.wm.SurfaceAnimationRunner $r12;
        android.view.SurfaceControl$Transaction $r13;
        android.view.animation.Animation r14;

        r0 := @this: com.android.server.wm.WindowState;

        r14 := @parameter0: android.view.animation.Animation;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.InsetsSourceProvider mControllableInsetProvider>;

        if $r2 == null goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r4 = $r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = virtualinvoke $r4.<android.graphics.Rect: int width()>();

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r6 = $r5.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i1 = virtualinvoke $r6.<android.graphics.Rect: int height()>();

        $i3 = r1.<android.view.DisplayInfo: int appWidth>;

        $i2 = r1.<android.view.DisplayInfo: int appHeight>;

        virtualinvoke r14.<android.view.animation.Animation: void initialize(int,int,int,int)>($i0, $i1, $i3, $i2);

        virtualinvoke r14.<android.view.animation.Animation: void restrictDuration(long)>(10000L);

        $r7 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $f0 = virtualinvoke $r7.<com.android.server.wm.WindowManagerService: float getWindowAnimationScaleLocked()>();

        virtualinvoke r14.<android.view.animation.Animation: void scaleCurrentDuration(float)>($f0);

        $r8 = new com.android.server.wm.LocalAnimationAdapter;

        $r9 = new com.android.server.wm.WindowAnimationSpec;

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        specialinvoke $r9.<com.android.server.wm.WindowAnimationSpec: void <init>(android.view.animation.Animation,android.graphics.Point,boolean,float)>(r14, $r10, 0, 0.0F);

        $r11 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.SurfaceAnimationRunner mSurfaceAnimationRunner>;

        specialinvoke $r8.<com.android.server.wm.LocalAnimationAdapter: void <init>(com.android.server.wm.LocalAnimationAdapter$AnimationSpec,com.android.server.wm.SurfaceAnimationRunner)>($r9, $r12);

        $r13 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        specialinvoke r0.<com.android.server.wm.WindowState: void startAnimation(android.view.SurfaceControl$Transaction,com.android.server.wm.AnimationAdapter)>($r13, $r8);

        virtualinvoke r0.<com.android.server.wm.WindowState: void commitPendingTransaction()>();

        return;
    }

    boolean surfaceInsetsChanging()
    {
        com.android.server.wm.WindowState r0;
        android.view.WindowManager$LayoutParams $r1;
        android.graphics.Rect $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowState;

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastSurfaceInsets>;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $z0 = virtualinvoke $r3.<android.graphics.Rect: boolean equals(java.lang.Object)>($r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    void switchUser(int)
    {
        com.android.server.wm.WindowState r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wm.WindowContainer: void switchUser(int)>(i0);

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean showToCurrentUser()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowState: void setPolicyVisibilityFlag(int)>(2);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowState: void clearPolicyVisibilityFlag(int)>(2);

     label2:
        return;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.WindowState r0;
        java.lang.String $r2, $r10, $r14, r16, $r17;
        java.lang.CharSequence $r11, r12, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r13;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowState;

        r12 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        $r2 = r0.<com.android.server.wm.WindowState: java.lang.String mStringNameCache>;

        if $r2 == null goto label1;

        $r11 = r0.<com.android.server.wm.WindowState: java.lang.CharSequence mLastTitle>;

        if $r11 != r12 goto label1;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mWasExiting>;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z1 == $z0 goto label4;

     label1:
        r0.<com.android.server.wm.WindowState: java.lang.CharSequence mLastTitle> = r12;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        r0.<com.android.server.wm.WindowState: boolean mWasExiting> = $z2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        $i1 = r0.<com.android.server.wm.WindowState: int mShowUserId>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = r0.<com.android.server.wm.WindowState: java.lang.CharSequence mLastTitle>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $z3 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z3 == 0 goto label2;

        r16 = " EXITING}";

        goto label3;

     label2:
        r16 = "}";

     label3:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.wm.WindowState: java.lang.String mStringNameCache> = $r10;

     label4:
        $r17 = r0.<com.android.server.wm.WindowState: java.lang.String mStringNameCache>;

        return $r17;
    }

    void transformClipRectFromScreenToSurfaceSpace(android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Rect r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        byte $b0, $b1, $b2, $b11;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<com.android.server.wm.WindowState: float mHScale>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 != 0 goto label1;

        $f15 = r0.<com.android.server.wm.WindowState: float mVScale>;

        $b11 = $f15 cmpl 1.0F;

        if $b11 != 0 goto label1;

        return;

     label1:
        $f1 = r0.<com.android.server.wm.WindowState: float mHScale>;

        $b1 = $f1 cmpl 0.0F;

        if $b1 < 0 goto label2;

        $i7 = r1.<android.graphics.Rect: int left>;

        $f10 = (float) $i7;

        $f9 = r0.<com.android.server.wm.WindowState: float mHScale>;

        $f11 = $f10 / $f9;

        $i8 = (int) $f11;

        r1.<android.graphics.Rect: int left> = $i8;

        $i9 = r1.<android.graphics.Rect: int right>;

        $f13 = (float) $i9;

        $f12 = r0.<com.android.server.wm.WindowState: float mHScale>;

        $f14 = $f13 / $f12;

        $d2 = (double) $f14;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $i10 = (int) $d3;

        r1.<android.graphics.Rect: int right> = $i10;

     label2:
        $f2 = r0.<com.android.server.wm.WindowState: float mVScale>;

        $b2 = $f2 cmpl 0.0F;

        if $b2 < 0 goto label3;

        $i3 = r1.<android.graphics.Rect: int top>;

        $f4 = (float) $i3;

        $f3 = r0.<com.android.server.wm.WindowState: float mVScale>;

        $f5 = $f4 / $f3;

        $i4 = (int) $f5;

        r1.<android.graphics.Rect: int top> = $i4;

        $i5 = r1.<android.graphics.Rect: int bottom>;

        $f7 = (float) $i5;

        $f6 = r0.<com.android.server.wm.WindowState: float mVScale>;

        $f8 = $f7 / $f6;

        $d0 = (double) $f8;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i6 = (int) $d1;

        r1.<android.graphics.Rect: int bottom> = $i6;

     label3:
        return;
    }

    float translateToWindowX(float)
    {
        com.android.server.wm.WindowState r0;
        float f0, $f1, $f2, f3, f4;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        f3 := @parameter0: float;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $f1 = (float) $i0;

        f0 = f3 - $f1;

        f4 = f0;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z0 == 0 goto label1;

        $f2 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        f4 = f0 * $f2;

     label1:
        return f4;
    }

    float translateToWindowY(float)
    {
        com.android.server.wm.WindowState r0;
        float f0, $f1, $f2, f3, f4;
        com.android.server.wm.WindowFrames $r1;
        android.graphics.Rect $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowState;

        f3 := @parameter0: float;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r2 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = $r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        f0 = f3 - $f1;

        f4 = f0;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean inSizeCompatMode()>();

        if $z0 == 0 goto label1;

        $f2 = r0.<com.android.server.wm.WindowState: float mGlobalScale>;

        f4 = f0 * $f2;

     label1:
        return f4;
    }

    public void unregisterFocusObserver(android.view.IWindowFocusObserver)
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowManagerGlobalLock r1;
        com.android.server.wm.WindowManagerService $r2;
        android.os.RemoteCallbackList $r3, $r4;
        java.lang.Throwable $r5;
        android.view.IWindowFocusObserver r6;

        r0 := @this: com.android.server.wm.WindowState;

        r6 := @parameter0: android.view.IWindowFocusObserver;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r1 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r1;

     label1:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        $r3 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: android.os.RemoteCallbackList mFocusCallbacks>;

        virtualinvoke $r4.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r6);

     label2:
        exitmonitor r1;

     label3:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void updateAppOpsState()
    {
        com.android.server.wm.WindowState r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r2, $r4, $r6;
        android.app.AppOpsManager $r3, $r5, $r7;

        r0 := @this: com.android.server.wm.WindowState;

        $i1 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        if $i1 != -1 goto label1;

        return;

     label1:
        i5 = virtualinvoke r0.<com.android.server.wm.WindowState: int getOwningUid()>();

        r1 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppOpVisibility>;

        if $z0 == 0 goto label3;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i3 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        i0 = virtualinvoke $r5.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>($i3, i5, r1);

        if i0 == 0 goto label2;

        if i0 == 3 goto label2;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i4 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        virtualinvoke $r7.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String,java.lang.String)>($i4, i5, r1, null);

        specialinvoke r0.<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)>(0);

     label2:
        goto label5;

     label3:
        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i2 = r0.<com.android.server.wm.WindowState: int mAppOp>;

        i6 = virtualinvoke $r3.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String,boolean,java.lang.String,java.lang.String)>($i2, i5, r1, 1, null, "attempt-to-be-visible");

        if i6 == 0 goto label4;

        if i6 != 3 goto label5;

     label4:
        specialinvoke r0.<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)>(1);

     label5:
        return;
    }

    void updateFrameRateSelectionPriorityIfNeeded()
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.DisplayPolicy $r2;
        com.android.server.wm.RefreshRatePolicy $r3;
        android.view.SurfaceControl$Transaction $r4;
        android.view.SurfaceControl $r5;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r3 = virtualinvoke $r2.<com.android.server.wm.DisplayPolicy: com.android.server.wm.RefreshRatePolicy getRefreshRatePolicy()>();

        i0 = virtualinvoke $r3.<com.android.server.wm.RefreshRatePolicy: int calculatePriority(com.android.server.wm.WindowState)>(r0);

        $i1 = r0.<com.android.server.wm.WindowState: int mFrameRateSelectionPriority>;

        if $i1 == i0 goto label1;

        r0.<com.android.server.wm.WindowState: int mFrameRateSelectionPriority> = i0;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowState: android.view.SurfaceControl$Transaction getPendingTransaction()>();

        $r5 = r0.<com.android.server.wm.WindowState: android.view.SurfaceControl mSurfaceControl>;

        $i2 = r0.<com.android.server.wm.WindowState: int mFrameRateSelectionPriority>;

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRateSelectionPriority(android.view.SurfaceControl,int)>($r5, $i2);

     label1:
        return;
    }

    void updateLastFrames()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1, $r2, $r5, $r6;
        android.graphics.Rect $r3, $r4, $r7, $r8;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r4 = $r1.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastFrame>;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r3 = $r2.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r8 = $r5.<com.android.server.wm.WindowFrames: android.graphics.Rect mLastRelFrame>;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r7 = $r6.<com.android.server.wm.WindowFrames: android.graphics.Rect mRelFrame>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        return;
    }

    void updateLastInsetValues()
    {
        com.android.server.wm.WindowState r0;
        com.android.server.wm.WindowFrames $r1;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        virtualinvoke $r1.<com.android.server.wm.WindowFrames: void updateLastInsetValues()>();

        return;
    }

    void updateLocationInParentDisplayIfNeeded()
    {
        com.android.server.wm.WindowState r0, $r2;
        android.util.ArraySet $r1, $r7;
        android.graphics.Point $r3, $r4, $r5, r12;
        boolean $z0;
        int $i0, $i1, i3, i4;
        android.view.IWindow $r6;
        java.lang.Object $r8;
        com.android.server.wm.DisplayContent $r9, r11;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        i3 = virtualinvoke $r1.<android.util.ArraySet: int size()>();

        if i3 == 0 goto label2;

        i4 = i3 + -1;

     label1:
        if i4 < 0 goto label2;

        $r7 = r0.<com.android.server.wm.WindowState: android.util.ArraySet mEmbeddedDisplayContents>;

        $r8 = virtualinvoke $r7.<android.util.ArraySet: java.lang.Object valueAt(int)>(i4);

        $r9 = (com.android.server.wm.DisplayContent) $r8;

        virtualinvoke $r9.<com.android.server.wm.DisplayContent: void notifyLocationInParentDisplayChanged()>();

        i4 = i4 + -1;

        goto label1;

     label2:
        r11 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r2 = virtualinvoke r11.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowState getParentWindow()>();

        if $r2 != null goto label3;

        return;

     label3:
        r12 = virtualinvoke r11.<com.android.server.wm.DisplayContent: android.graphics.Point getLocationInParentDisplay()>();

        $r3 = r0.<com.android.server.wm.WindowState: android.graphics.Point mLastReportedDisplayOffset>;

        $z0 = virtualinvoke $r3.<android.graphics.Point: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label4;

        return;

     label4:
        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Point mLastReportedDisplayOffset>;

        $i1 = r12.<android.graphics.Point: int x>;

        $i0 = r12.<android.graphics.Point: int y>;

        virtualinvoke $r4.<android.graphics.Point: void set(int,int)>($i1, $i0);

     label5:
        $r6 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r5 = r0.<com.android.server.wm.WindowState: android.graphics.Point mLastReportedDisplayOffset>;

        interfaceinvoke $r6.<android.view.IWindow: void locationInParentDisplayChanged(android.graphics.Point)>($r5);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed to update offset from DisplayContent", $r10);

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    void updateReportedVisibility(com.android.server.wm.WindowState$UpdateReportedVisibilityResults)
    {
        com.android.server.wm.WindowState r0, $r6;
        com.android.server.wm.WindowState$UpdateReportedVisibilityResults r1;
        com.android.server.wm.WindowList $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.WindowManager$LayoutParams $r3;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: com.android.server.wm.WindowState$UpdateReportedVisibilityResults;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r2.<com.android.server.wm.WindowList: int size()>();

        i9 = $i0 - 1;

     label1:
        if i9 < 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i9);

        $r6 = (com.android.server.wm.WindowState) $r5;

        virtualinvoke $r6.<com.android.server.wm.WindowState: void updateReportedVisibility(com.android.server.wm.WindowState$UpdateReportedVisibilityResults)>(r1);

        i9 = i9 + -1;

        goto label1;

     label2:
        $z0 = r0.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z0 != 0 goto label7;

        $i1 = r0.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i1 != 0 goto label7;

        $r3 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 == 3 goto label7;

        $z1 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z1 == 0 goto label3;

        goto label7;

     label3:
        $i3 = r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numInteresting>;

        $i4 = $i3 + 1;

        r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numInteresting> = $i4;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z2 == 0 goto label5;

        $i5 = r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numDrawn>;

        $i6 = $i5 + 1;

        r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numDrawn> = $i6;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z4 != 0 goto label4;

        $i7 = r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numVisible>;

        $i8 = $i7 + 1;

        r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: int numVisible> = $i8;

     label4:
        r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: boolean nowGone> = 0;

        goto label6;

     label5:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isAnimating(int)>(3);

        if $z3 == 0 goto label6;

        r1.<com.android.server.wm.WindowState$UpdateReportedVisibilityResults: boolean nowGone> = 0;

     label6:
        return;

     label7:
        return;
    }

    void updateRequestedInsetsState(android.view.InsetsState)
    {
        com.android.server.wm.WindowState r0;
        android.view.InsetsState r1, $r3;
        android.view.InsetsSource r2;
        int i0;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.InsetsState;

        i0 = 0;

     label1:
        if i0 >= 16 goto label4;

        r2 = virtualinvoke r1.<android.view.InsetsState: android.view.InsetsSource peekSource(int)>(i0);

        if r2 != null goto label2;

        goto label3;

     label2:
        $r3 = r0.<com.android.server.wm.WindowState: android.view.InsetsState mRequestedInsetsState>;

        virtualinvoke $r3.<android.view.InsetsState: void addSource(android.view.InsetsSource)>(r2);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    void updateResizingWindowIfNeeded()
    {
        com.android.server.wm.WindowState r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20, $z21, z22, $z23;
        com.android.server.wm.DisplayContent $r1;
        int $i0, $i1, $i6;
        com.android.server.wm.WindowManagerService $r2, $r3, $r25, $r39;
        java.util.ArrayList $r4, $r40;
        java.lang.Object[] $r5, $r8, $r19, $r27;
        com.android.server.wm.ProtoLogGroup $r6, $r9, $r20, $r28;
        com.android.server.wm.WindowSurfaceController $r7, $r14, $r26;
        java.lang.StringBuilder $r10;
        java.lang.String $r16, $r18, r30, r31, r32, r33, r36, r37, r41;
        com.android.server.wm.WindowFrames $r17;
        java.lang.Boolean $r21, $r22, $r23, $r24;
        long $l3, $l4, $l5;
        com.android.server.wm.WindowStateAnimator r29;
        com.android.server.wm.ActivityRecord r34, r38;

        r0 := @this: com.android.server.wm.WindowState;

        r29 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z2 == 0 goto label16;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i1 = $r1.<com.android.server.wm.DisplayContent: int mLayoutSeq>;

        $i0 = r0.<com.android.server.wm.WindowState: int mLayoutSeq>;

        if $i1 != $i0 goto label16;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z3 == 0 goto label01;

        goto label16;

     label01:
        z19 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean setReportResizeHints()>();

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isLastConfigReportedToClient()>();

        z0 = $z4 ^ 1;

        $z5 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z5 == 0 goto label02;

        $z18 = specialinvoke r0.<com.android.server.wm.WindowState: boolean isDragResizingChangeReported()>();

        if $z18 != 0 goto label02;

        z20 = 1;

        goto label03;

     label02:
        z20 = 0;

     label03:
        virtualinvoke r0.<com.android.server.wm.WindowState: void updateLastFrames()>();

        if z19 != 0 goto label06;

        $z12 = r29.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        if $z12 != 0 goto label06;

        if z0 != 0 goto label06;

        if z20 != 0 goto label06;

        $z13 = r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged>;

        if $z13 != 0 goto label06;

        $z14 = specialinvoke r0.<com.android.server.wm.WindowState: boolean shouldSendRedrawForSync()>();

        if $z14 == 0 goto label04;

        goto label06;

     label04:
        $z15 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z15 == 0 goto label15;

        $z16 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z16 == 0 goto label15;

        $z17 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z17 == 0 goto label05;

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r26 = r29.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        $r28 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r27 = newarray (java.lang.Object)[2];

        $r27[0] = r30;

        $r27[1] = r31;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r28, 1329340614, 0, null, $r27);

     label05:
        virtualinvoke r0.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r25 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $l4 = $r25.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l5 = $l3 - $l4;

        $i6 = (int) $l5;

        r0.<com.android.server.wm.WindowState: int mLastFreezeDuration> = $i6;

        goto label15;

     label06:
        $z21 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z21 == 0 goto label07;

        r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r17 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r18 = virtualinvoke $r17.<com.android.server.wm.WindowFrames: java.lang.String getInsetsChangedInfo()>();

        r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        z22 = r29.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        z1 = r0.<com.android.server.wm.WindowState: boolean mReportOrientationChanged>;

        $r20 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r19 = newarray (java.lang.Object)[6];

        $r19[0] = r32;

        $r19[1] = r33;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z22);

        $r19[2] = $r21;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r19[3] = $r22;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z20);

        $r19[4] = $r23;

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r19[5] = $r24;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r20, 1160771501, 4080, null, $r19);

     label07:
        r34 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r34 == null goto label08;

        $z11 = r0.<com.android.server.wm.WindowState: boolean mAppDied>;

        if $z11 == 0 goto label08;

        virtualinvoke r34.<com.android.server.wm.ActivityRecord: void removeDeadWindows()>();

        return;

     label08:
        virtualinvoke r0.<com.android.server.wm.WindowState: void updateLastInsetValues()>();

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)>(r0);

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z6 != 0 goto label09;

        if z20 == 0 goto label13;

     label09:
        $z7 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z7 == 0 goto label10;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Orientation start waiting for draw, mDrawState=DRAW_PENDING in ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", surfaceController ");

        $r14 = r29.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r16);

     label10:
        if z20 == 0 goto label12;

        $z10 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z10 == 0 goto label11;

        r36 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = r29.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r36;

        $r8[1] = r37;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, -1270148832, 0, null, $r8);

        goto label12;

     label11:
        goto label12;

     label12:
        r29.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 1;

        r38 = r0.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r38 == null goto label13;

        virtualinvoke r38.<com.android.server.wm.ActivityRecord: void clearAllDrawn()>();

     label13:
        $r39 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r40 = $r39.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $z23 = virtualinvoke $r40.<java.util.ArrayList: boolean contains(java.lang.Object)>(r0);

        if $z23 != 0 goto label15;

        $z8 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_RESIZE_enabled>;

        if $z8 == 0 goto label14;

        r41 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_RESIZE>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r41;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 685047360, 0, null, $r5);

     label14:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label15:
        return;

     label16:
        return;
    }

    void updateSurfacePosition(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.WindowState r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.SurfaceControl $r2, $r14, $r25, $r26;
        com.android.server.wm.WindowFrames $r3, $r5;
        android.graphics.Rect $r4, $r6, $r21, $r22;
        android.graphics.Point $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.SurfaceAnimator $r8;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.SeamlessRotator $r9;
        float $f0, $f1;
        com.android.server.wm.WindowStateAnimator $r19, $r23;
        android.view.WindowManager$LayoutParams $r20;
        com.android.server.wm.WindowSurfaceController $r24;
        long $l6;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.SurfaceControl mSurfaceControl>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r4 = $r3.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i1 = $r4.<android.graphics.Rect: int left>;

        $r5 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowFrames mWindowFrames>;

        $r6 = $r5.<com.android.server.wm.WindowFrames: android.graphics.Rect mFrame>;

        $i0 = $r6.<android.graphics.Rect: int top>;

        $r7 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        specialinvoke r0.<com.android.server.wm.WindowState: void transformFrameToSurfacePosition(int,int,android.graphics.Point)>($i1, $i0, $r7);

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SurfaceAnimator mSurfaceAnimator>;

        $z0 = virtualinvoke $r8.<com.android.server.wm.SurfaceAnimator: boolean hasLeash()>();

        if $z0 != 0 goto label2;

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.SeamlessRotator mPendingSeamlessRotate>;

        if $r9 != null goto label2;

        $r11 = r0.<com.android.server.wm.WindowState: android.graphics.Point mLastSurfacePosition>;

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $z1 = virtualinvoke $r11.<android.graphics.Point: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label2;

        $r14 = r0.<com.android.server.wm.WindowState: android.view.SurfaceControl mSurfaceControl>;

        $r12 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i2 = $r12.<android.graphics.Point: int x>;

        $f1 = (float) $i2;

        $r13 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i3 = $r13.<android.graphics.Point: int y>;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>($r14, $f1, $f0);

        $r18 = r0.<com.android.server.wm.WindowState: android.graphics.Point mLastSurfacePosition>;

        $r16 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i5 = $r16.<android.graphics.Point: int x>;

        $r17 = r0.<com.android.server.wm.WindowState: android.graphics.Point mSurfacePosition>;

        $i4 = $r17.<android.graphics.Point: int y>;

        virtualinvoke $r18.<android.graphics.Point: void set(int,int)>($i5, $i4);

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean surfaceInsetsChanging()>();

        if $z2 == 0 goto label2;

        $r19 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z3 = virtualinvoke $r19.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z3 == 0 goto label2;

        $r22 = r0.<com.android.server.wm.WindowState: android.graphics.Rect mLastSurfaceInsets>;

        $r20 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r21 = $r20.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r22.<android.graphics.Rect: void set(android.graphics.Rect)>($r21);

        $r25 = r0.<com.android.server.wm.WindowState: android.view.SurfaceControl mSurfaceControl>;

        $r23 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r24 = $r23.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r26 = $r24.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        $l6 = virtualinvoke r0.<com.android.server.wm.WindowState: long getFrameNumber()>();

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction deferTransactionUntil(android.view.SurfaceControl,android.view.SurfaceControl,long)>($r25, $r26, $l6);

     label2:
        return;
    }

    void updateTapExcludeRegion(android.graphics.Region)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Region r1, $r4, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.IllegalStateException $r3;
        android.util.ArraySet $r5, $r7;
        boolean $z1;
        com.android.server.wm.InputMonitor $r8;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.graphics.Region;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r2 == null goto label4;

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.graphics.Region: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r6 = r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion>;

        virtualinvoke $r6.<android.graphics.Region: boolean set(android.graphics.Region)>(r1);

        $r7 = r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows>;

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r0);

        goto label3;

     label2:
        $r4 = r0.<com.android.server.wm.WindowState: android.graphics.Region mTapExcludeRegion>;

        virtualinvoke $r4.<android.graphics.Region: void setEmpty()>();

        $r5 = r2.<com.android.server.wm.DisplayContent: android.util.ArraySet mTapExcludeProvidingWindows>;

        virtualinvoke $r5.<android.util.ArraySet: boolean remove(java.lang.Object)>(r0);

     label3:
        virtualinvoke r2.<com.android.server.wm.DisplayContent: void updateTouchExcludeRegion()>();

        $r8 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke $r8.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        return;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to update window not attached to any display.");

        throw $r3;
    }

    boolean waitingForReplacement()
    {
        com.android.server.wm.WindowState r0, $r4;
        boolean $z0, $z1;
        com.android.server.wm.WindowList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mWillReplaceWindow>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.WindowList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildren>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $z1 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean waitingForReplacement()>();

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return 0;
    }

    boolean wouldBeVisibleIfPolicyIgnored()
    {
        com.android.server.wm.WindowState r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;

        r0 := @this: com.android.server.wm.WindowState;

        $z0 = r0.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.wm.WindowState: boolean mAnimatingExit>;

        if $z2 != 0 goto label2;

        $z3 = r0.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z3 != 0 goto label2;

        $z4 = r0.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z4 == 0 goto label1;

        $z5 = r0.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z5 == 0 goto label2;

     label1:
        z6 = 1;

        goto label3;

     label2:
        z6 = 0;

     label3:
        return z6;
    }

    public void writeIdentifierToProto(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.wm.WindowState r0;
        android.util.proto.ProtoOutputStream r1;
        java.lang.CharSequence r2;
        int $i0, $i1;
        java.lang.String $r3;
        long l2, l3;

        r0 := @this: com.android.server.wm.WindowState;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l2 := @parameter1: long;

        l3 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l2);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i0);

        $i1 = r0.<com.android.server.wm.WindowState: int mShowUserId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        r2 = virtualinvoke r0.<com.android.server.wm.WindowState: java.lang.CharSequence getWindowTag()>();

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, $r3);

     label1:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l3);

        return;
    }
}
