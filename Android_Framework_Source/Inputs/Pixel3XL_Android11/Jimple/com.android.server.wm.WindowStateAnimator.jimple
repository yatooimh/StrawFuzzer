class com.android.server.wm.WindowStateAnimator extends java.lang.Object
{
    static final int COMMIT_DRAW_PENDING;
    static final int DRAW_PENDING;
    static final int HAS_DRAWN;
    static final int NO_SURFACE;
    static final int PRESERVED_SURFACE_LAYER;
    static final int READY_TO_SHOW;
    static final int STACK_CLIP_AFTER_ANIM;
    static final int STACK_CLIP_BEFORE_ANIM;
    static final int STACK_CLIP_NONE;
    static final java.lang.String TAG;
    static final int WINDOW_FREEZE_LAYER;
    float mAlpha;
    boolean mAnimationIsEntrance;
    final com.android.server.wm.WindowAnimator mAnimator;
    int mAttrType;
    final android.content.Context mContext;
    private boolean mDestroyPreservedSurfaceUponRedraw;
    int mDrawState;
    float mDsDx;
    float mDsDy;
    float mDtDx;
    float mDtDy;
    boolean mEnterAnimationPending;
    boolean mEnteringAnimation;
    float mExtraHScale;
    float mExtraVScale;
    boolean mForceScaleUntilResize;
    boolean mHaveMatrix;
    final boolean mIsWallpaper;
    float mLastAlpha;
    android.graphics.Rect mLastClipRect;
    private float mLastDsDx;
    private float mLastDsDy;
    private float mLastDtDx;
    private float mLastDtDy;
    android.graphics.Rect mLastFinalClipRect;
    boolean mLastHidden;
    private boolean mOffsetPositionForStackResize;
    private com.android.server.wm.WindowSurfaceController mPendingDestroySurface;
    boolean mPipAnimationStarted;
    final com.android.server.policy.WindowManagerPolicy mPolicy;
    private final android.view.SurfaceControl$Transaction mPostDrawTransaction;
    boolean mReportSurfaceResized;
    final com.android.server.wm.WindowManagerService mService;
    final com.android.server.wm.Session mSession;
    float mShownAlpha;
    com.android.server.wm.WindowSurfaceController mSurfaceController;
    boolean mSurfaceDestroyDeferred;
    int mSurfaceFormat;
    boolean mSurfaceResized;
    private final android.graphics.Rect mSystemDecorRect;
    private android.graphics.Rect mTmpAnimatingBounds;
    android.graphics.Rect mTmpClipRect;
    private final android.graphics.Point mTmpPos;
    private final android.graphics.Rect mTmpSize;
    private android.graphics.Rect mTmpSourceBounds;
    android.graphics.Rect mTmpStackBounds;
    private final android.view.SurfaceControl$Transaction mTmpTransaction;
    private final com.android.server.wm.WallpaperController mWallpaperControllerLocked;
    float mWallpaperScale;
    final com.android.server.wm.WindowState mWin;
    int mXOffset;
    int mYOffset;

    void <init>(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowManagerService r2;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        android.view.SurfaceControl$Transaction $r11, $r15;
        android.graphics.Point $r12;
        java.util.function.Supplier $r13;
        java.lang.Object $r14;
        com.android.server.wm.WindowAnimator $r16;
        com.android.server.policy.WindowManagerPolicy $r17;
        android.content.Context $r18;
        com.android.server.wm.Session $r19;
        android.view.WindowManager$LayoutParams $r20;
        int $i0;
        boolean $z0;
        com.android.server.wm.DisplayContent $r21;
        com.android.server.wm.WallpaperController $r22;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: com.android.server.wm.WindowState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mAlpha> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastAlpha> = 0.0F;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpClipRect> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastFinalClipRect> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mSystemDecorRect> = $r9;

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDx> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDx> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDy> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDy> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDx> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDx> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDy> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDy> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: int mXOffset> = 0;

        r0.<com.android.server.wm.WindowStateAnimator: int mYOffset> = 0;

        r0.<com.android.server.wm.WindowStateAnimator: float mWallpaperScale> = 1.0F;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize> = $r10;

        $r11 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r11.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction> = $r11;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mPipAnimationStarted> = 0;

        $r12 = new android.graphics.Point;

        specialinvoke $r12.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos> = $r12;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowManagerService mWmService>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService> = r2;

        $r13 = r2.<com.android.server.wm.WindowManagerService: java.util.function.Supplier mTransactionFactory>;

        $r14 = interfaceinvoke $r13.<java.util.function.Supplier: java.lang.Object get()>();

        $r15 = (android.view.SurfaceControl$Transaction) $r14;

        r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mTmpTransaction> = $r15;

        $r16 = r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowAnimator mAnimator> = $r16;

        $r17 = r2.<com.android.server.wm.WindowManagerService: com.android.server.policy.WindowManagerPolicy mPolicy>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.policy.WindowManagerPolicy mPolicy> = $r17;

        $r18 = r2.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r0.<com.android.server.wm.WindowStateAnimator: android.content.Context mContext> = $r18;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin> = r1;

        $r19 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession> = $r19;

        $r20 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r20.<android.view.WindowManager$LayoutParams: int type>;

        r0.<com.android.server.wm.WindowStateAnimator: int mAttrType> = $i0;

        $z0 = r1.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper> = $z0;

        $r21 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r22 = $r21.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WallpaperController mWallpaperControllerLocked> = $r22;

        return;
    }

    private void applyCrop(android.graphics.Rect, boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.graphics.Rect r1, $r3, $r4;
        boolean z0, $z1;
        com.android.server.wm.WindowSurfaceController $r2, $r5;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r5.<com.android.server.wm.WindowSurfaceController: void setCropInTransaction(android.graphics.Rect,boolean)>(r1, z0);

        goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r2.<com.android.server.wm.WindowSurfaceController: void clearCropInTransaction(boolean)>(z0);

     label2:
        return;
    }

    private boolean calculateCrop(android.graphics.Rect)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.graphics.Rect r1, $r6, $r7, $r9, $r11;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.DisplayContent r3;
        android.app.WindowConfiguration $r4;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        android.view.WindowManager$LayoutParams $r5, $r8, $r10;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r3 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        if r3 != null goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r2.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $z0 = virtualinvoke $r4.<android.app.WindowConfiguration: boolean tasksAreFloating()>();

        if $z0 != 0 goto label5;

        $i0 = virtualinvoke r2.<com.android.server.wm.WindowState: int getWindowingMode()>();

        $z1 = staticinvoke <android.app.WindowConfiguration: boolean isSplitScreenWindowingMode(int)>($i0);

        if $z1 == 0 goto label2;

        goto label5;

     label2:
        $z2 = r2.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r5 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2013 goto label4;

        return 0;

     label4:
        $r6 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mSystemDecorRect>;

        virtualinvoke r2.<com.android.server.wm.WindowState: void calculatePolicyCrop(android.graphics.Rect)>($r6);

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mSystemDecorRect>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        virtualinvoke r2.<com.android.server.wm.WindowState: void expandForSurfaceInsets(android.graphics.Rect)>(r1);

        $r8 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r9 = $r8.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i3 = $r9.<android.graphics.Rect: int left>;

        $r10 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r11 = $r10.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i2 = $r11.<android.graphics.Rect: int top>;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

        virtualinvoke r2.<com.android.server.wm.WindowState: void transformClipRectFromScreenToSurfaceSpace(android.graphics.Rect)>(r1);

        return 1;

     label5:
        return 0;
    }

    private void calculateSurfaceBounds(com.android.server.wm.WindowState, android.view.WindowManager$LayoutParams, android.graphics.Rect)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        com.android.server.wm.WindowState r7;
        android.view.DisplayInfo r8;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r7 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.view.WindowManager$LayoutParams;

        r2 := @parameter2: android.graphics.Rect;

        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $i13 = r7.<com.android.server.wm.WindowState: int mRequestedWidth>;

        r2.<android.graphics.Rect: int right> = $i13;

        $i14 = r7.<com.android.server.wm.WindowState: int mRequestedHeight>;

        r2.<android.graphics.Rect: int bottom> = $i14;

        goto label3;

     label1:
        $z0 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isDragResizing()>();

        if $z0 == 0 goto label2;

        r8 = virtualinvoke r7.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $i11 = r8.<android.view.DisplayInfo: int logicalWidth>;

        r2.<android.graphics.Rect: int right> = $i11;

        $i12 = r8.<android.view.DisplayInfo: int logicalHeight>;

        r2.<android.graphics.Rect: int bottom> = $i12;

        goto label3;

     label2:
        virtualinvoke r7.<com.android.server.wm.WindowState: void getCompatFrameSize(android.graphics.Rect)>(r2);

     label3:
        $i15 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        if $i15 >= 1 goto label4;

        r2.<android.graphics.Rect: int right> = 1;

     label4:
        $i2 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        if $i2 >= 1 goto label5;

        r2.<android.graphics.Rect: int bottom> = 1;

     label5:
        $r3 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i3 = $r3.<android.graphics.Rect: int left>;

        $i10 = neg $i3;

        $r4 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i4 = $r4.<android.graphics.Rect: int top>;

        $i9 = neg $i4;

        $r5 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i5 = $r5.<android.graphics.Rect: int right>;

        $i8 = neg $i5;

        $r6 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i6 = $r6.<android.graphics.Rect: int bottom>;

        $i7 = neg $i6;

        virtualinvoke r2.<android.graphics.Rect: void inset(int,int,int,int)>($i10, $i9, $i8, $i7);

        return;
    }

    private void markPreservedSurfaceForDestroy()
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService $r1, $r4;
        com.android.server.wm.WindowState $r2, $r5;
        java.util.ArrayList $r3, $r6;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r1.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface>;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r4.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroyPreservedSurface>;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label1:
        return;
    }

    private void setWallpaperPositionAndScale(int, int, float, boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        int i0, i1, $i2, $i3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36;
        boolean z0;
        android.view.DisplayInfo r1;
        android.graphics.Matrix r2;
        com.android.server.wm.WindowState $r3, $r4, $r5, $r7, $r9, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23;
        float[] $r6, $r8, $r10, $r13, $r16, $r19, $r22;
        com.android.server.wm.WindowSurfaceController $r11, $r24;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        z0 := @parameter3: boolean;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = virtualinvoke $r3.<com.android.server.wm.WindowState: android.view.DisplayInfo getDisplayInfo()>();

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r2 = $r4.<com.android.server.wm.WindowState: android.graphics.Matrix mTmpMatrix>;

        $f2 = (float) i0;

        $f1 = (float) i1;

        virtualinvoke r2.<android.graphics.Matrix: void setTranslate(float,float)>($f2, $f1);

        $i2 = r1.<android.view.DisplayInfo: int logicalWidth>;

        $f3 = (float) $i2;

        $f6 = $f3 / 2.0F;

        $i3 = r1.<android.view.DisplayInfo: int logicalHeight>;

        $f4 = (float) $i3;

        $f5 = $f4 / 2.0F;

        virtualinvoke r2.<android.graphics.Matrix: boolean postScale(float,float,float,float)>(f0, f0, $f6, $f5);

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r6 = $r5.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        virtualinvoke r2.<android.graphics.Matrix: void getValues(float[])>($r6);

        virtualinvoke r2.<android.graphics.Matrix: void reset()>();

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r8 = $r7.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f8 = $r8[2];

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r10 = $r9.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f7 = $r10[5];

        virtualinvoke $r11.<com.android.server.wm.WindowSurfaceController: void setPositionInTransaction(float,float,boolean)>($f8, $f7, z0);

        $r24 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $f10 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $r12 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r13 = $r12.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f9 = $r13[0];

        $f12 = $f10 * $f9;

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f11 = $r14.<com.android.server.wm.WindowState: float mHScale>;

        $f14 = $f12 * $f11;

        $f13 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f36 = $f14 * $f13;

        $f16 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $r15 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r16 = $r15.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f15 = $r16[3];

        $f18 = $f16 * $f15;

        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f17 = $r17.<com.android.server.wm.WindowState: float mVScale>;

        $f20 = $f18 * $f17;

        $f19 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f35 = $f20 * $f19;

        $f22 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $r18 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r19 = $r18.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f21 = $r19[1];

        $f24 = $f22 * $f21;

        $r20 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f23 = $r20.<com.android.server.wm.WindowState: float mHScale>;

        $f26 = $f24 * $f23;

        $f25 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f34 = $f26 * $f25;

        $f28 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $r21 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r22 = $r21.<com.android.server.wm.WindowState: float[] mTmpMatrixArray>;

        $f27 = $r22[4];

        $f30 = $f28 * $f27;

        $r23 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f29 = $r23.<com.android.server.wm.WindowState: float mVScale>;

        $f32 = $f30 * $f29;

        $f31 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f33 = $f32 * $f31;

        virtualinvoke $r24.<com.android.server.wm.WindowSurfaceController: void setMatrixInTransaction(float,float,float,float,boolean)>($f36, $f35, $f34, $f33, z0);

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void applyCrop(android.graphics.Rect,boolean)>(null, z0);

        return;
    }

    private boolean shouldConsumeMainWindowSizeTransaction()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.WindowState $r2, $r3, $r5;
        boolean $z0, $z1;
        int $i0;
        android.view.SurfaceControl$Transaction $r4;
        com.android.server.wm.ActivityRecord $r6;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z0 = $r2.<com.android.server.wm.WindowState: boolean mInRelayout>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = r0.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if $i0 == 1 goto label2;

        return 0;

     label2:
        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = virtualinvoke $r3.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r1 != null goto label3;

        return 0;

     label3:
        $r4 = virtualinvoke r1.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getMainWindowSizeChangeTransaction()>();

        if $r4 != null goto label4;

        return 0;

     label4:
        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r6 = $r5.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z1 = virtualinvoke $r6.<com.android.server.wm.ActivityRecord: boolean isRootOfTask()>();

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean showSurfaceRobustlyLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState $r1;
        android.app.WindowConfiguration $r2;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.WindowSurfaceController $r3, $r6, $r7, $r10, $r13, r14;
        android.view.SurfaceControl$Transaction $r4, $r8, $r16;
        android.view.SurfaceControl $r9, $r11, r15;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowState: android.app.WindowConfiguration getWindowConfiguration()>();

        $z0 = virtualinvoke $r2.<android.app.WindowConfiguration: boolean windowsAreScaleable()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r13.<com.android.server.wm.WindowSurfaceController: void forceScaleableInTransaction(boolean)>(1);

     label1:
        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $z1 = virtualinvoke $r3.<com.android.server.wm.WindowSurfaceController: boolean showRobustlyInTransaction()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if r14 == null goto label3;

        $z2 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z2 == 0 goto label3;

        r15 = r14.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>(r15, null);

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        $z3 = $r6.<com.android.server.wm.WindowSurfaceController: boolean mChildrenDetached>;

        if $z3 != 0 goto label3;

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        $r9 = virtualinvoke $r7.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl getClientViewRootSurface()>();

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r11 = $r10.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r8.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparentChildren(android.view.SurfaceControl,android.view.SurfaceControl)>($r9, $r11);

     label3:
        $r16 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        staticinvoke <android.view.SurfaceControl: void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)>($r16);

        return 1;
    }

    boolean applyAnimationLocked(int, boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0, $z1, $z2, z3, $z4, $z5;
        int i0, $i2, i3;
        com.android.server.wm.WindowState $r1, $r2, $r4, $r6, $r7, $r10, $r11, $r12, $r14, $r18, $r20, $r23, $r26;
        android.view.WindowManager$LayoutParams $r3, $r15;
        com.android.server.wm.DisplayContent $r5, $r8, $r13, $r19;
        com.android.server.wm.DisplayPolicy $r9;
        com.android.server.wm.AppTransition $r16;
        android.content.Context $r17;
        com.android.server.wm.WindowManagerService $r21;
        com.android.server.wm.WindowSurfacePlacer $r22;
        com.android.server.wm.WindowToken $r24;
        android.view.animation.Animation r25;
        byte b4;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z1 = virtualinvoke $r1.<com.android.server.wm.WindowState: boolean isAnimating()>();

        if $z1 == 0 goto label01;

        $z2 = r0.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance>;

        if $z2 != z0 goto label01;

        return 1;

     label01:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r3 = $r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2011 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        if z0 == 0 goto label04;

        if z3 == 0 goto label04;

        $r18 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r19 = virtualinvoke $r18.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r19.<com.android.server.wm.DisplayContent: void adjustForImeIfNeeded()>();

        $r20 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r20.<com.android.server.wm.WindowState: void setDisplayLayoutNeeded()>();

        $r21 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r22 = $r21.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowSurfacePlacer mWindowPlacerLocked>;

        virtualinvoke $r22.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label04:
        $r23 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r24 = $r23.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $z4 = virtualinvoke $r24.<com.android.server.wm.WindowToken: boolean okToAnimate()>();

        if $z4 == 0 goto label12;

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r9 = virtualinvoke $r8.<com.android.server.wm.DisplayContent: com.android.server.wm.DisplayPolicy getDisplayPolicy()>();

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        i0 = virtualinvoke $r9.<com.android.server.wm.DisplayPolicy: int selectAnimation(com.android.server.wm.WindowState,int)>($r10, i3);

        r25 = null;

        if i0 == 0 goto label05;

        if i0 == -1 goto label11;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "WSA#loadAnimation");

        $r17 = r0.<com.android.server.wm.WindowStateAnimator: android.content.Context mContext>;

        r25 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r17, i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        goto label11;

     label05:
        if i3 == 1 goto label09;

        if i3 == 2 goto label08;

        if i3 == 3 goto label07;

        if i3 == 4 goto label06;

        b4 = -1;

        goto label10;

     label06:
        b4 = 3;

        goto label10;

     label07:
        b4 = 2;

        goto label10;

     label08:
        b4 = 1;

        goto label10;

     label09:
        b4 = 0;

     label10:
        if b4 < 0 goto label11;

        $r12 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r16 = $r13.<com.android.server.wm.DisplayContent: com.android.server.wm.AppTransition mAppTransition>;

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r15 = $r14.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        r25 = virtualinvoke $r16.<com.android.server.wm.AppTransition: android.view.animation.Animation loadAnimationAttr(android.view.WindowManager$LayoutParams,int,int)>($r15, b4, 0);

     label11:
        if r25 == null goto label13;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "WSA#startAnimation");

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r11.<com.android.server.wm.WindowState: void startAnimation(android.view.animation.Animation)>(r25);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        r0.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance> = z0;

        goto label13;

     label12:
        if z3 != 0 goto label13;

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r6.<com.android.server.wm.WindowState: void cancelAnimation()>();

        goto label13;

     label13:
        if z0 != 0 goto label14;

        if z3 == 0 goto label14;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r5 = virtualinvoke $r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke $r5.<com.android.server.wm.DisplayContent: void adjustForImeIfNeeded()>();

     label14:
        $r26 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z5 = virtualinvoke $r26.<com.android.server.wm.WindowState: boolean isAnimating(int)>(2);

        return $z5;
    }

    void applyEnterAnimationLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState $r1, $r5;
        boolean $z0, $z1;
        int $i0;
        com.android.server.wm.WindowManagerService $r2, $r4;
        com.android.server.wm.AccessibilityController $r3, $r6;
        byte b1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z0 = $r1.<com.android.server.wm.WindowState: boolean mSkipEnterAnimationForSeamlessReplacement>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending>;

        if $z1 == 0 goto label2;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 0;

        b1 = 1;

        goto label3;

     label2:
        b1 = 3;

     label3:
        $i0 = r0.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if $i0 == 1 goto label4;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(b1, 1);

     label4:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r3 == null goto label5;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r6 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r6.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>($r5, b1);

     label5:
        return;
    }

    boolean commitFinishDrawingLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        int i0, $i1;
        com.android.server.wm.ActivityRecord r1;
        com.android.server.wm.WindowState $r2, $r3, $r5;
        boolean $z0, z1;
        android.view.WindowManager$LayoutParams $r4;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i0 = r0.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        return 0;

     label1:
        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 3;

        z1 = 0;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = $r2.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.ActivityRecord: boolean canShowWindows()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r4 = $r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label3;

     label2:
        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        z1 = virtualinvoke $r5.<com.android.server.wm.WindowState: boolean performShowLocked()>();

     label3:
        return z1;
    }

    void computeShownFrameLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.ScreenRotationAnimation r1;
        boolean z0, $z1, $z2, $z3, $z4, $z7, $z8, $z9, $z10, $z11, z12;
        android.graphics.Rect r2, $r20, $r23;
        float[] r3;
        android.graphics.Matrix r4;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26;
        com.android.server.wm.WindowState $r5, $r7, $r8, $r9, $r10, $r13, $r15, $r16, $r17, $r18, $r21, $r25, $r27;
        com.android.server.wm.DisplayContent $r6;
        com.android.server.wm.WindowManagerService $r11, $r14, $r24;
        com.android.server.wm.RootWindowContainer $r12;
        android.view.WindowManager$LayoutParams $r19, $r22, $r26;
        int $i0, $i1, $i2, $i3, $i4;
        byte $b5, $b6;
        android.view.animation.Transformation $r28;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        r1 = virtualinvoke $r6.<com.android.server.wm.DisplayContent: com.android.server.wm.ScreenRotationAnimation getRotationAnimation()>();

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        z0 = $r7.<com.android.server.wm.WindowState: boolean mForceSeamlesslyRotate>;

        if r1 == null goto label01;

        $z10 = virtualinvoke r1.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z10 == 0 goto label01;

        $z11 = z0 ^ 1;

        if $z11 == 0 goto label01;

        z12 = 1;

        goto label02;

     label01:
        z12 = 0;

     label02:
        if z12 == 0 goto label09;

        $r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r2 = virtualinvoke $r13.<com.android.server.wm.WindowState: android.graphics.Rect getFrameLw()>();

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        r3 = $r14.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r15 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r4 = $r15.<com.android.server.wm.WindowState: android.graphics.Matrix mTmpMatrix>;

        $z4 = virtualinvoke r1.<com.android.server.wm.ScreenRotationAnimation: boolean isRotating()>();

        if $z4 == 0 goto label05;

        $i3 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        f0 = (float) $i3;

        $i4 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        f1 = (float) $i4;

        $b5 = f0 cmpl 1.0F;

        if $b5 < 0 goto label03;

        $b6 = f1 cmpl 1.0F;

        if $b6 < 0 goto label03;

        $f18 = 2.0F / f0;

        $f23 = $f18 + 1.0F;

        $f19 = 2.0F / f1;

        $f22 = $f19 + 1.0F;

        $f21 = f0 / 2.0F;

        $f20 = f1 / 2.0F;

        virtualinvoke r4.<android.graphics.Matrix: void setScale(float,float,float,float)>($f23, $f22, $f21, $f20);

        goto label04;

     label03:
        virtualinvoke r4.<android.graphics.Matrix: void reset()>();

     label04:
        goto label06;

     label05:
        virtualinvoke r4.<android.graphics.Matrix: void reset()>();

     label06:
        $r16 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f6 = $r16.<com.android.server.wm.WindowState: float mGlobalScale>;

        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f5 = $r17.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke r4.<android.graphics.Matrix: boolean postScale(float,float)>($f6, $f5);

        $r18 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r19 = $r18.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r20 = $r19.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i0 = $r20.<android.graphics.Rect: int left>;

        $f8 = (float) $i0;

        $r21 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r22 = $r21.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r23 = $r22.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i1 = $r23.<android.graphics.Rect: int top>;

        $f7 = (float) $i1;

        virtualinvoke r4.<android.graphics.Matrix: boolean postTranslate(float,float)>($f8, $f7);

        r0.<com.android.server.wm.WindowStateAnimator: boolean mHaveMatrix> = 1;

        virtualinvoke r4.<android.graphics.Matrix: void getValues(float[])>(r3);

        $f9 = r3[0];

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDx> = $f9;

        $f10 = r3[3];

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDx> = $f10;

        $f11 = r3[1];

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDy> = $f11;

        $f12 = r3[4];

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDy> = $f12;

        $f13 = r0.<com.android.server.wm.WindowStateAnimator: float mAlpha>;

        r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha> = $f13;

        $r24 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $z7 = $r24.<com.android.server.wm.WindowManagerService: boolean mLimitedAlphaCompositing>;

        if $z7 == 0 goto label07;

        $r25 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r26 = $r25.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r26.<android.view.WindowManager$LayoutParams: int format>;

        $z8 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i2);

        if $z8 == 0 goto label07;

        $r27 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f17 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $f16 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $f15 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $f14 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $z9 = virtualinvoke $r27.<com.android.server.wm.WindowState: boolean isIdentityMatrix(float,float,float,float)>($f17, $f16, $f15, $f14);

        if $z9 == 0 goto label08;

     label07:
        $f24 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        $r28 = virtualinvoke r1.<com.android.server.wm.ScreenRotationAnimation: android.view.animation.Transformation getEnterTransformation()>();

        $f25 = virtualinvoke $r28.<android.view.animation.Transformation: float getAlpha()>();

        $f26 = $f24 * $f25;

        r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha> = $f26;

     label08:
        return;

     label09:
        $z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z1 == 0 goto label10;

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z3 = $r12.<com.android.server.wm.RootWindowContainer: boolean mWallpaperActionPending>;

        if $z3 == 0 goto label10;

        return;

     label10:
        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z2 = virtualinvoke $r8.<com.android.server.wm.WindowState: boolean isDragResizeChanged()>();

        if $z2 == 0 goto label11;

        return;

     label11:
        $f2 = r0.<com.android.server.wm.WindowStateAnimator: float mAlpha>;

        r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha> = $f2;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mHaveMatrix> = 0;

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f3 = $r9.<com.android.server.wm.WindowState: float mGlobalScale>;

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDx> = $f3;

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDx> = 0.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mDtDy> = 0.0F;

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f4 = $r10.<com.android.server.wm.WindowState: float mGlobalScale>;

        r0.<com.android.server.wm.WindowStateAnimator: float mDsDy> = $f4;

        return;
    }

    com.android.server.wm.WindowSurfaceController createSurfaceLocked(int, int)
    {
        com.android.server.wm.WindowStateAnimator r0;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i17, i18, i19, i21, $i22, $i23, i24;
        long l2, l3, l4;
        com.android.server.wm.WindowState $r2, r32;
        android.view.WindowManager$LayoutParams $r3, r34;
        com.android.server.wm.WindowManagerService $r4, $r48;
        boolean $z0, $z1, $z2, z4, z5, z6;
        android.graphics.Rect $r5, $r6, $r7, $r8, $r18, $r19, $r20, $r21;
        com.android.server.wm.WindowSurfaceController $r9, $r10, r33, r35;
        com.android.server.wm.Session $r11, $r13;
        android.view.SurfaceSession $r12;
        java.lang.Object[] $r14;
        java.lang.Long $r15, $r16, $r17;
        java.lang.Exception $r22, $r25, $r27, $r29, $r31, r42;
        android.view.Surface$OutOfResourcesException $r23, $r24, $r26, $r28, $r30;
        short s20;
        java.lang.CharSequence $r36;
        java.lang.String r37, r38, r39, r40;
        com.android.server.wm.ProtoLogGroup r41;
        com.android.server.wm.RootWindowContainer $r49;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i17 := @parameter0: int;

        i18 := @parameter1: int;

        r32 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r33 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r33 == null goto label01;

        return r33;

     label01:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r3 = $r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r3.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i6 = $i5 & 1048576;

        if $i6 == 0 goto label02;

        i19 = 441731;

        goto label03;

     label02:
        i19 = i17;

     label03:
        virtualinvoke r32.<com.android.server.wm.WindowState: void setHasSurface(boolean)>(0);

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void resetDrawState()>();

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)>(r32);

        r34 = r32.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = virtualinvoke r32.<com.android.server.wm.WindowState: boolean isSecureLocked()>();

        if $z0 == 0 goto label04;

        s20 = 4 | 128;

        goto label05;

     label04:
        s20 = 4;

     label05:
        $r5 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void calculateSurfaceBounds(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,android.graphics.Rect)>(r32, r34, $r5);

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        i0 = virtualinvoke $r6.<android.graphics.Rect: int width()>();

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        i1 = virtualinvoke $r7.<android.graphics.Rect: int height()>();

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        virtualinvoke $r8.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

     label06:
        $i7 = r34.<android.view.WindowManager$LayoutParams: int flags>;

        $i8 = $i7 & 16777216;

        if $i8 == 0 goto label08;

     label07:
        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        if z4 == 0 goto label10;

        i21 = -3;

        goto label11;

     label10:
        i21 = r34.<android.view.WindowManager$LayoutParams: int format>;

     label11:
        $i9 = r34.<android.view.WindowManager$LayoutParams: int format>;

        $z1 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i9);

        if $z1 != 0 goto label13;

        $r18 = r34.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i11 = $r18.<android.graphics.Rect: int left>;

        if $i11 != 0 goto label13;

        $r19 = r34.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i12 = $r19.<android.graphics.Rect: int top>;

        if $i12 != 0 goto label13;

        $r20 = r34.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i13 = $r20.<android.graphics.Rect: int right>;

        if $i13 != 0 goto label13;

        $r21 = r34.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i14 = $r21.<android.graphics.Rect: int bottom>;

        if $i14 != 0 goto label13;

        z5 = virtualinvoke r32.<com.android.server.wm.WindowState: boolean isDragResizing()>();

     label12:
        if z5 != 0 goto label13;

        s20 = s20 | 1024;

        goto label13;

     label13:
        r35 = new com.android.server.wm.WindowSurfaceController;

        $r36 = virtualinvoke r34.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        r37 = interfaceinvoke $r36.<java.lang.CharSequence: java.lang.String toString()>();

     label14:
        specialinvoke r35.<com.android.server.wm.WindowSurfaceController: void <init>(java.lang.String,int,int,int,int,com.android.server.wm.WindowStateAnimator,int,int)>(r37, i0, i1, i21, s20, r0, i19, i18);

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController> = r35;

        $i22 = r34.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i23 = $i22 & 16777216;

        if $i23 == 0 goto label16;

     label15:
        z6 = 1;

        goto label17;

     label16:
        z6 = 0;

     label17:
        virtualinvoke r35.<com.android.server.wm.WindowSurfaceController: void setColorSpaceAgnostic(boolean)>(z6);

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void setOffsetPositionForStackResize(boolean)>(0);

        r0.<com.android.server.wm.WindowStateAnimator: int mSurfaceFormat> = i21;

        virtualinvoke r32.<com.android.server.wm.WindowState: void setHasSurface(boolean)>(1);

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_SURFACE_ALLOC_enabled>;

        if $z2 == 0 goto label28;

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $r12 = $r11.<com.android.server.wm.Session: android.view.SurfaceSession mSurfaceSession>;

        r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i10 = $r13.<com.android.server.wm.Session: int mPid>;

        l2 = (long) $i10;

        i24 = r34.<android.view.WindowManager$LayoutParams: int format>;

     label18:
        l3 = (long) i24;

        l4 = (long) s20;

     label19:
        r40 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r41 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_SURFACE_ALLOC>;

     label20:
        $r14 = newarray (java.lang.Object)[6];

        $r14[0] = r38;

        $r14[1] = r39;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r14[2] = $r15;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r14[3] = $r16;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r14[4] = $r17;

        $r14[5] = r40;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>(r41, 745391677, 336, null, $r14);

     label21:
        goto label28;

     label22:
        $r29 := @caughtexception;

        r42 = $r29;

        goto label25;

     label23:
        $r30 := @caughtexception;

        goto label27;

     label24:
        $r27 := @caughtexception;

        r42 = $r27;

     label25:
        goto label34;

     label26:
        $r26 := @caughtexception;

     label27:
        goto label36;

     label28:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden> = 1;

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        return $r9;

     label29:
        $r25 := @caughtexception;

        r42 = $r25;

        goto label34;

     label30:
        $r24 := @caughtexception;

        goto label36;

     label31:
        $r31 := @caughtexception;

        r42 = $r31;

        goto label34;

     label32:
        $r23 := @caughtexception;

        goto label36;

     label33:
        $r22 := @caughtexception;

        r42 = $r22;

     label34:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Exception creating surface (parent dead?)", r42);

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 0;

        return null;

     label35:
        $r28 := @caughtexception;

     label36:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "OutOfResourcesException creating surface");

        $r48 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r49 = $r48.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r49.<com.android.server.wm.RootWindowContainer: boolean reclaimSomeSurfaceMemory(com.android.server.wm.WindowStateAnimator,java.lang.String,boolean)>(r0, "create", 1);

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 0;

        return null;

        catch android.view.Surface$OutOfResourcesException from label06 to label07 with label35;
        catch java.lang.Exception from label06 to label07 with label33;
        catch android.view.Surface$OutOfResourcesException from label10 to label11 with label35;
        catch java.lang.Exception from label10 to label11 with label33;
        catch android.view.Surface$OutOfResourcesException from label11 to label12 with label35;
        catch java.lang.Exception from label11 to label12 with label33;
        catch android.view.Surface$OutOfResourcesException from label13 to label14 with label32;
        catch java.lang.Exception from label13 to label14 with label31;
        catch android.view.Surface$OutOfResourcesException from label14 to label15 with label30;
        catch java.lang.Exception from label14 to label15 with label29;
        catch android.view.Surface$OutOfResourcesException from label17 to label18 with label30;
        catch java.lang.Exception from label17 to label18 with label29;
        catch android.view.Surface$OutOfResourcesException from label19 to label20 with label26;
        catch java.lang.Exception from label19 to label20 with label24;
        catch android.view.Surface$OutOfResourcesException from label20 to label21 with label23;
        catch java.lang.Exception from label20 to label21 with label22;
    }

    void destroyDeferredSurfaceLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowSurfaceController $r1, $r2, $r14;
        boolean $z0, $z1;
        com.android.server.wm.WindowState $r3, $r5;
        com.android.server.wm.WallpaperController $r4;
        java.lang.Throwable $r6;
        java.lang.Object[] $r7;
        com.android.server.wm.ProtoLogGroup $r8;
        java.lang.RuntimeException $r9, r24;
        java.lang.StringBuilder $r10;
        com.android.server.wm.Session $r17;
        java.lang.String $r20, $r22, r23, r25;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

     label1:
        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if $r1 == null goto label3;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_SURFACE_ALLOC_enabled>;

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        r24 = new java.lang.RuntimeException;

        specialinvoke r24.<java.lang.RuntimeException: void <init>()>();

        $r6 = virtualinvoke r24.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_SURFACE_ALLOC>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r23;

        $r7[1] = r25;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -477481651, 0, null, $r7);

     label2:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        virtualinvoke $r2.<com.android.server.wm.WindowSurfaceController: void destroyNotInTransaction()>();

        $z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z1 != 0 goto label3;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WallpaperController mWallpaperControllerLocked>;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r4.<com.android.server.wm.WallpaperController: void hideWallpapers(com.android.server.wm.WindowState)>($r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when destroying Window ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface ");

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" session ");

        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = virtualinvoke $r9.<java.lang.RuntimeException: java.lang.String toString()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r22);

     label5:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = 0;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface> = null;

        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    void destroyPreservedSurfaceLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowSurfaceController r1, $r2, $r5, $r8;
        boolean $z0, $z1, $z2;
        com.android.server.wm.WindowState $r3, $r11;
        com.android.server.wm.ActivityRecord $r4, $r12;
        android.view.SurfaceControl$Transaction $r6, $r10;
        android.view.SurfaceControl $r7, $r9;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r2 == null goto label3;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if r1 == null goto label3;

        $z1 = r1.<com.android.server.wm.WindowSurfaceController: boolean mChildrenDetached>;

        if $z1 != 0 goto label3;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r4 = $r3.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r4 == null goto label2;

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r12 = $r11.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z2 = virtualinvoke $r12.<com.android.server.wm.ActivityRecord: boolean isRelaunching()>();

        if $z2 != 0 goto label3;

     label2:
        $r6 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        $r7 = virtualinvoke $r5.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl getClientViewRootSurface()>();

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r9 = $r8.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        $r10 = virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparentChildren(android.view.SurfaceControl,android.view.SurfaceControl)>($r7, $r9);

        virtualinvoke $r10.<android.view.SurfaceControl$Transaction: void apply()>();

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void destroyDeferredSurfaceLocked()>();

        r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw> = 0;

        return;
    }

    void destroySurface()
    {
        com.android.server.wm.WindowStateAnimator r0;
        java.lang.StringBuilder r1;
        com.android.server.wm.WindowSurfaceController $r2, $r3, $r8;
        java.lang.RuntimeException $r4;
        com.android.server.wm.Session $r11;
        java.lang.String $r15;
        java.lang.Throwable $r16;
        com.android.server.wm.WindowState $r17, $r18;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

     label1:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r3.<com.android.server.wm.WindowSurfaceController: void destroyNotInTransaction()>();

     label2:
        $r18 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r18.<com.android.server.wm.WindowState: void setHasSurface(boolean)>(0);

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController> = null;

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 0;

        goto label7;

     label3:
        $r16 := @caughtexception;

        goto label8;

     label4:
        $r4 := @caughtexception;

     label5:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when destroying surface ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface ");

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" session ");

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r15);

     label6:
        goto label2;

     label7:
        return;

     label8:
        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r17.<com.android.server.wm.WindowState: void setHasSurface(boolean)>(0);

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController> = null;

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 0;

        throw $r16;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    void destroySurfaceLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState $r1, $r2, $r3, $r5, $r14, $r18, $r19, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.WallpaperController $r4;
        java.lang.Throwable $r6, $r15;
        java.lang.Object[] $r7, $r16;
        com.android.server.wm.ProtoLogGroup $r8, $r17;
        com.android.server.wm.WindowSurfaceController $r9, $r10, $r11, $r12, $r13, $r26, $r36, $r40, r46;
        java.lang.RuntimeException $r21, r38, r42;
        java.lang.StringBuilder $r22;
        com.android.server.wm.Session $r29;
        java.lang.String $r32, $r34, r37, r39, r41, r43;
        com.android.server.wm.ActivityRecord r35;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r35 = $r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if r35 == null goto label01;

        $r20 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r19 = r35.<com.android.server.wm.ActivityRecord: com.android.server.wm.WindowState startingWindow>;

        if $r20 != $r19 goto label01;

        r35.<com.android.server.wm.ActivityRecord: boolean startingDisplayed> = 0;

     label01:
        $r36 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r36 != null goto label02;

        return;

     label02:
        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z0 != 0 goto label03;

        $r18 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r18.<com.android.server.wm.WindowState: boolean mHidden> = 1;

     label03:
        $z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred>;

        if $z1 == 0 goto label07;

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r9 == null goto label09;

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r11 == $r10 goto label09;

        $r12 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if $r12 == null goto label05;

        $z3 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_SURFACE_ALLOC_enabled>;

        if $z3 == 0 goto label04;

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        r38 = new java.lang.RuntimeException;

        specialinvoke r38.<java.lang.RuntimeException: void <init>()>();

        $r15 = virtualinvoke r38.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        $r17 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_SURFACE_ALLOC>;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r37;

        $r16[1] = r39;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r17, -477481651, 0, null, $r16);

     label04:
        $r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        virtualinvoke $r13.<com.android.server.wm.WindowSurfaceController: void destroyNotInTransaction()>();

     label05:
        $r40 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface> = $r40;

     label06:
        goto label09;

     label07:
        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_SURFACE_ALLOC_enabled>;

        if $z2 == 0 goto label08;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r41 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        r42 = new java.lang.RuntimeException;

        specialinvoke r42.<java.lang.RuntimeException: void <init>()>();

        $r6 = virtualinvoke r42.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_SURFACE_ALLOC>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r41;

        $r7[1] = r43;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, -1391944764, 0, null, $r7);

     label08:
        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void destroySurface()>();

     label09:
        $z4 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z4 != 0 goto label10;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WallpaperController mWallpaperControllerLocked>;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r4.<com.android.server.wm.WallpaperController: void hideWallpapers(com.android.server.wm.WindowState)>($r3);

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when destroying Window ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface ");

        $r26 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" session ");

        $r29 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r32 = virtualinvoke $r21.<java.lang.RuntimeException: java.lang.String toString()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r34);

     label12:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r2.<com.android.server.wm.WindowState: void setHasSurface(boolean)>(0);

        r46 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r46 == null goto label13;

        virtualinvoke r46.<com.android.server.wm.WindowSurfaceController: void setShown(boolean)>(0);

     label13:
        r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController> = null;

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 0;

        return;

        catch java.lang.RuntimeException from label03 to label04 with label11;
        catch java.lang.RuntimeException from label04 to label05 with label11;
        catch java.lang.RuntimeException from label05 to label06 with label11;
        catch java.lang.RuntimeException from label07 to label08 with label11;
        catch java.lang.RuntimeException from label08 to label09 with label11;
        catch java.lang.RuntimeException from label09 to label10 with label11;
    }

    void detachChildren()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowSurfaceController r1;
        com.android.server.wm.WindowState $r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r3 = $r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: void detachChildren()>();

     label2:
        return;
    }

    java.lang.String drawStateToString()
    {
        com.android.server.wm.WindowStateAnimator r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i0 = r0.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r1;

     label1:
        return "HAS_DRAWN";

     label2:
        return "READY_TO_SHOW";

     label3:
        return "COMMIT_DRAW_PENDING";

     label4:
        return "DRAW_PENDING";

     label5:
        return "NO_SURFACE";
    }

    public void dump(java.io.PrintWriter, java.lang.String, boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r6, $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.android.server.wm.WindowState $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        byte $b0, $b1, $b2, $b3;
        com.android.server.wm.WindowSurfaceController $r5, r15, $r17;
        java.lang.StringBuilder $r7;
        android.graphics.Rect $r11, $r12, $r13, $r14;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance>;

        if $z1 == 0 goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAnimationIsEntrance=");

        $z9 = r0.<com.android.server.wm.WindowStateAnimator: boolean mAnimationIsEntrance>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z9);

     label01:
        r15 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r15 == null goto label02;

        virtualinvoke r15.<com.android.server.wm.WindowSurfaceController: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, r2, z0);

     label02:
        if z0 == 0 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mDrawState=");

        $r6 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: java.lang.String drawStateToString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastHidden=");

        $z6 = r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mEnterAnimationPending=");

        $z7 = r0.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mSystemDecorRect=");

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mSystemDecorRect>;

        virtualinvoke $r11.<android.graphics.Rect: void printShortString(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastClipRect=");

        $r12 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        virtualinvoke $r12.<android.graphics.Rect: void printShortString(java.io.PrintWriter)>(r1);

        $r13 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastFinalClipRect>;

        $z8 = virtualinvoke $r13.<android.graphics.Rect: boolean isEmpty()>();

        if $z8 != 0 goto label03;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastFinalClipRect=");

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastFinalClipRect>;

        virtualinvoke $r14.<android.graphics.Rect: void printShortString(java.io.PrintWriter)>(r1);

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label04:
        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if $r17 == null goto label05;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPendingDestroySurface=");

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r5);

     label05:
        $z2 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        if $z2 != 0 goto label06;

        $z5 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred>;

        if $z5 == 0 goto label07;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mSurfaceResized=");

        $z3 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSurfaceDestroyDeferred=");

        $z4 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z4);

     label07:
        $f8 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        $b3 = $f8 cmpl 1.0F;

        if $b3 != 0 goto label08;

        $f6 = r0.<com.android.server.wm.WindowStateAnimator: float mAlpha>;

        $b1 = $f6 cmpl 1.0F;

        if $b1 != 0 goto label08;

        $f7 = r0.<com.android.server.wm.WindowStateAnimator: float mLastAlpha>;

        $b2 = $f7 cmpl 1.0F;

        if $b2 == 0 goto label09;

     label08:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mShownAlpha=");

        $f9 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAlpha=");

        $f10 = r0.<com.android.server.wm.WindowStateAnimator: float mAlpha>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastAlpha=");

        $f11 = r0.<com.android.server.wm.WindowStateAnimator: float mLastAlpha>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f11);

     label09:
        $z10 = r0.<com.android.server.wm.WindowStateAnimator: boolean mHaveMatrix>;

        if $z10 != 0 goto label10;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f5 = $r4.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b0 = $f5 cmpl 1.0F;

        if $b0 == 0 goto label11;

     label10:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mGlobalScale=");

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $f0 = $r3.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDsDx=");

        $f1 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDtDx=");

        $f2 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDtDy=");

        $f3 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDsDy=");

        $f4 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f4);

     label11:
        return;
    }

    void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.util.proto.ProtoOutputStream r1;
        com.android.server.wm.WindowSurfaceController r2;
        android.graphics.Rect $r3, $r4;
        int $i0;
        long l1, l2;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mLastClipRect>;

        virtualinvoke $r3.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.WindowSurfaceController: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268034L);

     label1:
        $i0 = r0.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169923L, $i0);

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mSystemDecorRect>;

        virtualinvoke $r4.<android.graphics.Rect: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268036L);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    boolean finishDrawingLocked(android.view.SurfaceControl$Transaction)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.view.SurfaceControl$Transaction r1, $r4;
        com.android.server.wm.WindowState $r2, $r6, $r9, $r13;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1;
        boolean $z0, $z1, $z2, z3, z6;
        java.lang.Object[] $r7, $r11, $r15;
        com.android.server.wm.ProtoLogGroup $r8, $r12, $r16;
        com.android.server.wm.WindowSurfaceController $r10;
        java.lang.String $r14, r17, r18, r19, r20, r21;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r3 = $r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 == 0 goto label3;

        $z2 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z2 == 0 goto label3;

        $r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        $r14 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: java.lang.String drawStateToString()>();

        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        $r16 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r17;

        $r15[1] = r18;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r16, -344488673, 0, null, $r15);

     label3:
        $i1 = r0.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i1 != 1 goto label6;

        $z0 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_DRAW_enabled>;

        if $z0 == 0 goto label4;

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r12 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_DRAW>;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r19;

        $r11[1] = r20;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r12, -993378225, 0, null, $r11);

     label4:
        if z3 == 0 goto label5;

        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_STARTING_WINDOW_enabled>;

        if $z1 == 0 goto label5;

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r8 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_STARTING_WINDOW>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r21;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r8, 829434921, 0, null, $r7);

     label5:
        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 2;

        z6 = 1;

        if r1 == null goto label7;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>(r1);

        z6 = 1;

        goto label7;

     label6:
        z6 = 0;

        if r1 == null goto label7;

        virtualinvoke r1.<android.view.SurfaceControl$Transaction: void apply()>();

        z6 = 0;

     label7:
        return z6;
    }

    android.view.SurfaceControl getClientViewRootSurface()
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean $z0;
        com.android.server.wm.WindowSurfaceController $r1;
        android.view.SurfaceControl $r2;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl getClientViewRootSurface()>();

        return $r2;
    }

    void getContainerRect(android.graphics.Rect)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.graphics.Rect r1;
        com.android.server.wm.Task r2;
        com.android.server.wm.WindowState $r3;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r2 = virtualinvoke $r3.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.Task: void getDimBounds(android.graphics.Rect)>(r1);

        goto label2;

     label1:
        r1.<android.graphics.Rect: int bottom> = 0;

        r1.<android.graphics.Rect: int right> = 0;

        r1.<android.graphics.Rect: int top> = 0;

        r1.<android.graphics.Rect: int left> = 0;

     label2:
        return;
    }

    boolean getShown()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowSurfaceController r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: boolean getShown()>();

        return $z0;

     label1:
        return 0;
    }

    boolean hasSurface()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowSurfaceController r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: boolean hasSurface()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    void hide(android.view.SurfaceControl$Transaction, java.lang.String)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.view.SurfaceControl$Transaction r1;
        java.lang.String r2;
        com.android.server.wm.WindowSurfaceController r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden> = 1;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void markPreservedSurfaceForDestroy()>();

        r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.server.wm.WindowSurfaceController: void hide(android.view.SurfaceControl$Transaction,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    void hide(java.lang.String)
    {
        com.android.server.wm.WindowStateAnimator r0;
        java.lang.String r1;
        android.view.SurfaceControl$Transaction $r2, $r3;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mTmpTransaction>;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void hide(android.view.SurfaceControl$Transaction,java.lang.String)>($r2, r1);

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mTmpTransaction>;

        staticinvoke <android.view.SurfaceControl: void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)>($r3);

        return;
    }

    boolean isForceScaled()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.WindowState $r2;
        boolean $z0, $z1;
        com.android.server.wm.ActivityStack $r3;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = virtualinvoke $r2.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityStack: boolean isForceScaled()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize>;

        return $z0;
    }

    void onAnimationFinished()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.DisplayContent r1;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.wm.WindowState $r2, $r3, $r4, $r5, $r7, $r9, $r11;
        boolean $z0, $z1;
        com.android.server.wm.ActivityRecord $r6, $r8;
        com.android.server.wm.WallpaperController $r10;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r2.<com.android.server.wm.WindowState: void checkPolicyVisibilityChange()>();

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = virtualinvoke $r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        i0 = r0.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if i0 == 2000 goto label1;

        if i0 != 2040 goto label2;

     label1:
        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.WindowState: boolean isVisibleByPolicy()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void setLayoutNeeded()>();

     label2:
        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke $r9.<com.android.server.wm.WindowState: void onExitAnimationDone()>();

        $i3 = r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i4 = $i3 | 8;

        r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i4;

        $r10 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WallpaperController mWallpaperController>;

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z1 = virtualinvoke $r10.<com.android.server.wm.WallpaperController: boolean isWallpaperTarget(com.android.server.wm.WindowState)>($r11);

        if $z1 == 0 goto label3;

        $i1 = r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i2 = $i1 | 4;

        r1.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i2;

     label3:
        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r6 = $r5.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r6 == null goto label4;

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r8 = $r7.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r8.<com.android.server.wm.ActivityRecord: void updateReportedVisibilityLocked()>();

     label4:
        return;
    }

    void prepareSurfaceLocked(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8;
        java.lang.String r2, r29, r30, r32, r34, r35;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, z22, z23, $z24, z25, $z26, $z27;
        com.android.server.wm.WallpaperController $r3;
        com.android.server.wm.WindowToken $r4, $r13;
        java.lang.Object[] $r5, $r8, $r10, $r16, $r27;
        com.android.server.wm.ProtoLogGroup $r6, $r9, $r11, $r17, $r28;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.WindowAnimator $r7, $r14, r33;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51;
        byte $b2, $b8, $b9, $b10, $b11, $b12, $b13;
        com.android.server.wm.WindowSurfaceController $r12, $r15;
        java.lang.Double $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        com.android.server.wm.DisplayContent r31;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z22 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z2 != 0 goto label03;

        $z19 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z19 == 0 goto label02;

        $z20 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z20 == 0 goto label02;

        $z21 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z21 == 0 goto label01;

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r28 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = r29;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r28, 1756082882, 0, null, $r27);

     label01:
        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

     label02:
        return;

     label03:
        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void computeShownFrameLocked()>();

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void setSurfaceBoundariesLocked(boolean)>(z22);

        $z3 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z3 == 0 goto label04;

        $z18 = r1.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z18 != 0 goto label04;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void hide(java.lang.String)>("prepareSurfaceLocked");

        z23 = 0;

        goto label17;

     label04:
        $z4 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isParentWindowHidden()>();

        if $z4 != 0 goto label16;

        $z11 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z11 != 0 goto label05;

        goto label16;

     label05:
        $f1 = r0.<com.android.server.wm.WindowStateAnimator: float mLastAlpha>;

        $f0 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        $b2 = $f1 cmpl $f0;

        if $b2 != 0 goto label07;

        $f34 = r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDx>;

        $f33 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $b8 = $f34 cmpl $f33;

        if $b8 != 0 goto label07;

        $f36 = r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDx>;

        $f35 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $b9 = $f36 cmpl $f35;

        if $b9 != 0 goto label07;

        $f38 = r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDy>;

        $f37 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $b10 = $f38 cmpl $f37;

        if $b10 != 0 goto label07;

        $f40 = r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDy>;

        $f39 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $b11 = $f40 cmpl $f39;

        if $b11 != 0 goto label07;

        $f42 = r1.<com.android.server.wm.WindowState: float mLastHScale>;

        $f41 = r1.<com.android.server.wm.WindowState: float mHScale>;

        $b12 = $f42 cmpl $f41;

        if $b12 != 0 goto label07;

        $f44 = r1.<com.android.server.wm.WindowState: float mLastVScale>;

        $f43 = r1.<com.android.server.wm.WindowState: float mVScale>;

        $b13 = $f44 cmpl $f43;

        if $b13 != 0 goto label07;

        $z17 = r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z17 == 0 goto label06;

        goto label07;

     label06:
        z23 = 1;

        goto label17;

     label07:
        $f45 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastAlpha> = $f45;

        $f46 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDx> = $f46;

        $f47 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDx> = $f47;

        $f48 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDsDy> = $f48;

        $f49 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        r0.<com.android.server.wm.WindowStateAnimator: float mLastDtDy> = $f49;

        $f50 = r1.<com.android.server.wm.WindowState: float mHScale>;

        r1.<com.android.server.wm.WindowState: float mLastHScale> = $f50;

        $f51 = r1.<com.android.server.wm.WindowState: float mVScale>;

        r1.<com.android.server.wm.WindowState: float mLastVScale> = $f51;

        $z24 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z24 == 0 goto label08;

        $r15 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        $f24 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        d0 = (double) $f24;

        $f25 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        d1 = (double) $f25;

        $f26 = r1.<com.android.server.wm.WindowState: float mHScale>;

        d2 = (double) $f26;

        $f27 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        d3 = (double) $f27;

        $f28 = r1.<com.android.server.wm.WindowState: float mVScale>;

        d4 = (double) $f28;

        $f29 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        d5 = (double) $f29;

        $f30 = r1.<com.android.server.wm.WindowState: float mHScale>;

        d6 = (double) $f30;

        $f31 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        d7 = (double) $f31;

        $f32 = r1.<com.android.server.wm.WindowState: float mVScale>;

        d8 = (double) $f32;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r17 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r16 = newarray (java.lang.Object)[11];

        $r16[0] = r30;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r16[1] = $r18;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r16[2] = $r19;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r16[3] = $r20;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r16[4] = $r21;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        $r16[5] = $r22;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $r16[6] = $r23;

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        $r16[7] = $r24;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $r16[8] = $r25;

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d8);

        $r16[9] = $r26;

        $r16[10] = r2;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r17, 1747941491, 699048, null, $r16);

        goto label08;

     label08:
        $z12 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z12 == 0 goto label09;

        $i7 = r0.<com.android.server.wm.WindowStateAnimator: int mXOffset>;

        $i6 = r0.<com.android.server.wm.WindowStateAnimator: int mYOffset>;

        $f23 = r0.<com.android.server.wm.WindowStateAnimator: float mWallpaperScale>;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void setWallpaperPositionAndScale(int,int,float,boolean)>($i7, $i6, $f23, z22);

        z25 = 1;

        goto label10;

     label09:
        $r12 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $f22 = r0.<com.android.server.wm.WindowStateAnimator: float mShownAlpha>;

        $f3 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $f2 = r1.<com.android.server.wm.WindowState: float mHScale>;

        $f5 = $f3 * $f2;

        $f4 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f21 = $f5 * $f4;

        $f7 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $f6 = r1.<com.android.server.wm.WindowState: float mVScale>;

        $f9 = $f7 * $f6;

        $f8 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f20 = $f9 * $f8;

        $f11 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $f10 = r1.<com.android.server.wm.WindowState: float mHScale>;

        $f13 = $f11 * $f10;

        $f12 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f19 = $f13 * $f12;

        $f15 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $f14 = r1.<com.android.server.wm.WindowState: float mVScale>;

        $f17 = $f15 * $f14;

        $f16 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f18 = $f17 * $f16;

        z25 = virtualinvoke $r12.<com.android.server.wm.WindowSurfaceController: boolean prepareToShowInTransaction(float,float,float,float,float,boolean)>($f22, $f21, $f20, $f19, $f18, z22);

     label10:
        if z25 == 0 goto label14;

        $i3 = r0.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        if $i3 != 4 goto label14;

        $z13 = r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden>;

        if $z13 == 0 goto label14;

        $z14 = specialinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean showSurfaceRobustlyLocked()>();

        if $z14 == 0 goto label13;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void markPreservedSurfaceForDestroy()>();

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r14.<com.android.server.wm.WindowAnimator: void requestRemovalOfReplacedWindows(com.android.server.wm.WindowState)>(r1);

        r0.<com.android.server.wm.WindowStateAnimator: boolean mLastHidden> = 0;

        $z15 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z15 == 0 goto label11;

        virtualinvoke r1.<com.android.server.wm.WindowState: void dispatchWallpaperVisibility(boolean)>(1);

     label11:
        r31 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $z16 = virtualinvoke r31.<com.android.server.wm.DisplayContent: boolean getLastHasContent()>();

        if $z16 != 0 goto label12;

        $i4 = r31.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i5 = $i4 | 8;

        r31.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i5;

     label12:
        goto label14;

     label13:
        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

     label14:
        $z26 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean hasSurface()>();

        if $z26 == 0 goto label15;

        $r13 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r13.<com.android.server.wm.WindowToken: boolean hasVisible> = 1;

     label15:
        z23 = 1;

        goto label17;

     label16:
        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void hide(java.lang.String)>("prepareSurfaceLocked");

        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WallpaperController mWallpaperControllerLocked>;

        virtualinvoke $r3.<com.android.server.wm.WallpaperController: void hideWallpapers(com.android.server.wm.WindowState)>(r1);

        z23 = 0;

        $z5 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z5 == 0 goto label17;

        z23 = 0;

        $z9 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z9 == 0 goto label17;

        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

        z23 = 0;

        $z10 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z10 == 0 goto label17;

        r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r11 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r32;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r11, 1756082882, 0, null, $r10);

        z23 = 0;

     label17:
        $z27 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean getOrientationChanging()>();

        if $z27 == 0 goto label19;

        $z6 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z6 != 0 goto label18;

        r33 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowAnimator mAnimator>;

        $i0 = r33.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i1 = $i0 & -5;

        r33.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams> = $i1;

        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowAnimator mAnimator>;

        $r7.<com.android.server.wm.WindowAnimator: java.lang.Object mLastWindowFreezeSource> = r1;

        $z8 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z8 == 0 goto label19;

        r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r9 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r34;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r9, -1130891072, 0, null, $r8);

        goto label19;

     label18:
        virtualinvoke r1.<com.android.server.wm.WindowState: void setOrientationChanging(boolean)>(0);

        $z7 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_DEBUG_ORIENTATION_enabled>;

        if $z7 == 0 goto label19;

        r35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_DEBUG_ORIENTATION>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r35;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void v(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r6, 916191774, 0, null, $r5);

     label19:
        if z23 == 0 goto label20;

        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r4.<com.android.server.wm.WindowToken: boolean hasVisible> = 1;

     label20:
        return;
    }

    void preserveSurfaceLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean $z0, $z1;
        android.view.SurfaceControl $r1, $r7, $r9;
        com.android.server.wm.WindowState $r2;
        java.lang.Object[] $r3;
        com.android.server.wm.ProtoLogGroup $r4;
        com.android.server.wm.WindowSurfaceController $r5, $r8, r11, r13;
        android.view.SurfaceControl$Transaction $r6, $r10;
        java.lang.String r12;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $z0 = r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = 0;

        r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r11 == null goto label1;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        if $r5 == null goto label1;

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl$Transaction mPostDrawTransaction>;

        $r7 = virtualinvoke r11.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl getClientViewRootSurface()>();

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mPendingDestroySurface>;

        $r9 = $r8.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        $r10 = virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparentChildren(android.view.SurfaceControl,android.view.SurfaceControl)>($r7, $r9);

        virtualinvoke $r10.<android.view.SurfaceControl$Transaction: void apply()>();

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = 1;

        return;

     label2:
        $z1 = <com.android.server.protolog.ProtoLog$Cache: boolean WM_SHOW_TRANSACTIONS_enabled>;

        if $z1 == 0 goto label3;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = <com.android.server.wm.ProtoLogGroup: com.android.server.wm.ProtoLogGroup WM_SHOW_TRANSACTIONS>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r12;

        staticinvoke <com.android.server.protolog.ProtoLogImpl: void i(com.android.server.protolog.common.IProtoLogGroup,int,int,java.lang.String,java.lang.Object[])>($r4, -1144293044, 0, null, $r3);

     label3:
        r13 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r13 == null goto label4;

        $r1 = r13.<com.android.server.wm.WindowSurfaceController: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r1.<android.view.SurfaceControl: void setLayer(int)>(1);

     label4:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mDestroyPreservedSurfaceUponRedraw> = 1;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        return;
    }

    void reclaimSomeSurfaceMemory(java.lang.String, boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.wm.RootWindowContainer $r3;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r3.<com.android.server.wm.RootWindowContainer: boolean reclaimSomeSurfaceMemory(com.android.server.wm.WindowStateAnimator,java.lang.String,boolean)>(r0, r1, z0);

        return;
    }

    void resetDrawState()
    {
        com.android.server.wm.WindowStateAnimator r0;
        com.android.server.wm.WindowState $r1, $r3, $r5;
        com.android.server.wm.ActivityRecord $r2, $r4, $r6;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r0.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 1;

        $r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r2 = $r1.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r4 = $r3.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        $z0 = virtualinvoke $r4.<com.android.server.wm.ActivityRecord: boolean isAnimating(int)>(1);

        if $z0 != 0 goto label2;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r6 = $r5.<com.android.server.wm.WindowState: com.android.server.wm.ActivityRecord mActivityRecord>;

        virtualinvoke $r6.<com.android.server.wm.ActivityRecord: void clearAllDrawn()>();

     label2:
        return;
    }

    void setColorSpaceAgnosticLocked(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0;
        com.android.server.wm.WindowSurfaceController r1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: void setColorSpaceAgnostic(boolean)>(z0);

        return;
    }

    void setOffsetPositionForStackResize(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z0 := @parameter0: boolean;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mOffsetPositionForStackResize> = z0;

        return;
    }

    void setOpaqueLocked(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0;
        com.android.server.wm.WindowSurfaceController r1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: void setOpaque(boolean)>(z0);

        return;
    }

    void setSecureLocked(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0;
        com.android.server.wm.WindowSurfaceController r1;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.wm.WindowSurfaceController: void setSecure(boolean)>(z0);

        return;
    }

    void setSurfaceBoundariesLocked(boolean)
    {
        com.android.server.wm.WindowStateAnimator r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, $z18, z19, $z20, $z21, $z22, $z23;
        com.android.server.wm.WindowState r1, $r5, $r9, $r11, $r14, $r17, $r25, $r28, $r53, $r58, $r61, $r66, $r68, $r69, $r72;
        com.android.server.wm.Task r2, $r64;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89, f90, f91, f92, f93, f94, f95, f96;
        android.graphics.Rect r3, $r6, $r30, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r54, $r55, $r57, $r59, $r60, $r62, $r74, $r76, r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86;
        com.android.server.wm.WindowSurfaceController $r4, $r7, $r8, $r10, $r12, $r15, $r16, $r26, $r36, $r63, $r70, $r75;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i54, $i55, i56, i57, i58, i59, i60, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71;
        android.view.SurfaceControl $r13, $r27, $r65, $r67, $r71;
        long $l4, $l13, $l52, $l53;
        android.graphics.Point $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        com.android.server.wm.ActivityStack $r29, $r31, $r37, $r56, r87;
        double $d0, $d1, $d2, $d3;
        android.view.SurfaceControl$Transaction $r73;
        android.view.WindowManager$LayoutParams r77;
        com.android.server.wm.DisplayContent r89;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r4 != null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r77 = virtualinvoke $r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.Task getTask()>();

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void calculateSurfaceBounds(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,android.graphics.Rect)>(r1, r77, $r6);

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale> = 1.0F;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale> = 1.0F;

        z1 = r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize>;

        $z2 = r1.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z2 == 0 goto label03;

        $z15 = r1.<com.android.server.wm.WindowState: boolean mInRelayout>;

        if $z15 == 0 goto label02;

        goto label03;

     label02:
        z16 = 0;

        goto label04;

     label03:
        z16 = 1;

     label04:
        if z16 == 0 goto label05;

        $r75 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r74 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        $i54 = virtualinvoke $r74.<android.graphics.Rect: int width()>();

        $r76 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSize>;

        $i55 = virtualinvoke $r76.<android.graphics.Rect: int height()>();

        $z14 = virtualinvoke $r75.<com.android.server.wm.WindowSurfaceController: boolean setBufferSizeInTransaction(int,int,boolean)>($i54, $i55, z0);

        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized> = $z14;

        goto label06;

     label05:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized> = 0;

     label06:
        $z3 = r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize>;

        if $z3 == 0 goto label07;

        $z13 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        if $z13 != 0 goto label07;

        z17 = 1;

        goto label08;

     label07:
        z17 = 0;

     label08:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize> = z17;

        r78 = null;

        $r79 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpClipRect>;

        $z18 = specialinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean calculateCrop(android.graphics.Rect)>($r79);

        if $z18 == 0 goto label09;

        r78 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpClipRect>;

     label09:
        $z4 = specialinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean shouldConsumeMainWindowSizeTransaction()>();

        if $z4 == 0 goto label10;

        $r64 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.Task getMainWindowSizeChangeTask()>();

        $r65 = virtualinvoke $r64.<com.android.server.wm.Task: android.view.SurfaceControl getSurfaceControl()>();

        $r66 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r67 = virtualinvoke $r66.<com.android.server.wm.WindowState: android.view.SurfaceControl getClientViewRootSurface()>();

        $r68 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $l52 = virtualinvoke $r68.<com.android.server.wm.WindowState: long getFrameNumber()>();

        virtualinvoke $r65.<android.view.SurfaceControl: void deferTransactionUntil(android.view.SurfaceControl,long)>($r67, $l52);

        $r70 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r69 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r71 = virtualinvoke $r69.<com.android.server.wm.WindowState: android.view.SurfaceControl getClientViewRootSurface()>();

        $r72 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $l53 = virtualinvoke $r72.<com.android.server.wm.WindowState: long getFrameNumber()>();

        virtualinvoke $r70.<com.android.server.wm.WindowSurfaceController: void deferTransactionUntil(android.view.SurfaceControl,long)>($r71, $l53);

        $r73 = virtualinvoke r2.<com.android.server.wm.Task: android.view.SurfaceControl$Transaction getMainWindowSizeChangeTransaction()>();

        staticinvoke <android.view.SurfaceControl: void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)>($r73);

        virtualinvoke r2.<com.android.server.wm.Task: void setMainWindowSizeChangeTransaction(android.view.SurfaceControl$Transaction)>(null);

     label10:
        $r7 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $i0 = virtualinvoke $r7.<com.android.server.wm.WindowSurfaceController: int getWidth()>();

        f0 = (float) $i0;

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $i1 = virtualinvoke $r8.<com.android.server.wm.WindowSurfaceController: int getHeight()>();

        f1 = (float) $i1;

        r3 = r77.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $z5 = virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: boolean isForceScaled()>();

        if $z5 == 0 goto label20;

        i56 = r3.<android.graphics.Rect: int left>;

        i57 = r3.<android.graphics.Rect: int right>;

        i58 = r3.<android.graphics.Rect: int top>;

        i59 = r3.<android.graphics.Rect: int bottom>;

        $i14 = i56 + i57;

        $f27 = (float) $i14;

        f90 = f0 - $f27;

        $i15 = i58 + i59;

        $f28 = (float) $i15;

        f2 = f1 - $f28;

        $z10 = r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize>;

        if $z10 != 0 goto label11;

        $r63 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r63.<com.android.server.wm.WindowSurfaceController: void forceScaleableInTransaction(boolean)>(1);

        goto label11;

     label11:
        i60 = 0;

        $r29 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r30 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        virtualinvoke $r29.<com.android.server.wm.ActivityStack: void getDimBounds(android.graphics.Rect)>($r30);

        $r31 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r32 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        virtualinvoke $r31.<com.android.server.wm.ActivityStack: void getFinalAnimationSourceHintBounds(android.graphics.Rect)>($r32);

        $r33 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $z11 = virtualinvoke $r33.<android.graphics.Rect: boolean isEmpty()>();

        if $z11 == 0 goto label13;

        $r53 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r54 = $r53.<com.android.server.wm.WindowState: android.graphics.Rect mLastRelayoutContentInsets>;

        $i50 = virtualinvoke $r54.<android.graphics.Rect: int width()>();

        if $i50 > 0 goto label12;

        $r61 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r62 = $r61.<com.android.server.wm.WindowState: android.graphics.Rect mLastRelayoutContentInsets>;

        $i51 = virtualinvoke $r62.<android.graphics.Rect: int height()>();

        if $i51 <= 0 goto label13;

     label12:
        $r55 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $r56 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r57 = $r56.<com.android.server.wm.ActivityStack: android.graphics.Rect mPreAnimationBounds>;

        virtualinvoke $r55.<android.graphics.Rect: void set(android.graphics.Rect)>($r57);

        $r60 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $r58 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r59 = $r58.<com.android.server.wm.WindowState: android.graphics.Rect mLastRelayoutContentInsets>;

        virtualinvoke $r60.<android.graphics.Rect: void inset(android.graphics.Rect)>($r59);

        z19 = 1;

        goto label14;

     label13:
        z19 = 0;

     label14:
        $r80 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        $r81 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getParentFrame()>();

        virtualinvoke $r80.<android.graphics.Rect: void intersectUnchecked(android.graphics.Rect)>($r81);

        $r82 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $r83 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getParentFrame()>();

        virtualinvoke $r82.<android.graphics.Rect: void intersectUnchecked(android.graphics.Rect)>($r83);

        $r84 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        $r85 = virtualinvoke r1.<com.android.server.wm.WindowState: android.graphics.Rect getParentFrame()>();

        virtualinvoke $r84.<android.graphics.Rect: void intersectUnchecked(android.graphics.Rect)>($r85);

        $r86 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $z20 = virtualinvoke $r86.<android.graphics.Rect: boolean isEmpty()>();

        if $z20 != 0 goto label17;

        $r37 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.ActivityStack getStack()>();

        $r38 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        virtualinvoke $r37.<com.android.server.wm.ActivityStack: void getFinalAnimationBounds(android.graphics.Rect)>($r38);

        $r39 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        $i24 = virtualinvoke $r39.<android.graphics.Rect: int width()>();

        f91 = (float) $i24;

        $r40 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i25 = virtualinvoke $r40.<android.graphics.Rect: int width()>();

        f92 = (float) $i25;

        $r41 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        $i26 = virtualinvoke $r41.<android.graphics.Rect: int width()>();

        $f55 = (float) $i26;

        $f56 = f90 - $f55;

        $r42 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        $i27 = virtualinvoke $r42.<android.graphics.Rect: int width()>();

        $f57 = (float) $i27;

        $f58 = f90 - $f57;

        f3 = $f56 / $f58;

        f93 = f3;

        $f59 = f91 - f92;

        $f60 = $f59 * f3;

        $f61 = f92 + $f60;

        f94 = $f61 / f92;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale> = f94;

        if z19 == 0 goto label15;

        $r49 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        $i46 = virtualinvoke $r49.<android.graphics.Rect: int height()>();

        f95 = (float) $i46;

        $r50 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i47 = virtualinvoke $r50.<android.graphics.Rect: int height()>();

        f96 = (float) $i47;

        $r51 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        $i48 = virtualinvoke $r51.<android.graphics.Rect: int height()>();

        $f82 = (float) $i48;

        $f83 = f2 - $f82;

        $r52 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpAnimatingBounds>;

        $i49 = virtualinvoke $r52.<android.graphics.Rect: int height()>();

        $f84 = (float) $i49;

        $f85 = f2 - $f84;

        f93 = $f83 / $f85;

        $f86 = f95 - f96;

        $f87 = $f86 * f3;

        $f88 = $f87 + f96;

        $f89 = $f88 / f96;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale> = $f89;

        goto label16;

     label15:
        r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale> = f94;

     label16:
        $f62 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f64 = $f62 * f3;

        $r43 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i28 = $r43.<android.graphics.Rect: int left>;

        $f63 = (float) $i28;

        $f65 = $f64 * $f63;

        i62 = (int) $f65;

        $f66 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f68 = $f66 * f93;

        $r44 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i29 = $r44.<android.graphics.Rect: int top>;

        $f67 = (float) $i29;

        $f69 = $f68 * $f67;

        i63 = (int) $f69;

        r78 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpClipRect>;

        $i31 = r3.<android.graphics.Rect: int left>;

        $r45 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i30 = $r45.<android.graphics.Rect: int left>;

        $i32 = $i31 + $i30;

        $f70 = (float) $i32;

        $f71 = $f70 * f3;

        $i45 = (int) $f71;

        $i34 = r3.<android.graphics.Rect: int top>;

        $r46 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i33 = $r46.<android.graphics.Rect: int top>;

        $i35 = $i34 + $i33;

        $f72 = (float) $i35;

        $f73 = $f72 * f93;

        $i44 = (int) $f73;

        $i38 = r3.<android.graphics.Rect: int left>;

        $r47 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i36 = $r47.<android.graphics.Rect: int right>;

        $f74 = (float) $i36;

        $f75 = f0 - $f74;

        $f76 = $f75 * f3;

        $f77 = f0 - $f76;

        $i37 = (int) $f77;

        $i43 = $i38 + $i37;

        $i41 = r3.<android.graphics.Rect: int top>;

        $r48 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpSourceBounds>;

        $i39 = $r48.<android.graphics.Rect: int bottom>;

        $f78 = (float) $i39;

        $f79 = f1 - $f78;

        $f80 = $f79 * f93;

        $f81 = f1 - $f80;

        $i40 = (int) $f81;

        $i42 = $i41 + $i40;

        virtualinvoke r78.<android.graphics.Rect: void set(int,int,int,int)>($i45, $i44, $i43, $i42);

        i60 = 0 - i62;

        i64 = 0 - i63;

        goto label18;

     label17:
        $r34 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        $i16 = virtualinvoke $r34.<android.graphics.Rect: int width()>();

        $f29 = (float) $i16;

        $f30 = $f29 / f90;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale> = $f30;

        $r35 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Rect mTmpStackBounds>;

        $i17 = virtualinvoke $r35.<android.graphics.Rect: int height()>();

        $f31 = (float) $i17;

        $f32 = $f31 / f2;

        r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale> = $f32;

        r78 = null;

        i64 = 0;

     label18:
        $i18 = r77.<android.view.WindowManager$LayoutParams: int x>;

        $f35 = (float) $i18;

        $f33 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f34 = 1.0F - $f33;

        $f36 = $f35 * $f34;

        i65 = (int) $f36;

        $i19 = r77.<android.view.WindowManager$LayoutParams: int y>;

        $f39 = (float) $i19;

        $f37 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f38 = 1.0F - $f37;

        $f40 = $f39 * $f38;

        i66 = (int) $f40;

        $i20 = i60 - i65;

        $f45 = (float) $i20;

        $i21 = r3.<android.graphics.Rect: int left>;

        $f43 = (float) $i21;

        $f41 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f42 = 1.0F - $f41;

        $f44 = $f43 * $f42;

        $f46 = $f45 + $f44;

        i67 = (int) $f46;

        $i22 = i64 - i66;

        $f51 = (float) $i22;

        $i23 = r3.<android.graphics.Rect: int top>;

        $f49 = (float) $i23;

        $f47 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f48 = 1.0F - $f47;

        $f50 = $f49 * $f48;

        $f52 = $f51 + $f50;

        i68 = (int) $f52;

        $r36 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $d0 = (double) i67;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f53 = (float) $d1;

        $d2 = (double) i68;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $f54 = (float) $d3;

        virtualinvoke $r36.<com.android.server.wm.WindowSurfaceController: void setPositionInTransaction(float,float,boolean)>($f53, $f54, z0);

        $z12 = r0.<com.android.server.wm.WindowStateAnimator: boolean mPipAnimationStarted>;

        if $z12 != 0 goto label19;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize> = 1;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mPipAnimationStarted> = 1;

     label19:
        goto label27;

     label20:
        r0.<com.android.server.wm.WindowStateAnimator: boolean mPipAnimationStarted> = 0;

        $z6 = r1.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z6 != 0 goto label27;

        i69 = r0.<com.android.server.wm.WindowStateAnimator: int mXOffset>;

        i70 = r0.<com.android.server.wm.WindowStateAnimator: int mYOffset>;

        $z9 = r0.<com.android.server.wm.WindowStateAnimator: boolean mOffsetPositionForStackResize>;

        if $z9 == 0 goto label24;

        if z16 == 0 goto label21;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void setOffsetPositionForStackResize(boolean)>(0);

        $r26 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r25 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r27 = virtualinvoke $r25.<com.android.server.wm.WindowState: android.view.SurfaceControl getClientViewRootSurface()>();

        $r28 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $l13 = virtualinvoke $r28.<com.android.server.wm.WindowState: long getFrameNumber()>();

        virtualinvoke $r26.<com.android.server.wm.WindowSurfaceController: void deferTransactionUntil(android.view.SurfaceControl,long)>($r27, $l13);

        i71 = i69;

        goto label25;

     label21:
        $r17 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r87 = virtualinvoke $r17.<com.android.server.wm.WindowState: com.android.server.wm.ActivityStack getRootTask()>();

        $r18 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $r18.<android.graphics.Point: int x> = 0;

        $r19 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $r19.<android.graphics.Point: int y> = 0;

        if r87 == null goto label22;

        $r24 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        virtualinvoke r87.<com.android.server.wm.ActivityStack: void getRelativePosition(android.graphics.Point)>($r24);

     label22:
        $r20 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $i5 = $r20.<android.graphics.Point: int x>;

        i71 = neg $i5;

        $r21 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $i6 = $r21.<android.graphics.Point: int y>;

        i70 = neg $i6;

        if r78 == null goto label23;

        $i8 = r78.<android.graphics.Rect: int right>;

        $r22 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $i7 = $r22.<android.graphics.Point: int x>;

        $i9 = $i8 + $i7;

        r78.<android.graphics.Rect: int right> = $i9;

        $i11 = r78.<android.graphics.Rect: int bottom>;

        $r23 = r0.<com.android.server.wm.WindowStateAnimator: android.graphics.Point mTmpPos>;

        $i10 = $r23.<android.graphics.Point: int y>;

        $i12 = $i11 + $i10;

        r78.<android.graphics.Rect: int bottom> = $i12;

        goto label25;

     label23:
        goto label25;

     label24:
        i71 = i69;

     label25:
        $z21 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z21 != 0 goto label26;

        $r16 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $f26 = (float) i71;

        $f25 = (float) i70;

        virtualinvoke $r16.<com.android.server.wm.WindowSurfaceController: void setPositionInTransaction(float,float,boolean)>($f26, $f25, z0);

        goto label27;

     label26:
        $f24 = r0.<com.android.server.wm.WindowStateAnimator: float mWallpaperScale>;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void setWallpaperPositionAndScale(int,int,float,boolean)>(i71, i70, $f24, z0);

        goto label27;

     label27:
        if z1 == 0 goto label28;

        $z8 = r0.<com.android.server.wm.WindowStateAnimator: boolean mForceScaleUntilResize>;

        if $z8 != 0 goto label28;

        $r12 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $r11 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r13 = virtualinvoke $r11.<com.android.server.wm.WindowState: android.view.SurfaceControl getClientViewRootSurface()>();

        $r14 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $l4 = virtualinvoke $r14.<com.android.server.wm.WindowState: long getFrameNumber()>();

        virtualinvoke $r12.<com.android.server.wm.WindowSurfaceController: void deferTransactionUntil(android.view.SurfaceControl,long)>($r13, $l4);

        $r15 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        virtualinvoke $r15.<com.android.server.wm.WindowSurfaceController: void forceScaleableInTransaction(boolean)>(0);

     label28:
        $z22 = r1.<com.android.server.wm.WindowState: boolean mSeamlesslyRotated>;

        if $z22 != 0 goto label30;

        $z7 = r0.<com.android.server.wm.WindowStateAnimator: boolean mIsWallpaper>;

        if $z7 != 0 goto label29;

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void applyCrop(android.graphics.Rect,boolean)>(r78, z0);

        $r10 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        $f5 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $f4 = r1.<com.android.server.wm.WindowState: float mHScale>;

        $f7 = $f5 * $f4;

        $f6 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f23 = $f7 * $f6;

        $f9 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $f8 = r1.<com.android.server.wm.WindowState: float mVScale>;

        $f11 = $f9 * $f8;

        $f10 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f22 = $f11 * $f10;

        $f13 = r0.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $f12 = r1.<com.android.server.wm.WindowState: float mHScale>;

        $f15 = $f13 * $f12;

        $f14 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraHScale>;

        $f21 = $f15 * $f14;

        $f17 = r0.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $f16 = r1.<com.android.server.wm.WindowState: float mVScale>;

        $f19 = $f17 * $f16;

        $f18 = r0.<com.android.server.wm.WindowStateAnimator: float mExtraVScale>;

        $f20 = $f19 * $f18;

        virtualinvoke $r10.<com.android.server.wm.WindowSurfaceController: void setMatrixInTransaction(float,float,float,float,boolean)>($f23, $f22, $f21, $f20, z0);

        goto label30;

     label29:
        goto label30;

     label30:
        $z23 = r0.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        if $z23 == 0 goto label31;

        r0.<com.android.server.wm.WindowStateAnimator: boolean mReportSurfaceResized> = 1;

        $r9 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r89 = virtualinvoke $r9.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $i2 = r89.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i3 = $i2 | 4;

        r89.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i3;

     label31:
        return;
    }

    void setTransparentRegionHintLocked(android.graphics.Region)
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.graphics.Region r1;
        com.android.server.wm.WindowSurfaceController r2;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        r1 := @parameter0: android.graphics.Region;

        r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if r2 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "setTransparentRegionHint: null mSurface after mHasSurface true");

        return;

     label1:
        virtualinvoke r2.<com.android.server.wm.WindowSurfaceController: void setTransparentRegionHint(android.graphics.Region)>(r1);

        return;
    }

    boolean setWallpaperOffset(int, int, float)
    {
        com.android.server.wm.WindowStateAnimator r0;
        int i0, i1, $i2, $i3, $i4;
        float f0, $f1;
        com.android.server.wm.WindowManagerService $r2, $r3, $r5;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r6;
        com.android.server.wm.WindowState $r8;
        java.lang.String $r15;
        com.android.server.wm.WindowSurfaceController $r16;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = r0.<com.android.server.wm.WindowStateAnimator: int mXOffset>;

        if $i2 != i0 goto label1;

        $i3 = r0.<com.android.server.wm.WindowStateAnimator: int mYOffset>;

        if $i3 != i1 goto label1;

        $f1 = r0.<com.android.server.wm.WindowStateAnimator: float mWallpaperScale>;

        $i4 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, f0);

        if $i4 != 0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.wm.WindowStateAnimator: int mXOffset> = i0;

        r0.<com.android.server.wm.WindowStateAnimator: int mYOffset> = i1;

        r0.<com.android.server.wm.WindowStateAnimator: float mWallpaperScale> = f0;

        $r16 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r16 == null goto label9;

     label2:
        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService: void openSurfaceTransaction()>();

        specialinvoke r0.<com.android.server.wm.WindowStateAnimator: void setWallpaperPositionAndScale(int,int,float,boolean)>(i0, i1, f0, 0);

     label3:
        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("setWallpaperOffset");

        goto label9;

     label4:
        $r4 := @caughtexception;

        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error positioning surface of ");

        $r8 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pos=(");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r15, $r6);

     label7:
        goto label3;

     label8:
        $r5 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService: void closeSurfaceTransaction(java.lang.String)>("setWallpaperOffset");

        throw $r4;

     label9:
        return 1;

        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public java.lang.String toString()
    {
        com.android.server.wm.WindowStateAnimator r0;
        java.lang.StringBuffer $r2;
        int $i0;
        java.lang.String $r3, $r11;
        com.android.server.wm.WindowState $r6;
        android.view.WindowManager$LayoutParams $r7;
        java.lang.CharSequence $r8;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("WindowStateAnimator{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r6 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r7 = $r6.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r8 = virtualinvoke $r7.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r8);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(125);

        $r11 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    boolean tryChangeFormatInPlaceLocked()
    {
        com.android.server.wm.WindowStateAnimator r0;
        android.view.WindowManager$LayoutParams r1;
        com.android.server.wm.WindowSurfaceController $r2;
        com.android.server.wm.WindowState $r3;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.wm.WindowStateAnimator;

        $r2 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowSurfaceController mSurfaceController>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r1 = virtualinvoke $r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16777216;

        if $i1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z2 == 0 goto label4;

        i4 = -3;

        goto label5;

     label4:
        i4 = r1.<android.view.WindowManager$LayoutParams: int format>;

     label5:
        $i2 = r0.<com.android.server.wm.WindowStateAnimator: int mSurfaceFormat>;

        if i4 != $i2 goto label6;

        $i3 = r1.<android.view.WindowManager$LayoutParams: int format>;

        $z0 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i3);

        $z1 = $z0 ^ 1;

        virtualinvoke r0.<com.android.server.wm.WindowStateAnimator: void setOpaqueLocked(boolean)>($z1);

        return 1;

     label6:
        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WindowStateAnimator: int WINDOW_FREEZE_LAYER> = 2000000;

        <com.android.server.wm.WindowStateAnimator: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.WindowStateAnimator: int STACK_CLIP_NONE> = 2;

        <com.android.server.wm.WindowStateAnimator: int STACK_CLIP_BEFORE_ANIM> = 1;

        <com.android.server.wm.WindowStateAnimator: int STACK_CLIP_AFTER_ANIM> = 0;

        <com.android.server.wm.WindowStateAnimator: int READY_TO_SHOW> = 3;

        <com.android.server.wm.WindowStateAnimator: int PRESERVED_SURFACE_LAYER> = 1;

        <com.android.server.wm.WindowStateAnimator: int NO_SURFACE> = 0;

        <com.android.server.wm.WindowStateAnimator: int HAS_DRAWN> = 4;

        <com.android.server.wm.WindowStateAnimator: int DRAW_PENDING> = 1;

        <com.android.server.wm.WindowStateAnimator: int COMMIT_DRAW_PENDING> = 2;

        return;
    }
}
