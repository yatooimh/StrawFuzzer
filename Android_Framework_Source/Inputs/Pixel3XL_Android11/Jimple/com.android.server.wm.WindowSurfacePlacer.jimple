class com.android.server.wm.WindowSurfacePlacer extends java.lang.Object
{
    static final int SET_ORIENTATION_CHANGE_COMPLETE;
    static final int SET_UPDATE_ROTATION;
    static final int SET_WALLPAPER_ACTION_PENDING;
    private static final java.lang.String TAG;
    private int mDeferDepth;
    private int mDeferredRequests;
    private boolean mInLayout;
    private int mLayoutRepeatCount;
    private final com.android.server.wm.WindowSurfacePlacer$Traverser mPerformSurfacePlacement;
    private final com.android.server.wm.WindowManagerService mService;
    private boolean mTraversalScheduled;

    void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.WindowSurfacePlacer$Traverser $r2;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout> = 0;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth> = 0;

        $r2 = new com.android.server.wm.WindowSurfacePlacer$Traverser;

        specialinvoke $r2.<com.android.server.wm.WindowSurfacePlacer$Traverser: void <init>(com.android.server.wm.WindowSurfacePlacer,com.android.server.wm.WindowSurfacePlacer$1)>(r0, null);

        r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowSurfacePlacer$Traverser mPerformSurfacePlacement> = $r2;

        r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService> = r1;

        return;
    }

    static com.android.server.wm.WindowManagerService access$000(com.android.server.wm.WindowSurfacePlacer)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @parameter0: com.android.server.wm.WindowSurfacePlacer;

        $r1 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        return $r1;
    }

    private void performSurfacePlacementLoop()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        com.android.server.wm.WindowManagerService $r1, $r3, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r19, $r40;
        com.android.server.wm.DisplayContent $r2;
        java.util.ArrayList $r5, $r11, $r17, $r20;
        com.android.server.wm.RootWindowContainer $r7, $r9;
        com.android.server.wm.WindowManagerService$H $r13, $r15;
        java.lang.Object $r18, $r21;
        java.lang.StringBuilder $r22, $r26;
        java.lang.String $r25, $r28, $r30;
        java.lang.Throwable $r31, $r32;
        java.lang.RuntimeException $r33;
        com.android.server.wm.WindowState r35;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $z0 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout>;

        if $z0 == 0 goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("performLayoutAndPlaceSurfacesLocked called while in layout. Callers=");

        $r28 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r30);

        return;

     label01:
        $r1 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $z1 = $r2.<com.android.server.wm.DisplayContent: boolean mWaitingForConfig>;

        if $z1 == 0 goto label02;

        return;

     label02:
        $r3 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $z2 = $r3.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z2 != 0 goto label03;

        return;

     label03:
        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout> = 1;

        $r4 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $z3 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 != 0 goto label14;

     label04:
        $r16 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r16.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $z7 = virtualinvoke $r17.<java.util.ArrayList: boolean isEmpty()>();

        if $z7 != 0 goto label05;

        $r19 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r20 = $r19.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r21 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r35 = (com.android.server.wm.WindowState) $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force removing: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r25);

        virtualinvoke r35.<com.android.server.wm.WindowState: void removeImmediately()>();

        goto label04;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Due to memory failure, waiting a bit for next layout");

        $r18 = new java.lang.Object;

        specialinvoke $r18.<java.lang.Object: void <init>()>();

        entermonitor $r18;

     label06:
        virtualinvoke $r18.<java.lang.Object: void wait(long)>(250L);

     label07:
        goto label10;

     label08:
        $r32 := @caughtexception;

        goto label12;

     label09:
        $r31 := @caughtexception;

     label10:
        exitmonitor $r18;

     label11:
        goto label14;

     label12:
        exitmonitor $r18;

     label13:
        throw $r32;

     label14:
        $r6 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        virtualinvoke $r7.<com.android.server.wm.RootWindowContainer: void performSurfacePlacement()>();

        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout> = 0;

        $r8 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $z4 = virtualinvoke $r9.<com.android.server.wm.RootWindowContainer: boolean isLayoutNeeded()>();

        if $z4 == 0 goto label20;

        $i1 = r0.<com.android.server.wm.WindowSurfacePlacer: int mLayoutRepeatCount>;

        i0 = $i1 + 1;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mLayoutRepeatCount> = i0;

     label15:
        if i0 >= 6 goto label18;

     label16:
        virtualinvoke r0.<com.android.server.wm.WindowSurfacePlacer: void requestTraversal()>();

     label17:
        goto label21;

     label18:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Performed 6 layouts in a row. Skipping");

        r0.<com.android.server.wm.WindowSurfacePlacer: int mLayoutRepeatCount> = 0;

     label19:
        goto label21;

     label20:
        r0.<com.android.server.wm.WindowSurfacePlacer: int mLayoutRepeatCount> = 0;

     label21:
        $r40 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $z8 = $r40.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged>;

        if $z8 == 0 goto label22;

        $r10 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z5 = virtualinvoke $r11.<java.util.ArrayList: boolean isEmpty()>();

        if $z5 != 0 goto label22;

        $r12 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r13 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(19);

        $r14 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(19);

     label22:
        goto label24;

     label23:
        $r33 := @caughtexception;

        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout> = 0;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception while laying out windows", $r33);

     label24:
        return;

        catch java.lang.InterruptedException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label12 to label13 with label08;
        catch java.lang.RuntimeException from label14 to label15 with label23;
        catch java.lang.RuntimeException from label16 to label17 with label23;
        catch java.lang.RuntimeException from label18 to label19 with label23;
        catch java.lang.RuntimeException from label20 to label21 with label23;
        catch java.lang.RuntimeException from label21 to label22 with label23;
    }

    void continueLayout(boolean)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        boolean z0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        z0 := @parameter0: boolean;

        $i1 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth>;

        i0 = $i1 - 1;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth> = i0;

        if i0 <= 0 goto label1;

        return;

     label1:
        if z0 != 0 goto label2;

        $i2 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests>;

        if $i2 <= 0 goto label3;

     label2:
        virtualinvoke r0.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests> = 0;

     label3:
        return;
    }

    void debugLayoutRepeats(java.lang.String, int)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        java.lang.String r1, $r7, $r9;
        int i0, $i1;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.server.wm.WindowSurfacePlacer: int mLayoutRepeatCount>;

        if $i1 < 4 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layouts looping: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mPendingLayoutChanges = 0x");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r9);

     label1:
        return;
    }

    void deferLayout()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $i0 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth> = $i1;

        return;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r7, $r15, $r23;
        java.lang.StringBuilder $r3, $r8, $r16;
        boolean $z0;
        com.android.server.wm.WindowManagerService $r11, $r19;
        com.android.server.wm.RootWindowContainer $r12, $r20;
        com.android.server.wm.WindowState $r13, $r21;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTraversalScheduled=");

        $z0 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mHoldScreenWindow=");

        $r11 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r13 = $r12.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mHoldScreenWindow>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mObscuringWindow=");

        $r19 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r20 = $r19.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r21 = $r20.<com.android.server.wm.RootWindowContainer: com.android.server.wm.WindowState mObscuringWindow>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        return;
    }

    boolean isInLayout()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $z0 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mInLayout>;

        return $z0;
    }

    boolean isLayoutDeferred()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $i0 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth>;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    final void performSurfacePlacement()
    {
        com.android.server.wm.WindowSurfacePlacer r0;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        virtualinvoke r0.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement(boolean)>(0);

        return;
    }

    final void performSurfacePlacement(boolean)
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, i4;
        com.android.server.wm.WindowManagerService $r1, $r3;
        com.android.server.wm.RootWindowContainer $r2;
        android.os.Handler $r4;
        com.android.server.wm.WindowSurfacePlacer$Traverser $r5;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        z0 := @parameter0: boolean;

        $i1 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth>;

        if $i1 <= 0 goto label1;

        if z0 != 0 goto label1;

        $i2 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests>;

        $i3 = $i2 + 1;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests> = $i3;

        return;

     label1:
        i4 = 6;

     label2:
        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled> = 0;

        specialinvoke r0.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacementLoop()>();

        $r3 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r4 = $r3.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r5 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowSurfacePlacer$Traverser mPerformSurfacePlacement>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

        i0 = i4 - 1;

        $z1 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled>;

        if $z1 == 0 goto label3;

        i4 = i0;

        if i0 > 0 goto label2;

     label3:
        $r1 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.RootWindowContainer mRoot>;

        $r2.<com.android.server.wm.RootWindowContainer: boolean mWallpaperActionPending> = 0;

        return;
    }

    void performSurfacePlacementIfScheduled()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $z0 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.wm.WindowSurfacePlacer: void performSurfacePlacement()>();

     label1:
        return;
    }

    void requestTraversal()
    {
        com.android.server.wm.WindowSurfacePlacer r0;
        boolean $z0;
        int $i0, $i1, $i2;
        com.android.server.wm.WindowManagerService $r1;
        com.android.server.wm.WindowSurfacePlacer$Traverser $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.wm.WindowSurfacePlacer;

        $z0 = r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.WindowSurfacePlacer: boolean mTraversalScheduled> = 1;

        $i0 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferDepth>;

        if $i0 <= 0 goto label2;

        $i1 = r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests>;

        $i2 = $i1 + 1;

        r0.<com.android.server.wm.WindowSurfacePlacer: int mDeferredRequests> = $i2;

        return;

     label2:
        $r1 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r1.<com.android.server.wm.WindowManagerService: android.os.Handler mAnimationHandler>;

        $r2 = r0.<com.android.server.wm.WindowSurfacePlacer: com.android.server.wm.WindowSurfacePlacer$Traverser mPerformSurfacePlacement>;

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WindowSurfacePlacer: java.lang.String TAG> = "WindowManager";

        <com.android.server.wm.WindowSurfacePlacer: int SET_WALLPAPER_ACTION_PENDING> = 8;

        <com.android.server.wm.WindowSurfacePlacer: int SET_UPDATE_ROTATION> = 1;

        <com.android.server.wm.WindowSurfacePlacer: int SET_ORIENTATION_CHANGE_COMPLETE> = 4;

        return;
    }
}
