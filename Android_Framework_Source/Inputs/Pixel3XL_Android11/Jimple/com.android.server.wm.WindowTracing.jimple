class com.android.server.wm.WindowTracing extends java.lang.Object
{
    private static final int BUFFER_CAPACITY_ALL;
    private static final int BUFFER_CAPACITY_CRITICAL;
    private static final int BUFFER_CAPACITY_TRIM;
    private static final long MAGIC_NUMBER_VALUE;
    private static final java.lang.String TAG;
    private static final java.lang.String TRACE_FILENAME;
    private final com.android.internal.util.TraceBuffer mBuffer;
    private final android.view.Choreographer mChoreographer;
    private boolean mEnabled;
    private final java.lang.Object mEnabledLock;
    private volatile boolean mEnabledLockFree;
    private final android.view.Choreographer$FrameCallback mFrameCallback;
    private final com.android.server.wm.WindowManagerGlobalLock mGlobalLock;
    private int mLogLevel;
    private boolean mLogOnFrame;
    private boolean mScheduled;
    private final com.android.server.wm.WindowManagerService mService;
    private final java.io.File mTraceFile;

    private void <init>(java.io.File, com.android.server.wm.WindowManagerService, android.view.Choreographer, int)
    {
        com.android.server.wm.WindowTracing r0;
        java.io.File r1;
        com.android.server.wm.WindowManagerService r2;
        android.view.Choreographer r3;
        int i0;
        com.android.server.wm.WindowManagerGlobalLock $r4;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: com.android.server.wm.WindowManagerService;

        r3 := @parameter2: android.view.Choreographer;

        i0 := @parameter3: int;

        $r4 = r2.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void <init>(java.io.File,com.android.server.wm.WindowManagerService,android.view.Choreographer,com.android.server.wm.WindowManagerGlobalLock,int)>(r1, r2, r3, $r4, i0);

        return;
    }

    void <init>(java.io.File, com.android.server.wm.WindowManagerService, android.view.Choreographer, com.android.server.wm.WindowManagerGlobalLock, int)
    {
        com.android.server.wm.WindowTracing r0;
        java.io.File r1;
        com.android.server.wm.WindowManagerService r2;
        android.view.Choreographer r3;
        com.android.server.wm.WindowManagerGlobalLock r4;
        int i0;
        java.lang.Object $r5;
        com.android.server.wm._$$Lambda$WindowTracing$lz89IHzR4nKO_ZtXtwyNGkRleMY $r6;
        com.android.internal.util.TraceBuffer $r7;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: com.android.server.wm.WindowManagerService;

        r3 := @parameter2: android.view.Choreographer;

        r4 := @parameter3: com.android.server.wm.WindowManagerGlobalLock;

        i0 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.WindowTracing: java.lang.Object mEnabledLock> = $r5;

        $r6 = new com.android.server.wm._$$Lambda$WindowTracing$lz89IHzR4nKO_ZtXtwyNGkRleMY;

        specialinvoke $r6.<com.android.server.wm._$$Lambda$WindowTracing$lz89IHzR4nKO_ZtXtwyNGkRleMY: void <init>(com.android.server.wm.WindowTracing)>(r0);

        r0.<com.android.server.wm.WindowTracing: android.view.Choreographer$FrameCallback mFrameCallback> = $r6;

        r0.<com.android.server.wm.WindowTracing: int mLogLevel> = 1;

        r0.<com.android.server.wm.WindowTracing: boolean mLogOnFrame> = 0;

        r0.<com.android.server.wm.WindowTracing: android.view.Choreographer mChoreographer> = r3;

        r0.<com.android.server.wm.WindowTracing: com.android.server.wm.WindowManagerService mService> = r2;

        r0.<com.android.server.wm.WindowTracing: com.android.server.wm.WindowManagerGlobalLock mGlobalLock> = r4;

        r0.<com.android.server.wm.WindowTracing: java.io.File mTraceFile> = r1;

        $r7 = new com.android.internal.util.TraceBuffer;

        specialinvoke $r7.<com.android.internal.util.TraceBuffer: void <init>(int)>(i0);

        r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer> = $r7;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogLevel(int,java.io.PrintWriter)>(1, null);

        return;
    }

    static com.android.server.wm.WindowTracing createDefaultAndStartLooper(com.android.server.wm.WindowManagerService, android.view.Choreographer)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.Choreographer r1;
        com.android.server.wm.WindowTracing $r2;
        java.io.File $r3;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        r1 := @parameter1: android.view.Choreographer;

        $r2 = new com.android.server.wm.WindowTracing;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/misc/wmtrace/wm_trace.pb");

        specialinvoke $r2.<com.android.server.wm.WindowTracing: void <init>(java.io.File,com.android.server.wm.WindowManagerService,android.view.Choreographer,int)>($r3, r0, r1, 2097152);

        return $r2;
    }

    private void log(java.lang.String)
    {
        com.android.server.wm.WindowTracing r0;
        long l0, l1, $l2;
        int $i3;
        com.android.server.wm.WindowManagerService $r1;
        com.android.internal.util.TraceBuffer $r2;
        java.lang.Throwable $r3, $r4, $r5;
        java.lang.Exception $r6;
        java.lang.String r7;
        android.util.proto.ProtoOutputStream r8;
        com.android.server.wm.WindowManagerGlobalLock r9;

        r0 := @this: com.android.server.wm.WindowTracing;

        r7 := @parameter0: java.lang.String;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "traceStateLocked");

     label01:
        r8 = new android.util.proto.ProtoOutputStream;

        specialinvoke r8.<android.util.proto.ProtoOutputStream: void <init>()>();

        l0 = virtualinvoke r8.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895810L);

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        virtualinvoke r8.<android.util.proto.ProtoOutputStream: void write(long,long)>(1125281431553L, $l2);

        virtualinvoke r8.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333442L, r7);

        l1 = virtualinvoke r8.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268035L);

        r9 = r0.<com.android.server.wm.WindowTracing: com.android.server.wm.WindowManagerGlobalLock mGlobalLock>;

        entermonitor r9;

     label02:
        staticinvoke <com.android.server.wm.WindowManagerService: void boostPriorityForLockedSection()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "dumpDebugLocked");

     label03:
        $r1 = r0.<com.android.server.wm.WindowTracing: com.android.server.wm.WindowManagerService mService>;

        $i3 = r0.<com.android.server.wm.WindowTracing: int mLogLevel>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void dumpDebugLocked(android.util.proto.ProtoOutputStream,int)>(r8, $i3);

     label04:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label05:
        exitmonitor r9;

     label06:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        virtualinvoke r8.<android.util.proto.ProtoOutputStream: void end(long)>(l1);

        virtualinvoke r8.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        $r2 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r2.<com.android.internal.util.TraceBuffer: void add(java.lang.Object)>(r8);

        r0.<com.android.server.wm.WindowTracing: boolean mScheduled> = 0;

     label07:
        goto label17;

     label08:
        $r4 := @caughtexception;

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

     label10:
        throw $r4;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r9;

     label13:
        staticinvoke <com.android.server.wm.WindowManagerService: void resetPriorityAfterLockedSection()>();

        throw $r3;

     label14:
        $r5 := @caughtexception;

        goto label18;

     label15:
        $r6 := @caughtexception;

     label16:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowTracing", "Exception while tracing state", $r6);

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label18:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r5;

        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Exception from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
    }

    private void logAndPrintln(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.wm.WindowTracing r0;
        java.io.PrintWriter r1;
        java.lang.String r2;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowTracing", r2);

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

     label1:
        return;
    }

    private void schedule()
    {
        com.android.server.wm.WindowTracing r0;
        boolean $z0;
        android.view.Choreographer$FrameCallback $r1;
        android.view.Choreographer $r2;

        r0 := @this: com.android.server.wm.WindowTracing;

        $z0 = r0.<com.android.server.wm.WindowTracing: boolean mScheduled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.server.wm.WindowTracing: boolean mScheduled> = 1;

        $r2 = r0.<com.android.server.wm.WindowTracing: android.view.Choreographer mChoreographer>;

        $r1 = r0.<com.android.server.wm.WindowTracing: android.view.Choreographer$FrameCallback mFrameCallback>;

        virtualinvoke $r2.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r1);

        return;
    }

    private void setBufferCapacity(int, java.io.PrintWriter)
    {
        com.android.server.wm.WindowTracing r0;
        int i0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        com.android.internal.util.TraceBuffer $r8;

        r0 := @this: com.android.server.wm.WindowTracing;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting window tracing buffer capacity to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r1, $r7);

        $r8 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r8.<com.android.internal.util.TraceBuffer: void setCapacity(int)>(i0);

        return;
    }

    private void setLogFrequency(boolean, java.io.PrintWriter)
    {
        com.android.server.wm.WindowTracing r0;
        boolean z0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7;

        r0 := @this: com.android.server.wm.WindowTracing;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting window tracing log frequency to ");

        if z0 == 0 goto label1;

        r7 = "frame";

        goto label2;

     label1:
        r7 = "transaction";

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r1, $r6);

        r0.<com.android.server.wm.WindowTracing: boolean mLogOnFrame> = z0;

        return;
    }

    private void setLogLevel(int, java.io.PrintWriter)
    {
        com.android.server.wm.WindowTracing r0;
        int i0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: com.android.server.wm.WindowTracing;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.PrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting window tracing log level to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r1, $r6);

        r0.<com.android.server.wm.WindowTracing: int mLogLevel> = i0;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        goto label4;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setBufferCapacity(int,java.io.PrintWriter)>(524288, r1);

        goto label4;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setBufferCapacity(int,java.io.PrintWriter)>(2097152, r1);

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setBufferCapacity(int,java.io.PrintWriter)>(4194304, r1);

     label4:
        return;
    }

    private void writeTraceToFileLocked()
    {
        com.android.server.wm.WindowTracing r0;
        java.io.File $r1;
        com.android.internal.util.TraceBuffer $r2;
        java.lang.Throwable $r3, $r4;
        android.util.proto.ProtoOutputStream r5;

        r0 := @this: com.android.server.wm.WindowTracing;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "writeTraceToFileLocked");

        r5 = new android.util.proto.ProtoOutputStream;

        specialinvoke r5.<android.util.proto.ProtoOutputStream: void <init>()>();

        virtualinvoke r5.<android.util.proto.ProtoOutputStream: void write(long,long)>(1125281431553L, 4990904633914181975L);

        $r2 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        $r1 = r0.<com.android.server.wm.WindowTracing: java.io.File mTraceFile>;

        virtualinvoke $r2.<com.android.internal.util.TraceBuffer: void writeTraceToFile(java.io.File,java.lang.Object)>($r1, r5);

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowTracing", "Unable to write buffer to file", $r4);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    java.lang.String getStatus()
    {
        com.android.server.wm.WindowTracing r0;
        java.lang.StringBuilder $r2;
        boolean $z0;
        int $i0;
        com.android.internal.util.TraceBuffer $r8;
        java.lang.String $r9, $r11, r12;

        r0 := @this: com.android.server.wm.WindowTracing;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Status: ");

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowTracing: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        r12 = "Enabled";

        goto label2;

     label1:
        r12 = "Disabled";

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nLog level: ");

        $i0 = r0.<com.android.server.wm.WindowTracing: int mLogLevel>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        $r9 = virtualinvoke $r8.<com.android.internal.util.TraceBuffer: java.lang.String getStatus()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    boolean isEnabled()
    {
        com.android.server.wm.WindowTracing r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowTracing;

        $z0 = r0.<com.android.server.wm.WindowTracing: boolean mEnabledLockFree>;

        return $z0;
    }

    public void lambda$new$0$WindowTracing(long)
    {
        com.android.server.wm.WindowTracing r0;
        long l0;

        r0 := @this: com.android.server.wm.WindowTracing;

        l0 := @parameter0: long;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void log(java.lang.String)>("onFrame");

        return;
    }

    void logState(java.lang.String)
    {
        com.android.server.wm.WindowTracing r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowTracing: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.WindowTracing: boolean mLogOnFrame>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void schedule()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void log(java.lang.String)>(r1);

     label3:
        return;
    }

    int onShellCommand(android.os.ShellCommand)
    {
        com.android.server.wm.WindowTracing r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r3, $r5, $r8, $r12, r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i1, $i2, i3, i5;
        com.android.internal.util.TraceBuffer $r4, $r6, $r7, $r16;
        java.lang.StringBuilder $r9;
        android.os.ShellCommand r13;
        byte b4, b6;

        r0 := @this: com.android.server.wm.WindowTracing;

        r13 := @parameter0: android.os.ShellCommand;

        r1 = virtualinvoke r13.<android.os.ShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r13.<android.os.ShellCommand: java.lang.String getNextArgRequired()>();

        i3 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch(i3)
        {
            case -892481550: goto label08;
            case 3530753: goto label07;
            case 3540994: goto label06;
            case 97692013: goto label05;
            case 102865796: goto label04;
            case 109757538: goto label03;
            case 2141246174: goto label02;
            default: goto label01;
        };

     label01:
        goto label09;

     label02:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("transaction");

        if $z0 == 0 goto label01;

        b4 = 4;

        goto label10;

     label03:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("start");

        if $z4 == 0 goto label01;

        b4 = 0;

        goto label10;

     label04:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("level");

        if $z5 == 0 goto label01;

        b4 = 5;

        goto label10;

     label05:
        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("frame");

        if $z6 == 0 goto label01;

        b4 = 3;

        goto label10;

     label06:
        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("stop");

        if $z7 == 0 goto label01;

        b4 = 1;

        goto label10;

     label07:
        $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("size");

        if $z8 == 0 goto label01;

        b4 = 6;

        goto label10;

     label08:
        $z9 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("status");

        if $z9 == 0 goto label01;

        b4 = 2;

        goto label10;

     label09:
        b4 = -1;

     label10:
        tableswitch(b4)
        {
            case 0: goto label27;
            case 1: goto label26;
            case 2: goto label25;
            case 3: goto label24;
            case 4: goto label23;
            case 5: goto label13;
            case 6: goto label12;
            default: goto label11;
        };

     label11:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown command: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Window manager trace options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  start: Start logging");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  stop: Stop logging");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  frame: Log trace once per frame");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  transaction: Log each transaction");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  size: Set the maximum log size (in KB)");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  status: Print trace status");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  level [lvl]: Set the log level between");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    lvl may be one of:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      critical: Only visible windows with reduced information");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      trim: All windows with reduced");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      all: All window and information");

        return -1;

     label12:
        $r3 = virtualinvoke r13.<android.os.ShellCommand: java.lang.String getNextArgRequired()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i2 = $i1 * 1024;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void setBufferCapacity(int,java.io.PrintWriter)>($i2, r1);

        $r4 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r4.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        return 0;

     label13:
        $r5 = virtualinvoke r13.<android.os.ShellCommand: java.lang.String getNextArgRequired()>();

        r15 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        i5 = virtualinvoke r15.<java.lang.String: int hashCode()>();

        if i5 == 96673 goto label17;

        if i5 == 3568674 goto label16;

        if i5 == 1952151455 goto label15;

     label14:
        b6 = -1;

        goto label18;

     label15:
        $z3 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("critical");

        if $z3 == 0 goto label14;

        b6 = 2;

        goto label18;

     label16:
        $z2 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("trim");

        if $z2 == 0 goto label14;

        b6 = 1;

        goto label18;

     label17:
        $z1 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("all");

        if $z1 == 0 goto label14;

        b6 = 0;

     label18:
        if b6 == 0 goto label21;

        if b6 == 1 goto label20;

        if b6 == 2 goto label19;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogLevel(int,java.io.PrintWriter)>(1, r1);

        goto label22;

     label19:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogLevel(int,java.io.PrintWriter)>(2, r1);

        goto label22;

     label20:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogLevel(int,java.io.PrintWriter)>(1, r1);

        goto label22;

     label21:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogLevel(int,java.io.PrintWriter)>(0, r1);

     label22:
        $r16 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r16.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        return 0;

     label23:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogFrequency(boolean,java.io.PrintWriter)>(0, r1);

        $r6 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r6.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        return 0;

     label24:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void setLogFrequency(boolean,java.io.PrintWriter)>(1, r1);

        $r7 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r7.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        return 0;

     label25:
        $r8 = virtualinvoke r0.<com.android.server.wm.WindowTracing: java.lang.String getStatus()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r1, $r8);

        return 0;

     label26:
        virtualinvoke r0.<com.android.server.wm.WindowTracing: void stopTrace(java.io.PrintWriter)>(r1);

        return 0;

     label27:
        virtualinvoke r0.<com.android.server.wm.WindowTracing: void startTrace(java.io.PrintWriter)>(r1);

        return 0;
    }

    void startTrace(java.io.PrintWriter)
    {
        com.android.server.wm.WindowTracing r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        boolean $z0;
        com.android.server.protolog.ProtoLogImpl $r3;
        java.io.File $r5;
        java.lang.String $r8;
        com.android.internal.util.TraceBuffer $r9;
        java.lang.Throwable $r10;
        java.io.PrintWriter r11;

        r0 := @this: com.android.server.wm.WindowTracing;

        r11 := @parameter0: java.io.PrintWriter;

        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r11, "Error: Tracing is not supported on user builds.");

        return;

     label1:
        r1 = r0.<com.android.server.wm.WindowTracing: java.lang.Object mEnabledLock>;

        entermonitor r1;

     label2:
        $r3 = staticinvoke <com.android.server.protolog.ProtoLogImpl: com.android.server.protolog.ProtoLogImpl getSingleInstance()>();

        virtualinvoke $r3.<com.android.server.protolog.ProtoLogImpl: void startProtoLog(java.io.PrintWriter)>(r11);

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start tracing to ");

        $r5 = r0.<com.android.server.wm.WindowTracing: java.io.File mTraceFile>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r11, $r8);

        $r9 = r0.<com.android.server.wm.WindowTracing: com.android.internal.util.TraceBuffer mBuffer>;

        virtualinvoke $r9.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        r0.<com.android.server.wm.WindowTracing: boolean mEnabledLockFree> = 1;

        r0.<com.android.server.wm.WindowTracing: boolean mEnabled> = 1;

        exitmonitor r1;

     label3:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void log(java.lang.String)>("trace.enable");

        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void stopTrace(java.io.PrintWriter)
    {
        com.android.server.wm.WindowTracing r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<com.android.server.wm.WindowTracing: void stopTrace(java.io.PrintWriter,boolean)>(r1, 1);

        return;
    }

    void stopTrace(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowTracing r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.io.File $r3, $r9;
        java.lang.String $r6, $r12;
        com.android.server.protolog.ProtoLogImpl $r7;
        java.lang.Throwable $r13;
        java.io.PrintWriter r14;
        java.lang.StringBuilder r15, r16;

        r0 := @this: com.android.server.wm.WindowTracing;

        r14 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        $z1 = <android.os.Build: boolean IS_USER>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r14, "Error: Tracing is not supported on user builds.");

        return;

     label1:
        r1 = r0.<com.android.server.wm.WindowTracing: java.lang.Object mEnabledLock>;

        entermonitor r1;

     label2:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stop tracing to ");

        $r3 = r0.<com.android.server.wm.WindowTracing: java.io.File mTraceFile>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Waiting for traces to flush.");

        $r6 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r14, $r6);

        r0.<com.android.server.wm.WindowTracing: boolean mEnabledLockFree> = 0;

        r0.<com.android.server.wm.WindowTracing: boolean mEnabled> = 0;

     label3:
        if z0 == 0 goto label5;

     label4:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void writeTraceToFileLocked()>();

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trace written to ");

        $r9 = r0.<com.android.server.wm.WindowTracing: java.io.File mTraceFile>;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wm.WindowTracing: void logAndPrintln(java.io.PrintWriter,java.lang.String)>(r14, $r12);

     label5:
        exitmonitor r1;

     label6:
        $r7 = staticinvoke <com.android.server.protolog.ProtoLogImpl: com.android.server.protolog.ProtoLogImpl getSingleInstance()>();

        virtualinvoke $r7.<com.android.server.protolog.ProtoLogImpl: void stopProtoLog(java.io.PrintWriter,boolean)>(r14, z0);

        return;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void writeTraceToFile()
    {
        com.android.server.wm.WindowTracing r0;
        java.lang.Object r1;
        com.android.server.protolog.ProtoLogImpl $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.wm.WindowTracing;

        r1 = r0.<com.android.server.wm.WindowTracing: java.lang.Object mEnabledLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowTracing: void writeTraceToFileLocked()>();

        exitmonitor r1;

     label2:
        $r3 = staticinvoke <com.android.server.protolog.ProtoLogImpl: com.android.server.protolog.ProtoLogImpl getSingleInstance()>();

        virtualinvoke $r3.<com.android.server.protolog.ProtoLogImpl: void writeProtoLogToFile()>();

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WindowTracing: java.lang.String TRACE_FILENAME> = "/data/misc/wmtrace/wm_trace.pb";

        <com.android.server.wm.WindowTracing: java.lang.String TAG> = "WindowTracing";

        <com.android.server.wm.WindowTracing: long MAGIC_NUMBER_VALUE> = 4990904633914181975L;

        <com.android.server.wm.WindowTracing: int BUFFER_CAPACITY_TRIM> = 2097152;

        <com.android.server.wm.WindowTracing: int BUFFER_CAPACITY_CRITICAL> = 524288;

        <com.android.server.wm.WindowTracing: int BUFFER_CAPACITY_ALL> = 4194304;

        return;
    }
}
