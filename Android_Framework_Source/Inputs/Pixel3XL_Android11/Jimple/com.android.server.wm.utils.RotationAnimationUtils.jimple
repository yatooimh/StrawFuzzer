public class com.android.server.wm.utils.RotationAnimationUtils extends java.lang.Object
{

    public void <init>()
    {
        com.android.server.wm.utils.RotationAnimationUtils r0;

        r0 := @this: com.android.server.wm.utils.RotationAnimationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void createRotationMatrix(int, int, int, android.graphics.Matrix)
    {
        int i0, i1, i2;
        android.graphics.Matrix r0;
        float $f0, $f1, $f2, $f3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: android.graphics.Matrix;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        goto label5;

     label1:
        virtualinvoke r0.<android.graphics.Matrix: void setRotate(float,float,float)>(270.0F, 0.0F, 0.0F);

        $f3 = (float) i1;

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>(0.0F, $f3);

        goto label5;

     label2:
        virtualinvoke r0.<android.graphics.Matrix: void setRotate(float,float,float)>(180.0F, 0.0F, 0.0F);

        $f2 = (float) i1;

        $f1 = (float) i2;

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>($f2, $f1);

        goto label5;

     label3:
        virtualinvoke r0.<android.graphics.Matrix: void setRotate(float,float,float)>(90.0F, 0.0F, 0.0F);

        $f0 = (float) i2;

        virtualinvoke r0.<android.graphics.Matrix: boolean postTranslate(float,float)>($f0, 0.0F);

        goto label5;

     label4:
        virtualinvoke r0.<android.graphics.Matrix: void reset()>();

     label5:
        return;
    }

    public static float getLumaOfSurfaceControl(android.view.Display, android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0;
        android.graphics.Point $r2;
        android.graphics.Rect $r3;
        int $i0, $i1;
        android.graphics.GraphicBuffer $r4;
        android.graphics.ColorSpace $r5;
        float $f0;
        android.view.Display r6;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r7;

        r6 := @parameter0: android.view.Display;

        r0 := @parameter1: android.view.SurfaceControl;

        if r0 != null goto label1;

        return 0.0F;

     label1:
        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        virtualinvoke r6.<android.view.Display: void getSize(android.graphics.Point)>($r2);

        $r3 = new android.graphics.Rect;

        $i1 = $r2.<android.graphics.Point: int x>;

        $i0 = $r2.<android.graphics.Point: int y>;

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        r7 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayers(android.view.SurfaceControl,android.graphics.Rect,float)>(r0, $r3, 1.0F);

        if r7 != null goto label2;

        return 0.0F;

     label2:
        $r4 = virtualinvoke r7.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        $r5 = virtualinvoke r7.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        $f0 = staticinvoke <com.android.server.wm.utils.RotationAnimationUtils: float getMedianBorderLuma(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>($r4, $r5);

        return $f0;
    }

    public static float getMedianBorderLuma(android.graphics.GraphicBuffer, android.graphics.ColorSpace)
    {
        android.media.ImageReader r0;
        android.media.Image$Plane r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20;
        android.view.Surface $r2;
        android.media.Image$Plane[] $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.GraphicBuffer r5;
        android.graphics.ColorSpace r6;
        android.media.Image r7;
        java.nio.ByteBuffer r8;
        float[] r9;

        r5 := @parameter0: android.graphics.GraphicBuffer;

        r6 := @parameter1: android.graphics.ColorSpace;

        if r5 == null goto label8;

        $i4 = virtualinvoke r5.<android.graphics.GraphicBuffer: int getFormat()>();

        if $i4 == 1 goto label1;

        goto label8;

     label1:
        $i5 = virtualinvoke r5.<android.graphics.GraphicBuffer: int getWidth()>();

        $i6 = virtualinvoke r5.<android.graphics.GraphicBuffer: int getHeight()>();

        $i7 = virtualinvoke r5.<android.graphics.GraphicBuffer: int getFormat()>();

        r0 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i5, $i6, $i7, 1);

        $r2 = virtualinvoke r0.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke $r2.<android.view.Surface: void attachAndQueueBufferWithColorSpace(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>(r5, r6);

        r7 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireLatestImage()>();

        if r7 == null goto label7;

        $r3 = virtualinvoke r7.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        $i8 = lengthof $r3;

        if $i8 != 0 goto label2;

        goto label7;

     label2:
        $r4 = virtualinvoke r7.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r1 = $r4[0];

        r8 = virtualinvoke r1.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        i0 = virtualinvoke r7.<android.media.Image: int getWidth()>();

        i1 = virtualinvoke r7.<android.media.Image: int getHeight()>();

        i2 = virtualinvoke r1.<android.media.Image$Plane: int getPixelStride()>();

        i3 = virtualinvoke r1.<android.media.Image$Plane: int getRowStride()>();

        $i10 = i0 * 2;

        $i9 = i1 * 2;

        $i11 = $i10 + $i9;

        r9 = newarray (float)[$i11];

        i16 = 0;

        i17 = 0;

     label3:
        if i17 >= i0 goto label4;

        i18 = i16 + 1;

        $f3 = staticinvoke <com.android.server.wm.utils.RotationAnimationUtils: float getPixelLuminance(java.nio.ByteBuffer,int,int,int,int)>(r8, i17, 0, i2, i3);

        r9[i16] = $f3;

        i16 = i18 + 1;

        $i15 = i1 - 1;

        $f4 = staticinvoke <com.android.server.wm.utils.RotationAnimationUtils: float getPixelLuminance(java.nio.ByteBuffer,int,int,int,int)>(r8, i17, $i15, i2, i3);

        r9[i18] = $f4;

        i17 = i17 + 1;

        goto label3;

     label4:
        i19 = 0;

     label5:
        if i19 >= i1 goto label6;

        i20 = i16 + 1;

        $f1 = staticinvoke <com.android.server.wm.utils.RotationAnimationUtils: float getPixelLuminance(java.nio.ByteBuffer,int,int,int,int)>(r8, 0, i19, i2, i3);

        r9[i16] = $f1;

        i16 = i20 + 1;

        $i14 = i0 - 1;

        $f2 = staticinvoke <com.android.server.wm.utils.RotationAnimationUtils: float getPixelLuminance(java.nio.ByteBuffer,int,int,int,int)>(r8, $i14, i19, i2, i3);

        r9[i20] = $f2;

        i19 = i19 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<android.media.ImageReader: void close()>();

        staticinvoke <java.util.Arrays: void sort(float[])>(r9);

        $i12 = lengthof r9;

        $i13 = $i12 / 2;

        $f0 = r9[$i13];

        return $f0;

     label7:
        return 0.0F;

     label8:
        return 0.0F;
    }

    private static float getPixelLuminance(java.nio.ByteBuffer, int, int, int, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, i2, $i3, $i4, $i7, $i8, $i9, $i12, $i13, $i14, $i17, $i18, $i21, $i22, i23, i24;
        byte $b5, $b10, $b15, $b19;
        short $s6, $s11, $s16, $s20;
        android.graphics.Color $r1;
        float $f0;

        r0 := @parameter0: java.nio.ByteBuffer;

        i23 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i4 = i0 * i2;

        $i3 = i23 * i1;

        i24 = $i4 + $i3;

        $b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i24);

        $s6 = $b5 & 255;

        $i7 = $s6 << 16;

        $i9 = 0 | $i7;

        $i8 = i24 + 1;

        $b10 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>($i8);

        $s11 = $b10 & 255;

        $i12 = $s11 << 8;

        $i14 = $i9 | $i12;

        $i13 = i24 + 2;

        $b15 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>($i13);

        $s16 = $b15 & 255;

        $i18 = $i14 | $s16;

        $i17 = i24 + 3;

        $b19 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>($i17);

        $s20 = $b19 & 255;

        $i21 = $s20 << 24;

        $i22 = $i18 | $i21;

        $r1 = staticinvoke <android.graphics.Color: android.graphics.Color valueOf(int)>($i22);

        $f0 = virtualinvoke $r1.<android.graphics.Color: float luminance()>();

        return $f0;
    }
}
