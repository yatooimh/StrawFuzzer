public class com.android.uiautomator.core.AccessibilityNodeInfoDumper extends java.lang.Object
{
    private static final java.lang.String LOGTAG;
    private static final java.lang.String[] NAF_EXCLUDED_CLASSES;

    static void <clinit>()
    {
        java.lang.Class $r0, $r3, $r5, $r7, $r9;
        java.lang.String $r1, $r4, $r6, $r8, $r10;
        java.lang.String[] $r2;

        $r0 = class "Lcom/android/uiautomator/core/AccessibilityNodeInfoDumper;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r3 = class "Landroid/widget/GridView;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = class "Landroid/widget/GridLayout;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r2[1] = $r6;

        $r7 = class "Landroid/widget/ListView;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r2[2] = $r8;

        $r9 = class "Landroid/widget/TableLayout;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r2[3] = $r10;

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES> = $r2;

        return;
    }

    public void <init>()
    {
        com.android.uiautomator.core.AccessibilityNodeInfoDumper r0;

        r0 := @this: com.android.uiautomator.core.AccessibilityNodeInfoDumper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r1;
        int i0, i1;
        java.lang.CharSequence $r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i1);

        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r3 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r5 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        goto label4;

     label2:
        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;

     label5:
        return 0;
    }

    private static void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo, org.xmlpull.v1.XmlSerializer, int, int, int) throws java.io.IOException
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r2;
        org.xmlpull.v1.XmlSerializer r1;
        int i0, i1, i2, i5, i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.Object[] $r22, $r28;
        java.lang.String $r23, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r36, $r37, $r38, $r40, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r56;
        java.lang.Integer $r24, $r25;
        java.lang.CharSequence $r35, $r39, $r41, $r43;
        android.graphics.Rect $r55;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: org.xmlpull.v1.XmlSerializer;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "node");

        $z0 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z2 != 0 goto label1;

        $r32 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "NAF", $r32);

     label1:
        $r34 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "index", $r34);

        $r35 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r36 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r35);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "text", $r36);

        $r37 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        $r38 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r37);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "resource-id", $r38);

        $r39 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        $r40 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r39);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "class", $r40);

        $r41 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        $r42 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r41);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "package", $r42);

        $r43 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r44 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r43);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "content-desc", $r44);

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        $r45 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checkable", $r45);

        $z4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        $r46 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checked", $r46);

        $z5 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        $r47 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "clickable", $r47);

        $z6 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        $r48 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "enabled", $r48);

        $z7 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        $r49 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focusable", $r49);

        $z8 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        $r50 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z8);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focused", $r50);

        $z9 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        $r51 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "scrollable", $r51);

        $z10 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        $r52 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z10);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "long-clickable", $r52);

        $z11 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        $r53 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z11);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "password", $r53);

        $z12 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        $r54 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z12);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "selected", $r54);

        $r55 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo,int,int)>(r0, i0, i1);

        $r56 = virtualinvoke $r55.<android.graphics.Rect: java.lang.String toShortString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "bounds", $r56);

        i2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i6 = 0;

     label2:
        if i6 >= i2 goto label6;

        r2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i6);

        if r2 == null goto label4;

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        if $z1 == 0 goto label3;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r2, r1, i6, i0, i1);

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        goto label5;

     label3:
        $r29 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r28 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r28[0] = $r30;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping invisible child: %s", $r28);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r29, $r31);

        goto label5;

     label4:
        $r23 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r22 = newarray (java.lang.Object)[3];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r22[0] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r22[1] = $r25;

        $r26 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r22[2] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null child %d/%d, parent: %s", $r22);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r23, $r27);

     label5:
        i6 = i6 + 1;

        goto label2;

     label6:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "node");

        return;
    }

    private static void dumpWindowRec(android.view.accessibility.AccessibilityWindowInfo, org.xmlpull.v1.XmlSerializer, int, int, int, int) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, i8, i9;
        java.lang.String $r2, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r22, $r26, $r30, r33;
        android.graphics.Rect $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r25;
        java.lang.Integer $r27, $r28;
        java.lang.CharSequence $r29, r32;
        android.view.accessibility.AccessibilityWindowInfo r31, r35;
        android.view.accessibility.AccessibilityNodeInfo r36;

        r31 := @parameter0: android.view.accessibility.AccessibilityWindowInfo;

        r0 := @parameter1: org.xmlpull.v1.XmlSerializer;

        i8 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "window");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i8);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "index", $r2);

        r32 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>();

        if r32 == null goto label1;

        r33 = interfaceinvoke r32.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        r33 = "";

     label2:
        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "title", r33);

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>($r5);

        $r6 = virtualinvoke $r5.<android.graphics.Rect: java.lang.String toShortString()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "bounds", $r6);

        $z0 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "active", $r8);

        $z1 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focused", $r10);

        $z2 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "accessibility-focused", $r12);

        $i4 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "id", $r14);

        $i5 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "layer", $r16);

        $i6 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: int getType()>();

        $r18 = staticinvoke <android.view.accessibility.AccessibilityWindowInfo: java.lang.String typeToString(int)>($i6);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "type", $r18);

        i3 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>();

        i9 = 0;

     label3:
        if i9 >= i3 goto label6;

        r35 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>(i9);

        if r35 != null goto label4;

        $r26 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r25 = newarray (java.lang.Object)[3];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r25[0] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r25[1] = $r28;

        $r29 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>();

        $r25[2] = $r29;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null window child %d/%d, parent: %s", $r25);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r26, $r30);

        goto label5;

     label4:
        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowRec(android.view.accessibility.AccessibilityWindowInfo,org.xmlpull.v1.XmlSerializer,int,int,int,int)>(r35, r0, i9, i0, i1, i2);

        virtualinvoke r35.<android.view.accessibility.AccessibilityWindowInfo: void recycle()>();

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        r36 = virtualinvoke r31.<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>();

        if r36 == null goto label7;

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "hierarchy");

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "rotation", $r22);

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r36, r0, 0, i0, i1);

        virtualinvoke r36.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "hierarchy");

        goto label7;

     label7:
        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "window");

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, int, int, int)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        int i0, i1, i2;
        java.io.File $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "local");

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<java.io.File: boolean mkdir()>();

        virtualinvoke $r2.<java.io.File: boolean setExecutable(boolean,boolean)>(1, 0);

        virtualinvoke $r2.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        virtualinvoke $r2.<java.io.File: boolean setReadable(boolean,boolean)>(1, 0);

     label1:
        $r4 = new java.io.File;

        $r5 = new java.io.File;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "local");

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "window_dump.xml");

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r0, $r4, i0, i1, i2);

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, java.io.File, int, int, int)
    {
        int i0, i1, i2;
        long l3, l4, $l5;
        java.io.FileWriter r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.Boolean $r2;
        java.lang.String $r4, $r7, $r12, $r14, r19;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r13;
        android.view.accessibility.AccessibilityNodeInfo r15;
        java.io.File r16;
        java.io.StringWriter r17;

        r15 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r16 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if r15 != null goto label1;

        return;

     label1:
        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label2:
        r0 = new java.io.FileWriter;

        specialinvoke r0.<java.io.FileWriter: void <init>(java.io.File)>(r16);

        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

        r17 = new java.io.StringWriter;

        specialinvoke r17.<java.io.StringWriter: void <init>()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>(r17);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", $r2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "hierarchy");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "rotation", $r4);

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r15, r1, 0, i1, i2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "hierarchy");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r7 = virtualinvoke r17.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r0.<java.io.FileWriter: void write(java.lang.String)>($r7);

        virtualinvoke r0.<java.io.FileWriter: void close()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r14, "failed to dump window to file", $r13);

     label5:
        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r19 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetch time: ");

        $l5 = l4 - l3;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r19, $r12);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static void dumpWindowsToFile(android.util.SparseArray, java.io.File, android.hardware.display.DisplayManagerGlobal)
    {
        android.hardware.display.DisplayManagerGlobal r0;
        java.io.FileWriter r1;
        org.xmlpull.v1.XmlSerializer r2;
        java.io.StringWriter r3;
        int i0, i1, i2, i3, $i4, $i6, $i7, i11, i12;
        android.graphics.Point r4;
        java.lang.Boolean $r5;
        java.lang.String $r8, $r14, $r20, r28, $r31;
        java.lang.Object $r12, $r17;
        boolean $z0;
        android.view.accessibility.AccessibilityWindowInfo $r18;
        java.lang.Throwable $r19, $r21, r27;
        android.util.SparseArray r22;
        java.io.File r23;
        long l9, l10, l14, $l15;
        android.view.Display r25;
        java.util.List r26;
        java.lang.StringBuilder $r29;

        r22 := @parameter0: android.util.SparseArray;

        r23 := @parameter1: java.io.File;

        r0 := @parameter2: android.hardware.display.DisplayManagerGlobal;

        $i4 = virtualinvoke r22.<android.util.SparseArray: int size()>();

        if $i4 != 0 goto label01;

        return;

     label01:
        l9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l10 = l9;

     label02:
        r1 = new java.io.FileWriter;

     label03:
        l10 = l9;

     label04:
        specialinvoke r1.<java.io.FileWriter: void <init>(java.io.File)>(r23);

     label05:
        l10 = l9;

     label06:
        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

     label07:
        l10 = l9;

     label08:
        r3 = new java.io.StringWriter;

     label09:
        l10 = l9;

     label10:
        specialinvoke r3.<java.io.StringWriter: void <init>()>();

     label11:
        l10 = l9;

     label12:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>(r3);

     label13:
        l10 = l9;

     label14:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", $r5);

     label15:
        l10 = l9;

     label16:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "displays");

     label17:
        l10 = l9;

     label18:
        i0 = virtualinvoke r22.<android.util.SparseArray: int size()>();

     label19:
        i11 = 0;

     label20:
        if i11 >= i0 goto label50;

        l10 = l9;

     label21:
        i1 = virtualinvoke r22.<android.util.SparseArray: int keyAt(int)>(i11);

     label22:
        l10 = l9;

     label23:
        r25 = virtualinvoke r0.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(i1);

     label24:
        if r25 != null goto label25;

        goto label49;

     label25:
        l10 = l9;

     label26:
        $r12 = virtualinvoke r22.<android.util.SparseArray: java.lang.Object valueAt(int)>(i11);

        r26 = (java.util.List) $r12;

     label27:
        l10 = l9;

     label28:
        $z0 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label30;

     label29:
        goto label49;

     label30:
        l10 = l9;

     label31:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "display");

     label32:
        l10 = l9;

     label33:
        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "id", $r14);

     label34:
        l10 = l9;

     label35:
        i2 = virtualinvoke r25.<android.view.Display: int getRotation()>();

     label36:
        l10 = l9;

     label37:
        r4 = new android.graphics.Point;

     label38:
        l10 = l9;

     label39:
        specialinvoke r4.<android.graphics.Point: void <init>()>();

     label40:
        l10 = l9;

     label41:
        virtualinvoke r25.<android.view.Display: void getSize(android.graphics.Point)>(r4);

     label42:
        l10 = l9;

     label43:
        i3 = interfaceinvoke r26.<java.util.List: int size()>();

     label44:
        i12 = 0;

     label45:
        if i12 >= i3 goto label48;

     label46:
        $r17 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(i12);

        $r18 = (android.view.accessibility.AccessibilityWindowInfo) $r17;

        $i7 = r4.<android.graphics.Point: int x>;

        $i6 = r4.<android.graphics.Point: int y>;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowRec(android.view.accessibility.AccessibilityWindowInfo,org.xmlpull.v1.XmlSerializer,int,int,int,int)>($r18, r2, i12, $i7, $i6, i2);

     label47:
        i12 = i12 + 1;

        goto label45;

     label48:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "display");

     label49:
        i11 = i11 + 1;

        goto label20;

     label50:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "displays");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r8 = virtualinvoke r3.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r1.<java.io.FileWriter: void write(java.lang.String)>($r8);

        virtualinvoke r1.<java.io.FileWriter: void close()>();

     label51:
        goto label55;

     label52:
        $r19 := @caughtexception;

        r27 = $r19;

        goto label54;

     label53:
        $r21 := @caughtexception;

        r27 = $r21;

        l9 = l10;

     label54:
        $r20 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "failed to dump window to file", r27);

     label55:
        l14 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r28 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetch time: ");

        $l15 = l14 - l9;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r28, $r31);

        return;

        catch java.io.IOException from label02 to label03 with label53;
        catch java.io.IOException from label04 to label05 with label53;
        catch java.io.IOException from label06 to label07 with label53;
        catch java.io.IOException from label08 to label09 with label53;
        catch java.io.IOException from label10 to label11 with label53;
        catch java.io.IOException from label12 to label13 with label53;
        catch java.io.IOException from label14 to label15 with label53;
        catch java.io.IOException from label16 to label17 with label53;
        catch java.io.IOException from label18 to label19 with label53;
        catch java.io.IOException from label21 to label22 with label53;
        catch java.io.IOException from label23 to label24 with label53;
        catch java.io.IOException from label26 to label27 with label53;
        catch java.io.IOException from label28 to label29 with label53;
        catch java.io.IOException from label31 to label32 with label53;
        catch java.io.IOException from label33 to label34 with label53;
        catch java.io.IOException from label35 to label36 with label53;
        catch java.io.IOException from label37 to label38 with label53;
        catch java.io.IOException from label39 to label40 with label53;
        catch java.io.IOException from label41 to label42 with label53;
        catch java.io.IOException from label43 to label44 with label53;
        catch java.io.IOException from label46 to label47 with label52;
        catch java.io.IOException from label48 to label49 with label52;
        catch java.io.IOException from label50 to label51 with label52;
    }

    private static boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.CharSequence $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        if $z2 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r1);

        $z3 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r4 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r3);

        $z4 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        if z5 != 0 goto label3;

        return 1;

     label3:
        $z1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        return $z1;
    }

    private static boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)
    {
        java.lang.String r0, $r2;
        int i0, i1;
        java.lang.CharSequence $r1;
        boolean $z0;
        android.view.accessibility.AccessibilityNodeInfo r3;
        java.lang.String[] r4;

        r3 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r1 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        r0 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r1);

        r4 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES>;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r4[i1];

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static java.lang.String safeCharSeqToString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String stripInvalidXMLChars(java.lang.CharSequence)>(r0);

        return $r1;
    }

    private static java.lang.String stripInvalidXMLChars(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        char c0;
        java.lang.StringBuffer $r2;
        int $i1, i2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        i2 = 0;

     label01:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i2 >= $i1 goto label26;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        if c0 < 1 goto label02;

        if c0 <= 8 goto label23;

     label02:
        if c0 < 11 goto label03;

        if c0 <= 12 goto label23;

     label03:
        if c0 < 14 goto label04;

        if c0 <= 31 goto label23;

     label04:
        if c0 < 127 goto label05;

        if c0 <= 132 goto label23;

     label05:
        if c0 < 134 goto label06;

        if c0 <= 159 goto label23;

     label06:
        if c0 < 64976 goto label07;

        if c0 <= 64991 goto label23;

     label07:
        if c0 < 131070 goto label08;

        if c0 <= 131071 goto label23;

     label08:
        if c0 < 196606 goto label09;

        if c0 <= 196607 goto label23;

     label09:
        if c0 < 262142 goto label10;

        if c0 <= 262143 goto label23;

     label10:
        if c0 < 327678 goto label11;

        if c0 <= 327679 goto label23;

     label11:
        if c0 < 393214 goto label12;

        if c0 <= 393215 goto label23;

     label12:
        if c0 < 458750 goto label13;

        if c0 <= 458751 goto label23;

     label13:
        if c0 < 524286 goto label14;

        if c0 <= 524287 goto label23;

     label14:
        if c0 < 589822 goto label15;

        if c0 <= 589823 goto label23;

     label15:
        if c0 < 655358 goto label16;

        if c0 <= 655359 goto label23;

     label16:
        if c0 < 720894 goto label17;

        if c0 <= 720895 goto label23;

     label17:
        if c0 < 786430 goto label18;

        if c0 <= 786431 goto label23;

     label18:
        if c0 < 851966 goto label19;

        if c0 <= 851967 goto label23;

     label19:
        if c0 < 917502 goto label20;

        if c0 <= 917503 goto label23;

     label20:
        if c0 < 983038 goto label21;

        if c0 <= 983039 goto label23;

     label21:
        if c0 < 1048574 goto label22;

        if c0 <= 1048575 goto label23;

     label22:
        if c0 < 1114110 goto label24;

        if c0 > 1114111 goto label24;

     label23:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        goto label25;

     label24:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label25:
        i2 = i2 + 1;

        goto label01;

     label26:
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }
}
