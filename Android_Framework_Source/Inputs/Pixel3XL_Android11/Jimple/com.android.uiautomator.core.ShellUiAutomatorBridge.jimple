public class com.android.uiautomator.core.ShellUiAutomatorBridge extends com.android.uiautomator.core.UiAutomatorBridge
{
    private static final java.lang.String LOG_TAG;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Lcom/android/uiautomator/core/ShellUiAutomatorBridge;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.app.UiAutomation)
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.app.UiAutomation r1;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<com.android.uiautomator.core.UiAutomatorBridge: void <init>(android.app.UiAutomation)>(r1);

        return;
    }

    public android.view.Display getDefaultDisplay()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.hardware.display.DisplayManagerGlobal $r1;
        android.view.Display $r2;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r1 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        return $r2;
    }

    public int getRotation()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        int i0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;
        android.view.IWindowManager r5;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        r5 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

     label1:
        i0 = interfaceinvoke r5.<android.view.IWindowManager: int getDefaultDisplayRotation()>();

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Error getting screen rotation", $r2);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getSystemLongPressTime()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.app.IActivityManager r1;
        java.lang.String r2, $r5, $r10;
        android.os.Binder r3;
        int i0;
        android.net.Uri $r4, r16;
        java.lang.String[] $r6, $r7;
        boolean $z0;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r11;
        long l1;
        android.content.IContentProvider r12, r15;
        android.database.Cursor r13, r18;
        android.app.ContentProviderHolder r14;
        android.os.Bundle r17;
        java.lang.IllegalStateException r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        l1 = 0L;

     label01:
        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        r2 = virtualinvoke $r4.<android.net.Uri: java.lang.String getAuthority()>();

        r3 = new android.os.Binder;

        specialinvoke r3.<android.os.Binder: void <init>()>();

     label02:
        r12 = null;

        r13 = null;

     label03:
        r14 = interfaceinvoke r1.<android.app.IActivityManager: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>(r2, 0, r3, "*uiautomator*");

     label04:
        if r14 == null goto label22;

        r12 = null;

        r13 = null;

     label05:
        r15 = r14.<android.app.ContentProviderHolder: android.content.IContentProvider provider>;

     label06:
        r12 = r15;

        r13 = null;

     label07:
        r16 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

     label08:
        r12 = r15;

        r13 = null;

     label09:
        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "long_press_timeout";

        r17 = staticinvoke <android.content.ContentResolver: android.os.Bundle createSqlQueryBundle(java.lang.String,java.lang.String[],java.lang.String)>("name=?", $r6, null);

     label10:
        r12 = r15;

        r13 = null;

     label11:
        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "value";

        r18 = interfaceinvoke r15.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,java.lang.String,android.net.Uri,java.lang.String[],android.os.Bundle,android.os.ICancellationSignal)>(null, null, r16, $r7, r17, null);

     label12:
        r12 = r15;

        r13 = r18;

     label13:
        $z0 = interfaceinvoke r18.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label17;

     label14:
        r12 = r15;

        r13 = r18;

     label15:
        i0 = interfaceinvoke r18.<android.database.Cursor: int getInt(int)>(0);

     label16:
        l1 = (long) i0;

     label17:
        if r18 == null goto label19;

     label18:
        interfaceinvoke r18.<android.database.Cursor: void close()>();

     label19:
        if r15 == null goto label21;

     label20:
        interfaceinvoke r1.<android.app.IActivityManager: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>(r2, r3, 0);

     label21:
        return l1;

     label22:
        r12 = null;

        r13 = null;

     label23:
        r19 = new java.lang.IllegalStateException;

     label24:
        r12 = null;

        r13 = null;

     label25:
        r20 = new java.lang.StringBuilder;

     label26:
        r12 = null;

        r13 = null;

     label27:
        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

     label28:
        r12 = null;

        r13 = null;

     label29:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find provider: ");

     label30:
        r12 = null;

        r13 = null;

     label31:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label32:
        r12 = null;

        r13 = null;

     label33:
        $r5 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

     label34:
        r12 = null;

        r13 = null;

     label35:
        throw r19;

     label36:
        $r8 := @caughtexception;

        if r13 == null goto label38;

     label37:
        interfaceinvoke r13.<android.database.Cursor: void close()>();

     label38:
        if r12 == null goto label40;

     label39:
        interfaceinvoke r1.<android.app.IActivityManager: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>(r2, r3, 0);

     label40:
        throw $r8;

     label41:
        $r9 := @caughtexception;

        $r10 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Error reading long press timeout setting.", $r9);

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading long press timeout setting.", $r9);

        throw $r11;

        catch android.os.RemoteException from label01 to label02 with label41;
        catch java.lang.Throwable from label03 to label04 with label36;
        catch java.lang.Throwable from label05 to label06 with label36;
        catch java.lang.Throwable from label07 to label08 with label36;
        catch java.lang.Throwable from label09 to label10 with label36;
        catch java.lang.Throwable from label11 to label12 with label36;
        catch java.lang.Throwable from label13 to label14 with label36;
        catch java.lang.Throwable from label15 to label16 with label36;
        catch android.os.RemoteException from label18 to label19 with label41;
        catch android.os.RemoteException from label20 to label21 with label41;
        catch java.lang.Throwable from label23 to label24 with label36;
        catch java.lang.Throwable from label25 to label26 with label36;
        catch java.lang.Throwable from label27 to label28 with label36;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Throwable from label35 to label36 with label36;
        catch android.os.RemoteException from label37 to label38 with label41;
        catch android.os.RemoteException from label39 to label40 with label41;
        catch android.os.RemoteException from label40 to label41 with label41;
    }

    public boolean isScreenOn()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        boolean z0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.String $r3;
        java.lang.RuntimeException $r4;
        android.os.IPowerManager r5;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        r5 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>($r1);

     label1:
        z0 = interfaceinvoke r5.<android.os.IPowerManager: boolean isInteractive()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Error getting screen status", $r2);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
