public class com.android.uiautomator.testrunner.UiAutomatorTestCase extends junit.framework.TestCase
{
    private static final java.lang.String DISABLE_IME;
    private static final java.lang.String DUMMY_IME_PACKAGE;
    private static final int NOT_A_SUBTYPE_ID;
    private com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport;
    private android.os.Bundle mParams;
    private boolean mShouldDisableIme;
    private com.android.uiautomator.core.UiDevice mUiDevice;

    public void <init>()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme> = 0;

        return;
    }

    private void restoreActiveIme()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        return;
    }

    private void setDummyIme()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.view.inputmethod.InputMethodInfo r1;
        java.lang.RuntimeException $r2, $r5;
        java.lang.Object $r3, $r8;
        android.view.inputmethod.InputMethodManager $r4;
        boolean $z0, $z3;
        java.lang.Object[] $r6;
        java.lang.String $r7, $r9, $r11, r14;
        int $i0;
        android.content.ComponentName $r10;
        android.app.Application r12;
        java.util.List r13;
        java.util.Iterator r15;
        android.content.ContentResolver r16;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r12 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        if r12 == null goto label6;

        $r3 = virtualinvoke r12.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        $r4 = (android.view.inputmethod.InputMethodManager) $r3;

        r13 = virtualinvoke $r4.<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>();

        r14 = null;

        r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.view.inputmethod.InputMethodInfo) $r8;

        $r9 = "com.android.testing.dummyime";

        $r10 = virtualinvoke r1.<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>();

        $r11 = virtualinvoke $r10.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label2;

        r14 = virtualinvoke r1.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

     label2:
        goto label1;

     label3:
        if r14 == null goto label5;

        $i0 = virtualinvoke r12.<android.content.Context: int checkSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i0 == 0 goto label4;

        return;

     label4:
        r16 = virtualinvoke r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r16, "selected_input_method_subtype", -1);

        staticinvoke <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r16, "default_input_method", r14);

        return;

     label5:
        $r5 = new java.lang.RuntimeException;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "com.android.testing.dummyime";

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Required testing fixture missing: IME package (%s)", $r6);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label6:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("ActivityThread.currentApplication() is null.");

        throw $r2;
    }

    public com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.testrunner.IAutomationSupport $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        return $r1;
    }

    public android.os.Bundle getParams()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.os.Bundle $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams>;

        return $r1;
    }

    public com.android.uiautomator.core.UiDevice getUiDevice()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.core.UiDevice $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice mUiDevice>;

        return $r1;
    }

    void setAutomationSupport(com.android.uiautomator.testrunner.IAutomationSupport)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.testrunner.IAutomationSupport r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: com.android.uiautomator.testrunner.IAutomationSupport;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport> = r1;

        return;
    }

    void setParams(android.os.Bundle)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.os.Bundle r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: android.os.Bundle;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams> = r1;

        return;
    }

    void setUiDevice(com.android.uiautomator.core.UiDevice)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.core.UiDevice r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: com.android.uiautomator.core.UiDevice;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice mUiDevice> = r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        boolean z0;
        android.os.Bundle $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        $r2 = "true";

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("disable_ime");

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setDummyIme()>();

     label1:
        return;
    }

    public void sleep(long)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        long l0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        l0 := @parameter0: long;

        staticinvoke <android.os.SystemClock: void sleep(long)>(l0);

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $z0 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void restoreActiveIme()>();

     label1:
        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.uiautomator.testrunner.UiAutomatorTestCase: int NOT_A_SUBTYPE_ID> = -1;

        <com.android.uiautomator.testrunner.UiAutomatorTestCase: java.lang.String DUMMY_IME_PACKAGE> = "com.android.testing.dummyime";

        <com.android.uiautomator.testrunner.UiAutomatorTestCase: java.lang.String DISABLE_IME> = "disable_ime";

        return;
    }
}
