class com.android.uiautomator.testrunner.UiAutomatorTestRunner$2 extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    final com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0;

    void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$2 r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$2;

        r1 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$2 r0;
        java.lang.Throwable r1;
        java.lang.String $r2, $r5, $r6;
        android.os.Bundle $r3;
        java.lang.Class $r4;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r7;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher $r8;
        java.lang.Thread r9;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$2;

        r9 := @parameter0: java.lang.Thread;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = staticinvoke <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String access$200()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "uncaught exception", r1);

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("shortMsg", $r5);

        $r6 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("longMsg", $r6);

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0>;

        $r8 = staticinvoke <com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher access$100(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>($r7);

        virtualinvoke $r8.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher: void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)>(null, 0, $r3);

        staticinvoke <java.lang.System: void exit(int)>(-1);

        return;
    }
}
