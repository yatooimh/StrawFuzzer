public class com.android.uiautomator.testrunner.UiAutomatorTestRunner extends java.lang.Object
{
    private static final int EXIT_EXCEPTION;
    private static final int EXIT_OK;
    private static final java.lang.String HANDLER_THREAD_NAME;
    private static final java.lang.String LOGTAG;
    private final com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport;
    private boolean mDebug;
    private android.os.HandlerThread mHandlerThread;
    private boolean mMonkey;
    private android.os.Bundle mParams;
    private java.util.List mTestClasses;
    private final java.util.List mTestListeners;
    private com.android.uiautomator.core.UiDevice mUiDevice;
    private final com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String HANDLER_THREAD_NAME> = "UiAutomatorHandlerThread";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: int EXIT_OK> = 0;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: int EXIT_EXCEPTION> = -1;

        $r0 = class "Lcom/android/uiautomator/testrunner/UiAutomatorTestRunner;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String LOGTAG> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher $r1;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$1 $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams> = null;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses> = null;

        $r1 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher;

        specialinvoke $r1.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,com.android.uiautomator.testrunner.UiAutomatorTestRunner$1)>(r0, null);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher> = $r1;

        $r2 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$1;

        specialinvoke $r2.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$1: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>(r0);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners> = $r3;

        return;
    }

    static com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher access$100(com.android.uiautomator.testrunner.UiAutomatorTestRunner)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher $r1;

        r0 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher>;

        return $r1;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String LOGTAG>;

        return $r0;
    }

    static com.android.uiautomator.testrunner.IAutomationSupport access$300(com.android.uiautomator.testrunner.UiAutomatorTestRunner)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.IAutomationSupport $r1;

        r0 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        return $r1;
    }

    protected void addTestListener(junit.framework.TestListener)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestListener r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    protected com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        java.lang.ClassLoader r1;
        com.android.uiautomator.testrunner.TestCaseCollector $r2;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new com.android.uiautomator.testrunner.TestCaseCollector;

        $r3 = virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>();

        specialinvoke $r2.<com.android.uiautomator.testrunner.TestCaseCollector: void <init>(java.lang.ClassLoader,com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter)>(r1, $r3);

        return $r2;
    }

    public com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = new com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter;

        specialinvoke $r1.<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: void <init>()>();

        return $r1;
    }

    protected void prepareTestCase(junit.framework.TestCase)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestCase r1;
        com.android.uiautomator.testrunner.IAutomationSupport $r2;
        com.android.uiautomator.testrunner.UiAutomatorTestCase $r3, $r5, $r7;
        com.android.uiautomator.core.UiDevice $r4;
        android.os.Bundle $r6;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestCase;

        $r3 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        virtualinvoke $r3.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setAutomationSupport(com.android.uiautomator.testrunner.IAutomationSupport)>($r2);

        $r5 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r4 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.core.UiDevice mUiDevice>;

        virtualinvoke $r5.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setUiDevice(com.android.uiautomator.core.UiDevice)>($r4);

        $r7 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r6 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        virtualinvoke $r7.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setParams(android.os.Bundle)>($r6);

        return;
    }

    protected void removeTestListener(junit.framework.TestListener)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestListener r1;
        java.util.List $r2;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void run(java.util.List, android.os.Bundle, boolean, boolean)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        java.util.List r1;
        android.os.Bundle r2;
        boolean z0, z1;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$2 $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.os.Bundle;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$2;

        specialinvoke $r3.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>(r0);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r3);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses> = r1;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams> = r2;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mDebug> = z0;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mMonkey> = z1;

        virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void start()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    protected void start()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        long l0, $l2, $l3, $l4, $l5;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.util.List $r5, $r16, r39;
        boolean $z0, $z1, $z2, $z3, $z6;
        android.os.HandlerThread $r6, $r7, $r17, $r35;
        com.android.uiautomator.core.UiAutomationShellWrapper $r8;
        junit.framework.TestResult $r9;
        android.os.Bundle $r10, $r11, $r15, $r23;
        java.lang.String $r12, $r30, $r33, r38, r44, r46;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter $r13;
        int $i1;
        android.app.UiAutomation $r14;
        java.lang.Object $r18, $r19;
        junit.framework.TestListener $r20;
        java.lang.Enum $r21;
        com.android.uiautomator.core.Tracer$Mode $r22, $r26, r45;
        com.android.uiautomator.core.Tracer $r24, $r25;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r27;
        java.io.PrintStream $r28;
        java.lang.Throwable $r29, $r34;
        java.lang.ClassNotFoundException $r31;
        java.lang.RuntimeException $r32, r47;
        com.android.uiautomator.testrunner.TestCaseCollector r36;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter r41;
        com.android.uiautomator.core.UiDevice r42;
        com.android.uiautomator.core.ShellUiAutomatorBridge r43;
        java.util.Iterator r48, r49;
        junit.framework.TestCase r50;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r36 = virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)>($r4);

     label01:
        $r5 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses>;

        virtualinvoke r36.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClasses(java.util.List)>($r5);

     label02:
        $z0 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mDebug>;

        if $z0 == 0 goto label03;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label03:
        $r6 = new android.os.HandlerThread;

        specialinvoke $r6.<android.os.HandlerThread: void <init>(java.lang.String)>("UiAutomatorHandlerThread");

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread> = $r6;

        virtualinvoke $r6.<android.os.HandlerThread: void setDaemon(boolean)>(1);

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r7.<android.os.HandlerThread: void start()>();

        $r8 = new com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void <init>()>();

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r9 = new junit.framework.TestResult;

        specialinvoke $r9.<junit.framework.TestResult: void <init>()>();

        $r10 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r38 = virtualinvoke $r10.<android.os.Bundle: java.lang.String getString(java.lang.String)>("outputFormat");

        r39 = virtualinvoke r36.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()>();

        $r11 = new android.os.Bundle;

        specialinvoke $r11.<android.os.Bundle: void <init>()>();

        $r12 = "simple";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r38);

        if $z1 == 0 goto label04;

        $r27 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter;

        $r28 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r27.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,java.io.PrintStream,boolean)>(r0, $r28, 1);

        r41 = $r27;

        goto label05;

     label04:
        $r13 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        $i1 = interfaceinvoke r39.<java.util.List: int size()>();

        specialinvoke $r13.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,int)>(r0, $i1);

        r41 = $r13;

     label05:
        $z2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mMonkey>;

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>($z2);

        r42 = staticinvoke <com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.core.UiDevice mUiDevice> = r42;

        r43 = new com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r14 = virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>();

        specialinvoke r43.<com.android.uiautomator.core.ShellUiAutomatorBridge: void <init>(android.app.UiAutomation)>($r14);

        virtualinvoke r42.<com.android.uiautomator.core.UiDevice: void initialize(com.android.uiautomator.core.UiAutomatorBridge)>(r43);

        $r15 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r44 = virtualinvoke $r15.<android.os.Bundle: java.lang.String getString(java.lang.String)>("traceOutputMode");

     label06:
        if r44 == null goto label14;

     label07:
        $r21 = staticinvoke <com.android.uiautomator.core.Tracer$Mode: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/android/uiautomator/core/Tracer$Mode;", r44);

        r45 = (com.android.uiautomator.core.Tracer$Mode) $r21;

        $r22 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode FILE>;

        if r45 == $r22 goto label08;

        $r26 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode ALL>;

        if r45 != $r26 goto label11;

     label08:
        $r23 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r46 = virtualinvoke $r23.<android.os.Bundle: java.lang.String getString(java.lang.String)>("traceLogFilename");

     label09:
        if r46 == null goto label13;

     label10:
        $r24 = staticinvoke <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>();

        virtualinvoke $r24.<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)>(r46);

     label11:
        $r25 = staticinvoke <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>();

        virtualinvoke $r25.<com.android.uiautomator.core.Tracer: void setOutputMode(com.android.uiautomator.core.Tracer$Mode)>(r45);

     label12:
        goto label14;

     label13:
        r47 = new java.lang.RuntimeException;

        specialinvoke r47.<java.lang.RuntimeException: void <init>(java.lang.String)>("Name of log file not specified. Please specify it using traceLogFilename parameter");

        throw r47;

     label14:
        virtualinvoke $r9.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>(r41);

        $r16 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        r48 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z6 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label17;

        $r19 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (junit.framework.TestListener) $r19;

        virtualinvoke $r9.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>($r20);

     label16:
        goto label15;

     label17:
        r49 = interfaceinvoke r39.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z3 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label20;

        $r18 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (junit.framework.TestCase) $r18;

        virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void prepareTestCase(junit.framework.TestCase)>(r50);

        virtualinvoke r50.<junit.framework.TestCase: void run(junit.framework.TestResult)>($r9);

     label19:
        goto label18;

     label20:
        goto label23;

     label21:
        $r29 := @caughtexception;

     label22:
        interfaceinvoke r41.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void printUnexpectedError(java.lang.Throwable)>($r29);

        $r30 = virtualinvoke $r29.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r11.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("shortMsg", $r30);

     label23:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = $l2 - l0;

        interfaceinvoke r41.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void print(junit.framework.TestResult,long,android.os.Bundle)>($r9, $l3, $r11);

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>(0);

        $r17 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r17.<android.os.HandlerThread: boolean quit()>();

        return;

     label24:
        $r34 := @caughtexception;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = $l4 - l0;

        interfaceinvoke r41.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void print(junit.framework.TestResult,long,android.os.Bundle)>($r9, $l5, $r11);

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        virtualinvoke $r8.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>(0);

        $r35 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r35.<android.os.HandlerThread: boolean quit()>();

        throw $r34;

     label25:
        $r31 := @caughtexception;

        $r32 = new java.lang.RuntimeException;

        $r33 = virtualinvoke $r31.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r33, $r31);

        throw $r32;

        catch java.lang.ClassNotFoundException from label01 to label02 with label25;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label22 to label23 with label24;
    }
}
