public class com.google.android.rappor.Encoder extends java.lang.Object
{
    private static final byte HMAC_DRBG_TYPE_COHORT;
    private static final byte HMAC_DRBG_TYPE_PRR;
    public static final int MAX_BITS;
    public static final int MAX_BLOOM_HASHES;
    public static final int MAX_COHORTS;
    public static final int MIN_USER_SECRET_BYTES;
    public static final long VERSION;
    private final int cohort;
    private final byte[] encoderIdBytes;
    private final java.util.BitSet inputMask;
    private final java.security.MessageDigest md5;
    private final int numBits;
    private final int numBloomHashes;
    private final int numCohorts;
    private final double probabilityF;
    private final double probabilityP;
    private final double probabilityQ;
    private final java.util.Random random;
    private final java.security.MessageDigest sha256;
    private final byte[] userSecret;

    public void <init>(java.util.Random, java.security.MessageDigest, java.security.MessageDigest, byte[], java.lang.String, int, double, double, double, int, int)
    {
        com.google.android.rappor.Encoder r0;
        java.security.MessageDigest r1, r2, $r5, $r6, $r7, $r8;
        byte[] r3, $r10, $r13, $r14;
        java.lang.String r4;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i16, $i17;
        double d0, d1, d2, $d3, $d4, $d5;
        java.nio.charset.Charset $r9;
        java.security.SecureRandom $r11;
        byte $b4, $b10, $b11, $b12, $b14, $b15;
        com.google.android.rappor.HmacDrbg $r12;
        java.nio.ByteBuffer $r15;
        java.lang.Throwable $r16, $r18;
        java.lang.AssertionError $r17, $r19;
        java.util.Random r20;
        boolean z0, z1, z2, z3, z4, z5, z6, z7;
        long $l13;
        java.util.BitSet $r21;

        r0 := @this: com.google.android.rappor.Encoder;

        r20 := @parameter0: java.util.Random;

        r1 := @parameter1: java.security.MessageDigest;

        r2 := @parameter2: java.security.MessageDigest;

        r3 := @parameter3: byte[];

        r4 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        d0 := @parameter6: double;

        d1 := @parameter7: double;

        d2 := @parameter8: double;

        i1 := @parameter9: int;

        i2 := @parameter10: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label01;

        r0.<com.google.android.rappor.Encoder: java.security.MessageDigest md5> = r1;

        goto label02;

     label01:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        r0.<com.google.android.rappor.Encoder: java.security.MessageDigest md5> = $r5;

     label02:
        $r6 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest md5>;

        virtualinvoke $r6.<java.security.MessageDigest: void reset()>();

        if r2 == null goto label03;

        r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256> = r2;

        goto label04;

     label03:
        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256> = $r7;

     label04:
        $r8 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        virtualinvoke $r8.<java.security.MessageDigest: void reset()>();

        $r9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);

        r0.<com.google.android.rappor.Encoder: byte[] encoderIdBytes> = $r10;

        if r20 == null goto label05;

        r0.<com.google.android.rappor.Encoder: java.util.Random random> = r20;

        goto label06;

     label05:
        $r11 = new java.security.SecureRandom;

        specialinvoke $r11.<java.security.SecureRandom: void <init>()>();

        r0.<com.google.android.rappor.Encoder: java.util.Random random> = $r11;

     label06:
        $i3 = lengthof r3;

        if $i3 < 48 goto label07;

        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z0, "userSecret must be at least 48 bytes of high-quality entropy.");

        r0.<com.google.android.rappor.Encoder: byte[] userSecret> = r3;

        $b4 = d0 cmpl 0.0;

        if $b4 < 0 goto label09;

        $b12 = d0 cmpg 1.0;

        if $b12 > 0 goto label09;

        z1 = 1;

        goto label10;

     label09:
        z1 = 0;

     label10:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z1, "probabilityF must be on range [0.0, 1.0]");

        $d3 = d0 * 128.0;

        $l13 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $d4 = (double) $l13;

        $d5 = $d4 / 128.0;

        r0.<com.google.android.rappor.Encoder: double probabilityF> = $d5;

        $b14 = d1 cmpl 0.0;

        if $b14 < 0 goto label11;

        $b11 = d1 cmpg 1.0;

        if $b11 > 0 goto label11;

        z2 = 1;

        goto label12;

     label11:
        z2 = 0;

     label12:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z2, "probabilityP must be on range [0.0, 1.0]");

        r0.<com.google.android.rappor.Encoder: double probabilityP> = d1;

        $b15 = d2 cmpl 0.0;

        if $b15 < 0 goto label13;

        $b10 = d2 cmpg 1.0;

        if $b10 > 0 goto label13;

        z3 = 1;

        goto label14;

     label13:
        z3 = 0;

     label14:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z3, "probabilityQ must be on range [0.0, 1.0]");

        r0.<com.google.android.rappor.Encoder: double probabilityQ> = d2;

        if i0 < 1 goto label15;

        if i0 > 4096 goto label15;

        z4 = 1;

        goto label16;

     label15:
        z4 = 0;

     label16:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z4, "numBits must be on range [1, 4096].");

        r0.<com.google.android.rappor.Encoder: int numBits> = i0;

        $r21 = new java.util.BitSet;

        specialinvoke $r21.<java.util.BitSet: void <init>(int)>(i0);

        r0.<com.google.android.rappor.Encoder: java.util.BitSet inputMask> = $r21;

        virtualinvoke $r21.<java.util.BitSet: void set(int,int,boolean)>(0, i0, 1);

        if i2 < 1 goto label17;

        if i2 > i0 goto label17;

        z5 = 1;

        goto label18;

     label17:
        z5 = 0;

     label18:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z5, "numBloomHashes must be on range [1, numBits).");

        r0.<com.google.android.rappor.Encoder: int numBloomHashes> = i2;

        if i1 < 1 goto label19;

        if i1 > 128 goto label19;

        z6 = 1;

        goto label20;

     label19:
        z6 = 0;

     label20:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z6, "numCohorts must be on range [1, 128].");

        $i16 = i1 - 1;

        $i17 = $i16 & i1;

        if $i17 != 0 goto label21;

        z7 = 1;

        goto label22;

     label21:
        z7 = 0;

     label22:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z7, "numCohorts must be a power of 2.");

        r0.<com.google.android.rappor.Encoder: int numCohorts> = i1;

        $i5 = i1 - 1;

        $r12 = new com.google.android.rappor.HmacDrbg;

        $r13 = newarray (byte)[1];

        $r13[0] = 0;

        specialinvoke $r12.<com.google.android.rappor.HmacDrbg: void <init>(byte[],byte[])>(r3, $r13);

        $r14 = virtualinvoke $r12.<com.google.android.rappor.HmacDrbg: byte[] nextBytes(int)>(4);

        $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r14);

        $i6 = virtualinvoke $r15.<java.nio.ByteBuffer: int getInt()>();

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        $i8 = $i7 % 128;

        $i9 = $i5 & $i8;

        r0.<com.google.android.rappor.Encoder: int cohort> = $i9;

        return;

     label23:
        $r16 := @caughtexception;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r17;

     label24:
        $r18 := @caughtexception;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r19;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label24;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label23;
    }

    public void <init>(byte[], java.lang.String, int, double, double, double, int, int)
    {
        com.google.android.rappor.Encoder r0;
        byte[] r1;
        java.lang.String r2;
        int i0, i1, i2;
        double d0, d1, d2;

        r0 := @this: com.google.android.rappor.Encoder;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        specialinvoke r0.<com.google.android.rappor.Encoder: void <init>(java.util.Random,java.security.MessageDigest,java.security.MessageDigest,byte[],java.lang.String,int,double,double,double,int,int)>(null, null, null, r1, r2, i0, d0, d1, d2, i1, i2);

        return;
    }

    private static void checkArgument(boolean, java.lang.Object)
    {
        boolean z0;
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        if z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    private java.util.BitSet computeInstantaneousRandomizedResponse(java.util.BitSet)
    {
        com.google.android.rappor.Encoder r0;
        java.util.BitSet r1, $r2, $r3, $r4;
        boolean $z0, $z1, z2;
        double $d0, $d1, $d2, d3;
        byte $b0, $b2, $b3;
        int $i1, i4, $i5;
        java.util.Random $r5;
        float $f0;

        r0 := @this: com.google.android.rappor.Encoder;

        r1 := @parameter0: java.util.BitSet;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>()>();

        virtualinvoke $r2.<java.util.BitSet: void or(java.util.BitSet)>(r1);

        $r3 = r0.<com.google.android.rappor.Encoder: java.util.BitSet inputMask>;

        virtualinvoke $r2.<java.util.BitSet: void andNot(java.util.BitSet)>($r3);

        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean isEmpty()>();

        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>($z0, "Input bits had bits set past Encoder\'s numBits limit.");

        $d0 = r0.<com.google.android.rappor.Encoder: double probabilityP>;

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d2 = r0.<com.google.android.rappor.Encoder: double probabilityQ>;

        $b3 = $d2 cmpl 1.0;

        if $b3 != 0 goto label1;

        return r1;

     label1:
        $r4 = new java.util.BitSet;

        $i1 = r0.<com.google.android.rappor.Encoder: int numBits>;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>($i1);

        i4 = 0;

     label2:
        $i5 = r0.<com.google.android.rappor.Encoder: int numBits>;

        if i4 >= $i5 goto label7;

        $z1 = virtualinvoke r1.<java.util.BitSet: boolean get(int)>(i4);

        if $z1 == 0 goto label3;

        d3 = r0.<com.google.android.rappor.Encoder: double probabilityQ>;

        goto label4;

     label3:
        d3 = r0.<com.google.android.rappor.Encoder: double probabilityP>;

     label4:
        $r5 = r0.<com.google.android.rappor.Encoder: java.util.Random random>;

        $f0 = virtualinvoke $r5.<java.util.Random: float nextFloat()>();

        $d1 = (double) $f0;

        $b2 = $d1 cmpg d3;

        if $b2 >= 0 goto label5;

        z2 = 1;

        goto label6;

     label5:
        z2 = 0;

     label6:
        virtualinvoke $r4.<java.util.BitSet: void set(int,boolean)>(i4, z2);

        i4 = i4 + 1;

        goto label2;

     label7:
        return $r4;
    }

    private java.util.BitSet computePermanentRandomizedResponse(java.util.BitSet)
    {
        com.google.android.rappor.Encoder r0;
        byte[] r1, $r6, $r8, $r11, $r13, $r15, r20;
        int i0, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i13, i17, $i18;
        short s1, $s15, $s16;
        java.util.BitSet $r2, $r3, $r16, r18;
        boolean $z0, $z1, z2, z3, z4;
        double $d0, $d1, $d2;
        byte $b2, $b6, $b14;
        java.security.MessageDigest $r4, $r5, $r7, $r9, $r10, $r12;
        com.google.android.rappor.HmacDrbg $r14;
        long $l12;
        java.lang.Throwable $r17;

        r0 := @this: com.google.android.rappor.Encoder;

        r18 := @parameter0: java.util.BitSet;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>()>();

        virtualinvoke $r2.<java.util.BitSet: void or(java.util.BitSet)>(r18);

        $r3 = r0.<com.google.android.rappor.Encoder: java.util.BitSet inputMask>;

        virtualinvoke $r2.<java.util.BitSet: void andNot(java.util.BitSet)>($r3);

        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean isEmpty()>();

        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>($z0, "Input bits had bits set past Encoder\'s numBits limit.");

        $d0 = r0.<com.google.android.rappor.Encoder: double probabilityF>;

        $b2 = $d0 cmpl 0.0;

        if $b2 != 0 goto label01;

        return r18;

     label01:
        entermonitor r0;

     label02:
        $r4 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        $i3 = virtualinvoke $r4.<java.security.MessageDigest: int getDigestLength()>();

        $i4 = $i3 + 1;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(20, $i4);

        r20 = newarray (byte)[$i5];

     label03:
        $b6 = (byte) 1;

        r20[0] = $b6;

     label04:
        $r5 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        virtualinvoke $r5.<java.security.MessageDigest: void reset()>();

        $r7 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        $r6 = r0.<com.google.android.rappor.Encoder: byte[] encoderIdBytes>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r9 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        $r8 = newarray (byte)[1];

        $r8[0] = 0;

        virtualinvoke $r9.<java.security.MessageDigest: void update(byte[])>($r8);

        $r10 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        $r11 = virtualinvoke r18.<java.util.BitSet: byte[] toByteArray()>();

        virtualinvoke $r10.<java.security.MessageDigest: void update(byte[])>($r11);

        $r12 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest sha256>;

        $r13 = virtualinvoke $r12.<java.security.MessageDigest: byte[] digest(byte[])>(r20);

        $i7 = lengthof r20;

        $i8 = $i7 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r20, 1, $i8);

        exitmonitor r0;

     label05:
        $r14 = new com.google.android.rappor.HmacDrbg;

        $r15 = r0.<com.google.android.rappor.Encoder: byte[] userSecret>;

        specialinvoke $r14.<com.google.android.rappor.HmacDrbg: void <init>(byte[],byte[])>($r15, r20);

        $i9 = r0.<com.google.android.rappor.Encoder: int numBits>;

        r1 = virtualinvoke $r14.<com.google.android.rappor.HmacDrbg: byte[] nextBytes(int)>($i9);

        $i11 = r0.<com.google.android.rappor.Encoder: int numBits>;

        $i10 = lengthof r1;

        if $i11 > $i10 goto label06;

        z2 = 1;

        goto label07;

     label06:
        z2 = 0;

     label07:
        staticinvoke <com.google.android.rappor.Encoder: void verify(boolean)>(z2);

        $d1 = r0.<com.google.android.rappor.Encoder: double probabilityF>;

        $d2 = $d1 * 128.0;

        $l12 = staticinvoke <java.lang.Math: long round(double)>($d2);

        i0 = (int) $l12;

        $r16 = new java.util.BitSet;

        $i13 = r0.<com.google.android.rappor.Encoder: int numBits>;

        specialinvoke $r16.<java.util.BitSet: void <init>(int)>($i13);

        i17 = 0;

     label08:
        $i18 = r0.<com.google.android.rappor.Encoder: int numBits>;

        if i17 >= $i18 goto label15;

        $b14 = r1[i17];

        s1 = $b14 & 255;

        $s15 = s1 >> 1;

        if $s15 >= i0 goto label09;

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        if z3 == 0 goto label13;

        $s16 = s1 & 1;

        if $s16 <= 0 goto label11;

        z4 = 1;

        goto label12;

     label11:
        z4 = 0;

     label12:
        virtualinvoke $r16.<java.util.BitSet: void set(int,boolean)>(i17, z4);

        goto label14;

     label13:
        $z1 = virtualinvoke r18.<java.util.BitSet: boolean get(int)>(i17);

        virtualinvoke $r16.<java.util.BitSet: void set(int,boolean)>(i17, $z1);

     label14:
        i17 = i17 + 1;

        goto label08;

     label15:
        return $r16;

     label16:
        $r17 := @caughtexception;

     label17:
        exitmonitor r0;

     label18:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private byte[] encodeBits(java.util.BitSet)
    {
        com.google.android.rappor.Encoder r0;
        byte[] r1, r5;
        java.util.BitSet $r2, $r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: com.google.android.rappor.Encoder;

        r4 := @parameter0: java.util.BitSet;

        $r2 = specialinvoke r0.<com.google.android.rappor.Encoder: java.util.BitSet computePermanentRandomizedResponse(java.util.BitSet)>(r4);

        $r3 = specialinvoke r0.<com.google.android.rappor.Encoder: java.util.BitSet computeInstantaneousRandomizedResponse(java.util.BitSet)>($r2);

        r5 = virtualinvoke $r3.<java.util.BitSet: byte[] toByteArray()>();

        $i0 = r0.<com.google.android.rappor.Encoder: int numBits>;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        r1 = newarray (byte)[$i2];

        $i4 = lengthof r5;

        $i3 = lengthof r1;

        if $i4 > $i3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.android.rappor.Encoder: void verify(boolean)>(z0);

        $i5 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r1, 0, $i5);

        return r1;
    }

    private static void verify(boolean)
    {
        boolean z0;
        java.lang.IllegalStateException $r0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public byte[] encodeBits(byte[])
    {
        com.google.android.rappor.Encoder r0;
        byte[] r1, $r3;
        java.util.BitSet $r2;

        r0 := @this: com.google.android.rappor.Encoder;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <java.util.BitSet: java.util.BitSet valueOf(byte[])>(r1);

        $r3 = specialinvoke r0.<com.google.android.rappor.Encoder: byte[] encodeBits(java.util.BitSet)>($r2);

        return $r3;
    }

    public byte[] encodeBoolean(boolean)
    {
        com.google.android.rappor.Encoder r0;
        boolean z0;
        java.util.BitSet $r2;
        int $i0;
        byte[] $r3;

        r0 := @this: com.google.android.rappor.Encoder;

        z0 := @parameter0: boolean;

        $r2 = new java.util.BitSet;

        $i0 = r0.<com.google.android.rappor.Encoder: int numBits>;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>($i0);

        virtualinvoke $r2.<java.util.BitSet: void set(int,boolean)>(0, z0);

        $r3 = specialinvoke r0.<com.google.android.rappor.Encoder: byte[] encodeBits(java.util.BitSet)>($r2);

        return $r3;
    }

    public byte[] encodeOrdinal(int)
    {
        com.google.android.rappor.Encoder r0;
        int i0, $i1, $i2;
        boolean z0;
        java.util.BitSet $r2;
        byte[] $r3;

        r0 := @this: com.google.android.rappor.Encoder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<com.google.android.rappor.Encoder: int numBits>;

        if i0 >= $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.google.android.rappor.Encoder: void checkArgument(boolean,java.lang.Object)>(z0, "Ordinal value must be in range [0, numBits).");

        $r2 = new java.util.BitSet;

        $i2 = r0.<com.google.android.rappor.Encoder: int numBits>;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>($i2);

        virtualinvoke $r2.<java.util.BitSet: void set(int,boolean)>(i0, 1);

        $r3 = specialinvoke r0.<com.google.android.rappor.Encoder: byte[] encodeBits(java.util.BitSet)>($r2);

        return $r3;
    }

    public byte[] encodeString(java.lang.String)
    {
        com.google.android.rappor.Encoder r0;
        java.nio.charset.Charset $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i14, $i15, $i16, $i17, i18, i19, $i20;
        java.nio.ByteBuffer $r3, $r4, $r5;
        java.security.MessageDigest $r6, $r7;
        java.util.BitSet $r8;
        byte[] $r9, r12, r13, r14;
        byte $b8, $b12;
        short $s9, $s13;
        java.lang.Throwable $r10;
        java.lang.String r11;
        boolean z1, z2;

        r0 := @this: com.google.android.rappor.Encoder;

        r11 := @parameter0: java.lang.String;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r12 = virtualinvoke r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $i0 = lengthof r12;

        $i1 = $i0 + 4;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $i2 = r0.<com.google.android.rappor.Encoder: int cohort>;

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r12);

        r13 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        entermonitor r0;

     label01:
        $r6 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest md5>;

        virtualinvoke $r6.<java.security.MessageDigest: void reset()>();

        $r7 = r0.<com.google.android.rappor.Encoder: java.security.MessageDigest md5>;

        r14 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>(r13);

        exitmonitor r0;

     label02:
        i18 = lengthof r14;

        if i18 != 16 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        staticinvoke <com.google.android.rappor.Encoder: void verify(boolean)>(z1);

        z2 = 0;

        $i5 = r0.<com.google.android.rappor.Encoder: int numBloomHashes>;

        $i3 = lengthof r14;

        $i4 = $i3 / 2;

        if $i5 > $i4 goto label05;

        z2 = 1;

     label05:
        staticinvoke <com.google.android.rappor.Encoder: void verify(boolean)>(z2);

        $r8 = new java.util.BitSet;

        $i6 = r0.<com.google.android.rappor.Encoder: int numBits>;

        specialinvoke $r8.<java.util.BitSet: void <init>(int)>($i6);

        i19 = 0;

     label06:
        $i20 = r0.<com.google.android.rappor.Encoder: int numBloomHashes>;

        if i19 >= $i20 goto label07;

        $i7 = i19 * 2;

        $b8 = r14[$i7];

        $s9 = $b8 & 255;

        $i14 = $s9 * 256;

        $i10 = i19 * 2;

        $i11 = $i10 + 1;

        $b12 = r14[$i11];

        $s13 = $b12 & 255;

        $i16 = $i14 + $s13;

        $i15 = r0.<com.google.android.rappor.Encoder: int numBits>;

        $i17 = $i16 % $i15;

        virtualinvoke $r8.<java.util.BitSet: void set(int,boolean)>($i17, 1);

        i19 = i19 + 1;

        goto label06;

     label07:
        $r9 = specialinvoke r0.<com.google.android.rappor.Encoder: byte[] encodeBits(java.util.BitSet)>($r8);

        return $r9;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int getCohort()
    {
        com.google.android.rappor.Encoder r0;
        int $i0;

        r0 := @this: com.google.android.rappor.Encoder;

        $i0 = r0.<com.google.android.rappor.Encoder: int cohort>;

        return $i0;
    }

    public java.lang.String getEncoderId()
    {
        com.google.android.rappor.Encoder r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;

        r0 := @this: com.google.android.rappor.Encoder;

        $r1 = new java.lang.String;

        $r3 = r0.<com.google.android.rappor.Encoder: byte[] encoderIdBytes>;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r2);

        return $r1;
    }

    public int getNumBits()
    {
        com.google.android.rappor.Encoder r0;
        int $i0;

        r0 := @this: com.google.android.rappor.Encoder;

        $i0 = r0.<com.google.android.rappor.Encoder: int numBits>;

        return $i0;
    }

    public int getNumBloomHashes()
    {
        com.google.android.rappor.Encoder r0;
        int $i0;

        r0 := @this: com.google.android.rappor.Encoder;

        $i0 = r0.<com.google.android.rappor.Encoder: int numBloomHashes>;

        return $i0;
    }

    public int getNumCohorts()
    {
        com.google.android.rappor.Encoder r0;
        int $i0;

        r0 := @this: com.google.android.rappor.Encoder;

        $i0 = r0.<com.google.android.rappor.Encoder: int numCohorts>;

        return $i0;
    }

    public double getProbabilityF()
    {
        com.google.android.rappor.Encoder r0;
        double $d0;

        r0 := @this: com.google.android.rappor.Encoder;

        $d0 = r0.<com.google.android.rappor.Encoder: double probabilityF>;

        return $d0;
    }

    public double getProbabilityP()
    {
        com.google.android.rappor.Encoder r0;
        double $d0;

        r0 := @this: com.google.android.rappor.Encoder;

        $d0 = r0.<com.google.android.rappor.Encoder: double probabilityP>;

        return $d0;
    }

    public double getProbabilityQ()
    {
        com.google.android.rappor.Encoder r0;
        double $d0;

        r0 := @this: com.google.android.rappor.Encoder;

        $d0 = r0.<com.google.android.rappor.Encoder: double probabilityQ>;

        return $d0;
    }

    public static void <clinit>()
    {
        <com.google.android.rappor.Encoder: long VERSION> = 3L;

        <com.google.android.rappor.Encoder: int MIN_USER_SECRET_BYTES> = 48;

        <com.google.android.rappor.Encoder: int MAX_COHORTS> = 128;

        <com.google.android.rappor.Encoder: int MAX_BLOOM_HASHES> = 8;

        <com.google.android.rappor.Encoder: int MAX_BITS> = 4096;

        <com.google.android.rappor.Encoder: byte HMAC_DRBG_TYPE_PRR> = 1;

        <com.google.android.rappor.Encoder: byte HMAC_DRBG_TYPE_COHORT> = 0;

        return;
    }
}
