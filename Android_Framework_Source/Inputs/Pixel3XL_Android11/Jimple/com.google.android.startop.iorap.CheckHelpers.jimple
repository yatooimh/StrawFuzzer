public class com.google.android.startop.iorap.CheckHelpers extends java.lang.Object
{

    public void <init>()
    {
        com.google.android.startop.iorap.CheckHelpers r0;

        r0 := @this: com.google.android.startop.iorap.CheckHelpers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkStateInRange(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r4;
        java.lang.Object[] $r1, $r5;
        java.lang.Integer $r2, $r6, $r7;
        java.lang.String $r3, $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i0 > i1 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("state out of range (value=%d, max=%d)", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("state must be non-negative (value=%d)", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }

    public static void checkTypeInRange(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r4;
        java.lang.Object[] $r1, $r5;
        java.lang.Integer $r2, $r6, $r7;
        java.lang.String $r3, $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i0 > i1 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("type out of range (value=%d, max=%d)", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("type must be non-negative (value=%d)", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r0;
    }
}
