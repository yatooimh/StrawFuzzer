public abstract class com.google.protobuf.CodedInputStream extends java.lang.Object
{
    private static final int DEFAULT_BUFFER_SIZE;
    private static final int DEFAULT_RECURSION_LIMIT;
    private static final int DEFAULT_SIZE_LIMIT;
    int recursionDepth;
    int recursionLimit;
    private boolean shouldDiscardUnknownFields;
    int sizeLimit;
    com.google.protobuf.CodedInputStreamReader wrapper;

    private void <init>()
    {
        com.google.protobuf.CodedInputStream r0;

        r0 := @this: com.google.protobuf.CodedInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.protobuf.CodedInputStream: int recursionLimit> = 100;

        r0.<com.google.protobuf.CodedInputStream: int sizeLimit> = 2147483647;

        r0.<com.google.protobuf.CodedInputStream: boolean shouldDiscardUnknownFields> = 0;

        return;
    }

    void <init>(com.google.protobuf.CodedInputStream$1)
    {
        com.google.protobuf.CodedInputStream r0;
        com.google.protobuf.CodedInputStream$1 r1;

        r0 := @this: com.google.protobuf.CodedInputStream;

        r1 := @parameter0: com.google.protobuf.CodedInputStream$1;

        specialinvoke r0.<com.google.protobuf.CodedInputStream: void <init>()>();

        return;
    }

    public static int decodeZigZag32(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i3 = i0 >>> 1;

        $i1 = i0 & 1;

        $i2 = neg $i1;

        $i4 = $i3 ^ $i2;

        return $i4;
    }

    public static long decodeZigZag64(long)
    {
        long l0, $l1, $l2, $l3, $l4;

        l0 := @parameter0: long;

        $l3 = l0 >>> 1;

        $l1 = 1L & l0;

        $l2 = neg $l1;

        $l4 = $l3 ^ $l2;

        return $l4;
    }

    public static com.google.protobuf.CodedInputStream newInstance(java.io.InputStream)
    {
        java.io.InputStream r0;
        com.google.protobuf.CodedInputStream $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(java.io.InputStream,int)>(r0, 4096);

        return $r1;
    }

    public static com.google.protobuf.CodedInputStream newInstance(java.io.InputStream, int)
    {
        java.io.InputStream r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        com.google.protobuf.CodedInputStream$StreamDecoder $r2;
        byte[] $r3;
        com.google.protobuf.CodedInputStream $r4;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        if i0 <= 0 goto label2;

        if r0 != null goto label1;

        $r3 = <com.google.protobuf.Internal: byte[] EMPTY_BYTE_ARRAY>;

        $r4 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[])>($r3);

        return $r4;

     label1:
        $r2 = new com.google.protobuf.CodedInputStream$StreamDecoder;

        specialinvoke $r2.<com.google.protobuf.CodedInputStream$StreamDecoder: void <init>(java.io.InputStream,int,com.google.protobuf.CodedInputStream$1)>(r0, i0, null);

        return $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bufferSize must be > 0");

        throw $r1;
    }

    public static com.google.protobuf.CodedInputStream newInstance(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        boolean $z0;
        com.google.protobuf.CodedInputStream $r1, $r3;
        com.google.protobuf.IterableByteBufferInputStream $r2;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = staticinvoke <com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder: boolean isSupported()>();

        if $z0 != 0 goto label1;

        $r2 = new com.google.protobuf.IterableByteBufferInputStream;

        specialinvoke $r2.<com.google.protobuf.IterableByteBufferInputStream: void <init>(java.lang.Iterable)>(r0);

        $r3 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(java.io.InputStream)>($r2);

        return $r3;

     label1:
        $r1 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(java.lang.Iterable,boolean)>(r0, 0);

        return $r1;
    }

    static com.google.protobuf.CodedInputStream newInstance(java.lang.Iterable, boolean)
    {
        java.lang.Iterable r0;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r1;
        java.nio.ByteBuffer r2;
        com.google.protobuf.IterableByteBufferInputStream $r3;
        com.google.protobuf.CodedInputStream $r4;
        com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder $r5;
        java.lang.Object $r6;
        int $i0, i2;
        byte b1;

        r0 := @parameter0: java.lang.Iterable;

        z0 := @parameter1: boolean;

        b1 = 0;

        i2 = 0;

        r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.nio.ByteBuffer) $r6;

        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        i2 = i2 + $i0;

        $z2 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label2;

        b1 = b1 | 1;

        goto label4;

     label2:
        $z3 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z3 == 0 goto label3;

        b1 = b1 | 2;

        goto label4;

     label3:
        b1 = b1 | 4;

     label4:
        goto label1;

     label5:
        if b1 != 2 goto label6;

        $r5 = new com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder;

        specialinvoke $r5.<com.google.protobuf.CodedInputStream$IterableDirectByteBufferDecoder: void <init>(java.lang.Iterable,int,boolean,com.google.protobuf.CodedInputStream$1)>(r0, i2, z0, null);

        return $r5;

     label6:
        $r3 = new com.google.protobuf.IterableByteBufferInputStream;

        specialinvoke $r3.<com.google.protobuf.IterableByteBufferInputStream: void <init>(java.lang.Iterable)>(r0);

        $r4 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(java.io.InputStream)>($r3);

        return $r4;
    }

    public static com.google.protobuf.CodedInputStream newInstance(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        com.google.protobuf.CodedInputStream $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(java.nio.ByteBuffer,boolean)>(r0, 0);

        return $r1;
    }

    static com.google.protobuf.CodedInputStream newInstance(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer r0, $r2;
        boolean z0, $z1, $z2, $z3;
        byte[] r1, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.google.protobuf.CodedInputStream $r4, $r7;
        com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder $r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i4 = $i2 + $i3;

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $r7 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>($r6, $i4, $i5, z0);

        return $r7;

     label1:
        $z2 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z2 == 0 goto label2;

        $z3 = staticinvoke <com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder: boolean isSupported()>();

        if $z3 == 0 goto label2;

        $r5 = new com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder;

        specialinvoke $r5.<com.google.protobuf.CodedInputStream$UnsafeDirectNioDecoder: void <init>(java.nio.ByteBuffer,boolean,com.google.protobuf.CodedInputStream$1)>(r0, z0, null);

        return $r5;

     label2:
        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        r1 = newarray (byte)[$i0];

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $i1 = lengthof r1;

        $r4 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>(r1, 0, $i1, 1);

        return $r4;
    }

    public static com.google.protobuf.CodedInputStream newInstance(byte[])
    {
        byte[] r0;
        int $i0;
        com.google.protobuf.CodedInputStream $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static com.google.protobuf.CodedInputStream newInstance(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        com.google.protobuf.CodedInputStream $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <com.google.protobuf.CodedInputStream: com.google.protobuf.CodedInputStream newInstance(byte[],int,int,boolean)>(r0, i0, i1, 0);

        return $r1;
    }

    static com.google.protobuf.CodedInputStream newInstance(byte[], int, int, boolean)
    {
        int i0, i1;
        boolean z0;
        com.google.protobuf.CodedInputStream$ArrayDecoder $r0;
        com.google.protobuf.InvalidProtocolBufferException $r1;
        java.lang.IllegalArgumentException $r2;
        byte[] r3;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = new com.google.protobuf.CodedInputStream$ArrayDecoder;

        specialinvoke $r0.<com.google.protobuf.CodedInputStream$ArrayDecoder: void <init>(byte[],int,int,boolean,com.google.protobuf.CodedInputStream$1)>(r3, i0, i1, z0, null);

     label1:
        virtualinvoke $r0.<com.google.protobuf.CodedInputStream$ArrayDecoder: int pushLimit(int)>(i1);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

        catch com.google.protobuf.InvalidProtocolBufferException from label1 to label2 with label3;
    }

    public static int readRawVarint32(int, java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        com.google.protobuf.InvalidProtocolBufferException $r1, $r2, $r3;

        i5 := @parameter0: int;

        r0 := @parameter1: java.io.InputStream;

        $i0 = i5 & 128;

        if $i0 != 0 goto label1;

        return i5;

     label1:
        i6 = i5 & 127;

        i7 = 7;

     label2:
        i8 = i7;

        if i7 >= 32 goto label5;

        i9 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i9 == -1 goto label4;

        $i2 = i9 & 127;

        $i3 = $i2 << i7;

        i6 = i6 | $i3;

        $i4 = i9 & 128;

        if $i4 != 0 goto label3;

        return i6;

     label3:
        i7 = i7 + 7;

        goto label2;

     label4:
        $r3 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>();

        throw $r3;

     label5:
        if i8 >= 64 goto label8;

        i10 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i10 == -1 goto label7;

        $i1 = i10 & 128;

        if $i1 != 0 goto label6;

        return i6;

     label6:
        i8 = i8 + 7;

        goto label5;

     label7:
        $r2 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>();

        throw $r2;

     label8:
        $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException malformedVarint()>();

        throw $r1;
    }

    static int readRawVarint32(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, $i1;
        com.google.protobuf.InvalidProtocolBufferException $r1;

        r0 := @parameter0: java.io.InputStream;

        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i0 == -1 goto label1;

        $i1 = staticinvoke <com.google.protobuf.CodedInputStream: int readRawVarint32(int,java.io.InputStream)>(i0, r0);

        return $i1;

     label1:
        $r1 = staticinvoke <com.google.protobuf.InvalidProtocolBufferException: com.google.protobuf.InvalidProtocolBufferException truncatedMessage()>();

        throw $r1;
    }

    public abstract void checkLastTagWas(int) throws com.google.protobuf.InvalidProtocolBufferException;

    final void discardUnknownFields()
    {
        com.google.protobuf.CodedInputStream r0;

        r0 := @this: com.google.protobuf.CodedInputStream;

        r0.<com.google.protobuf.CodedInputStream: boolean shouldDiscardUnknownFields> = 1;

        return;
    }

    public abstract void enableAliasing(boolean);

    public abstract int getBytesUntilLimit();

    public abstract int getLastTag();

    public abstract int getTotalBytesRead();

    public abstract boolean isAtEnd() throws java.io.IOException;

    public abstract void popLimit(int);

    public abstract int pushLimit(int) throws com.google.protobuf.InvalidProtocolBufferException;

    public abstract boolean readBool() throws java.io.IOException;

    public abstract byte[] readByteArray() throws java.io.IOException;

    public abstract java.nio.ByteBuffer readByteBuffer() throws java.io.IOException;

    public abstract com.google.protobuf.ByteString readBytes() throws java.io.IOException;

    public abstract double readDouble() throws java.io.IOException;

    public abstract int readEnum() throws java.io.IOException;

    public abstract int readFixed32() throws java.io.IOException;

    public abstract long readFixed64() throws java.io.IOException;

    public abstract float readFloat() throws java.io.IOException;

    public abstract com.google.protobuf.MessageLite readGroup(int, com.google.protobuf.Parser, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;

    public abstract void readGroup(int, com.google.protobuf.MessageLite$Builder, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;

    public abstract int readInt32() throws java.io.IOException;

    public abstract long readInt64() throws java.io.IOException;

    public abstract com.google.protobuf.MessageLite readMessage(com.google.protobuf.Parser, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;

    public abstract void readMessage(com.google.protobuf.MessageLite$Builder, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException;

    public abstract byte readRawByte() throws java.io.IOException;

    public abstract byte[] readRawBytes(int) throws java.io.IOException;

    public abstract int readRawLittleEndian32() throws java.io.IOException;

    public abstract long readRawLittleEndian64() throws java.io.IOException;

    public abstract int readRawVarint32() throws java.io.IOException;

    public abstract long readRawVarint64() throws java.io.IOException;

    abstract long readRawVarint64SlowPath() throws java.io.IOException;

    public abstract int readSFixed32() throws java.io.IOException;

    public abstract long readSFixed64() throws java.io.IOException;

    public abstract int readSInt32() throws java.io.IOException;

    public abstract long readSInt64() throws java.io.IOException;

    public abstract java.lang.String readString() throws java.io.IOException;

    public abstract java.lang.String readStringRequireUtf8() throws java.io.IOException;

    public abstract int readTag() throws java.io.IOException;

    public abstract int readUInt32() throws java.io.IOException;

    public abstract long readUInt64() throws java.io.IOException;

    public abstract void readUnknownGroup(int, com.google.protobuf.MessageLite$Builder) throws java.io.IOException;

    public abstract void resetSizeCounter();

    public final int setRecursionLimit(int)
    {
        com.google.protobuf.CodedInputStream r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: com.google.protobuf.CodedInputStream;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        i1 = r0.<com.google.protobuf.CodedInputStream: int recursionLimit>;

        r0.<com.google.protobuf.CodedInputStream: int recursionLimit> = i0;

        return i1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recursion limit cannot be negative: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public final int setSizeLimit(int)
    {
        com.google.protobuf.CodedInputStream r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: com.google.protobuf.CodedInputStream;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        i1 = r0.<com.google.protobuf.CodedInputStream: int sizeLimit>;

        r0.<com.google.protobuf.CodedInputStream: int sizeLimit> = i0;

        return i1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size limit cannot be negative: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    final boolean shouldDiscardUnknownFields()
    {
        com.google.protobuf.CodedInputStream r0;
        boolean $z0;

        r0 := @this: com.google.protobuf.CodedInputStream;

        $z0 = r0.<com.google.protobuf.CodedInputStream: boolean shouldDiscardUnknownFields>;

        return $z0;
    }

    public abstract boolean skipField(int) throws java.io.IOException;

    public abstract boolean skipField(int, com.google.protobuf.CodedOutputStream) throws java.io.IOException;

    public abstract void skipMessage() throws java.io.IOException;

    public abstract void skipMessage(com.google.protobuf.CodedOutputStream) throws java.io.IOException;

    public abstract void skipRawBytes(int) throws java.io.IOException;

    final void unsetDiscardUnknownFields()
    {
        com.google.protobuf.CodedInputStream r0;

        r0 := @this: com.google.protobuf.CodedInputStream;

        r0.<com.google.protobuf.CodedInputStream: boolean shouldDiscardUnknownFields> = 0;

        return;
    }

    public static void <clinit>()
    {
        <com.google.protobuf.CodedInputStream: int DEFAULT_SIZE_LIMIT> = 2147483647;

        <com.google.protobuf.CodedInputStream: int DEFAULT_RECURSION_LIMIT> = 100;

        <com.google.protobuf.CodedInputStream: int DEFAULT_BUFFER_SIZE> = 4096;

        return;
    }
}
