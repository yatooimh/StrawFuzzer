class com.google.protobuf.SmallSortedMap extends java.util.AbstractMap
{
    private java.util.List entryList;
    private boolean isImmutable;
    private volatile com.google.protobuf.SmallSortedMap$DescendingEntrySet lazyDescendingEntrySet;
    private volatile com.google.protobuf.SmallSortedMap$EntrySet lazyEntrySet;
    private final int maxArraySize;
    private java.util.Map overflowEntries;
    private java.util.Map overflowEntriesDescending;

    private void <init>(int)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.util.List $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<com.google.protobuf.SmallSortedMap: int maxArraySize> = i0;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList> = $r1;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries> = $r2;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending> = $r3;

        return;
    }

    void <init>(int, com.google.protobuf.SmallSortedMap$1)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        com.google.protobuf.SmallSortedMap$1 r1;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        i0 := @parameter0: int;

        r1 := @parameter1: com.google.protobuf.SmallSortedMap$1;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void <init>(int)>(i0);

        return;
    }

    static void access$300(com.google.protobuf.SmallSortedMap)
    {
        com.google.protobuf.SmallSortedMap r0;

        r0 := @parameter0: com.google.protobuf.SmallSortedMap;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        return;
    }

    static java.util.List access$600(com.google.protobuf.SmallSortedMap)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.List $r1;

        r0 := @parameter0: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        return $r1;
    }

    static java.util.Map access$700(com.google.protobuf.SmallSortedMap)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r1;

        r0 := @parameter0: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        return $r1;
    }

    static java.lang.Object access$800(com.google.protobuf.SmallSortedMap, int)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.lang.Object $r1;

        r0 := @parameter0: com.google.protobuf.SmallSortedMap;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: java.lang.Object removeArrayEntryAt(int)>(i0);

        return $r1;
    }

    static java.util.Map access$900(com.google.protobuf.SmallSortedMap)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r1;

        r0 := @parameter0: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending>;

        return $r1;
    }

    private int binarySearchInArray(java.lang.Comparable)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.lang.Comparable r1, $r6, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10, i11, i12;
        java.util.List $r2, $r3, $r7;
        java.lang.Object $r4, $r8;
        com.google.protobuf.SmallSortedMap$Entry $r5, $r9;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i8 = $i1 - 1;

        i9 = 0;

        i10 = i8;

        if i8 < 0 goto label2;

        $r7 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i8);

        $r9 = (com.google.protobuf.SmallSortedMap$Entry) $r8;

        $r10 = virtualinvoke $r9.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Comparable getKey()>();

        i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r10);

        if i0 <= 0 goto label1;

        $i5 = i8 + 2;

        $i6 = neg $i5;

        return $i6;

     label1:
        i9 = 0;

        i10 = i8;

        if i0 != 0 goto label2;

        return i8;

     label2:
        if i9 > i10 goto label6;

        $i4 = i9 + i10;

        i11 = $i4 / 2;

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i11);

        $r5 = (com.google.protobuf.SmallSortedMap$Entry) $r4;

        $r6 = virtualinvoke $r5.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Comparable getKey()>();

        i12 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r6);

        if i12 >= 0 goto label3;

        i10 = i11 - 1;

        goto label4;

     label3:
        if i12 <= 0 goto label5;

        i9 = i11 + 1;

     label4:
        goto label2;

     label5:
        return i11;

     label6:
        $i2 = i9 + 1;

        $i3 = neg $i2;

        return $i3;
    }

    private void checkMutable()
    {
        com.google.protobuf.SmallSortedMap r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $z0 = r0.<com.google.protobuf.SmallSortedMap: boolean isImmutable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    private void ensureEntryArrayMutable()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.List $r1, $r2;
        boolean $z0, $z1;
        java.util.ArrayList $r3;
        int $i0;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $z1 = $r2 instanceof java.util.ArrayList;

        if $z1 != 0 goto label1;

        $r3 = new java.util.ArrayList;

        $i0 = r0.<com.google.protobuf.SmallSortedMap: int maxArraySize>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList> = $r3;

     label1:
        return;
    }

    private java.util.SortedMap getOverflowEntriesMutable()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r2, $r3, $r7;
        boolean $z0, $z1;
        java.util.TreeMap $r4, $r5;
        java.util.NavigableMap $r6;
        java.util.SortedMap $r8;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z1 = $r3 instanceof java.util.TreeMap;

        if $z1 != 0 goto label1;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries> = $r4;

        $r5 = (java.util.TreeMap) $r4;

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.util.NavigableMap descendingMap()>();

        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending> = $r6;

     label1:
        $r7 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $r8 = (java.util.SortedMap) $r7;

        return $r8;
    }

    static com.google.protobuf.SmallSortedMap newFieldMap(int)
    {
        int i0;
        com.google.protobuf.SmallSortedMap$1 $r0;

        i0 := @parameter0: int;

        $r0 = new com.google.protobuf.SmallSortedMap$1;

        specialinvoke $r0.<com.google.protobuf.SmallSortedMap$1: void <init>(int)>(i0);

        return $r0;
    }

    static com.google.protobuf.SmallSortedMap newInstanceForTest(int)
    {
        int i0;
        com.google.protobuf.SmallSortedMap $r0;

        i0 := @parameter0: int;

        $r0 = new com.google.protobuf.SmallSortedMap;

        specialinvoke $r0.<com.google.protobuf.SmallSortedMap: void <init>(int)>(i0);

        return $r0;
    }

    private java.lang.Object removeArrayEntryAt(int)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.lang.Object r1, $r4, $r11;
        java.util.Iterator r2;
        java.util.List $r3, $r10;
        com.google.protobuf.SmallSortedMap$Entry $r5, $r9;
        java.util.Map $r6;
        boolean $z0;
        java.util.SortedMap $r7;
        java.util.Set $r8;
        java.util.Map$Entry $r12;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        i0 := @parameter0: int;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(i0);

        $r5 = (com.google.protobuf.SmallSortedMap$Entry) $r4;

        r1 = virtualinvoke $r5.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Object getValue()>();

        $r6 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r7 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: java.util.SortedMap getOverflowEntriesMutable()>();

        $r8 = interfaceinvoke $r7.<java.util.SortedMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        $r10 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r9 = new com.google.protobuf.SmallSortedMap$Entry;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.Map$Entry) $r11;

        specialinvoke $r9.<com.google.protobuf.SmallSortedMap$Entry: void <init>(com.google.protobuf.SmallSortedMap,java.util.Map$Entry)>(r0, $r12);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label1:
        return r1;
    }

    public void clear()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.List $r1, $r4;
        boolean $z0, $z1;
        java.util.Map $r2, $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

     label2:
        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0;
        int $i0;
        java.util.Map $r1;
        boolean $z0, z1;
        java.lang.Object r2;
        java.lang.Comparable r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r2 := @parameter0: java.lang.Object;

        r3 = (java.lang.Comparable) r2;

        $i0 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: int binarySearchInArray(java.lang.Comparable)>(r3);

        if $i0 >= 0 goto label2;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    java.util.Set descendingEntrySet()
    {
        com.google.protobuf.SmallSortedMap r0;
        com.google.protobuf.SmallSortedMap$DescendingEntrySet $r1, $r2, $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$DescendingEntrySet lazyDescendingEntrySet>;

        if $r1 != null goto label1;

        $r3 = new com.google.protobuf.SmallSortedMap$DescendingEntrySet;

        specialinvoke $r3.<com.google.protobuf.SmallSortedMap$DescendingEntrySet: void <init>(com.google.protobuf.SmallSortedMap,com.google.protobuf.SmallSortedMap$1)>(r0, null);

        r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$DescendingEntrySet lazyDescendingEntrySet> = $r3;

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$DescendingEntrySet lazyDescendingEntrySet>;

        return $r2;
    }

    public java.util.Set entrySet()
    {
        com.google.protobuf.SmallSortedMap r0;
        com.google.protobuf.SmallSortedMap$EntrySet $r1, $r2, $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$EntrySet lazyEntrySet>;

        if $r1 != null goto label1;

        $r3 = new com.google.protobuf.SmallSortedMap$EntrySet;

        specialinvoke $r3.<com.google.protobuf.SmallSortedMap$EntrySet: void <init>(com.google.protobuf.SmallSortedMap,com.google.protobuf.SmallSortedMap$1)>(r0, null);

        r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$EntrySet lazyEntrySet> = $r3;

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: com.google.protobuf.SmallSortedMap$EntrySet lazyEntrySet>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0, r8;
        int i0, i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map $r1, $r2;
        java.util.Map$Entry $r3, $r4;
        java.util.Set $r5, $r6;
        java.lang.Object r7;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r7 := @parameter0: java.lang.Object;

        if r0 != r7 goto label1;

        return 1;

     label1:
        $z0 = r7 instanceof com.google.protobuf.SmallSortedMap;

        if $z0 != 0 goto label2;

        $z4 = specialinvoke r0.<java.util.AbstractMap: boolean equals(java.lang.Object)>(r7);

        return $z4;

     label2:
        r8 = (com.google.protobuf.SmallSortedMap) r7;

        i0 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: int size()>();

        $i2 = virtualinvoke r8.<com.google.protobuf.SmallSortedMap: int size()>();

        if i0 == $i2 goto label3;

        return 0;

     label3:
        i1 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: int getNumArrayEntries()>();

        $i3 = virtualinvoke r8.<com.google.protobuf.SmallSortedMap: int getNumArrayEntries()>();

        if i1 == $i3 goto label4;

        $r5 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: java.util.Set entrySet()>();

        $r6 = virtualinvoke r8.<com.google.protobuf.SmallSortedMap: java.util.Set entrySet()>();

        $z3 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r6);

        return $z3;

     label4:
        i4 = 0;

     label5:
        if i4 >= i1 goto label7;

        $r3 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: java.util.Map$Entry getArrayEntryAt(int)>(i4);

        $r4 = virtualinvoke r8.<com.google.protobuf.SmallSortedMap: java.util.Map$Entry getArrayEntryAt(int)>(i4);

        $z2 = interfaceinvoke $r3.<java.util.Map$Entry: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        if i1 == i0 goto label8;

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $r1 = r8.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean equals(java.lang.Object)>($r1);

        return $z1;

     label8:
        return 1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.util.Map $r1;
        java.lang.Object $r2, $r4, $r6, r7;
        java.util.List $r3;
        com.google.protobuf.SmallSortedMap$Entry $r5;
        java.lang.Comparable r8;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r7 := @parameter0: java.lang.Object;

        r8 = (java.lang.Comparable) r7;

        i0 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: int binarySearchInArray(java.lang.Comparable)>(r8);

        if i0 < 0 goto label1;

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (com.google.protobuf.SmallSortedMap$Entry) $r4;

        $r6 = virtualinvoke $r5.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Object getValue()>();

        return $r6;

     label1:
        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        return $r2;
    }

    public java.util.Map$Entry getArrayEntryAt(int)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.util.Map$Entry $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.util.Map$Entry) $r2;

        return $r3;
    }

    public int getNumArrayEntries()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int getNumOverflowEntries()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.Iterable getOverflowEntries()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r1, $r2;
        boolean $z0;
        java.lang.Object r3;
        java.lang.Iterable r4;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r3 = staticinvoke <com.google.protobuf.SmallSortedMap$EmptySet: java.lang.Iterable iterable()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

     label2:
        r4 = (java.lang.Iterable) r3;

        return r4;
    }

    java.lang.Iterable getOverflowEntriesDescending()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.Map $r1, $r2;
        boolean $z0;
        java.lang.Object r3;
        java.lang.Iterable r4;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r3 = staticinvoke <com.google.protobuf.SmallSortedMap$EmptySet: java.lang.Iterable iterable()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending>;

        r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

     label2:
        r4 = (java.lang.Iterable) r3;

        return r4;
    }

    public int hashCode()
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        java.util.Map $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        com.google.protobuf.SmallSortedMap$Entry $r4;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        i4 = 0;

        i0 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: int getNumArrayEntries()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5);

        $r4 = (com.google.protobuf.SmallSortedMap$Entry) $r3;

        $i3 = virtualinvoke $r4.<com.google.protobuf.SmallSortedMap$Entry: int hashCode()>();

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = i4;

        $i1 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: int getNumOverflowEntries()>();

        if $i1 <= 0 goto label3;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $i2 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        i6 = i4 + $i2;

     label3:
        return i6;
    }

    public boolean isImmutable()
    {
        com.google.protobuf.SmallSortedMap r0;
        boolean $z0;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $z0 = r0.<com.google.protobuf.SmallSortedMap: boolean isImmutable>;

        return $z0;
    }

    public void makeImmutable()
    {
        com.google.protobuf.SmallSortedMap r0;
        boolean $z0, $z1, $z2;
        java.util.Map $r1, $r2, $r3, $r4, r5, r6;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $z0 = r0.<com.google.protobuf.SmallSortedMap: boolean isImmutable>;

        if $z0 != 0 goto label5;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z1 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        goto label2;

     label1:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

     label2:
        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries> = r5;

        $r3 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending>;

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        goto label4;

     label3:
        $r4 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending>;

        r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

     label4:
        r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntriesDescending> = r6;

        r0.<com.google.protobuf.SmallSortedMap: boolean isImmutable> = 1;

     label5:
        return;
    }

    public java.lang.Object put(java.lang.Comparable, java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.lang.Comparable r1, $r10;
        java.lang.Object r2, $r8, $r11, $r14, $r16, $r18;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        com.google.protobuf.SmallSortedMap$Entry r3, $r5, $r17;
        java.util.List $r4, $r6, $r7, $r15;
        java.util.SortedMap $r9, $r13;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        i5 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: int binarySearchInArray(java.lang.Comparable)>(r1);

        if i5 < 0 goto label1;

        $r15 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i5);

        $r17 = (com.google.protobuf.SmallSortedMap$Entry) $r16;

        $r18 = virtualinvoke $r17.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Object setValue(java.lang.Object)>(r2);

        return $r18;

     label1:
        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void ensureEntryArrayMutable()>();

        $i2 = i5 + 1;

        i0 = neg $i2;

        $i3 = r0.<com.google.protobuf.SmallSortedMap: int maxArraySize>;

        if i0 < $i3 goto label2;

        $r13 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: java.util.SortedMap getOverflowEntriesMutable()>();

        $r14 = interfaceinvoke $r13.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r14;

     label2:
        $r4 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        i6 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = r0.<com.google.protobuf.SmallSortedMap: int maxArraySize>;

        if i6 != i1 goto label3;

        $r7 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $i4 = i1 - 1;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i4);

        r3 = (com.google.protobuf.SmallSortedMap$Entry) $r8;

        $r9 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: java.util.SortedMap getOverflowEntriesMutable()>();

        $r10 = virtualinvoke r3.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Comparable getKey()>();

        $r11 = virtualinvoke r3.<com.google.protobuf.SmallSortedMap$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r9.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label3:
        $r6 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $r5 = new com.google.protobuf.SmallSortedMap$Entry;

        specialinvoke $r5.<com.google.protobuf.SmallSortedMap$Entry: void <init>(com.google.protobuf.SmallSortedMap,java.lang.Comparable,java.lang.Object)>(r0, r1, r2);

        interfaceinvoke $r6.<java.util.List: void add(int,java.lang.Object)>(i0, $r5);

        return null;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.Comparable $r3;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Comparable) r1;

        $r4 = virtualinvoke r0.<com.google.protobuf.SmallSortedMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>($r3, r2);

        return $r4;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.protobuf.SmallSortedMap r0;
        int i0;
        java.util.Map $r1, $r2;
        boolean $z0;
        java.lang.Object $r3, $r4, r5;
        java.lang.Comparable r6;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        r5 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.google.protobuf.SmallSortedMap: void checkMutable()>();

        r6 = (java.lang.Comparable) r5;

        i0 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: int binarySearchInArray(java.lang.Comparable)>(r6);

        if i0 < 0 goto label1;

        $r4 = specialinvoke r0.<com.google.protobuf.SmallSortedMap: java.lang.Object removeArrayEntryAt(int)>(i0);

        return $r4;

     label1:
        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6);

        return $r3;
    }

    public int size()
    {
        com.google.protobuf.SmallSortedMap r0;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.util.Map $r2;

        r0 := @this: com.google.protobuf.SmallSortedMap;

        $r1 = r0.<com.google.protobuf.SmallSortedMap: java.util.List entryList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = r0.<com.google.protobuf.SmallSortedMap: java.util.Map overflowEntries>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }
}
