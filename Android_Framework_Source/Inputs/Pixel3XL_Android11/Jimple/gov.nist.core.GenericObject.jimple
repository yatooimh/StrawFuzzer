public abstract class gov.nist.core.GenericObject extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    protected static final java.lang.String AND;
    protected static final java.lang.String AT;
    protected static final java.lang.String COLON;
    protected static final java.lang.String COMMA;
    protected static final java.lang.String DOT;
    protected static final java.lang.String DOUBLE_QUOTE;
    protected static final java.lang.String EQUALS;
    protected static final java.lang.String GREATER_THAN;
    protected static final java.lang.String HT;
    protected static final java.lang.String LESS_THAN;
    protected static final java.lang.String LPAREN;
    protected static final java.lang.String NEWLINE;
    protected static final java.lang.String PERCENT;
    protected static final java.lang.String POUND;
    protected static final java.lang.String QUESTION;
    protected static final java.lang.String QUOTE;
    protected static final java.lang.String RETURN;
    protected static final java.lang.String RPAREN;
    protected static final java.lang.String SEMICOLON;
    protected static final java.lang.String SLASH;
    protected static final java.lang.String SP;
    protected static final java.lang.String STAR;
    static final java.lang.String[] immutableClassNames;
    protected static final java.util.Set immutableClasses;
    protected int indentation;
    protected gov.nist.core.Match matchExpression;
    protected java.lang.String stringRepresentation;

    static void <clinit>()
    {
        java.util.Set r0;
        java.util.HashSet $r1;
        java.lang.String[] $r2, $r3, $r5;
        int $i0, i1;
        java.lang.String $r6, $r8;
        java.lang.Class $r9;
        java.lang.ClassNotFoundException $r10;
        java.lang.RuntimeException $r11;
        java.lang.StringBuilder r12;

        <gov.nist.core.GenericObject: java.lang.String STAR> = "*";

        <gov.nist.core.GenericObject: java.lang.String SP> = " ";

        <gov.nist.core.GenericObject: java.lang.String SLASH> = "/";

        <gov.nist.core.GenericObject: java.lang.String SEMICOLON> = ";";

        <gov.nist.core.GenericObject: java.lang.String RPAREN> = ")";

        <gov.nist.core.GenericObject: java.lang.String RETURN> = "\n";

        <gov.nist.core.GenericObject: java.lang.String QUOTE> = "\'";

        <gov.nist.core.GenericObject: java.lang.String QUESTION> = "?";

        <gov.nist.core.GenericObject: java.lang.String POUND> = "#";

        <gov.nist.core.GenericObject: java.lang.String PERCENT> = "%";

        <gov.nist.core.GenericObject: java.lang.String NEWLINE> = "\r\n";

        <gov.nist.core.GenericObject: java.lang.String LPAREN> = "(";

        <gov.nist.core.GenericObject: java.lang.String LESS_THAN> = "<";

        <gov.nist.core.GenericObject: java.lang.String HT> = "\t";

        <gov.nist.core.GenericObject: java.lang.String GREATER_THAN> = ">";

        <gov.nist.core.GenericObject: java.lang.String EQUALS> = "=";

        <gov.nist.core.GenericObject: java.lang.String DOUBLE_QUOTE> = "\"";

        <gov.nist.core.GenericObject: java.lang.String DOT> = ".";

        <gov.nist.core.GenericObject: java.lang.String COMMA> = ",";

        <gov.nist.core.GenericObject: java.lang.String COLON> = ":";

        <gov.nist.core.GenericObject: java.lang.String AT> = "@";

        <gov.nist.core.GenericObject: java.lang.String AND> = "&";

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(10);

        <gov.nist.core.GenericObject: java.util.Set immutableClasses> = $r1;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "String";

        $r2[1] = "Character";

        $r2[2] = "Boolean";

        $r2[3] = "Byte";

        $r2[4] = "Short";

        $r2[5] = "Integer";

        $r2[6] = "Long";

        $r2[7] = "Float";

        $r2[8] = "Double";

        <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames> = $r2;

        i1 = 0;

     label1:
        $r3 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label3;

        r0 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.lang.");

        $r5 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $r6 = $r5[i1];

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r8);

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error", $r10);

        throw $r11;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    protected void <init>()
    {
        gov.nist.core.GenericObject r0;

        r0 := @this: gov.nist.core.GenericObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        return;
    }

    public static java.lang.Class getClassFromName(java.lang.String)
    {
        java.lang.Exception $r0;
        java.lang.String r1;
        java.lang.Class r2;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label2:
        return r2;

     label3:
        $r0 := @caughtexception;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>($r0);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isMySubclass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lgov/nist/core/GenericObject;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.lang.Object makeClone(java.lang.Object)
    {
        java.util.Set $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class $r3, $r4, $r5, $r11, $r12, $r13, $r14, $r15, $r16, $r17, r33, r34, $r36;
        java.lang.Class[] $r6;
        java.lang.reflect.Method $r7;
        java.lang.Object[] $r8, $r26;
        gov.nist.core.GenericObjectList $r9;
        gov.nist.core.GenericObject $r10;
        double[] $r18;
        float[] $r19;
        long[] $r20;
        int[] $r21;
        short[] $r22;
        byte[] $r23;
        boolean[] $r24;
        char[] $r25;
        java.lang.Throwable $r27, $r28, $r29, $r30, $r31;
        java.lang.Object r32, r35;
        java.lang.NullPointerException r42;
        java.lang.Exception r43;

        r32 := @parameter0: java.lang.Object;

        if r32 == null goto label22;

        r33 = virtualinvoke r32.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r33);

        if $z0 == 0 goto label01;

        return r32;

     label01:
        $z1 = virtualinvoke r33.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label11;

        r34 = virtualinvoke r33.<java.lang.Class: java.lang.Class getComponentType()>();

        $z5 = virtualinvoke r34.<java.lang.Class: boolean isPrimitive()>();

        if $z5 != 0 goto label02;

        $r26 = (java.lang.Object[]) r32;

        r35 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label02:
        $r11 = <java.lang.Character: java.lang.Class TYPE>;

        if r34 != $r11 goto label03;

        $r25 = (char[]) r32;

        r35 = virtualinvoke $r25.<java.lang.Object: java.lang.Object clone()>();

        goto label04;

     label03:
        r35 = r32;

        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r34 != $r12 goto label04;

        $r24 = (boolean[]) r32;

        r35 = virtualinvoke $r24.<java.lang.Object: java.lang.Object clone()>();

     label04:
        $r36 = <java.lang.Byte: java.lang.Class TYPE>;

        if r34 != $r36 goto label05;

        $r23 = (byte[]) r32;

        r35 = virtualinvoke $r23.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label05:
        $r13 = <java.lang.Short: java.lang.Class TYPE>;

        if r34 != $r13 goto label06;

        $r22 = (short[]) r32;

        r35 = virtualinvoke $r22.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label06:
        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        if r34 != $r14 goto label07;

        $r21 = (int[]) r32;

        r35 = virtualinvoke $r21.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label07:
        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        if r34 != $r15 goto label08;

        $r20 = (long[]) r32;

        r35 = virtualinvoke $r20.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label08:
        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        if r34 != $r16 goto label09;

        $r19 = (float[]) r32;

        r35 = virtualinvoke $r19.<java.lang.Object: java.lang.Object clone()>();

        goto label10;

     label09:
        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        if r34 != $r17 goto label10;

        $r18 = (double[]) r32;

        r35 = virtualinvoke $r18.<java.lang.Object: java.lang.Object clone()>();

     label10:
        goto label21;

     label11:
        $r3 = class "Lgov/nist/core/GenericObject;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r33);

        if $z2 == 0 goto label12;

        $r10 = (gov.nist.core.GenericObject) r32;

        r35 = virtualinvoke $r10.<gov.nist.core.GenericObject: java.lang.Object clone()>();

        goto label21;

     label12:
        $r4 = class "Lgov/nist/core/GenericObjectList;";

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r33);

        if $z3 == 0 goto label13;

        $r9 = (gov.nist.core.GenericObjectList) r32;

        r35 = virtualinvoke $r9.<gov.nist.core.GenericObjectList: java.lang.Object clone()>();

        goto label21;

     label13:
        r35 = r32;

        $r5 = class "Ljava/lang/Cloneable;";

        $z4 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r33);

        if $z4 == 0 goto label21;

     label14:
        $r6 = (java.lang.Class[]) null;

        $r7 = virtualinvoke r33.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r6);

        $r8 = (java.lang.Object[]) null;

        r35 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r32, $r8);

     label15:
        goto label21;

     label16:
        $r27 := @caughtexception;

        r35 = r32;

        goto label21;

     label17:
        $r28 := @caughtexception;

        r35 = r32;

        goto label15;

     label18:
        $r31 := @caughtexception;

        r35 = r32;

        goto label15;

     label19:
        $r29 := @caughtexception;

        r43 = (java.lang.Exception) $r29;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r43);

        r35 = r32;

        goto label15;

     label20:
        $r30 := @caughtexception;

        r35 = r32;

        goto label15;

     label21:
        return r35;

     label22:
        r42 = new java.lang.NullPointerException;

        specialinvoke r42.<java.lang.NullPointerException: void <init>(java.lang.String)>("null obj!");

        throw r42;

        catch java.lang.SecurityException from label14 to label15 with label20;
        catch java.lang.IllegalArgumentException from label14 to label15 with label19;
        catch java.lang.IllegalAccessException from label14 to label15 with label18;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label17;
        catch java.lang.NoSuchMethodException from label14 to label15 with label16;
    }

    public java.lang.Object clone()
    {
        gov.nist.core.GenericObject r0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        java.lang.Object r3;

        r0 := @this: gov.nist.core.GenericObject;

     label1:
        r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error");

        throw $r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    protected void dbgPrint()
    {
        gov.nist.core.GenericObject r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r1);

        return;
    }

    protected void dbgPrint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>(r1);

        return;
    }

    public java.lang.String debugDump()
    {
        gov.nist.core.GenericObject r0, $r30;
        java.lang.String r1, $r2, $r3, $r7, $r11, $r14, $r17, $r20, $r23, $r27, $r31, $r34, r42;
        boolean z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i19, i20;
        java.lang.StringBuilder $r4, r43, r44, r45;
        java.lang.Class $r8, $r9, $r19, r37, r40;
        java.lang.Object $r10, $r15, $r16, $r18, $r24, $r25, $r28, $r29;
        gov.nist.core.GenericObjectList $r26;
        float $f0;
        double $d0;
        long $l16;
        char $c17;
        short $s18;
        java.lang.Throwable $r35;
        java.lang.Exception $r36;
        java.lang.reflect.Field[] r38;
        java.lang.reflect.Field r39;

        r0 := @this: gov.nist.core.GenericObject;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        r37 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r37.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r2);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        r38 = virtualinvoke r37.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i20 = 0;

     label01:
        $i0 = lengthof r38;

        if i20 >= $i0 goto label43;

        r39 = r38[i20];

        $i1 = virtualinvoke r39.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = $i1 & 2;

        if $i2 != 2 goto label02;

        goto label42;

     label02:
        r40 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Class getType()>();

        r1 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.String getName()>();

        $i3 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i3 != 0 goto label03;

        goto label42;

     label03:
        $i4 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 != 0 goto label04;

        goto label42;

     label04:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r7);

     label05:
        $z1 = virtualinvoke r40.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label20;

        r42 = virtualinvoke r40.<java.lang.Class: java.lang.String toString()>();

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r34 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r34);

        $i9 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i9 != 0 goto label07;

        $i19 = virtualinvoke r39.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(int)>($i19);

     label06:
        goto label19;

     label07:
        $i10 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i10 != 0 goto label09;

        $s18 = virtualinvoke r39.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(short)>($s18);

     label08:
        goto label19;

     label09:
        $i11 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i11 != 0 goto label11;

        $c17 = virtualinvoke r39.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(char)>($c17);

     label10:
        goto label19;

     label11:
        $i12 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i12 != 0 goto label13;

        $l16 = virtualinvoke r39.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(long)>($l16);

     label12:
        goto label19;

     label13:
        $i13 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i13 != 0 goto label15;

        $z3 = virtualinvoke r39.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(boolean)>($z3);

     label14:
        goto label19;

     label15:
        $i14 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i14 != 0 goto label17;

        $d0 = virtualinvoke r39.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(double)>($d0);

     label16:
        goto label19;

     label17:
        $i15 = virtualinvoke r42.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i15 != 0 goto label19;

        $f0 = virtualinvoke r39.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(float)>($f0);

     label18:
        goto label19;

     label19:
        goto label39;

     label20:
        $r8 = class "Lgov/nist/core/GenericObject;";

        z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r40);

     label21:
        if z0 == 0 goto label27;

     label22:
        $r28 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r28 == null goto label25;

     label23:
        $r29 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r30 = (gov.nist.core.GenericObject) $r29;

        $i7 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i8 = $i7 + 1;

        $r31 = virtualinvoke $r30.<gov.nist.core.GenericObject: java.lang.String debugDump(int)>($i8);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r31);

     label24:
        goto label39;

     label25:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label26:
        goto label39;

     label27:
        $r9 = class "Lgov/nist/core/GenericObjectList;";

        $z2 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r40);

        if $z2 == 0 goto label32;

        $r24 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r24 == null goto label30;

     label28:
        $r25 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r26 = (gov.nist.core.GenericObjectList) $r25;

        $i5 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i6 = $i5 + 1;

        $r27 = virtualinvoke $r26.<gov.nist.core.GenericObjectList: java.lang.String debugDump(int)>($i6);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r27);

     label29:
        goto label39;

     label30:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label31:
        goto label39;

     label32:
        $r10 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r10 == null goto label34;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r23 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r23);

     label33:
        goto label35;

     label34:
        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r40.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r14 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r14);

     label35:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        $r15 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r15 == null goto label37;

        $r16 = virtualinvoke r39.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r17);

     label36:
        goto label38;

     label37:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label38:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

     label39:
        goto label42;

     label40:
        $r36 := @caughtexception;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>($r36);

        goto label42;

     label41:
        $r35 := @caughtexception;

     label42:
        i20 = i20 + 1;

        goto label01;

     label43:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

        $r3 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        return $r3;

        catch java.lang.IllegalAccessException from label05 to label06 with label41;
        catch java.lang.Exception from label05 to label06 with label40;
        catch java.lang.IllegalAccessException from label07 to label08 with label41;
        catch java.lang.Exception from label07 to label08 with label40;
        catch java.lang.IllegalAccessException from label09 to label10 with label41;
        catch java.lang.Exception from label09 to label10 with label40;
        catch java.lang.IllegalAccessException from label11 to label12 with label41;
        catch java.lang.Exception from label11 to label12 with label40;
        catch java.lang.IllegalAccessException from label13 to label14 with label41;
        catch java.lang.Exception from label13 to label14 with label40;
        catch java.lang.IllegalAccessException from label15 to label16 with label41;
        catch java.lang.Exception from label15 to label16 with label40;
        catch java.lang.IllegalAccessException from label17 to label18 with label41;
        catch java.lang.Exception from label17 to label18 with label40;
        catch java.lang.IllegalAccessException from label20 to label21 with label41;
        catch java.lang.Exception from label20 to label21 with label40;
        catch java.lang.IllegalAccessException from label22 to label23 with label41;
        catch java.lang.Exception from label22 to label23 with label40;
        catch java.lang.IllegalAccessException from label23 to label24 with label41;
        catch java.lang.Exception from label23 to label24 with label40;
        catch java.lang.IllegalAccessException from label25 to label26 with label41;
        catch java.lang.Exception from label25 to label26 with label40;
        catch java.lang.IllegalAccessException from label27 to label28 with label41;
        catch java.lang.Exception from label27 to label28 with label40;
        catch java.lang.IllegalAccessException from label28 to label29 with label41;
        catch java.lang.Exception from label28 to label29 with label40;
        catch java.lang.IllegalAccessException from label30 to label31 with label41;
        catch java.lang.Exception from label30 to label31 with label40;
        catch java.lang.IllegalAccessException from label32 to label33 with label41;
        catch java.lang.Exception from label32 to label33 with label40;
        catch java.lang.IllegalAccessException from label34 to label35 with label41;
        catch java.lang.Exception from label34 to label35 with label40;
        catch java.lang.IllegalAccessException from label35 to label36 with label41;
        catch java.lang.Exception from label35 to label36 with label40;
        catch java.lang.IllegalAccessException from label37 to label38 with label41;
        catch java.lang.Exception from label37 to label38 with label40;
        catch java.lang.IllegalAccessException from label38 to label39 with label41;
        catch java.lang.Exception from label38 to label39 with label40;
    }

    public java.lang.String debugDump(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        r0.<gov.nist.core.GenericObject: int indentation> = i0;

        r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        return r1;
    }

    public abstract java.lang.String encode();

    public java.lang.StringBuffer encode(java.lang.StringBuffer)
    {
        gov.nist.core.GenericObject r0;
        java.lang.StringBuffer r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String encode()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.reflect.Field[] r2, r3;
        java.lang.reflect.Field r4, r19;
        java.lang.Class r5, $r6, $r7, r17, r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i20, $i21, i22, $i23;
        float $f0, $f1;
        byte $b11, $b12, $b15;
        double $d0, $d1;
        long $l13, $l14;
        char $c16, $c17;
        short $s18, $s19;
        java.lang.Throwable $r16;
        java.lang.String r20, r21;
        java.lang.Exception r23;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 0;

     label01:
        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label02;

        return 0;

     label02:
        r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r2 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r3 = virtualinvoke r18.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i22 = 0;

     label04:
        $i23 = lengthof r2;

        if i22 >= $i23 goto label35;

        r4 = r2[i22];

        r19 = r3[i22];

        $i0 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $i1 = $i0 & 2;

        if $i1 != 2 goto label05;

        goto label34;

     label05:
        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        r20 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $i2 = virtualinvoke r20.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i2 != 0 goto label06;

        goto label34;

     label06:
        $i3 = virtualinvoke r20.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i3 != 0 goto label07;

        goto label34;

     label07:
        $z3 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label22;

        r21 = virtualinvoke r5.<java.lang.Class: java.lang.String toString()>();

        $i4 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i4 != 0 goto label09;

        $i20 = virtualinvoke r4.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i21 = virtualinvoke r19.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        if $i20 == $i21 goto label21;

     label08:
        return 0;

     label09:
        $i5 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i5 != 0 goto label11;

        $s18 = virtualinvoke r4.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s19 = virtualinvoke r19.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        if $s18 == $s19 goto label21;

     label10:
        return 0;

     label11:
        $i6 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i6 != 0 goto label13;

        $c16 = virtualinvoke r4.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c17 = virtualinvoke r19.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        if $c16 == $c17 goto label21;

     label12:
        return 0;

     label13:
        $i7 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i7 != 0 goto label15;

        $l13 = virtualinvoke r4.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l14 = virtualinvoke r19.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        $b15 = $l13 cmp $l14;

        if $b15 == 0 goto label21;

     label14:
        return 0;

     label15:
        $i8 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i8 != 0 goto label17;

        $z4 = virtualinvoke r4.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z5 = virtualinvoke r19.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        if $z4 == $z5 goto label21;

     label16:
        return 0;

     label17:
        $i9 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i9 != 0 goto label19;

        $d0 = virtualinvoke r4.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d1 = virtualinvoke r19.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        $b12 = $d0 cmpl $d1;

        if $b12 == 0 goto label21;

     label18:
        return 0;

     label19:
        $i10 = virtualinvoke r21.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i10 != 0 goto label21;

        $f0 = virtualinvoke r4.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f1 = virtualinvoke r19.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        $b11 = $f0 cmpl $f1;

        if $b11 == 0 goto label21;

     label20:
        return 0;

     label21:
        goto label32;

     label22:
        $r8 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r8 != $r9 goto label24;

     label23:
        return 1;

     label24:
        $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r10 != null goto label26;

     label25:
        return 0;

     label26:
        $r11 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r11 != null goto label28;

     label27:
        return 0;

     label28:
        $r12 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r12 != null goto label30;

        $r15 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r15 == null goto label30;

     label29:
        return 0;

     label30:
        $r13 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r14 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        z0 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

     label31:
        if z0 != 0 goto label32;

        return 0;

     label32:
        goto label34;

     label33:
        $r16 := @caughtexception;

        r23 = (java.lang.Exception) $r16;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r23);

     label34:
        i22 = i22 + 1;

        goto label04;

     label35:
        $z2 = virtualinvoke r17.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/core/GenericObject;");

        if $z2 == 0 goto label36;

        return 1;

     label36:
        r17 = virtualinvoke r17.<java.lang.Class: java.lang.Class getSuperclass()>();

        r18 = virtualinvoke r18.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label03;

        catch java.lang.IllegalAccessException from label07 to label08 with label33;
        catch java.lang.IllegalAccessException from label09 to label10 with label33;
        catch java.lang.IllegalAccessException from label11 to label12 with label33;
        catch java.lang.IllegalAccessException from label13 to label14 with label33;
        catch java.lang.IllegalAccessException from label15 to label16 with label33;
        catch java.lang.IllegalAccessException from label17 to label18 with label33;
        catch java.lang.IllegalAccessException from label19 to label20 with label33;
        catch java.lang.IllegalAccessException from label22 to label23 with label33;
        catch java.lang.IllegalAccessException from label24 to label25 with label33;
        catch java.lang.IllegalAccessException from label26 to label27 with label33;
        catch java.lang.IllegalAccessException from label28 to label29 with label33;
        catch java.lang.IllegalAccessException from label30 to label31 with label33;
    }

    protected java.lang.String getIndentation()
    {
        gov.nist.core.GenericObject r0;
        char[] r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        $i0 = r0.<gov.nist.core.GenericObject: int indentation>;

        r1 = newarray (char)[$i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 32);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public gov.nist.core.Match getMatcher()
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression>;

        return $r1;
    }

    public boolean match(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, r1, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z11;
        java.lang.reflect.Field[] r2, r3;
        java.lang.String r4, $r13, $r14, $r15, r22, r25;
        java.lang.Class $r5, $r6, $r7, $r8, $r9, $r10, r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i22, $i23, i24;
        gov.nist.core.GenericObjectList $r11;
        float $f0, $f1;
        byte $b13, $b14, $b17;
        double $d0, $d1;
        long $l15, $l16;
        char $c18, $c19;
        short $s20, $s21;
        java.lang.Throwable $r16, $r17, r26;
        java.lang.Object r18, r23, r24;
        java.lang.reflect.Field r19, r20;
        java.lang.Exception r27;

        r0 := @this: gov.nist.core.GenericObject;

        r18 := @parameter0: java.lang.Object;

        if r18 != null goto label01;

        return 1;

     label01:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

        z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if z0 != 0 goto label02;

        return 0;

     label02:
        r1 = (gov.nist.core.GenericObject) r18;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r8 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i24 = 0;

     label03:
        $i0 = lengthof r2;

        if i24 >= $i0 goto label41;

        r19 = r2[i24];

        r20 = r3[i24];

        $i1 = virtualinvoke r19.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = $i1 & 2;

        if $i2 != 2 goto label04;

        goto label40;

     label04:
        r21 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Class getType()>();

        r4 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.String getName()>();

        $i3 = virtualinvoke r4.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i3 != 0 goto label05;

        goto label40;

     label05:
        $i4 = virtualinvoke r4.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 != 0 goto label06;

        goto label40;

     label06:
        $z1 = virtualinvoke r21.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label21;

        r22 = virtualinvoke r21.<java.lang.Class: java.lang.String toString()>();

        $i6 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i6 != 0 goto label08;

        $i22 = virtualinvoke r19.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i23 = virtualinvoke r20.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        if $i22 == $i23 goto label20;

     label07:
        return 0;

     label08:
        $i7 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i7 != 0 goto label10;

        $s20 = virtualinvoke r19.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s21 = virtualinvoke r20.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        if $s20 == $s21 goto label20;

     label09:
        return 0;

     label10:
        $i8 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i8 != 0 goto label12;

        $c18 = virtualinvoke r19.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c19 = virtualinvoke r20.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        if $c18 == $c19 goto label20;

     label11:
        return 0;

     label12:
        $i9 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i9 != 0 goto label14;

        $l15 = virtualinvoke r19.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l16 = virtualinvoke r20.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        $b17 = $l15 cmp $l16;

        if $b17 == 0 goto label20;

     label13:
        return 0;

     label14:
        $i10 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i10 != 0 goto label16;

        $z8 = virtualinvoke r19.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z9 = virtualinvoke r20.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        if $z8 == $z9 goto label20;

     label15:
        return 0;

     label16:
        $i11 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i11 != 0 goto label18;

        $d0 = virtualinvoke r19.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d1 = virtualinvoke r20.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        $b14 = $d0 cmpl $d1;

        if $b14 == 0 goto label20;

     label17:
        return 0;

     label18:
        $i12 = virtualinvoke r22.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i12 != 0 goto label20;

        $f0 = virtualinvoke r19.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f1 = virtualinvoke r20.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        $b13 = $f0 cmpl $f1;

        if $b13 == 0 goto label20;

     label19:
        return 0;

     label20:
        goto label36;

     label21:
        r23 = virtualinvoke r19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r24 = virtualinvoke r20.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label22:
        if r24 == null goto label23;

        if r23 != null goto label23;

        return 0;

     label23:
        if r24 != null goto label24;

        if r23 == null goto label24;

        goto label40;

     label24:
        if r24 != null goto label25;

        if r23 != null goto label25;

        goto label40;

     label25:
        $z2 = r24 instanceof java.lang.String;

        if $z2 == 0 goto label31;

        $z6 = r23 instanceof java.lang.String;

        if $z6 == 0 goto label31;

        $r13 = (java.lang.String) r24;

        r25 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

     label26:
        $z7 = virtualinvoke r25.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z7 == 0 goto label28;

     label27:
        goto label40;

     label28:
        $r15 = (java.lang.String) r23;

        $r14 = (java.lang.String) r24;

        $i5 = virtualinvoke $r15.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r14);

        if $i5 == 0 goto label30;

     label29:
        return 0;

     label30:
        goto label36;

     label31:
        $r9 = virtualinvoke r23.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = staticinvoke <gov.nist.core.GenericObject: boolean isMySubclass(java.lang.Class)>($r9);

        if $z3 == 0 goto label33;

        $r12 = (gov.nist.core.GenericObject) r23;

        $z5 = virtualinvoke $r12.<gov.nist.core.GenericObject: boolean match(java.lang.Object)>(r24);

        if $z5 != 0 goto label33;

     label32:
        return 0;

     label33:
        $r10 = virtualinvoke r23.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = staticinvoke <gov.nist.core.GenericObjectList: boolean isMySubclass(java.lang.Class)>($r10);

        if $z4 == 0 goto label36;

        $r11 = (gov.nist.core.GenericObjectList) r23;

        z11 = virtualinvoke $r11.<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)>(r24);

     label34:
        if z11 != 0 goto label35;

        return 0;

     label35:
        goto label36;

     label36:
        goto label40;

     label37:
        $r16 := @caughtexception;

        r26 = $r16;

        goto label39;

     label38:
        $r17 := @caughtexception;

        r26 = $r17;

     label39:
        r27 = (java.lang.Exception) r26;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r27);

     label40:
        i24 = i24 + 1;

        goto label03;

     label41:
        return 1;

        catch java.lang.IllegalAccessException from label06 to label07 with label38;
        catch java.lang.IllegalAccessException from label08 to label09 with label38;
        catch java.lang.IllegalAccessException from label10 to label11 with label38;
        catch java.lang.IllegalAccessException from label12 to label13 with label38;
        catch java.lang.IllegalAccessException from label14 to label15 with label38;
        catch java.lang.IllegalAccessException from label16 to label17 with label38;
        catch java.lang.IllegalAccessException from label18 to label19 with label38;
        catch java.lang.IllegalAccessException from label21 to label22 with label38;
        catch java.lang.IllegalAccessException from label25 to label26 with label38;
        catch java.lang.IllegalAccessException from label26 to label27 with label37;
        catch java.lang.IllegalAccessException from label28 to label29 with label37;
        catch java.lang.IllegalAccessException from label31 to label32 with label37;
        catch java.lang.IllegalAccessException from label33 to label34 with label37;
    }

    public void merge(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, $r6;
        java.lang.Object r1, r12, r13;
        java.lang.reflect.Field[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i11, i12, $i13;
        java.lang.Class $r3, $r4, r8, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        float $f0;
        double $d0;
        long $l8;
        char $c9;
        short $s10;
        java.lang.Throwable $r7;
        java.lang.reflect.Field r9;
        java.lang.String r11;
        java.lang.IllegalArgumentException r15;
        java.lang.IllegalAccessException r16;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return;

     label01:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label35;

        r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        r2 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i12 = 0;

     label03:
        $i13 = lengthof r2;

        if i12 >= $i13 goto label33;

        r9 = r2[i12];

        i0 = virtualinvoke r9.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        if $z2 == 0 goto label04;

        goto label32;

     label04:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z3 == 0 goto label05;

        goto label32;

     label05:
        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i0);

        if $z4 == 0 goto label06;

        goto label32;

     label06:
        r10 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Class getType()>();

        r11 = virtualinvoke r10.<java.lang.Class: java.lang.String toString()>();

     label07:
        $z5 = virtualinvoke r10.<java.lang.Class: boolean isPrimitive()>();

        if $z5 == 0 goto label22;

        $i1 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i1 != 0 goto label09;

        $i11 = virtualinvoke r9.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(r0, $i11);

     label08:
        goto label30;

     label09:
        $i2 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i2 != 0 goto label11;

        $s10 = virtualinvoke r9.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setShort(java.lang.Object,short)>(r0, $s10);

     label10:
        goto label30;

     label11:
        $i3 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i3 != 0 goto label13;

        $c9 = virtualinvoke r9.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setChar(java.lang.Object,char)>(r0, $c9);

     label12:
        goto label30;

     label13:
        $i4 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i4 != 0 goto label15;

        $l8 = virtualinvoke r9.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setLong(java.lang.Object,long)>(r0, $l8);

     label14:
        goto label30;

     label15:
        $i5 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i5 != 0 goto label17;

        $z7 = virtualinvoke r9.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>(r0, $z7);

     label16:
        goto label30;

     label17:
        $i6 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i6 != 0 goto label19;

        $d0 = virtualinvoke r9.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>(r0, $d0);

     label18:
        goto label21;

     label19:
        $i7 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i7 != 0 goto label21;

        $f0 = virtualinvoke r9.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        virtualinvoke r9.<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>(r0, $f0);

     label20:
        goto label30;

     label21:
        goto label30;

     label22:
        r12 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r13 = virtualinvoke r9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label23:
        if r13 != null goto label24;

        goto label32;

     label24:
        if r12 != null goto label27;

     label25:
        virtualinvoke r9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r13);

     label26:
        goto label32;

     label27:
        $z6 = r12 instanceof gov.nist.core.GenericObject;

        if $z6 == 0 goto label29;

        $r6 = (gov.nist.core.GenericObject) r12;

        virtualinvoke $r6.<gov.nist.core.GenericObject: void merge(java.lang.Object)>(r13);

     label28:
        goto label30;

     label29:
        virtualinvoke r9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r13);

     label30:
        goto label32;

     label31:
        $r7 := @caughtexception;

        r16 = (java.lang.IllegalAccessException) $r7;

        virtualinvoke r16.<java.lang.IllegalAccessException: void printStackTrace()>();

     label32:
        i12 = i12 + 1;

        goto label03;

     label33:
        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z1 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/core/GenericObject;");

        if $z1 == 0 goto label34;

        return;

     label34:
        goto label02;

     label35:
        r15 = new java.lang.IllegalArgumentException;

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad override object");

        throw r15;

        catch java.lang.IllegalAccessException from label07 to label08 with label31;
        catch java.lang.IllegalAccessException from label09 to label10 with label31;
        catch java.lang.IllegalAccessException from label11 to label12 with label31;
        catch java.lang.IllegalAccessException from label13 to label14 with label31;
        catch java.lang.IllegalAccessException from label15 to label16 with label31;
        catch java.lang.IllegalAccessException from label17 to label18 with label31;
        catch java.lang.IllegalAccessException from label19 to label20 with label31;
        catch java.lang.IllegalAccessException from label22 to label23 with label31;
        catch java.lang.IllegalAccessException from label25 to label26 with label31;
        catch java.lang.IllegalAccessException from label27 to label28 with label31;
        catch java.lang.IllegalAccessException from label29 to label30 with label31;
    }

    public void setMatcher(gov.nist.core.Match)
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: gov.nist.core.Match;

        if r1 == null goto label1;

        r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null arg!");

        throw $r2;
    }

    protected void sprint(char)
    {
        gov.nist.core.GenericObject r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(double)
    {
        gov.nist.core.GenericObject r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(float)
    {
        gov.nist.core.GenericObject r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(long)
    {
        gov.nist.core.GenericObject r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r2);

        return;
    }

    protected void sprint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r7, $r13, $r21, $r26, $r30;
        java.lang.String $r8, $r10, $r12, $r14, $r17, r18, $r23, $r24, $r25, $r28, $r29, $r32, $r33;

        r0 := @this: gov.nist.core.GenericObject;

        r18 := @parameter0: java.lang.String;

        if r18 != null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<null>\n");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r17;

        return;

     label1:
        $i0 = virtualinvoke r18.<java.lang.String: int compareTo(java.lang.String)>("}");

        if $i0 == 0 goto label2;

        $i6 = virtualinvoke r18.<java.lang.String: int compareTo(java.lang.String)>("]");

        if $i6 != 0 goto label3;

     label2:
        $i1 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i2 = $i1 - 1;

        r0.<gov.nist.core.GenericObject: int indentation> = $i2;

     label3:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r24 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r25;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r29;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r32 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r33;

        $i7 = virtualinvoke r18.<java.lang.String: int compareTo(java.lang.String)>("{");

        if $i7 == 0 goto label4;

        $i5 = virtualinvoke r18.<java.lang.String: int compareTo(java.lang.String)>("[");

        if $i5 != 0 goto label5;

     label4:
        $i3 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i4 = $i3 + 1;

        r0.<gov.nist.core.GenericObject: int indentation> = $i4;

     label5:
        return;
    }

    protected void sprint(short)
    {
        gov.nist.core.GenericObject r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        s0 := @parameter0: short;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(s0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(boolean)
    {
        gov.nist.core.GenericObject r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }
}
