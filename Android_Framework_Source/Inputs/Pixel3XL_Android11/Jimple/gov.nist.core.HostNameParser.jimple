public class gov.nist.core.HostNameParser extends gov.nist.core.ParserCore
{
    private static gov.nist.core.LexerCore Lexer;
    private static final char[] VALID_DOMAIN_LABEL_CHAR;
    private boolean stripAddressScopeZones;

    static void <clinit>()
    {
        char[] $r0;
        char c1;

        $r0 = newarray (char)[3];

        c1 = (char) -3;

        $r0[0] = c1;

        $r0[1] = 45;

        $r0[2] = 46;

        <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR> = $r0;

        return;
    }

    public void <init>(gov.nist.core.LexerCore)
    {
        gov.nist.core.HostNameParser r0;
        gov.nist.core.LexerCore r1;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: gov.nist.core.LexerCore;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = r1;

        virtualinvoke r1.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("charLexer");

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1;
        gov.nist.core.LexerCore $r2;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        $r2 = new gov.nist.core.LexerCore;

        specialinvoke $r2.<gov.nist.core.LexerCore: void <init>(java.lang.String,java.lang.String)>("charLexer", r1);

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = $r2;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    private boolean isIPv6Address(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        int i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.String r1, r2;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(63);

        i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(59);

        if i0 == -1 goto label1;

        i4 = i0;

        if i3 == -1 goto label2;

        i4 = i0;

        if i0 <= i3 goto label2;

     label1:
        i4 = i3;

     label2:
        i5 = i4;

        if i4 != -1 goto label3;

        i5 = virtualinvoke r1.<java.lang.String: int length()>();

     label3:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        i6 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i6 != -1 goto label4;

        return 0;

     label4:
        $i1 = i6 + 1;

        $i2 = virtualinvoke r2.<java.lang.String: int indexOf(int,int)>(58, $i1);

        if $i2 != -1 goto label5;

        return 0;

     label5:
        return 1;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        int $i0, i1;
        java.lang.String $r0, $r2, $r5, $r9, $r11;
        java.lang.Throwable $r6;
        java.lang.String[] r12, r13;
        gov.nist.core.HostPort r15;
        java.io.PrintStream r16, r19;
        gov.nist.core.HostNameParser r21;
        java.lang.StringBuilder r22, r23;
        java.text.ParseException r24;

        r12 := @parameter0: java.lang.String[];

        r13 = newarray (java.lang.String)[7];

        r13[0] = "foo.bar.com:1234";

        r13[1] = "proxima.chaplin.bt.co.uk";

        r13[2] = "129.6.55.181:2345";

        r13[3] = ":1234";

        r13[4] = "foo.bar.com:         1234";

        r13[5] = "foo.bar.com     :      1234   ";

        r13[6] = "MIK_S:1234";

        i1 = 0;

     label1:
        $i0 = lengthof r13;

        if i1 >= $i0 goto label6;

     label2:
        r21 = new gov.nist.core.HostNameParser;

        $r0 = r13[i1];

        specialinvoke r21.<gov.nist.core.HostNameParser: void <init>(java.lang.String)>($r0);

        r15 = virtualinvoke r21.<gov.nist.core.HostNameParser: gov.nist.core.HostPort hostPort(boolean)>(1);

        r16 = <java.lang.System: java.io.PrintStream out>;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = virtualinvoke r15.<gov.nist.core.HostPort: java.lang.String encode()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r19 = <java.lang.System: java.io.PrintStream out>;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception text = ");

        r24 = (java.text.ParseException) $r6;

        $r9 = virtualinvoke r24.<java.text.ParseException: java.lang.String getMessage()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r19.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    protected void consumeDomainLabel() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        boolean $z0, $z1, $z2;
        char[] $r2;
        gov.nist.core.LexerCore $r3;
        java.lang.Throwable $r4;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("domainLabel");

     label1:
        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r2 = <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r2);

     label2:
        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public gov.nist.core.Host host() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.StringBuilder r1;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r2, $r3, $r5, $r6, $r8, $r9, $r14, $r16, $r18, $r19, $r21;
        char $c0;
        java.lang.String $r4, $r7, $r10, $r13, $r20, $r22, r26;
        int $i1, $i2, $i3, i4, i5, $i6;
        gov.nist.core.Host $r15;
        char[] $r17;
        java.lang.Throwable $r25;
        java.lang.StringBuffer r27;
        java.text.ParseException r29;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("host");

     label01:
        $r2 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r2.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 91 goto label03;

        r26 = virtualinvoke r0.<gov.nist.core.HostNameParser: java.lang.String ipv6Reference()>();

     label02:
        goto label06;

     label03:
        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r4 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $z1 = specialinvoke r0.<gov.nist.core.HostNameParser: boolean isIPv6Address(java.lang.String)>($r4);

        if $z1 == 0 goto label05;

        $r16 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i4 = virtualinvoke $r16.<gov.nist.core.LexerCore: int getPtr()>();

        $r18 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r17 = newarray (char)[2];

        $r17[0] = 65533;

        $r17[1] = 58;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r17);

        r27 = new java.lang.StringBuffer;

        specialinvoke r27.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        $r19 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r20 = virtualinvoke $r19.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r21 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = virtualinvoke $r21.<gov.nist.core.LexerCore: int getPtr()>();

        $r22 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int,int)>(i4, $i3);

        virtualinvoke r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r26 = virtualinvoke r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        goto label06;

     label05:
        $r5 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i5 = virtualinvoke $r5.<gov.nist.core.LexerCore: int getPtr()>();

        virtualinvoke r0.<gov.nist.core.HostNameParser: void consumeDomainLabel()>();

        $r6 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r7 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r8 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i1 = virtualinvoke $r8.<gov.nist.core.LexerCore: int getPtr()>();

        r26 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(i5, $i1);

     label06:
        $i6 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i6 == 0 goto label09;

        $r15 = new gov.nist.core.Host;

        specialinvoke $r15.<gov.nist.core.Host: void <init>(java.lang.String)>(r26);

     label07:
        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label08;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label08:
        return $r15;

     label09:
        r29 = new java.text.ParseException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Missing host name");

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i2 = virtualinvoke $r14.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke r29.<java.text.ParseException: void <init>(java.lang.String,int)>($r13, $i2);

        throw r29;

     label10:
        $r25 := @caughtexception;

        $z3 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z3 == 0 goto label11;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label11:
        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public gov.nist.core.HostPort hostPort(boolean) throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        char c0, $c1;
        gov.nist.core.LexerCore $r1, $r2, $r3, $r7, $r10, $r11, $r12, $r14, $r15, $r17, $r22;
        java.lang.String $r4, $r9, $r13, $r18, $r21;
        int $i2, $i3, $i4;
        java.lang.Throwable $r16, $r23;
        gov.nist.core.Host r24;
        gov.nist.core.HostPort r25;
        java.text.ParseException r27, r29;
        java.lang.StringBuilder r28, r30;

        r0 := @this: gov.nist.core.HostNameParser;

        z0 := @parameter0: boolean;

        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("hostPort");

     label01:
        r24 = virtualinvoke r0.<gov.nist.core.HostNameParser: gov.nist.core.Host host()>();

        r25 = new gov.nist.core.HostPort;

        specialinvoke r25.<gov.nist.core.HostPort: void <init>()>();

        virtualinvoke r25.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>(r24);

     label02:
        if z0 == 0 goto label04;

     label03:
        $r15 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

     label04:
        $r1 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r1.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label17;

        $r2 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r2.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label05:
        if c0 == 9 goto label17;

        if c0 == 10 goto label17;

        if c0 == 13 goto label17;

        if c0 == 32 goto label17;

        if c0 == 37 goto label13;

        if c0 == 44 goto label17;

        if c0 == 47 goto label17;

        if c0 == 58 goto label06;

        if c0 == 59 goto label17;

        if c0 == 62 goto label17;

        if c0 == 63 goto label17;

        goto label15;

     label06:
        $r11 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void consume(int)>(1);

     label07:
        if z0 == 0 goto label09;

     label08:
        $r14 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: void SPorHT()>();

     label09:
        $r12 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r12.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        virtualinvoke r25.<gov.nist.core.HostPort: void setPort(int)>($i3);

     label10:
        goto label17;

     label11:
        $r16 := @caughtexception;

     label12:
        r27 = new java.text.ParseException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        $r17 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r18 = virtualinvoke $r17.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :Error parsing port ");

        $r21 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i4 = virtualinvoke $r22.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke r27.<java.text.ParseException: void <init>(java.lang.String,int)>($r21, $i4);

        throw r27;

     label13:
        $z3 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

        if $z3 == 0 goto label15;

     label14:
        goto label17;

     label15:
        if z0 == 0 goto label16;

        goto label17;

     label16:
        r29 = new java.text.ParseException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r4 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Illegal character in hostname:");

        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r9 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i2 = virtualinvoke $r10.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke r29.<java.text.ParseException: void <init>(java.lang.String,int)>($r9, $i2);

        throw r29;

     label17:
        $z5 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z5 == 0 goto label18;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label18:
        return r25;

     label19:
        $r23 := @caughtexception;

        $z4 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z4 == 0 goto label20;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label20:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
    }

    protected java.lang.String ipv6Reference() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        int i0, $i1, $i2, $i5;
        java.lang.StringBuffer $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.core.LexerCore $r2, $r5, $r7, $r9, $r10, $r12, $r13, $r14, $r16, $r23, $r25, $r28, $r31;
        java.lang.Throwable $r18;
        char c3, c4;
        java.lang.String r20, r21, r22, r24, $r29, $r30;
        java.text.ParseException r26;
        java.lang.StringBuilder r27;

        r0 := @this: gov.nist.core.HostNameParser;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("ipv6Reference");

     label01:
        $z1 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

        if $z1 == 0 goto label20;

     label02:
        $r9 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z5 = virtualinvoke $r9.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z5 == 0 goto label28;

        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c3 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z6 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c3);

        if $z6 != 0 goto label18;

     label03:
        if c3 == 46 goto label18;

        if c3 == 58 goto label18;

        if c3 != 91 goto label04;

        goto label18;

     label04:
        if c3 != 93 goto label08;

     label05:
        $r16 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

        r20 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        $z8 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z8 == 0 goto label07;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label07:
        return r20;

     label08:
        if c3 != 37 goto label28;

     label09:
        $r12 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r13 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        r21 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String getRest()>();

     label10:
        if r21 == null goto label28;

     label11:
        $i1 = virtualinvoke r21.<java.lang.String: int length()>();

        if $i1 == 0 goto label17;

        i0 = virtualinvoke r21.<java.lang.String: int indexOf(int)>(93);

     label12:
        if i0 == -1 goto label16;

     label13:
        $r14 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i2 = i0 + 1;

        virtualinvoke $r14.<gov.nist.core.LexerCore: void consume(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r22 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        $z7 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z7 == 0 goto label15;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label15:
        return r22;

     label16:
        goto label28;

     label17:
        goto label28;

     label18:
        $r23 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

     label19:
        goto label02;

     label20:
        $r2 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r2.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label28;

        $r5 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c4 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z3 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c4);

        if $z3 != 0 goto label26;

     label21:
        if c4 == 46 goto label26;

        if c4 == 58 goto label26;

        if c4 != 91 goto label22;

        goto label26;

     label22:
        if c4 != 93 goto label28;

     label23:
        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        r24 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label24:
        $z4 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z4 == 0 goto label25;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label25:
        return r24;

     label26:
        $r25 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

     label27:
        goto label20;

     label28:
        r26 = new java.text.ParseException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r29 = virtualinvoke $r28.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Illegal Host name ");

        $r30 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i5 = virtualinvoke $r31.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke r26.<java.text.ParseException: void <init>(java.lang.String,int)>($r30, $i5);

        throw r26;

     label29:
        $r18 := @caughtexception;

        $z9 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z9 == 0 goto label30;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label30:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label28 to label29 with label29;
    }
}
