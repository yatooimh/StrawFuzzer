public class gov.nist.core.LexerCore extends gov.nist.core.StringTokenizer
{
    public static final int ALPHA;
    static final char ALPHADIGIT_VALID_CHARS;
    static final char ALPHA_VALID_CHARS;
    public static final int AND;
    public static final int AT;
    public static final int BACKSLASH;
    public static final int BACK_QUOTE;
    public static final int BAR;
    public static final int COLON;
    public static final int DIGIT;
    static final char DIGIT_VALID_CHARS;
    public static final int DOLLAR;
    public static final int DOT;
    public static final int DOUBLEQUOTE;
    public static final int END;
    public static final int EQUALS;
    public static final int EXCLAMATION;
    public static final int GREATER_THAN;
    public static final int HAT;
    public static final int HT;
    public static final int ID;
    public static final int LESS_THAN;
    public static final int LPAREN;
    public static final int L_CURLY;
    public static final int L_SQUARE_BRACKET;
    public static final int MINUS;
    public static final int NULL;
    public static final int PERCENT;
    public static final int PLUS;
    public static final int POUND;
    public static final int QUESTION;
    public static final int QUOTE;
    public static final int RPAREN;
    public static final int R_CURLY;
    public static final int R_SQUARE_BRACKET;
    public static final int SAFE;
    public static final int SEMICOLON;
    public static final int SLASH;
    public static final int SP;
    public static final int STAR;
    public static final int START;
    public static final int TILDE;
    public static final int UNDERSCORE;
    public static final int WHITESPACE;
    protected static final java.util.Hashtable globalSymbolTable;
    protected static final java.util.Hashtable lexerTables;
    protected java.util.Hashtable currentLexer;
    protected java.lang.String currentLexerName;
    protected gov.nist.core.Token currentMatch;

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r1;

        <gov.nist.core.LexerCore: int WHITESPACE> = 4097;

        <gov.nist.core.LexerCore: int UNDERSCORE> = 95;

        <gov.nist.core.LexerCore: int TILDE> = 126;

        <gov.nist.core.LexerCore: int START> = 2048;

        <gov.nist.core.LexerCore: int STAR> = 42;

        <gov.nist.core.LexerCore: int SP> = 32;

        <gov.nist.core.LexerCore: int SLASH> = 47;

        <gov.nist.core.LexerCore: int SEMICOLON> = 59;

        <gov.nist.core.LexerCore: int SAFE> = 4094;

        <gov.nist.core.LexerCore: int R_SQUARE_BRACKET> = 93;

        <gov.nist.core.LexerCore: int R_CURLY> = 125;

        <gov.nist.core.LexerCore: int RPAREN> = 41;

        <gov.nist.core.LexerCore: int QUOTE> = 39;

        <gov.nist.core.LexerCore: int QUESTION> = 63;

        <gov.nist.core.LexerCore: int POUND> = 35;

        <gov.nist.core.LexerCore: int PLUS> = 43;

        <gov.nist.core.LexerCore: int PERCENT> = 37;

        <gov.nist.core.LexerCore: int NULL> = 0;

        <gov.nist.core.LexerCore: int MINUS> = 45;

        <gov.nist.core.LexerCore: int L_SQUARE_BRACKET> = 91;

        <gov.nist.core.LexerCore: int L_CURLY> = 123;

        <gov.nist.core.LexerCore: int LPAREN> = 40;

        <gov.nist.core.LexerCore: int LESS_THAN> = 60;

        <gov.nist.core.LexerCore: int ID> = 4095;

        <gov.nist.core.LexerCore: int HT> = 9;

        <gov.nist.core.LexerCore: int HAT> = 94;

        <gov.nist.core.LexerCore: int GREATER_THAN> = 62;

        <gov.nist.core.LexerCore: int EXCLAMATION> = 33;

        <gov.nist.core.LexerCore: int EQUALS> = 61;

        <gov.nist.core.LexerCore: int END> = 4096;

        <gov.nist.core.LexerCore: int DOUBLEQUOTE> = 34;

        <gov.nist.core.LexerCore: int DOT> = 46;

        <gov.nist.core.LexerCore: int DOLLAR> = 36;

        <gov.nist.core.LexerCore: char DIGIT_VALID_CHARS> = 65534;

        <gov.nist.core.LexerCore: int DIGIT> = 4098;

        <gov.nist.core.LexerCore: int COLON> = 58;

        <gov.nist.core.LexerCore: int BAR> = 124;

        <gov.nist.core.LexerCore: int BACK_QUOTE> = 96;

        <gov.nist.core.LexerCore: int BACKSLASH> = 92;

        <gov.nist.core.LexerCore: int AT> = 64;

        <gov.nist.core.LexerCore: int AND> = 38;

        <gov.nist.core.LexerCore: char ALPHA_VALID_CHARS> = 65535;

        <gov.nist.core.LexerCore: char ALPHADIGIT_VALID_CHARS> = 65533;

        <gov.nist.core.LexerCore: int ALPHA> = 4099;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <gov.nist.core.LexerCore: java.util.Hashtable lexerTables> = $r1;

        return;
    }

    protected void <init>()
    {
        gov.nist.core.LexerCore r0;
        java.util.Hashtable $r1;

        r0 := @this: gov.nist.core.LexerCore;

        specialinvoke r0.<gov.nist.core.StringTokenizer: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = $r1;

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = "charLexer";

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1, r2;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<gov.nist.core.StringTokenizer: void <init>(java.lang.String)>(r2);

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = r1;

        return;
    }

    public static java.lang.String charAsString(char)
    {
        char c0;
        java.lang.String $r0;

        c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        return $r0;
    }

    public static final boolean isTokenChar(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if c0 == 33 goto label2;

        if c0 == 37 goto label2;

        if c0 == 39 goto label2;

        if c0 == 126 goto label2;

        if c0 == 42 goto label2;

        if c0 == 43 goto label2;

        if c0 == 45 goto label2;

        if c0 == 46 goto label2;

        if c0 == 95 goto label2;

        if c0 == 96 goto label2;

        return 0;

     label2:
        return 1;
    }

    public void SPorHT()
    {
        gov.nist.core.LexerCore r0;
        java.lang.Throwable $r2;
        char c0;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 32 goto label4;

        if c0 != 9 goto label3;

        goto label4;

     label3:
        goto label7;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label5:
        goto label2;

     label6:
        $r2 := @caughtexception;

     label7:
        return;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    protected void addKeyword(java.lang.String, int)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer r2;
        java.util.Hashtable $r3, $r5, $r6;
        boolean $z0;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        $z0 = virtualinvoke $r5.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r6 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label1:
        return;
    }

    protected java.util.Hashtable addLexer(java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;
        java.util.Hashtable $r2, $r4, $r5, $r6, r8;
        java.lang.Object $r3;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        $r2 = <gov.nist.core.LexerCore: java.util.Hashtable lexerTables>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.util.Hashtable) $r3;

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = r8;

        if r8 != null goto label1;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer> = $r5;

        $r6 = <gov.nist.core.LexerCore: java.util.Hashtable lexerTables>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        $r4 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        return $r4;
    }

    public java.lang.String byteStringNoComma()
    {
        gov.nist.core.LexerCore r0;
        char c0;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;
        java.lang.Throwable $r6;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 10 goto label5;

        if c0 != 44 goto label3;

        goto label5;

     label3:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label4:
        goto label1;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label3 to label4 with label6;
    }

    public java.lang.String byteStringNoSemicolon()
    {
        gov.nist.core.LexerCore r0;
        char c0;
        java.lang.StringBuffer $r3;
        java.lang.Throwable $r5;
        java.lang.String $r6, $r7;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 0 goto label5;

        if c0 == 10 goto label5;

        if c0 == 59 goto label5;

        if c0 != 44 goto label3;

        goto label5;

     label3:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label4:
        goto label1;

     label5:
        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label3 to label4 with label6;
    }

    public java.lang.String byteStringNoSlash()
    {
        gov.nist.core.LexerCore r0;
        char c0;
        java.lang.StringBuffer $r3;
        java.lang.Throwable $r5;
        java.lang.String $r6, $r7;

        r0 := @this: gov.nist.core.LexerCore;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label2:
        if c0 == 0 goto label5;

        if c0 == 10 goto label5;

        if c0 != 47 goto label3;

        goto label5;

     label3:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label4:
        goto label1;

     label5:
        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label3 to label4 with label6;
    }

    public java.lang.String charAsString(int)
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i2 = $i1 + i0;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        return $r2;
    }

    public java.lang.String comment() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        java.lang.StringBuffer $r1;
        char $c0, c3, c4;
        java.lang.StringBuilder $r2, $r10;
        java.lang.String $r3, $r7, $r11, $r15, $r17;
        java.text.ParseException $r6, $r14;
        int $i1, $i2;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 40 goto label1;

        return null;

     label1:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        c3 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c3 != 41 goto label3;

        $r17 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r17;

     label3:
        if c3 == 0 goto label7;

        if c3 != 92 goto label5;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

        c4 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c4 == 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        goto label6;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : unexpected EOL");

        $r14 = new java.text.ParseException;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r14.<java.text.ParseException: void <init>(java.lang.String,int)>($r15, $i2);

        throw $r14;

     label5:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

     label6:
        goto label2;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :unexpected EOL");

        $r6 = new java.text.ParseException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r7, $i1);

        throw $r6;
    }

    public void consumeValidChars(char[])
    {
        gov.nist.core.LexerCore r0;
        int i0, i3;
        char c1, c2;
        boolean $z0, z1;
        java.lang.Throwable $r1;
        char[] r2;

        r0 := @this: gov.nist.core.LexerCore;

        r2 := @parameter0: char[];

        i0 = lengthof r2;

     label01:
        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label17;

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label02:
        z1 = 0;

        i3 = 0;

     label03:
        if i3 >= i0 goto label14;

        c2 = r2[i3];

        tableswitch(c2)
        {
            case 65533: goto label09;
            case 65534: goto label07;
            case 65535: goto label05;
            default: goto label04;
        };

     label04:
        if c1 != c2 goto label11;

        z1 = 1;

        goto label12;

     label05:
        z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c1);

     label06:
        goto label12;

     label07:
        z1 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c1);

     label08:
        goto label12;

     label09:
        z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c1);

     label10:
        goto label12;

     label11:
        z1 = 0;

     label12:
        if z1 == 0 goto label13;

        goto label14;

     label13:
        i3 = i3 + 1;

        goto label03;

     label14:
        if z1 == 0 goto label17;

     label15:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label16:
        goto label01;

     label17:
        goto label19;

     label18:
        $r1 := @caughtexception;

     label19:
        return;

        catch java.text.ParseException from label01 to label02 with label18;
        catch java.text.ParseException from label05 to label06 with label18;
        catch java.text.ParseException from label07 to label08 with label18;
        catch java.text.ParseException from label09 to label10 with label18;
        catch java.text.ParseException from label15 to label16 with label18;
    }

    public java.text.ParseException createParseException()
    {
        gov.nist.core.LexerCore r0;
        java.text.ParseException $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = new java.text.ParseException;

        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r2, $i0);

        return $r1;
    }

    public java.lang.String getBuffer()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        return $r1;
    }

    public java.lang.String getNextId()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        return $r1;
    }

    public gov.nist.core.Token getNextToken()
    {
        gov.nist.core.LexerCore r0;
        gov.nist.core.Token $r1;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        return $r1;
    }

    public int getPtr()
    {
        gov.nist.core.LexerCore r0;
        int $i0;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        return $i0;
    }

    public java.lang.String getRest()
    {
        gov.nist.core.LexerCore r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < $i1 goto label1;

        return null;

     label1:
        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r3;
    }

    public java.lang.String getString(char) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        char c0, c3, c4;
        java.lang.StringBuffer $r1;
        java.lang.StringBuilder $r2, $r9;
        java.lang.String $r3, $r7, $r10, $r14, $r16;
        java.text.ParseException $r6, $r13;
        int $i1, $i2;

        r0 := @this: gov.nist.core.LexerCore;

        c0 := @parameter0: char;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

     label1:
        c3 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c3 == 0 goto label6;

        if c3 != c0 goto label2;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r16 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;

     label2:
        if c3 != 92 goto label4;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        c4 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c4 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        goto label5;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected EOL");

        $r13 = new java.text.ParseException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>($r14, $i2);

        throw $r13;

     label4:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c3);

     label5:
        goto label1;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected EOL");

        $r6 = new java.text.ParseException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r7, $i1);

        throw $r6;
    }

    public java.lang.String lookupToken(int)
    {
        gov.nist.core.LexerCore r0;
        int i0;
        char $c1;
        java.lang.Character $r1;
        java.lang.String $r2, $r6;
        java.util.Hashtable $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        if i0 <= 2048 goto label1;

        $r3 = <gov.nist.core.LexerCore: java.util.Hashtable globalSymbolTable>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r5;

        return $r6;

     label1:
        $c1 = (char) i0;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r2 = virtualinvoke $r1.<java.lang.Character: java.lang.String toString()>();

        return $r2;
    }

    public int markInputPosition()
    {
        gov.nist.core.LexerCore r0;
        int $i0;

        r0 := @this: gov.nist.core.LexerCore;

        $i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        return $i0;
    }

    public gov.nist.core.Token match(int) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char c1, c9, c10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r1, $r11, $r20, $r32, $r41, $r49, $r57;
        java.lang.String $r2, $r10, $r12, $r16, $r18, $r21, $r25, $r27, $r30, $r33, $r38, $r42, $r46, $r50, $r54, $r60, r62, r65, r68;
        java.text.ParseException $r9, $r15, $r24, $r37, $r45, $r53;
        gov.nist.core.Token $r17, $r19, $r26, $r28, $r39, $r40, $r47, $r48, $r55, $r56, $r76;
        java.util.Hashtable $r29;
        java.lang.Object $r31;
        java.lang.Integer r69;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        $z0 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z0 == 0 goto label01;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("match ");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r60);

     label01:
        if i0 <= 2048 goto label07;

        if i0 >= 4096 goto label07;

        if i0 != 4095 goto label03;

        $z4 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z4 == 0 goto label02;

        r62 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

        $r55 = new gov.nist.core.Token;

        specialinvoke $r55.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r55;

        $r55.<gov.nist.core.Token: java.lang.String tokenValue> = r62;

        $r56 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r56.<gov.nist.core.Token: int tokenType> = 4095;

        goto label13;

     label02:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nID expected");

        $r53 = new java.text.ParseException;

        $r54 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $i8 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r53.<java.text.ParseException: void <init>(java.lang.String,int)>($r54, $i8);

        throw $r53;

     label03:
        if i0 != 4094 goto label05;

        $z3 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsSafeToken()>();

        if $z3 == 0 goto label04;

        r65 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttokenSafe()>();

        $r47 = new gov.nist.core.Token;

        specialinvoke $r47.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r47;

        $r47.<gov.nist.core.Token: java.lang.String tokenValue> = r65;

        $r48 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r48.<gov.nist.core.Token: int tokenType> = 4094;

        goto label13;

     label04:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nID expected");

        $r45 = new java.text.ParseException;

        $r46 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r45.<java.text.ParseException: void <init>(java.lang.String,int)>($r46, $i7);

        throw $r45;

     label05:
        r68 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

        $r29 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $r30 = virtualinvoke r68.<java.lang.String: java.lang.String toUpperCase()>();

        $r31 = virtualinvoke $r29.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r30);

        r69 = (java.lang.Integer) $r31;

        if r69 == null goto label06;

        $i6 = virtualinvoke r69.<java.lang.Integer: int intValue()>();

        if $i6 != i0 goto label06;

        $r39 = new gov.nist.core.Token;

        specialinvoke $r39.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r39;

        $r39.<gov.nist.core.Token: java.lang.String tokenValue> = r68;

        $r40 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r40.<gov.nist.core.Token: int tokenType> = i0;

        goto label13;

     label06:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nUnexpected Token : ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        $r37 = new java.text.ParseException;

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r37.<java.text.ParseException: void <init>(java.lang.String,int)>($r38, $i5);

        throw $r37;

     label07:
        if i0 <= 4096 goto label12;

        c9 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if i0 != 4098 goto label09;

        $z2 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c9);

        if $z2 == 0 goto label08;

        $r26 = new gov.nist.core.Token;

        specialinvoke $r26.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c9);

        $r26.<gov.nist.core.Token: java.lang.String tokenValue> = $r27;

        $r28 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r28.<gov.nist.core.Token: int tokenType> = i0;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label11;

     label08:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting DIGIT");

        $r24 = new java.text.ParseException;

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r24.<java.text.ParseException: void <init>(java.lang.String,int)>($r25, $i4);

        throw $r24;

     label09:
        if i0 != 4099 goto label11;

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c9);

        if $z1 == 0 goto label10;

        $r17 = new gov.nist.core.Token;

        specialinvoke $r17.<gov.nist.core.Token: void <init>()>();

        r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch> = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c9);

        $r17.<gov.nist.core.Token: java.lang.String tokenValue> = $r18;

        $r19 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        $r19.<gov.nist.core.Token: int tokenType> = i0;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

        goto label11;

     label10:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting ALPHA");

        $r15 = new java.text.ParseException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r15.<java.text.ParseException: void <init>(java.lang.String,int)>($r16, $i3);

        throw $r15;

     label11:
        goto label13;

     label12:
        c10 = (char) i0;

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c1 != c10 goto label14;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label13:
        $r76 = r0.<gov.nist.core.LexerCore: gov.nist.core.Token currentMatch>;

        return $r76;

     label14:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExpecting  >>>");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<< got >>>");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<<");

        $r9 = new java.text.ParseException;

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r9.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i2);

        throw $r9;
    }

    public java.lang.String number() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i3, $i5, $i6;
        java.text.ParseException r1;
        char $c1, $c2, $c4;
        boolean $z0, $z1;
        java.lang.String $r2, $r6, $r7, $r8, $r10, $r11;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r12;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label1:
        $c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z0 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        $c4 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>($c4);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label3:
        goto label2;

     label4:
        $r7 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i5 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5);

        return $r8;

     label5:
        r1 = new java.text.ParseException;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unexpected token at ");

        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke r1.<java.text.ParseException: void <init>(java.lang.String,int)>($r6, $i3);

        throw r1;

     label6:
        $r9 := @caughtexception;

        $r10 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i6 = r0.<gov.nist.core.LexerCore: int ptr>;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(i0, $i6);

        return $r11;

        catch java.text.ParseException from label1 to label2 with label6;
        catch java.text.ParseException from label2 to label3 with label6;
        catch java.text.ParseException from label4 to label5 with label6;
        catch java.text.ParseException from label5 to label6 with label6;
    }

    public java.lang.String peekNextId()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1;
        java.lang.String r1;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        r1 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r0.<gov.nist.core.LexerCore: int savedPtr> = $i1;

        r0.<gov.nist.core.LexerCore: int ptr> = i0;

        return r1;
    }

    public gov.nist.core.Token peekNextToken() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        gov.nist.core.Token[] $r1;
        gov.nist.core.Token $r2;

        r0 := @this: gov.nist.core.LexerCore;

        $r1 = virtualinvoke r0.<gov.nist.core.LexerCore: gov.nist.core.Token[] peekNextToken(int)>(1);

        $r2 = $r1[0];

        return $r2;
    }

    public gov.nist.core.Token[] peekNextToken(int) throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, i1, $i3, $i4, i5;
        gov.nist.core.Token[] r1;
        char c2;
        gov.nist.core.Token $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r4, r9, r10;
        java.util.Hashtable $r5, $r6;
        java.lang.Object $r7;
        java.lang.Integer $r8;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r1 = newarray (gov.nist.core.Token)[i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label8;

        $r3 = new gov.nist.core.Token;

        specialinvoke $r3.<gov.nist.core.Token: void <init>()>();

        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z0 == 0 goto label4;

        r9 = virtualinvoke r0.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        $r3.<gov.nist.core.Token: java.lang.String tokenValue> = r9;

        r10 = virtualinvoke r9.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $z3 = virtualinvoke $r5.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r10);

        if $z3 == 0 goto label2;

        $r6 = r0.<gov.nist.core.LexerCore: java.util.Hashtable currentLexer>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r10);

        $r8 = (java.lang.Integer) $r7;

        $i4 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r3.<gov.nist.core.Token: int tokenType> = $i4;

        goto label3;

     label2:
        $r3.<gov.nist.core.Token: int tokenType> = 4095;

     label3:
        goto label7;

     label4:
        c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);

        $r3.<gov.nist.core.Token: java.lang.String tokenValue> = $r4;

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlpha(char)>(c2);

        if $z1 == 0 goto label5;

        $r3.<gov.nist.core.Token: int tokenType> = 4099;

        goto label7;

     label5:
        $z2 = staticinvoke <gov.nist.core.LexerCore: boolean isDigit(char)>(c2);

        if $z2 == 0 goto label6;

        $r3.<gov.nist.core.Token: int tokenType> = 4098;

        goto label7;

     label6:
        $r3.<gov.nist.core.Token: int tokenType> = c2;

     label7:
        r1[i5] = $r3;

        i5 = i5 + 1;

        goto label1;

     label8:
        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        r0.<gov.nist.core.LexerCore: int savedPtr> = $i3;

        r0.<gov.nist.core.LexerCore: int ptr> = i1;

        return r1;
    }

    public java.lang.String quotedString() throws java.text.ParseException
    {
        gov.nist.core.LexerCore r0;
        int i0, $i3, $i4, $i5, $i6;
        char c1, $c2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7, $r8, $r9;
        java.text.ParseException $r6;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 34 goto label1;

        return null;

     label1:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char getNextChar()>();

        if c1 != 34 goto label3;

        $r8 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i6 = i0 + 1;

        $i4 = r0.<gov.nist.core.LexerCore: int ptr>;

        $i5 = $i4 - 1;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>($i6, $i5);

        return $r9;

     label3:
        if c1 == 0 goto label5;

        if c1 != 92 goto label4;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label4:
        goto label2;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :unexpected EOL");

        $r6 = new java.text.ParseException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<gov.nist.core.LexerCore: int ptr>;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>($r7, $i3);

        throw $r6;
    }

    public void rewindInputPosition(int)
    {
        gov.nist.core.LexerCore r0;
        int i0;

        r0 := @this: gov.nist.core.LexerCore;

        i0 := @parameter0: int;

        r0.<gov.nist.core.LexerCore: int ptr> = i0;

        return;
    }

    public void selectLexer(java.lang.String)
    {
        gov.nist.core.LexerCore r0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.LexerCore;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.core.LexerCore: java.lang.String currentLexerName> = r1;

        return;
    }

    public boolean startsId()
    {
        gov.nist.core.LexerCore r0;
        boolean z0;
        char $c0;
        java.lang.Throwable $r2;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        $c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isTokenChar(char)>($c0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public boolean startsSafeToken()
    {
        gov.nist.core.LexerCore r0;
        char c0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: gov.nist.core.LexerCore;

     label1:
        c0 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        z0 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c0);

     label2:
        if z0 == 0 goto label3;

        return 1;

     label3:
        if c0 == 39 goto label8;

        if c0 == 61 goto label8;

        if c0 == 91 goto label8;

        if c0 == 42 goto label8;

        if c0 == 43 goto label8;

        if c0 == 58 goto label8;

        if c0 == 59 goto label8;

        if c0 == 63 goto label8;

        if c0 == 64 goto label8;

        tableswitch(c0)
        {
            case 33: goto label8;
            case 34: goto label8;
            case 35: goto label8;
            case 36: goto label8;
            case 37: goto label8;
            default: goto label4;
        };

     label4:
        tableswitch(c0)
        {
            case 45: goto label8;
            case 46: goto label8;
            case 47: goto label8;
            default: goto label5;
        };

     label5:
        tableswitch(c0)
        {
            case 93: goto label8;
            case 94: goto label8;
            case 95: goto label8;
            case 96: goto label8;
            default: goto label6;
        };

     label6:
        tableswitch(c0)
        {
            case 123: goto label8;
            case 124: goto label8;
            case 125: goto label8;
            case 126: goto label8;
            default: goto label7;
        };

     label7:
        return 0;

     label8:
        return 1;

     label9:
        $r2 := @caughtexception;

        return 0;

        catch java.text.ParseException from label1 to label2 with label9;
    }

    public java.lang.String ttoken()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.String $r1, r3;
        char $c2;
        java.lang.Throwable $r2;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label1:
        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label3;

        $c2 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isTokenChar(char)>($c2);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label2:
        goto label1;

     label3:
        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i1 = r0.<gov.nist.core.LexerCore: int ptr>;

        r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

     label4:
        return r3;

     label5:
        $r2 := @caughtexception;

        return null;

        catch java.text.ParseException from label1 to label2 with label5;
        catch java.text.ParseException from label3 to label4 with label5;
    }

    public java.lang.String ttokenSafe()
    {
        gov.nist.core.LexerCore r0;
        int i0, $i2;
        char c1;
        boolean $z0, $z1, z2;
        java.lang.String $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: gov.nist.core.LexerCore;

        i0 = r0.<gov.nist.core.LexerCore: int ptr>;

     label01:
        $z0 = virtualinvoke r0.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label12;

        c1 = virtualinvoke r0.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z1 = staticinvoke <gov.nist.core.LexerCore: boolean isAlphaDigit(char)>(c1);

        if $z1 == 0 goto label03;

        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label02:
        goto label11;

     label03:
        z2 = 0;

        if c1 == 39 goto label08;

        if c1 == 91 goto label08;

        if c1 == 42 goto label08;

        if c1 == 43 goto label08;

        if c1 == 58 goto label08;

        if c1 == 59 goto label08;

        if c1 == 63 goto label08;

        if c1 == 64 goto label08;

        tableswitch(c1)
        {
            case 33: goto label08;
            case 34: goto label08;
            case 35: goto label08;
            case 36: goto label08;
            case 37: goto label08;
            default: goto label04;
        };

     label04:
        tableswitch(c1)
        {
            case 45: goto label08;
            case 46: goto label08;
            case 47: goto label08;
            default: goto label05;
        };

     label05:
        tableswitch(c1)
        {
            case 93: goto label08;
            case 94: goto label08;
            case 95: goto label08;
            case 96: goto label08;
            default: goto label06;
        };

     label06:
        tableswitch(c1)
        {
            case 123: goto label08;
            case 124: goto label08;
            case 125: goto label08;
            case 126: goto label08;
            default: goto label07;
        };

     label07:
        goto label09;

     label08:
        z2 = 1;

     label09:
        if z2 == 0 goto label12;

     label10:
        virtualinvoke r0.<gov.nist.core.LexerCore: void consume(int)>(1);

     label11:
        goto label01;

     label12:
        $r1 = r0.<gov.nist.core.LexerCore: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.LexerCore: int ptr>;

        r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

     label13:
        return r3;

     label14:
        $r2 := @caughtexception;

        return null;

        catch java.text.ParseException from label01 to label02 with label14;
        catch java.text.ParseException from label10 to label11 with label14;
        catch java.text.ParseException from label12 to label13 with label14;
    }
}
