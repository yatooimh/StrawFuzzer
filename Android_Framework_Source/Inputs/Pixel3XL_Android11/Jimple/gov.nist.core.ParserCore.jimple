public abstract class gov.nist.core.ParserCore extends java.lang.Object
{
    public static final boolean debug;
    static int nesting_level;
    protected gov.nist.core.LexerCore lexer;

    static void <clinit>()
    {
        boolean $z0;

        $z0 = <gov.nist.core.Debug: boolean parserDebug>;

        <gov.nist.core.ParserCore: boolean debug> = $z0;

        return;
    }

    public void <init>()
    {
        gov.nist.core.ParserCore r0;

        r0 := @this: gov.nist.core.ParserCore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void dbg_enter(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r11, $r13;
        java.io.PrintStream r3;
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r6;
        gov.nist.core.LexerCore $r10;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label1:
        $i0 = <gov.nist.core.ParserCore: int nesting_level>;

        if i3 >= $i0 goto label2;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        i3 = i3 + 1;

        goto label1;

     label2:
        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label3;

        r3 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlexer buffer = \n");

        $r10 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r11 = virtualinvoke $r10.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label3:
        $i1 = <gov.nist.core.ParserCore: int nesting_level>;

        $i2 = $i1 + 1;

        <gov.nist.core.ParserCore: int nesting_level> = $i2;

        return;
    }

    protected void dbg_leave(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r11, $r13;
        java.io.PrintStream r3;
        java.lang.StringBuffer $r5;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r6;
        gov.nist.core.LexerCore $r10;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        i3 = 0;

     label1:
        $i0 = <gov.nist.core.ParserCore: int nesting_level>;

        if i3 >= $i0 goto label2;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        i3 = i3 + 1;

        goto label1;

     label2:
        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label3;

        r3 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlexer buffer = \n");

        $r10 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r11 = virtualinvoke $r10.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label3:
        $i1 = <gov.nist.core.ParserCore: int nesting_level>;

        $i2 = $i1 - 1;

        <gov.nist.core.ParserCore: int nesting_level> = $i2;

        return;
    }

    protected gov.nist.core.NameValue nameValue() throws java.text.ParseException
    {
        gov.nist.core.ParserCore r0;
        gov.nist.core.NameValue $r1;

        r0 := @this: gov.nist.core.ParserCore;

        $r1 = virtualinvoke r0.<gov.nist.core.ParserCore: gov.nist.core.NameValue nameValue(char)>(61);

        return $r1;
    }

    protected gov.nist.core.NameValue nameValue(char) throws java.text.ParseException
    {
        gov.nist.core.ParserCore r0;
        gov.nist.core.Token r1, $r16;
        char c0, $c1, c2;
        gov.nist.core.NameValue r2, $r8, $r19;
        boolean $z1, $z2, $z3, $z4, $z5, z6, z7;
        gov.nist.core.LexerCore $r3, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r15, $r17;
        java.lang.String $r9, $r20, r22, $r23;
        java.lang.Throwable $r18, $r21;

        r0 := @this: gov.nist.core.ParserCore;

        c2 := @parameter0: char;

        $z1 = <gov.nist.core.ParserCore: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_enter(java.lang.String)>("nameValue");

     label01:
        $r3 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r5 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r6 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

     label02:
        $r7 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label03:
        if c0 != c2 goto label16;

     label04:
        $r10 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r11 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        z6 = 0;

     label06:
        $r12 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 34 goto label08;

        $r17 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        r22 = virtualinvoke $r17.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

     label07:
        z7 = 1;

        goto label11;

     label08:
        $r13 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r15 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r16 = virtualinvoke $r15.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r22 = $r16.<gov.nist.core.Token: java.lang.String tokenValue>;

     label09:
        if r22 != null goto label10;

        z6 = 1;

        r22 = "";

        z7 = 0;

        goto label11;

     label10:
        z7 = 0;

     label11:
        r2 = new gov.nist.core.NameValue;

        $r23 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke r2.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r23, r22, z6);

     label12:
        if z7 == 0 goto label14;

     label13:
        virtualinvoke r2.<gov.nist.core.NameValue: void setQuotedValue()>();

     label14:
        $z3 = <gov.nist.core.ParserCore: boolean debug>;

        if $z3 == 0 goto label15;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label15:
        return r2;

     label16:
        $r8 = new gov.nist.core.NameValue;

        $r9 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke $r8.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r9, "", 1);

     label17:
        $z2 = <gov.nist.core.ParserCore: boolean debug>;

        if $z2 == 0 goto label18;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label18:
        return $r8;

     label19:
        $r18 := @caughtexception;

     label20:
        $r19 = new gov.nist.core.NameValue;

        $r20 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke $r19.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r20, null, 0);

     label21:
        $z4 = <gov.nist.core.ParserCore: boolean debug>;

        if $z4 == 0 goto label22;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label22:
        return $r19;

     label23:
        $r21 := @caughtexception;

        $z5 = <gov.nist.core.ParserCore: boolean debug>;

        if $z5 == 0 goto label24;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label24:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.text.ParseException from label02 to label03 with label19;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.text.ParseException from label04 to label05 with label19;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.text.ParseException from label06 to label07 with label19;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.text.ParseException from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.text.ParseException from label11 to label12 with label19;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.text.ParseException from label13 to label14 with label19;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.text.ParseException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
    }

    protected void peekLine(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3;
        gov.nist.core.LexerCore $r6;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r7 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String peekLine()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r9);

     label1:
        return;
    }
}
