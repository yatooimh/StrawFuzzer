public class gov.nist.core.StringTokenizer extends java.lang.Object
{
    protected java.lang.String buffer;
    protected int bufferLen;
    protected int ptr;
    protected int savedPtr;

    protected void <init>()
    {
        gov.nist.core.StringTokenizer r0;

        r0 := @this: gov.nist.core.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.core.StringTokenizer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: gov.nist.core.StringTokenizer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.core.StringTokenizer: java.lang.String buffer> = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<gov.nist.core.StringTokenizer: int bufferLen> = $i0;

        r0.<gov.nist.core.StringTokenizer: int ptr> = 0;

        return;
    }

    public static java.lang.String getSDPFieldName(java.lang.String)
    {
        int $i0;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.String r1, r2;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("=");

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        return r2;

     label3:
        $r0 := @caughtexception;

        return null;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public static boolean isAlpha(char)
    {
        char c0;
        boolean $z1, $z2, z3, z4;

        c0 := @parameter0: char;

        z3 = 0;

        if c0 > 127 goto label4;

        if c0 < 97 goto label1;

        if c0 <= 122 goto label2;

     label1:
        z4 = 0;

        if c0 < 65 goto label3;

        z4 = 0;

        if c0 > 90 goto label3;

     label2:
        z4 = 1;

     label3:
        return z4;

     label4:
        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c0);

        if $z1 != 0 goto label5;

        $z2 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z2 == 0 goto label6;

     label5:
        z3 = 1;

     label6:
        return z3;
    }

    public static boolean isAlphaDigit(char)
    {
        char c0;
        boolean $z1, $z2, $z3, z4, z5;

        c0 := @parameter0: char;

        z4 = 0;

        if c0 > 127 goto label5;

        if c0 < 97 goto label1;

        if c0 <= 122 goto label3;

     label1:
        if c0 < 65 goto label2;

        if c0 <= 90 goto label3;

     label2:
        z5 = 0;

        if c0 > 57 goto label4;

        z5 = 0;

        if c0 < 48 goto label4;

     label3:
        z5 = 1;

     label4:
        return z5;

     label5:
        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c0);

        if $z1 != 0 goto label6;

        $z2 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z2 != 0 goto label6;

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        if $z3 == 0 goto label7;

     label6:
        z4 = 1;

     label7:
        return z4;
    }

    public static boolean isDigit(char)
    {
        char c0;
        boolean $z0, z1;

        c0 := @parameter0: char;

        if c0 > 127 goto label3;

        if c0 > 57 goto label1;

        if c0 < 48 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        return $z0;
    }

    public static boolean isHexDigit(char)
    {
        char c0;
        boolean $z0, z1;

        c0 := @parameter0: char;

        if c0 < 65 goto label1;

        if c0 <= 70 goto label3;

     label1:
        if c0 < 97 goto label2;

        if c0 <= 102 goto label3;

     label2:
        $z0 = staticinvoke <gov.nist.core.StringTokenizer: boolean isDigit(char)>(c0);

        if $z0 == 0 goto label4;

     label3:
        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        return z1;
    }

    public void consume()
    {
        gov.nist.core.StringTokenizer r0;
        int $i0;

        r0 := @this: gov.nist.core.StringTokenizer;

        $i0 = r0.<gov.nist.core.StringTokenizer: int savedPtr>;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i0;

        return;
    }

    public void consume(int)
    {
        gov.nist.core.StringTokenizer r0;
        int i0, $i1, $i2;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 := @parameter0: int;

        $i1 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i2 = $i1 + i0;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i2;

        return;
    }

    public java.lang.String getLine()
    {
        gov.nist.core.StringTokenizer r0;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, i9, i10, $i11;
        java.lang.String $r1, $r2, $r3, $r4;
        char $c3, $c6;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 = r0.<gov.nist.core.StringTokenizer: int ptr>;

     label1:
        i9 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i1 = r0.<gov.nist.core.StringTokenizer: int bufferLen>;

        if i9 >= $i1 goto label2;

        $r2 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $c6 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        if $c6 == 10 goto label2;

        $i7 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i8 = $i7 + 1;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i8;

        goto label1;

     label2:
        i10 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i2 = r0.<gov.nist.core.StringTokenizer: int bufferLen>;

        if i10 >= $i2 goto label3;

        $r1 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i10);

        if $c3 != 10 goto label3;

        $i4 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i5 = $i4 + 1;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i5;

     label3:
        $r3 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $i11 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, $i11);

        return $r4;
    }

    public java.util.Vector getLines()
    {
        gov.nist.core.StringTokenizer r0;
        java.util.Vector $r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: gov.nist.core.StringTokenizer;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

     label1:
        $z0 = virtualinvoke r0.<gov.nist.core.StringTokenizer: boolean hasMoreChars()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<gov.nist.core.StringTokenizer: java.lang.String getLine()>();

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        goto label1;

     label2:
        return $r2;
    }

    public char getNextChar() throws java.text.ParseException
    {
        gov.nist.core.StringTokenizer r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r6, r7;
        java.text.ParseException $r5;
        char $c4;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i1 = r0.<gov.nist.core.StringTokenizer: int bufferLen>;

        if i0 >= $i1 goto label1;

        r7 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $i3 = i0 + 1;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i3;

        $c4 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i0);

        return $c4;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getNextChar: End of buffer");

        $r5 = new java.text.ParseException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r6, $i2);

        throw $r5;
    }

    public java.lang.String getNextToken(char) throws java.text.ParseException
    {
        gov.nist.core.StringTokenizer r0;
        char c0, c2;
        int i1, $i3;
        java.text.ParseException $r1;
        java.lang.String $r2, $r3;

        r0 := @this: gov.nist.core.StringTokenizer;

        c0 := @parameter0: char;

        i1 = r0.<gov.nist.core.StringTokenizer: int ptr>;

     label1:
        c2 = virtualinvoke r0.<gov.nist.core.StringTokenizer: char lookAhead(int)>(0);

        if c2 != c0 goto label2;

        $r2 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $i3 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i1, $i3);

        return $r3;

     label2:
        if c2 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.StringTokenizer: void consume(int)>(1);

        goto label1;

     label3:
        $r1 = new java.text.ParseException;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>("EOL reached", 0);

        throw $r1;
    }

    public boolean hasMoreChars()
    {
        gov.nist.core.StringTokenizer r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: gov.nist.core.StringTokenizer;

        $i1 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i0 = r0.<gov.nist.core.StringTokenizer: int bufferLen>;

        if $i1 >= $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public char lookAhead() throws java.text.ParseException
    {
        gov.nist.core.StringTokenizer r0;
        char $c0;

        r0 := @this: gov.nist.core.StringTokenizer;

        $c0 = virtualinvoke r0.<gov.nist.core.StringTokenizer: char lookAhead(int)>(0);

        return $c0;
    }

    public char lookAhead(int) throws java.text.ParseException
    {
        gov.nist.core.StringTokenizer r0;
        int i0, $i2, $i3;
        char c1;
        java.lang.String $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i3 = $i2 + i0;

        c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

     label2:
        return c1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public java.lang.String nextToken()
    {
        gov.nist.core.StringTokenizer r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r1, $r2, $r3;
        char c6;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 = r0.<gov.nist.core.StringTokenizer: int ptr>;

     label1:
        i5 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i1 = r0.<gov.nist.core.StringTokenizer: int bufferLen>;

        if i5 >= $i1 goto label3;

        $r3 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        c6 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i5);

        $i3 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $i4 = $i3 + 1;

        r0.<gov.nist.core.StringTokenizer: int ptr> = $i4;

        if c6 != 10 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        $r1 = r0.<gov.nist.core.StringTokenizer: java.lang.String buffer>;

        $i2 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

        return $r2;
    }

    public java.lang.String peekLine()
    {
        gov.nist.core.StringTokenizer r0;
        int i0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.StringTokenizer;

        i0 = r0.<gov.nist.core.StringTokenizer: int ptr>;

        r1 = virtualinvoke r0.<gov.nist.core.StringTokenizer: java.lang.String getLine()>();

        r0.<gov.nist.core.StringTokenizer: int ptr> = i0;

        return r1;
    }
}
