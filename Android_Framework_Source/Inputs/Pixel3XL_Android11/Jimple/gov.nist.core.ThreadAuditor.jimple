public class gov.nist.core.ThreadAuditor extends java.lang.Object
{
    private long pingIntervalInMillisecs;
    private java.util.Map threadHandles;

    public void <init>()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.HashMap $r1;

        r0 := @this: gov.nist.core.ThreadAuditor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles> = $r1;

        r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs> = 0L;

        return;
    }

    public gov.nist.core.ThreadAuditor$ThreadHandle addCurrentThread()
    {
        gov.nist.core.ThreadAuditor r0;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r4;
        gov.nist.core.ThreadAuditor$ThreadHandle r5;

        r0 := @this: gov.nist.core.ThreadAuditor;

        entermonitor r0;

     label1:
        r5 = new gov.nist.core.ThreadAuditor$ThreadHandle;

        specialinvoke r5.<gov.nist.core.ThreadAuditor$ThreadHandle: void <init>(gov.nist.core.ThreadAuditor,gov.nist.core.ThreadAuditor)>(r0, r0);

        $z0 = virtualinvoke r0.<gov.nist.core.ThreadAuditor: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r5);

     label2:
        exitmonitor r0;

        return r5;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String auditThreads()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.Iterator r1;
        gov.nist.core.ThreadAuditor$ThreadHandle r2;
        java.lang.Thread r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.String $r9, r13, r14, r15;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r16;

        r0 := @this: gov.nist.core.ThreadAuditor;

        entermonitor r0;

        r13 = null;

     label01:
        $r4 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (gov.nist.core.ThreadAuditor$ThreadHandle) $r6;

     label03:
        r14 = r13;

     label04:
        $z1 = virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: boolean isThreadActive()>();

        if $z1 != 0 goto label07;

        r3 = virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.Thread getThread()>();

     label05:
        r15 = r13;

        if r13 != null goto label06;

        r15 = "Thread Auditor Report:\n";

     label06:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   Thread [");

        $r9 = virtualinvoke r3.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has failed to respond to an audit request.\n");

        r14 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: void setThreadActive(boolean)>(0);

     label08:
        r13 = r14;

        goto label02;

     label09:
        exitmonitor r0;

        return r13;

     label10:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public long getPingIntervalInMillisecs()
    {
        gov.nist.core.ThreadAuditor r0;
        long $l0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $l0 = r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs>;

        return $l0;
    }

    public boolean isEnabled()
    {
        gov.nist.core.ThreadAuditor r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $l0 = r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void ping(gov.nist.core.ThreadAuditor$ThreadHandle)
    {
        gov.nist.core.ThreadAuditor r0;
        java.lang.Throwable $r1;
        gov.nist.core.ThreadAuditor$ThreadHandle r2;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r2 := @parameter0: gov.nist.core.ThreadAuditor$ThreadHandle;

        entermonitor r0;

     label1:
        virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: void setThreadActive(boolean)>(1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeThread(java.lang.Thread)
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.Map $r1;
        java.lang.Throwable $r3;
        java.lang.Thread r4;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r4 := @parameter0: java.lang.Thread;

        entermonitor r0;

     label1:
        $r1 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void reset()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.Map $r2;
        java.lang.Throwable $r3;

        r0 := @this: gov.nist.core.ThreadAuditor;

        entermonitor r0;

     label1:
        $r2 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setPingIntervalInMillisecs(long)
    {
        gov.nist.core.ThreadAuditor r0;
        long l0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        l0 := @parameter0: long;

        r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs> = l0;

        return;
    }

    public java.lang.String toString()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.Iterator r1;
        gov.nist.core.ThreadAuditor$ThreadHandle r2;
        java.lang.StringBuilder r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r9, r13;
        java.lang.Throwable $r12;

        r0 := @this: gov.nist.core.ThreadAuditor;

        entermonitor r0;

        r13 = "Thread Auditor - List of monitored threads:\n";

     label1:
        $r4 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (gov.nist.core.ThreadAuditor$ThreadHandle) $r6;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r9 = virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r13 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        goto label2;

     label4:
        exitmonitor r0;

        return r13;

     label5:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }
}
