public class gov.nist.javax.sip.SipProviderImpl extends java.lang.Object implements javax.sip.SipProvider, gov.nist.javax.sip.SipProviderExt, gov.nist.javax.sip.stack.SIPTransactionEventListener, gov.nist.javax.sip.stack.SIPDialogEventListener
{
    private java.lang.String IN6_ADDR_ANY;
    private java.lang.String IN_ADDR_ANY;
    private java.lang.String address;
    private boolean automaticDialogSupportEnabled;
    private boolean dialogErrorsAutomaticallyHandled;
    private gov.nist.javax.sip.EventScanner eventScanner;
    private java.util.concurrent.ConcurrentHashMap listeningPoints;
    private int port;
    private javax.sip.SipListener sipListener;
    protected gov.nist.javax.sip.SipStackImpl sipStack;

    private void <init>()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    protected void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl r1, $r4, $r5;
        gov.nist.javax.sip.EventScanner r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner getEventScanner()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner> = r2;

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        virtualinvoke r2.<gov.nist.javax.sip.EventScanner: void incrementRefcount()>();

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints> = $r3;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogSupportEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = $z0;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogErrorHandlingEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = $z1;

        return;
    }

    public void addListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0, $r3, $r14;
        gov.nist.javax.sip.ListeningPointImpl r1;
        java.lang.String r2, $r4, $r6, $r7, $r13;
        java.util.concurrent.ConcurrentHashMap $r5, $r8, $r9, $r11;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.lang.Object $r12;
        java.lang.Throwable $r15;
        javax.sip.ListeningPoint r16;
        javax.sip.ObjectInUseException r17, r18, r19;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r16 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

     label01:
        r1 = (gov.nist.javax.sip.ListeningPointImpl) r16;

        $r3 = r1.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r3 == null goto label04;

        $r14 = r1.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r14 != r0 goto label03;

     label02:
        goto label04;

     label03:
        r17 = new javax.sip.ObjectInUseException;

        specialinvoke r17.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point assigned to another provider");

        throw r17;

     label04:
        $r4 = virtualinvoke r1.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r2 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label06;

        $r13 = interfaceinvoke r16.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r13;

        $i2 = interfaceinvoke r16.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i2;

     label05:
        goto label07;

     label06:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address>;

        $r7 = interfaceinvoke r16.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label12;

        $i0 = r0.<gov.nist.javax.sip.SipProviderImpl: int port>;

        $i1 = interfaceinvoke r16.<javax.sip.ListeningPoint: int getPort()>();

        if $i0 != $i1 goto label12;

     label07:
        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z2 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z2 == 0 goto label10;

        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        if $r12 != r16 goto label09;

     label08:
        goto label10;

     label09:
        r18 = new javax.sip.ObjectInUseException;

        specialinvoke r18.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point already assigned for transport!");

        throw r18;

     label10:
        r1.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r9 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label11:
        exitmonitor r0;

        return;

     label12:
        r19 = new javax.sip.ObjectInUseException;

        specialinvoke r19.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Provider already has different IP Address associated");

        throw r19;

     label13:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public void addSipListener(javax.sip.SipListener) throws java.util.TooManyListenersException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener r1, $r5, $r7;
        gov.nist.core.StackLogger r2;
        gov.nist.javax.sip.SipStackImpl $r4, $r6, $r9, $r10, $r15;
        java.util.TooManyListenersException $r8;
        boolean $z0;
        java.lang.StringBuilder $r11;
        java.lang.String $r14;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.SipListener;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r5 = $r4.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r5 != null goto label1;

        $r15 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r15.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = r1;

        goto label2;

     label1:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r7 = $r6.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r7 != r1 goto label4;

     label2:
        $r9 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r2 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add SipListener ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label3:
        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = r1;

        return;

     label4:
        $r8 = new java.util.TooManyListenersException;

        specialinvoke $r8.<java.util.TooManyListenersException: void <init>(java.lang.String)>("Stack already has a listener. Only one listener per stack allowed");

        throw $r8;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPDialog r1;
        gov.nist.core.StackLogger r2;
        java.lang.Object $r3;
        int $i0, $i1;
        gov.nist.javax.sip.SipStackImpl $r4, $r11;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        gov.nist.javax.sip.stack.SIPDialogErrorEvent r9;
        gov.nist.javax.sip.DialogTimeoutEvent$Reason r10;
        boolean $z0;
        java.lang.StringBuilder r12;
        gov.nist.javax.sip.DialogTimeoutEvent r13;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r9 := @parameter0: gov.nist.javax.sip.stack.SIPDialogErrorEvent;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: java.lang.Object getSource()>();

        r1 = (gov.nist.javax.sip.stack.SIPDialog) $r3;

        r10 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotReceived>;

        $i0 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label3;

        r10 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotSent>;

     label2:
        goto label4;

     label3:
        $i1 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i1 != 3 goto label4;

        r10 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason ReInviteTimeout>;

     label4:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r2 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog TimeoutError occured on ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label5:
        r13 = new gov.nist.javax.sip.DialogTimeoutEvent;

        specialinvoke r13.<gov.nist.javax.sip.DialogTimeoutEvent: void <init>(java.lang.Object,javax.sip.Dialog,gov.nist.javax.sip.DialogTimeoutEvent$Reason)>(r0, r1, r10);

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r13, null);

     label6:
        exitmonitor r0;

        return;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public javax.sip.ListeningPoint getListeningPoint()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.sip.ListeningPoint $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (javax.sip.ListeningPoint) $r5;

        return $r6;

     label1:
        return null;
    }

    public javax.sip.ListeningPoint getListeningPoint(java.lang.String)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String r1, $r4;
        java.lang.NullPointerException $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object $r5;
        javax.sip.ListeningPoint $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (javax.sip.ListeningPoint) $r5;

        return $r6;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transport param");

        throw $r2;
    }

    public javax.sip.ListeningPoint[] getListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.lang.Throwable $r5;
        gov.nist.javax.sip.ListeningPointImpl[] r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        r6 = newarray (gov.nist.javax.sip.ListeningPointImpl)[$i0];

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r6);

     label2:
        exitmonitor r0;

        return r6;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public javax.sip.header.CallIdHeader getNewCallId()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.Utils $r2;
        javax.sip.ListeningPoint $r3;
        java.lang.String $r4, r7;
        gov.nist.javax.sip.header.CallID $r5;
        java.lang.Throwable $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r2 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r4 = interfaceinvoke $r3.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r7 = virtualinvoke $r2.<gov.nist.javax.sip.Utils: java.lang.String generateCallIdentifier(java.lang.String)>($r4);

        $r5 = new gov.nist.javax.sip.header.CallID;

        specialinvoke $r5.<gov.nist.javax.sip.header.CallID: void <init>()>();

     label1:
        virtualinvoke $r5.<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>(r7);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return $r5;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request) throws javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.message.SIPRequest r1, $r13, $r36, $r41, $r45, $r57;
        gov.nist.javax.sip.SipStackImpl $r3, $r12, $r14, $r16, $r18, $r23, $r29, $r32, $r33, $r42, $r44, $r49, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r5;
        java.lang.String $r7, $r11, $r21, $r22, $r25, $r26, $r28, $r37, $r40, $r54, $r56, $r70, $r76, r82, r84, $r87, r89, $r92, r93;
        gov.nist.javax.sip.header.Via $r9, $r10, $r17, $r27, $r55, $r63, $r86, $r90, r91;
        javax.sip.ListeningPoint $r15, $r61;
        int $i0, $i1;
        gov.nist.javax.sip.stack.MessageProcessor $r19;
        gov.nist.javax.sip.stack.MessageChannel $r20, $r46;
        gov.nist.javax.sip.stack.SIPDialog $r24, $r53, r85;
        javax.sip.DialogState $r30, $r31;
        gov.nist.javax.sip.stack.SIPTransaction $r43, $r47, $r59;
        gov.nist.javax.sip.stack.SIPClientTransaction $r48, $r51, r77, r78, r94;
        javax.sip.Dialog $r50, $r52;
        gov.nist.javax.sip.ListeningPointImpl $r62, r83;
        java.lang.Throwable $r64, $r66, $r68, $r71, $r73;
        javax.sip.message.Request r75;
        gov.nist.core.StackLogger r79;
        javax.sip.address.Hop r81;
        gov.nist.javax.sip.Utils $r88;
        javax.sip.TransactionUnavailableException r102, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113;
        java.lang.StringBuilder r103;
        java.lang.NullPointerException r114;
        java.lang.Exception r115, r116;
        java.text.ParseException r117;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r75 := @parameter0: javax.sip.message.Request;

        if r75 == null goto label35;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 == 0 goto label34;

        r1 = (gov.nist.javax.sip.message.SIPRequest) r75;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        if $r5 != null goto label33;

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 != 0 goto label32;

        $r9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r9 != null goto label01;

        $r61 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>("udp");

        $r62 = (gov.nist.javax.sip.ListeningPointImpl) $r61;

        $r63 = virtualinvoke $r62.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.header.Via getViaHeader()>();

        interfaceinvoke r75.<javax.sip.message.Request: void setHeader(javax.sip.header.Header)>($r63);

     label01:
        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label02:
        $r10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r11 == null goto label04;

        $r55 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r56 = virtualinvoke $r55.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z7 = virtualinvoke $r56.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z7 == 0 goto label04;

        $r58 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r57 = (gov.nist.javax.sip.message.SIPRequest) r75;

        $r59 = virtualinvoke $r58.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r57, 0);

        if $r59 != null goto label03;

        goto label04;

     label03:
        r102 = new javax.sip.TransactionUnavailableException;

        specialinvoke r102.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already exists!");

        throw r102;

     label04:
        $r76 = interfaceinvoke r75.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z8 = virtualinvoke $r76.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CANCEL");

        if $z8 == 0 goto label06;

        $r42 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r41 = (gov.nist.javax.sip.message.SIPRequest) r75;

        $r43 = virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>($r41, 0);

        r77 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r43;

        if r77 == null goto label06;

        $r44 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r45 = (gov.nist.javax.sip.message.SIPRequest) r75;

        $r46 = virtualinvoke r77.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        r78 = virtualinvoke $r44.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>($r45, $r46);

        $r47 = (gov.nist.javax.sip.stack.SIPTransaction) r78;

        virtualinvoke $r47.<gov.nist.javax.sip.stack.SIPTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

        $r49 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r48 = (gov.nist.javax.sip.stack.SIPClientTransaction) r78;

        virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>($r48);

        $r50 = virtualinvoke r77.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r50 == null goto label05;

        $r51 = (gov.nist.javax.sip.stack.SIPClientTransaction) r78;

        $r52 = virtualinvoke r77.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r53 = (gov.nist.javax.sip.stack.SIPDialog) $r52;

        $r54 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke $r51.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r53, $r54);

     label05:
        return r78;

     label06:
        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label07;

        $r33 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r79 = virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find existing transaction for ");

        $r36 = (gov.nist.javax.sip.message.SIPRequest) r75;

        $r37 = virtualinvoke $r36.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" creating a new one ");

        $r40 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r79.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r40);

     label07:
        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r13 = (gov.nist.javax.sip.message.SIPRequest) r75;

        r81 = virtualinvoke $r14.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest)>($r13);

     label08:
        if r81 == null goto label29;

        r82 = interfaceinvoke r81.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r82);

        r83 = (gov.nist.javax.sip.ListeningPointImpl) $r15;

        r84 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r16 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r85 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r84);

        if r85 == null goto label09;

        $r30 = virtualinvoke r85.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r31 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r30 != $r31 goto label09;

        $r32 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r32.<gov.nist.javax.sip.SipStackImpl: void removeDialog(gov.nist.javax.sip.stack.SIPDialog)>(r85);

     label09:
        $r86 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r87 = virtualinvoke $r86.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r87 == null goto label10;

        $r27 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r28 = virtualinvoke $r27.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z5 = virtualinvoke $r28.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z5 == 0 goto label10;

        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z6 == 0 goto label11;

     label10:
        $r88 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        r89 = virtualinvoke $r88.<gov.nist.javax.sip.Utils: java.lang.String generateBranchId()>();

        $r90 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        virtualinvoke $r90.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>(r89);

     label11:
        r91 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r92 = virtualinvoke r91.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        if $r92 != null goto label12;

        virtualinvoke r91.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>(r82);

     label12:
        $i0 = virtualinvoke r91.<gov.nist.javax.sip.header.Via: int getPort()>();

        if $i0 != -1 goto label13;

        $i1 = virtualinvoke r83.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        virtualinvoke r91.<gov.nist.javax.sip.header.Via: void setPort(int)>($i1);

     label13:
        $r17 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r93 = virtualinvoke $r17.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r18 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r19 = virtualinvoke r83.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r20 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageProcessor,javax.sip.address.Hop)>(r1, $r19, r81);

        r94 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r20;

     label14:
        if r94 == null goto label25;

     label15:
        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setNextHop(javax.sip.address.Hop)>(r81);

        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setBranch(java.lang.String)>(r93);

        $r21 = interfaceinvoke r75.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z3 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r21);

        if $z3 == 0 goto label21;

     label16:
        if r85 == null goto label19;

     label17:
        $r26 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r85, $r26);

     label18:
        goto label23;

     label19:
        $z4 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z4 == 0 goto label23;

        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r24 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r94);

        $r25 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r24, $r25);

     label20:
        goto label23;

     label21:
        if r85 == null goto label23;

     label22:
        $r22 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r85, $r22);

     label23:
        virtualinvoke r94.<gov.nist.javax.sip.stack.SIPClientTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

     label24:
        return r94;

     label25:
        r104 = new javax.sip.TransactionUnavailableException;

        specialinvoke r104.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cound not create tx");

        throw r104;

     label26:
        $r66 := @caughtexception;

        r115 = (java.lang.Exception) $r66;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r115);

        r105 = new javax.sip.TransactionUnavailableException;

        specialinvoke r105.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", $r66);

        throw r105;

     label27:
        $r71 := @caughtexception;

        r116 = (java.lang.Exception) $r71;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r116);

        r106 = new javax.sip.TransactionUnavailableException;

        specialinvoke r106.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", $r71);

        throw r106;

     label28:
        $r73 := @caughtexception;

        r107 = new javax.sip.TransactionUnavailableException;

        specialinvoke r107.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Could not resolve next hop or listening point unavailable! ", $r73);

        throw r107;

     label29:
        r108 = new javax.sip.TransactionUnavailableException;

        specialinvoke r108.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot resolve next hop -- transaction unavailable");

        throw r108;

     label30:
        $r64 := @caughtexception;

        r109 = new javax.sip.TransactionUnavailableException;

        specialinvoke r109.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot resolve next hop -- transaction unavailable", $r64);

        throw r109;

     label31:
        $r68 := @caughtexception;

        r110 = new javax.sip.TransactionUnavailableException;

        r117 = (java.text.ParseException) $r68;

        $r70 = virtualinvoke r117.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke r110.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r70, $r68);

        throw r110;

     label32:
        r111 = new javax.sip.TransactionUnavailableException;

        specialinvoke r111.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create client transaction for  ACK");

        throw r111;

     label33:
        r112 = new javax.sip.TransactionUnavailableException;

        specialinvoke r112.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already assigned to request");

        throw r112;

     label34:
        r113 = new javax.sip.TransactionUnavailableException;

        specialinvoke r113.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw r113;

     label35:
        r114 = new java.lang.NullPointerException;

        specialinvoke r114.<java.lang.NullPointerException: void <init>(java.lang.String)>("null request");

        throw r114;

        catch java.text.ParseException from label01 to label02 with label31;
        catch javax.sip.SipException from label07 to label08 with label30;
        catch java.io.IOException from label09 to label10 with label28;
        catch java.text.ParseException from label09 to label10 with label27;
        catch javax.sip.InvalidArgumentException from label09 to label10 with label26;
        catch java.io.IOException from label10 to label11 with label28;
        catch java.text.ParseException from label10 to label11 with label27;
        catch javax.sip.InvalidArgumentException from label10 to label11 with label26;
        catch java.io.IOException from label11 to label12 with label28;
        catch java.text.ParseException from label11 to label12 with label27;
        catch javax.sip.InvalidArgumentException from label11 to label12 with label26;
        catch java.io.IOException from label12 to label13 with label28;
        catch java.text.ParseException from label12 to label13 with label27;
        catch javax.sip.InvalidArgumentException from label12 to label13 with label26;
        catch java.io.IOException from label13 to label14 with label28;
        catch java.text.ParseException from label13 to label14 with label27;
        catch javax.sip.InvalidArgumentException from label13 to label14 with label26;
        catch java.io.IOException from label15 to label16 with label28;
        catch java.text.ParseException from label15 to label16 with label27;
        catch javax.sip.InvalidArgumentException from label15 to label16 with label26;
        catch java.io.IOException from label17 to label18 with label28;
        catch java.text.ParseException from label17 to label18 with label27;
        catch javax.sip.InvalidArgumentException from label17 to label18 with label26;
        catch java.io.IOException from label19 to label20 with label28;
        catch java.text.ParseException from label19 to label20 with label27;
        catch javax.sip.InvalidArgumentException from label19 to label20 with label26;
        catch java.io.IOException from label22 to label23 with label28;
        catch java.text.ParseException from label22 to label23 with label27;
        catch javax.sip.InvalidArgumentException from label22 to label23 with label26;
        catch java.io.IOException from label23 to label24 with label28;
        catch java.text.ParseException from label23 to label24 with label27;
        catch javax.sip.InvalidArgumentException from label23 to label24 with label26;
        catch java.io.IOException from label25 to label26 with label28;
        catch java.text.ParseException from label25 to label26 with label27;
        catch javax.sip.InvalidArgumentException from label25 to label26 with label26;
        catch javax.sip.SipException from label29 to label30 with label30;
    }

    public javax.sip.Dialog getNewDialog(javax.sip.Transaction) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPTransaction r1, $r30;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPRequest r3, $r20;
        java.lang.NullPointerException $r4;
        gov.nist.javax.sip.SipStackImpl $r5, $r21, $r24, $r26, $r29, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.SipException $r6, $r7, $r15, $r18, $r23, $r32;
        javax.sip.message.Request $r8, $r12, $r19, $r25;
        java.lang.String $r9, $r13, $r16, $r27, $r28, r35, r39;
        java.lang.StringBuilder $r10;
        gov.nist.javax.sip.message.SIPResponse $r17, r34;
        gov.nist.javax.sip.stack.SIPDialog $r22, r36, r37;
        int $i0;
        javax.sip.Transaction r33;
        gov.nist.javax.sip.stack.SIPClientTransaction r38;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r33 := @parameter0: javax.sip.Transaction;

        if r33 == null goto label13;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 == 0 goto label12;

        $z1 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z1 != 0 goto label11;

        $r8 = interfaceinvoke r33.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r9 = interfaceinvoke $r8.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r9);

        if $z2 == 0 goto label10;

        r1 = (gov.nist.javax.sip.stack.SIPTransaction) r33;

        $z3 = r33 instanceof javax.sip.ServerTransaction;

        if $z3 == 0 goto label06;

        r2 = (gov.nist.javax.sip.stack.SIPServerTransaction) r33;

        r34 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if r34 == null goto label02;

        $i0 = interfaceinvoke r34.<javax.sip.message.Response: int getStatusCode()>();

        if $i0 != 100 goto label01;

        goto label02;

     label01:
        $r32 = new javax.sip.SipException;

        specialinvoke $r32.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot set dialog after response has been sent");

        throw $r32;

     label02:
        $r25 = interfaceinvoke r33.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        r3 = (gov.nist.javax.sip.message.SIPRequest) $r25;

        r35 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r36 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r35);

        if r36 != null goto label03;

        $r31 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r30 = (gov.nist.javax.sip.stack.SIPTransaction) r33;

        r37 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>($r30);

        virtualinvoke r37.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        virtualinvoke r37.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r3);

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r37, null);

        goto label04;

     label03:
        $r27 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r36, $r27);

        r37 = r36;

     label04:
        $r28 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label05;

        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z5 == 0 goto label05;

        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r2, r3);

     label05:
        goto label07;

     label06:
        r38 = (gov.nist.javax.sip.stack.SIPClientTransaction) r33;

        $r17 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if $r17 != null goto label09;

        $r19 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        $r20 = (gov.nist.javax.sip.message.SIPRequest) $r19;

        r39 = virtualinvoke $r20.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r21 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r22 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r39);

        if $r22 != null goto label08;

        $r24 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r37 = virtualinvoke $r24.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        virtualinvoke r38.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r37, null);

     label07:
        virtualinvoke r37.<gov.nist.javax.sip.stack.SIPDialog: void addEventListener(gov.nist.javax.sip.stack.SIPDialogEventListener)>(r0);

        return r37;

     label08:
        $r23 = new javax.sip.SipException;

        specialinvoke $r23.<javax.sip.SipException: void <init>(java.lang.String)>("Dialog already exists!");

        throw $r23;

     label09:
        $r18 = new javax.sip.SipException;

        specialinvoke $r18.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot call this method after response is received!");

        throw $r18;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog cannot be created for this method ");

        $r12 = interfaceinvoke r33.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r13 = interfaceinvoke $r12.<javax.sip.message.Request: java.lang.String getMethod()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new javax.sip.SipException;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<javax.sip.SipException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label11:
        $r7 = new javax.sip.SipException;

        specialinvoke $r7.<javax.sip.SipException: void <init>(java.lang.String)>(" Error - AUTOMATIC_DIALOG_SUPPORT is on");

        throw $r7;

     label12:
        $r6 = new javax.sip.SipException;

        specialinvoke $r6.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw $r6;

     label13:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transaction!");

        throw $r4;
    }

    public javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request) throws javax.sip.TransactionAlreadyExistsException, javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.message.SIPRequest r1, $r9, $r13, $r21, $r26, $r30, $r32, $r36, $r39, $r41;
        gov.nist.javax.sip.stack.SIPDialog r2, r74, r81, r89, r93;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        gov.nist.javax.sip.SipStackImpl $r3, $r10, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r27, $r33, $r34, $r37, $r42, $r43, $r47, $r48, $r49, $r52, $r56, $r58, $r60, $r67, $r70, $r82;
        java.lang.String $r5, $r6, $r8, $r20, $r25, $r35, $r44, $r45, $r46, $r50, $r51, $r65, r73, $r75, r80, r88, r92;
        gov.nist.javax.sip.stack.SIPTransaction $r11, $r28, $r38;
        gov.nist.javax.sip.stack.SIPServerTransaction $r12, $r29, r71, r72, r87, r91;
        java.lang.Object $r14, $r15, $r31, $r40;
        javax.sip.ListeningPoint $r53;
        gov.nist.javax.sip.ListeningPointImpl $r54;
        gov.nist.javax.sip.stack.SIPClientTransaction $r55;
        gov.nist.core.StackLogger $r61;
        java.lang.Throwable $r62, $r63, $r66, $r68;
        javax.sip.message.Request r69;
        gov.nist.javax.sip.stack.MessageChannel r90;
        javax.sip.TransactionUnavailableException r98, r99, r100, r101, r103, r104, r106, r108, r109, r110;
        javax.sip.TransactionAlreadyExistsException r102, r105, r107;
        java.text.ParseException r111;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r69 := @parameter0: javax.sip.message.Request;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r3.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z1 == 0 goto label57;

        r1 = (gov.nist.javax.sip.message.SIPRequest) r69;

     label01:
        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label02:
        $r5 = interfaceinvoke r69.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z2 == 0 goto label04;

        $r58 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r58.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label03;

        $r60 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r61 = virtualinvoke $r60.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r61.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Creating server transaction for ACK -- makes no sense!");

     label03:
        r98 = new javax.sip.TransactionUnavailableException;

        specialinvoke r98.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create Server transaction for ACK ");

        throw r98;

     label04:
        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z3 == 0 goto label06;

        $r50 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        if $r50 == null goto label06;

        $r51 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getToTag()>();

        if $r51 != null goto label06;

        $r52 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r53 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r54 = (gov.nist.javax.sip.ListeningPointImpl) $r53;

        $r55 = virtualinvoke $r52.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)>(r1, $r54);

        if $r55 != null goto label06;

        $r56 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = $r56.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify>;

        if $z8 == 0 goto label05;

        goto label06;

     label05:
        r99 = new javax.sip.TransactionUnavailableException;

        specialinvoke r99.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot find matching Subscription (and gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY not set)");

        throw r99;

     label06:
        $r70 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r70.<gov.nist.javax.sip.SipStackImpl: boolean acquireSem()>();

        if $z10 == 0 goto label55;

     label07:
        $r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r8);

        if $z4 == 0 goto label23;

        $r37 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r36 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r38 = virtualinvoke $r37.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r36, 1);

        if $r38 != null goto label22;

        $r39 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r40 = virtualinvoke $r39.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r71 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r40;

     label08:
        if r71 == null goto label21;

     label09:
        $r41 = virtualinvoke r71.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r41 != null goto label10;

        virtualinvoke r71.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

     label10:
        $r42 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r71);

     label11:
        virtualinvoke r71.<gov.nist.javax.sip.stack.SIPServerTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

     label12:
        r72 = r71;

     label13:
        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z5 == 0 goto label32;

        r73 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r43 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r2 = virtualinvoke $r43.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r73);

     label14:
        r74 = r2;

        if r2 != null goto label16;

     label15:
        $r49 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r74 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r71);

     label16:
        $r44 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r71.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r74, $r44);

        $r45 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z6 == 0 goto label17;

        $z7 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z7 == 0 goto label17;

        $r48 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r71, r1);

     label17:
        virtualinvoke r74.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        $r75 = virtualinvoke r74.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getRemoteTag()>();

        if $r75 == null goto label18;

        $r46 = virtualinvoke r74.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getLocalTag()>();

        if $r46 == null goto label18;

        $r47 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r47.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r74);

     label18:
        r72 = r71;

        goto label32;

     label19:
        $r68 := @caughtexception;

     label20:
        r100 = new javax.sip.TransactionUnavailableException;

        specialinvoke r100.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Error sending provisional response");

        throw r100;

     label21:
        r101 = new javax.sip.TransactionUnavailableException;

        specialinvoke r101.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available");

        throw r101;

     label22:
        r102 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke r102.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("server transaction already exists!");

        throw r102;

     label23:
        z0 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

     label24:
        if z0 == 0 goto label37;

     label25:
        $r27 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r26 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r28 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r26, 1);

        $r29 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r28;

        if $r29 != null goto label36;

        $r30 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r31 = virtualinvoke $r30.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r72 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r31;

     label26:
        if r72 == null goto label35;

     label27:
        $r32 = virtualinvoke r72.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r32 != null goto label28;

        virtualinvoke r72.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

     label28:
        $r33 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r72);

     label29:
        r80 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r81 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r80);

     label30:
        if r81 == null goto label32;

     label31:
        virtualinvoke r81.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r72);

        virtualinvoke r81.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        $r35 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r72.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r81, $r35);

     label32:
        $r82 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r82.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r72;

     label33:
        $r62 := @caughtexception;

     label34:
        r103 = new javax.sip.TransactionUnavailableException;

        specialinvoke r103.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Could not send back provisional response!");

        throw r103;

     label35:
        r104 = new javax.sip.TransactionUnavailableException;

        specialinvoke r104.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available!");

        throw r104;

     label36:
        r105 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke r105.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw r105;

     label37:
        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r9, 1);

        $r12 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r11;

        if $r12 != null goto label53;

        $r13 = (gov.nist.javax.sip.message.SIPRequest) r69;

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r87 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r14;

     label38:
        if r87 == null goto label45;

     label39:
        $r21 = virtualinvoke r87.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r21 != null goto label40;

        virtualinvoke r87.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

     label40:
        $r22 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r87);

        r88 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r89 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r88);

     label41:
        if r89 == null goto label44;

     label42:
        virtualinvoke r89.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r87);

        virtualinvoke r89.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

     label43:
        $r25 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r87.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r89, $r25);

     label44:
        $r24 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r24.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r87;

     label45:
        $r15 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getMessageChannel()>();

        r90 = (gov.nist.javax.sip.stack.MessageChannel) $r15;

        $r16 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r91 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)>(r90);

     label46:
        if r91 == null goto label52;

     label47:
        virtualinvoke r91.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

        $r17 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r17.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r91);

        r92 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r18 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r93 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r92);

     label48:
        if r93 == null goto label51;

     label49:
        virtualinvoke r93.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r91);

        virtualinvoke r93.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

     label50:
        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r91.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r93, $r20);

     label51:
        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r91;

     label52:
        r106 = new javax.sip.TransactionUnavailableException;

        specialinvoke r106.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction unavailable -- too many servrer transactions");

        throw r106;

     label53:
        r107 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke r107.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw r107;

     label54:
        $r66 := @caughtexception;

        $r67 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r67.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        throw $r66;

     label55:
        r108 = new javax.sip.TransactionUnavailableException;

        specialinvoke r108.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available -- could not acquire stack lock");

        throw r108;

     label56:
        $r63 := @caughtexception;

        r109 = new javax.sip.TransactionUnavailableException;

        r111 = (java.text.ParseException) $r63;

        $r65 = virtualinvoke r111.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke r109.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r65, $r63);

        throw r109;

     label57:
        r110 = new javax.sip.TransactionUnavailableException;

        specialinvoke r110.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw r110;

        catch java.text.ParseException from label01 to label02 with label56;
        catch java.lang.Throwable from label07 to label08 with label54;
        catch java.lang.Throwable from label09 to label10 with label54;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label54;
        catch java.lang.Throwable from label11 to label12 with label54;
        catch java.lang.Throwable from label13 to label14 with label54;
        catch java.lang.Throwable from label15 to label16 with label54;
        catch java.lang.Throwable from label16 to label17 with label54;
        catch java.lang.Throwable from label17 to label18 with label54;
        catch java.lang.Throwable from label20 to label21 with label54;
        catch java.lang.Throwable from label21 to label22 with label54;
        catch java.lang.Throwable from label22 to label23 with label54;
        catch java.lang.Throwable from label23 to label24 with label54;
        catch java.lang.Throwable from label25 to label26 with label54;
        catch java.lang.Throwable from label27 to label28 with label54;
        catch java.io.IOException from label28 to label29 with label33;
        catch java.lang.Throwable from label28 to label29 with label54;
        catch java.lang.Throwable from label29 to label30 with label54;
        catch java.lang.Throwable from label31 to label32 with label54;
        catch java.lang.Throwable from label34 to label35 with label54;
        catch java.lang.Throwable from label35 to label36 with label54;
        catch java.lang.Throwable from label36 to label37 with label54;
        catch java.lang.Throwable from label37 to label38 with label54;
        catch java.lang.Throwable from label39 to label40 with label54;
        catch java.lang.Throwable from label40 to label41 with label54;
        catch java.lang.Throwable from label42 to label43 with label54;
        catch java.lang.Throwable from label43 to label44 with label54;
        catch java.lang.Throwable from label45 to label46 with label54;
        catch java.lang.Throwable from label47 to label48 with label54;
        catch java.lang.Throwable from label49 to label50 with label54;
        catch java.lang.Throwable from label50 to label51 with label54;
        catch java.lang.Throwable from label52 to label53 with label54;
        catch java.lang.Throwable from label53 to label54 with label54;
    }

    public javax.sip.SipListener getSipListener()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener>;

        return $r1;
    }

    public javax.sip.SipStack getSipStack()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        return $r1;
    }

    public void handleEvent(java.util.EventObject, gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        gov.nist.javax.sip.SipStackImpl $r2, $r5, $r19, $r20, $r26, $r27, $r41, $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.javax.sip.EventScanner $r3, $r4;
        java.lang.StringBuilder $r6, $r21, $r28;
        javax.sip.SipListener $r12;
        java.lang.Object $r15;
        java.lang.String $r17, $r24, $r31;
        javax.sip.ResponseEvent $r18;
        javax.sip.RequestEvent $r25;
        java.util.EventObject r32;
        gov.nist.core.StackLogger r33, r36, r39, $r42;
        javax.sip.Dialog r35, r38;
        gov.nist.javax.sip.EventWrapper $r43;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r32 := @parameter0: java.util.EventObject;

        r1 := @parameter1: gov.nist.javax.sip.stack.SIPTransaction;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r33 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEvent ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currentTransaction = ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this.sipListener = ");

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sipEvent.source = ");

        $r15 = virtualinvoke r32.<java.util.EventObject: java.lang.Object getSource()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r33.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r17);

        $z1 = r32 instanceof javax.sip.RequestEvent;

        if $z1 == 0 goto label1;

        $r25 = (javax.sip.RequestEvent) r32;

        r35 = virtualinvoke $r25.<javax.sip.RequestEvent: javax.sip.Dialog getDialog()>();

        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label2;

        $r27 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r36 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r36.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r31);

        goto label2;

     label1:
        $z2 = r32 instanceof javax.sip.ResponseEvent;

        if $z2 == 0 goto label2;

        $r18 = (javax.sip.ResponseEvent) r32;

        r38 = virtualinvoke $r18.<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()>();

        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label2;

        $r20 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r39 = virtualinvoke $r20.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r39.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r24);

        goto label2;

     label2:
        $r41 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r42 = virtualinvoke $r41.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r42.<gov.nist.core.StackLogger: void logStackTrace()>();

     label3:
        $r43 = new gov.nist.javax.sip.EventWrapper;

        specialinvoke $r43.<gov.nist.javax.sip.EventWrapper: void <init>(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r32, r1);

        $r45 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = $r45.<gov.nist.javax.sip.SipStackImpl: boolean reEntrantListener>;

        if $z5 != 0 goto label4;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r4.<gov.nist.javax.sip.EventScanner: void addEvent(gov.nist.javax.sip.EventWrapper)>($r43);

        goto label5;

     label4:
        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r3.<gov.nist.javax.sip.EventScanner: void deliverEvent(gov.nist.javax.sip.EventWrapper)>($r43);

     label5:
        return;
    }

    public boolean isAutomaticDialogSupportEnabled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled>;

        return $z0;
    }

    public boolean isDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled>;

        return $z0;
    }

    public void removeListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3, $r4;
        java.lang.Throwable $r6;
        javax.sip.ListeningPoint r7;
        gov.nist.javax.sip.ListeningPointImpl r8;
        javax.sip.ObjectInUseException r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r7 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

     label1:
        r8 = (gov.nist.javax.sip.ListeningPointImpl) r7;

        $r1 = r8.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $z0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageProcessor: boolean inUse()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke r8.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        r9 = new javax.sip.ObjectInUseException;

        specialinvoke r9.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Object is in use");

        throw r9;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void removeListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Collection $r2;
        boolean $z0;
        java.lang.Object $r3;
        gov.nist.javax.sip.ListeningPointImpl $r4;
        gov.nist.javax.sip.stack.MessageProcessor $r5;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        entermonitor r0;

     label1:
        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (gov.nist.javax.sip.ListeningPointImpl) $r3;

        $r5 = $r4.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        virtualinvoke $r5.<gov.nist.javax.sip.stack.MessageProcessor: void stop()>();

        interfaceinvoke r7.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void removeSipListener(javax.sip.SipListener)
    {
        gov.nist.javax.sip.SipProviderImpl r0, $r5;
        javax.sip.SipListener $r1, $r6, r7;
        gov.nist.javax.sip.SipStackImpl $r2, $r3;
        java.lang.Object $r4;
        boolean z0, $z1;
        java.util.Iterator r8;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r7 := @parameter0: javax.sip.SipListener;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if r7 != $r1 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = null;

     label1:
        z0 = 0;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r8 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getSipProviders()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (gov.nist.javax.sip.SipProviderImpl) $r4;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r6 == null goto label3;

        z0 = 1;

     label3:
        goto label2;

     label4:
        if z0 != 0 goto label5;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r3.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = null;

     label5:
        return;
    }

    public void sendRequest(javax.sip.message.Request) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.SipStackImpl $r2, $r11, $r12, $r20, $r31, $r34, $r35, $r42, $r43, $r52, $r53, $r56, $r57, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.javax.sip.message.SIPRequest $r4, $r30, $r63, r66;
        gov.nist.javax.sip.header.RequestLine $r5;
        java.lang.String $r8, $r10, $r15, $r19, $r21, $r23, $r24, $r26, $r29, $r32, $r40, $r46, $r50, r68, $r71, $r72;
        javax.sip.ListeningPoint $r22, $r25;
        int $i0, $i1;
        gov.nist.javax.sip.header.Via $r27, r67;
        javax.sip.DialogState $r33, $r38;
        java.lang.Throwable $r41, $r51, $r55;
        gov.nist.core.StackLogger $r58, r60, r73, r81;
        gov.nist.javax.sip.stack.SIPDialog r59;
        javax.sip.address.Router $r64;
        javax.sip.address.Hop r65;
        gov.nist.javax.sip.stack.MessageChannel r69;
        java.util.concurrent.ConcurrentHashMap $r70;
        java.lang.StringBuilder r74, r83, r85, r86, r88, r90;
        javax.sip.SipException r84, r87, r89, r91, r92;
        java.lang.Exception r93;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 == 0 goto label25;

        $r4 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()>();

        if $r5 == null goto label01;

        $r29 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z4 == 0 goto label01;

        $r31 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r30 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r32 = virtualinvoke $r30.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        r59 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>($r32);

        if r59 == null goto label01;

        $r33 = interfaceinvoke r59.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        if $r33 == null goto label01;

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label01;

        $r35 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r60 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r83 = new java.lang.StringBuilder;

        specialinvoke r83.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog exists -- you may want to use Dialog.sendAck() ");

        $r38 = interfaceinvoke r59.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r40 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r60.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>($r40);

     label01:
        $r62 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r63 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r64 = virtualinvoke $r62.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)>($r63);

        r65 = interfaceinvoke $r64.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        if r65 == null goto label24;

        r66 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $z1 = virtualinvoke r66.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z1 != 0 goto label03;

        $r27 = virtualinvoke r66.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r27 == null goto label02;

        goto label03;

     label02:
        r84 = new javax.sip.SipException;

        specialinvoke r84.<javax.sip.SipException: void <init>(java.lang.String)>("Invalid SipRequest -- no via header!");

        throw r84;

     label03:
        $z2 = virtualinvoke r66.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z2 != 0 goto label07;

        r67 = virtualinvoke r66.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r68 = virtualinvoke r67.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

     label04:
        if r68 == null goto label06;

     label05:
        $i1 = virtualinvoke r68.<java.lang.String: int length()>();

        if $i1 != 0 goto label07;

     label06:
        $r26 = virtualinvoke r66.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r67.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>($r26);

     label07:
        r69 = null;

     label08:
        $r70 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r71 = interfaceinvoke r65.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r72 = virtualinvoke $r71.<java.lang.String: java.lang.String toUpperCase()>();

        $z9 = virtualinvoke $r70.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r72);

        if $z9 == 0 goto label09;

        $r20 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r21 = interfaceinvoke r65.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r21);

        $r23 = interfaceinvoke $r22.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $r24 = interfaceinvoke r65.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r24);

        $i0 = interfaceinvoke $r25.<javax.sip.ListeningPoint: int getPort()>();

        r69 = virtualinvoke $r20.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r23, $i0, r65);

     label09:
        if r69 == null goto label12;

     label10:
        virtualinvoke r69.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)>(r66, r65);

     label11:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label18;

        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r73 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        r74 = r85;

        goto label17;

     label12:
        r87 = new javax.sip.SipException;

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a message channel for ");

        $r8 = interfaceinvoke r65.<javax.sip.address.Hop: java.lang.String toString()>();

        virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r87.<javax.sip.SipException: void <init>(java.lang.String)>($r10);

        throw r87;

     label13:
        $r41 := @caughtexception;

        goto label22;

     label14:
        $r51 := @caughtexception;

     label15:
        r93 = (java.lang.Exception) $r51;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r93);

     label16:
        $r52 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r52.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label18;

        $r53 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r73 = virtualinvoke $r53.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        r74 = r88;

     label17:
        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r15 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r65);

        $r19 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r73.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r19);

     label18:
        return;

     label19:
        $r55 := @caughtexception;

     label20:
        $r56 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r56.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label21;

        $r57 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r58 = virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r58.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r55);

     label21:
        r89 = new javax.sip.SipException;

        specialinvoke r89.<javax.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("IO Exception occured while Sending Request", $r55);

        throw r89;

     label22:
        $r42 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label23;

        $r43 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r81 = virtualinvoke $r43.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r46 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r65);

        $r50 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r81.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r50);

     label23:
        throw $r41;

     label24:
        r91 = new javax.sip.SipException;

        specialinvoke r91.<javax.sip.SipException: void <init>(java.lang.String)>("could not determine next hop!");

        throw r91;

     label25:
        r92 = new javax.sip.SipException;

        specialinvoke r92.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw r92;

        catch java.io.IOException from label03 to label04 with label19;
        catch java.text.ParseException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.text.ParseException from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.io.IOException from label06 to label07 with label19;
        catch java.text.ParseException from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.text.ParseException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.text.ParseException from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.text.ParseException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label20 to label21 with label13;
        catch java.lang.Throwable from label21 to label22 with label13;
    }

    public void sendResponse(javax.sip.message.Response) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.header.Via r2;
        java.lang.String r3, $r12, $r14, $r16, $r27, r30, r31, r32;
        gov.nist.javax.sip.SipStackImpl $r4, $r8, $r13, $r34;
        boolean $z0, $z1, $z2;
        gov.nist.javax.sip.message.SIPMessage $r7;
        gov.nist.javax.sip.stack.SIPTransaction $r9;
        javax.sip.ListeningPoint $r15, $r38;
        int $i0, $i1, i2, i3, i4, $i5;
        gov.nist.javax.sip.stack.MessageChannel $r17;
        javax.sip.TransactionState $r22, $r23;
        java.lang.Throwable $r25;
        javax.sip.message.Response r28;
        gov.nist.javax.sip.stack.SIPServerTransaction r29;
        gov.nist.core.net.AddressResolver $r35;
        javax.sip.address.Hop r37;
        gov.nist.javax.sip.ListeningPointImpl r39;
        javax.sip.SipException r43, r47, r48, r49, r50;
        java.lang.StringBuilder r44, r46;
        gov.nist.javax.sip.stack.HopImpl r45;
        java.io.IOException r51;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r28 := @parameter0: javax.sip.message.Response;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 == 0 goto label14;

        r1 = (gov.nist.javax.sip.message.SIPResponse) r28;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if r2 == null goto label13;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r7 = (gov.nist.javax.sip.message.SIPMessage) r28;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r7, 1);

        r29 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r9;

        if r29 == null goto label02;

        $r22 = virtualinvoke r29.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r23 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r22 == $r23 goto label02;

        $z2 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z2 != 0 goto label01;

        goto label02;

     label01:
        r43 = new javax.sip.SipException;

        specialinvoke r43.<javax.sip.SipException: void <init>(java.lang.String)>("Transaction exists -- cannot send response statelessly");

        throw r43;

     label02:
        r3 = virtualinvoke r2.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r30 = virtualinvoke r2.<gov.nist.javax.sip.header.Via: java.lang.String getReceived()>();

        r31 = r30;

        if r30 != null goto label03;

        r31 = virtualinvoke r2.<gov.nist.javax.sip.header.Via: java.lang.String getHost()>();

     label03:
        i2 = virtualinvoke r2.<gov.nist.javax.sip.header.Via: int getRPort()>();

        i3 = i2;

        if i2 != -1 goto label05;

        i4 = virtualinvoke r2.<gov.nist.javax.sip.header.Via: int getPort()>();

        i3 = i4;

        if i4 != -1 goto label05;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z1 == 0 goto label04;

        i3 = 5061;

        goto label05;

     label04:
        i3 = 5060;

     label05:
        r32 = r31;

        $i5 = virtualinvoke r31.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i5 <= 0 goto label06;

        r32 = r31;

        $i1 = virtualinvoke r31.<java.lang.String: int indexOf(java.lang.String)>("[");

        if $i1 >= 0 goto label06;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r32 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r35 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.AddressResolver getAddressResolver()>();

        r45 = new gov.nist.javax.sip.stack.HopImpl;

        specialinvoke r45.<gov.nist.javax.sip.stack.HopImpl: void <init>(java.lang.String,int,java.lang.String)>(r32, i3, r3);

        r37 = interfaceinvoke $r35.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>(r45);

     label07:
        $r38 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r3);

        r39 = (gov.nist.javax.sip.ListeningPointImpl) $r38;

     label08:
        if r39 == null goto label11;

     label09:
        $r13 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14 = interfaceinvoke r37.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r14);

        $r16 = interfaceinvoke $r15.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $i0 = r39.<gov.nist.javax.sip.ListeningPointImpl: int port>;

        $r17 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r16, $i0, r37);

        virtualinvoke $r17.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r1);

     label10:
        return;

     label11:
        r47 = new javax.sip.SipException;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("whoopsa daisy! no listening point found for transport ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r47.<javax.sip.SipException: void <init>(java.lang.String)>($r12);

        throw r47;

     label12:
        $r25 := @caughtexception;

        r48 = new javax.sip.SipException;

        r51 = (java.io.IOException) $r25;

        $r27 = virtualinvoke r51.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke r48.<javax.sip.SipException: void <init>(java.lang.String)>($r27);

        throw r48;

     label13:
        r49 = new javax.sip.SipException;

        specialinvoke r49.<javax.sip.SipException: void <init>(java.lang.String)>("No via header in response!");

        throw r49;

     label14:
        r50 = new javax.sip.SipException;

        specialinvoke r50.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped");

        throw r50;

        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    public void setAutomaticDialogSupportEnabled(boolean)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = z0;

        if z0 == 0 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

     label1:
        return;
    }

    public void setDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    public void setListeningPoint(javax.sip.ListeningPoint)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String $r1, $r2, r9;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r3, $r4;
        java.lang.Throwable $r6;
        javax.sip.ListeningPoint r7;
        gov.nist.javax.sip.ListeningPointImpl r8;
        java.lang.NullPointerException r11;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r7 := @parameter0: javax.sip.ListeningPoint;

        entermonitor r0;

        if r7 == null goto label4;

     label1:
        r8 = (gov.nist.javax.sip.ListeningPointImpl) r7;

        r8.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r1 = virtualinvoke r8.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r9 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r2 = interfaceinvoke r7.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r2;

        $i0 = interfaceinvoke r7.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i0;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r7);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        goto label5;

     label4:
        r11 = new java.lang.NullPointerException;

        specialinvoke r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null listening point");

        throw r11;

     label5:
        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void stop()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.Iterator r1;
        gov.nist.javax.sip.SipStackImpl $r2, $r8;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Collection $r4;
        gov.nist.javax.sip.EventScanner $r5;
        java.lang.Object $r6;
        gov.nist.javax.sip.ListeningPointImpl $r7;
        gov.nist.core.StackLogger $r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Exiting provider");

     label1:
        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (gov.nist.javax.sip.ListeningPointImpl) $r6;

        virtualinvoke $r7.<gov.nist.javax.sip.ListeningPointImpl: void removeSipProvider()>();

        goto label2;

     label3:
        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r5.<gov.nist.javax.sip.EventScanner: void stop()>();

        return;
    }

    public void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.Object $r2, r41, r46, r51;
        int $i0, $i1, $i2;
        javax.sip.Transaction $r3;
        javax.sip.Dialog $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.TimeoutEvent $r5, $r8, $r15, $r20, $r26, $r31, r43, r48, r53;
        javax.sip.ClientTransaction $r6, $r16, $r27;
        gov.nist.javax.sip.stack.SIPTransaction $r7, r39, $r45, $r50;
        javax.sip.ServerTransaction $r9, $r21, $r32;
        gov.nist.javax.sip.SipStackImpl $r10, $r13, $r17, $r22, $r24, $r28, $r33;
        gov.nist.core.StackLogger $r11, r40;
        gov.nist.javax.sip.stack.SIPClientTransaction $r12, $r23;
        javax.sip.address.Router $r14, $r18, $r25, $r29;
        gov.nist.javax.sip.address.RouterExt $r19, $r30;
        java.lang.StringBuilder $r34;
        java.lang.String $r37;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r38;
        javax.sip.Timeout r42, r47, r52;
        javax.sip.address.Hop r44, r49;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r38 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        $r2 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r39 = (gov.nist.javax.sip.stack.SIPTransaction) $r2;

        $i0 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label05;

        $r22 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label01;

        $r33 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r40 = virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransportError occured on ");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r40.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r37);

     label01:
        r41 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r42 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z4 = r41 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z4 == 0 goto label02;

        $r31 = new javax.sip.TimeoutEvent;

        $r32 = (javax.sip.ServerTransaction) r41;

        specialinvoke $r31.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r32, r42);

        r43 = $r31;

        goto label04;

     label02:
        $r23 = (gov.nist.javax.sip.stack.SIPClientTransaction) r41;

        r44 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r24 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r25 = virtualinvoke $r24.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z5 = $r25 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z5 == 0 goto label03;

        $r28 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r29 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r30 = (gov.nist.javax.sip.address.RouterExt) $r29;

        interfaceinvoke $r30.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r44);

     label03:
        $r26 = new javax.sip.TimeoutEvent;

        $r27 = (javax.sip.ClientTransaction) r41;

        specialinvoke $r26.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r27, r42);

        r43 = $r26;

     label04:
        $r45 = (gov.nist.javax.sip.stack.SIPTransaction) r41;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r43, $r45);

        goto label13;

     label05:
        $i1 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i1 != 1 goto label09;

        r46 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r47 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z1 = r46 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label06;

        $r20 = new javax.sip.TimeoutEvent;

        $r21 = (javax.sip.ServerTransaction) r46;

        specialinvoke $r20.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r21, r47);

        r48 = $r20;

        goto label08;

     label06:
        $r12 = (gov.nist.javax.sip.stack.SIPClientTransaction) r46;

        r49 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r13 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z2 = $r14 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z2 == 0 goto label07;

        $r17 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r18 = virtualinvoke $r17.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r19 = (gov.nist.javax.sip.address.RouterExt) $r18;

        interfaceinvoke $r19.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r49);

     label07:
        $r15 = new javax.sip.TimeoutEvent;

        $r16 = (javax.sip.ClientTransaction) r46;

        specialinvoke $r15.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r16, r47);

        r48 = $r15;

     label08:
        $r50 = (gov.nist.javax.sip.stack.SIPTransaction) r46;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r48, $r50);

        goto label13;

     label09:
        $i2 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i2 != 3 goto label13;

        r51 = virtualinvoke r38.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        $r3 = (javax.sip.Transaction) r51;

        $r4 = interfaceinvoke $r3.<javax.sip.Transaction: javax.sip.Dialog getDialog()>();

        if $r4 == null goto label10;

        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String,gov.nist.core.StackLogger)>("Unexpected event !", $r11);

     label10:
        r52 = <javax.sip.Timeout: javax.sip.Timeout RETRANSMIT>;

        $z0 = r51 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z0 == 0 goto label11;

        $r8 = new javax.sip.TimeoutEvent;

        $r9 = (javax.sip.ServerTransaction) r51;

        specialinvoke $r8.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r9, r52);

        r53 = $r8;

        goto label12;

     label11:
        $r5 = new javax.sip.TimeoutEvent;

        $r6 = (javax.sip.ClientTransaction) r51;

        specialinvoke $r5.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r6, r52);

        r53 = $r5;

     label12:
        $r7 = (gov.nist.javax.sip.stack.SIPTransaction) r51;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r53, $r7);

        goto label13;

     label13:
        return;
    }
}
