public class gov.nist.javax.sip.address.RFC2396UrlDecoder extends java.lang.Object
{

    public void <init>()
    {
        gov.nist.javax.sip.address.RFC2396UrlDecoder r0;

        r0 := @this: gov.nist.javax.sip.address.RFC2396UrlDecoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String decode(java.lang.String)
    {
        byte[] r0;
        int i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i13, $i14, i15, i16;
        java.lang.String r1, $r3, $r7, $r13, $r16, r17;
        java.lang.StringBuffer $r2;
        char $c4, $c5, $c6;
        java.lang.IllegalArgumentException $r6, $r15;
        byte $b11, $b12;
        java.lang.Throwable $r8, $r10;
        java.lang.RuntimeException $r9;
        java.lang.StringBuilder $r11;

        r17 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuffer;

        $i1 = virtualinvoke r17.<java.lang.String: int length()>();

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i1);

        $i2 = virtualinvoke r17.<java.lang.String: int length()>();

        $i3 = $i2 / 3;

        r0 = newarray (byte)[$i3];

        i15 = 0;

        i0 = virtualinvoke r17.<java.lang.String: int length()>();

     label01:
        i16 = 0;

        if i15 >= i0 goto label11;

        $c4 = virtualinvoke r17.<java.lang.String: char charAt(int)>(i15);

        if $c4 != 37 goto label10;

     label02:
        if i15 >= i0 goto label07;

        $c6 = virtualinvoke r17.<java.lang.String: char charAt(int)>(i15);

        if $c6 != 37 goto label07;

        $i7 = i15 + 2;

        if $i7 >= i0 goto label06;

     label03:
        $i9 = i15 + 1;

        $i8 = i15 + 3;

        $r7 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int,int)>($i9, $i8);

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 16);

        $b11 = (byte) $i10;

        $b12 = (byte) $b11;

        r0[i16] = $b12;

     label04:
        i16 = i16 + 1;

        i15 = i15 + 3;

        goto label02;

     label05:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hex characters in pattern %");

        $i14 = i15 + 1;

        $i13 = i15 + 3;

        $r13 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int,int)>($i14, $i13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label06:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("% character should be followed by 2 hexadecimal characters.");

        throw $r6;

     label07:
        r1 = new java.lang.String;

        specialinvoke r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r0, 0, i16, "UTF-8");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

     label08:
        goto label01;

     label09:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Problem in decodePath: UTF-8 encoding not supported.");

        throw $r9;

     label10:
        $c5 = virtualinvoke r17.<java.lang.String: char charAt(int)>(i15);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

        i15 = i15 + 1;

        goto label01;

     label11:
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
    }
}
