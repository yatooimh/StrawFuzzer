public abstract class gov.nist.javax.sip.header.SIPHeaderNamesCache extends java.lang.Object
{
    private static final java.util.HashMap lowercaseMap;

    static void <clinit>()
    {
        java.lang.reflect.Field[] r0;
        java.lang.String r1, r12;
        java.util.HashMap $r2, $r6, $r8;
        java.lang.Class $r3, $r4;
        int $i0, $i1, i2;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Throwable $r10;
        java.lang.reflect.Field r11;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <gov.nist.javax.sip.header.SIPHeaderNamesCache: java.util.HashMap lowercaseMap> = $r2;

        $r3 = class "Lgov/nist/javax/sip/header/SIPHeaderNames;";

        r0 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label6;

        r11 = r0[i2];

        $r4 = virtualinvoke r11.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z0 == 0 goto label5;

        $i1 = virtualinvoke r11.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z1 == 0 goto label5;

     label2:
        $r5 = virtualinvoke r11.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r12 = (java.lang.String) $r5;

        r1 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = <gov.nist.javax.sip.header.SIPHeaderNamesCache: java.util.HashMap lowercaseMap>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r1);

        $r8 = <gov.nist.javax.sip.header.SIPHeaderNamesCache: java.util.HashMap lowercaseMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }

    public void <init>()
    {
        gov.nist.javax.sip.header.SIPHeaderNamesCache r0;

        r0 := @this: gov.nist.javax.sip.header.SIPHeaderNamesCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toLowerCase(java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        $r2 = <gov.nist.javax.sip.header.SIPHeaderNamesCache: java.util.HashMap lowercaseMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.String) $r3;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r4;

     label1:
        return r1;
    }
}
