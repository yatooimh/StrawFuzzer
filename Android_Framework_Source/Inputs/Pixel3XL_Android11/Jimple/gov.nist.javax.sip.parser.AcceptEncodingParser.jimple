public class gov.nist.javax.sip.parser.AcceptEncodingParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        boolean $z0, $z1, $z4;
        gov.nist.core.LexerCore $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r38;
        char $c0, $c1, $c2, $c3, $c4;
        java.lang.String $r22, $r28, $r31, $r34;
        float $f0;
        gov.nist.core.Token $r27, r39;
        java.lang.Throwable $r29, $r30, $r33;
        java.text.ParseException $r32, $r35;
        gov.nist.javax.sip.header.AcceptEncodingList r43;
        gov.nist.javax.sip.header.AcceptEncoding r44, r45;
        javax.sip.InvalidArgumentException r46;
        java.lang.NumberFormatException r47;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        r43 = new gov.nist.javax.sip.header.AcceptEncodingList;

        specialinvoke r43.<gov.nist.javax.sip.header.AcceptEncodingList: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_enter(java.lang.String)>("AcceptEncodingParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void headerName(int)>(2067);

        $r3 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r3.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 10 goto label03;

        r44 = new gov.nist.javax.sip.header.AcceptEncoding;

        specialinvoke r44.<gov.nist.javax.sip.header.AcceptEncoding: void <init>()>();

        virtualinvoke r43.<gov.nist.javax.sip.header.AcceptEncodingList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r44);

     label02:
        goto label14;

     label03:
        $r4 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label14;

        r45 = new gov.nist.javax.sip.header.AcceptEncoding;

        specialinvoke r45.<gov.nist.javax.sip.header.AcceptEncoding: void <init>()>();

        $r5 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 59 goto label04;

        $r24 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r26 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $r27 = virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r28 = virtualinvoke $r27.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r45.<gov.nist.javax.sip.header.AcceptEncoding: void setEncoding(java.lang.String)>($r28);

     label04:
        $r38 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c4 = virtualinvoke $r38.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c4 != 59 goto label12;

        $r10 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r12 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        $r13 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(113);

        $r15 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

        $r16 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r18 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        $r19 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r21 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        r39 = virtualinvoke $r21.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label05:
        $r22 = virtualinvoke r39.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r22);

        virtualinvoke r45.<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)>($f0);

     label06:
        $r23 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

     label07:
        goto label04;

     label08:
        $r33 := @caughtexception;

     label09:
        r46 = (javax.sip.InvalidArgumentException) $r33;

        $r34 = virtualinvoke r46.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r35 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: java.text.ParseException createParseException(java.lang.String)>($r34);

        throw $r35;

     label10:
        $r30 := @caughtexception;

     label11:
        r47 = (java.lang.NumberFormatException) $r30;

        $r31 = virtualinvoke r47.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r32 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: java.text.ParseException createParseException(java.lang.String)>($r31);

        throw $r32;

     label12:
        virtualinvoke r43.<gov.nist.javax.sip.header.AcceptEncodingList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r45);

        $r6 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r6.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 44 goto label13;

        $r7 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r9 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

     label13:
        goto label03;

     label14:
        $z1 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z1 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_leave(java.lang.String)>("AcceptEncodingParser.parse");

     label15:
        return r43;

     label16:
        $r29 := @caughtexception;

        $z4 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z4 == 0 goto label17;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_leave(java.lang.String)>("AcceptEncodingParser.parse");

     label17:
        throw $r29;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.NumberFormatException from label05 to label06 with label10;
        catch javax.sip.InvalidArgumentException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
    }
}
