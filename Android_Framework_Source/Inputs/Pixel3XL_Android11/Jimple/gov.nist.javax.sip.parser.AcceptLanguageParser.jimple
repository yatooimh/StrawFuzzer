public class gov.nist.javax.sip.parser.AcceptLanguageParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        gov.nist.core.Token r2, $r27;
        boolean $z0, $z1, $z3;
        gov.nist.core.LexerCore $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r23, $r24, $r26, $r36, $r38;
        char $c0, $c1, $c2, $c3;
        java.lang.String $r22, $r28, $r30, $r33;
        float $f0;
        java.lang.Throwable $r29, $r32, $r35;
        java.text.ParseException $r31, $r34;
        gov.nist.javax.sip.header.AcceptLanguageList r42;
        gov.nist.javax.sip.header.AcceptLanguage r43;
        javax.sip.InvalidArgumentException r44;
        java.lang.NumberFormatException r45;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        r42 = new gov.nist.javax.sip.header.AcceptLanguageList;

        specialinvoke r42.<gov.nist.javax.sip.header.AcceptLanguageList: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_enter(java.lang.String)>("AcceptLanguageParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void headerName(int)>(2095);

     label02:
        $r36 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r36.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 10 goto label15;

        r43 = new gov.nist.javax.sip.header.AcceptLanguage;

        specialinvoke r43.<gov.nist.javax.sip.header.AcceptLanguage: void <init>()>();

        virtualinvoke r43.<gov.nist.javax.sip.header.AcceptLanguage: void setHeaderName(java.lang.String)>("Accept-Language");

        $r4 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 59 goto label03;

        $r24 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r26 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $r27 = virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r28 = virtualinvoke $r27.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r43.<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)>($r28);

     label03:
        $r38 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r38.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 59 goto label11;

        $r10 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r12 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        $r13 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(113);

        $r15 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

        $r16 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r18 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        $r19 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r21 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r21.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label04:
        $r22 = virtualinvoke r2.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r22);

        virtualinvoke r43.<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)>($f0);

     label05:
        $r23 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

     label06:
        goto label03;

     label07:
        $r32 := @caughtexception;

     label08:
        r44 = (javax.sip.InvalidArgumentException) $r32;

        $r33 = virtualinvoke r44.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r34 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: java.text.ParseException createParseException(java.lang.String)>($r33);

        throw $r34;

     label09:
        $r29 := @caughtexception;

     label10:
        r45 = (java.lang.NumberFormatException) $r29;

        $r30 = virtualinvoke r45.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r31 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: java.text.ParseException createParseException(java.lang.String)>($r30);

        throw $r31;

     label11:
        virtualinvoke r42.<gov.nist.javax.sip.header.AcceptLanguageList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r43);

        $r5 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 44 goto label13;

        $r7 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r9 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

     label12:
        goto label14;

     label13:
        $r6 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

     label14:
        goto label02;

     label15:
        $z1 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z1 == 0 goto label16;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_leave(java.lang.String)>("AcceptLanguageParser.parse");

     label16:
        return r42;

     label17:
        $r35 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z3 == 0 goto label18;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_leave(java.lang.String)>("AcceptLanguageParser.parse");

     label18:
        throw $r35;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.NumberFormatException from label04 to label05 with label09;
        catch javax.sip.InvalidArgumentException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
    }
}
