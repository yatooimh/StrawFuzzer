public class gov.nist.javax.sip.parser.AcceptParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AcceptParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AcceptParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AcceptParser r0;
        boolean $z0, $z2, $z4;
        gov.nist.javax.sip.header.AcceptList $r1;
        gov.nist.core.LexerCore $r2, $r3, $r5, $r8, $r10, $r12, $r15, $r16, $r18, $r19, $r21, $r24, $r26, $r28, $r31, $r35;
        gov.nist.core.Token $r6, $r13, $r22, $r29;
        java.lang.String $r7, $r14, $r23, $r30;
        java.lang.Throwable $r32;
        gov.nist.javax.sip.header.Accept r34, r36;
        char $c0;

        r0 := @this: gov.nist.javax.sip.parser.AcceptParser;

        $z0 = <gov.nist.javax.sip.parser.AcceptParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptParser: void dbg_enter(java.lang.String)>("AcceptParser.parse");

     label1:
        $r1 = new gov.nist.javax.sip.header.AcceptList;

        specialinvoke $r1.<gov.nist.javax.sip.header.AcceptList: void <init>()>();

     label2:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptParser: void headerName(int)>(2068);

        r34 = new gov.nist.javax.sip.header.Accept;

        specialinvoke r34.<gov.nist.javax.sip.header.Accept: void <init>()>();

        virtualinvoke r34.<gov.nist.javax.sip.header.Accept: void setHeaderName(java.lang.String)>("Accept");

        $r2 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void SPorHT()>();

        $r3 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r5 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r7 = virtualinvoke $r6.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r34.<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)>($r7);

        $r8 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(47);

        $r10 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r12 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r14 = virtualinvoke $r13.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r34.<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)>($r14);

        $r15 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r34);

        virtualinvoke $r1.<gov.nist.javax.sip.header.AcceptList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r34);

     label3:
        $r35 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r35.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 44 goto label5;

        $r16 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r18 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        r36 = new gov.nist.javax.sip.header.Accept;

        specialinvoke r36.<gov.nist.javax.sip.header.Accept: void <init>()>();

        $r19 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r21 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        $r22 = virtualinvoke $r21.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r23 = virtualinvoke $r22.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r36.<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)>($r23);

        $r24 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(47);

        $r26 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r28 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        $r29 = virtualinvoke $r28.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r30 = virtualinvoke $r29.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r36.<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)>($r30);

        $r31 = r0.<gov.nist.javax.sip.parser.AcceptParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r31.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r36);

        virtualinvoke $r1.<gov.nist.javax.sip.header.AcceptList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r36);

     label4:
        goto label3;

     label5:
        $z2 = <gov.nist.javax.sip.parser.AcceptParser: boolean debug>;

        if $z2 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptParser: void dbg_leave(java.lang.String)>("AcceptParser.parse");

     label6:
        return $r1;

     label7:
        $r32 := @caughtexception;

        $z4 = <gov.nist.javax.sip.parser.AcceptParser: boolean debug>;

        if $z4 == 0 goto label8;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptParser: void dbg_leave(java.lang.String)>("AcceptParser.parse");

     label8:
        throw $r32;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }
}
