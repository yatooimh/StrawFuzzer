public class gov.nist.javax.sip.parser.AddressParametersParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void parse(gov.nist.javax.sip.header.AddressParametersHeader) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        gov.nist.javax.sip.parser.AddressParser r1;
        char c0;
        gov.nist.javax.sip.parser.Lexer $r2;
        gov.nist.javax.sip.address.AddressImpl $r3;
        gov.nist.core.LexerCore $r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        java.lang.Throwable $r8, $r9;
        gov.nist.javax.sip.header.AddressParametersHeader r10;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r10 := @parameter0: gov.nist.javax.sip.header.AddressParametersHeader;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_enter(java.lang.String)>("AddressParametersParser.parse");

     label01:
        r1 = new gov.nist.javax.sip.parser.AddressParser;

        $r2 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.javax.sip.parser.Lexer getLexer()>();

        specialinvoke r1.<gov.nist.javax.sip.parser.AddressParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r2);

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.parser.AddressParser: gov.nist.javax.sip.address.AddressImpl address(boolean)>(0);

        virtualinvoke r10.<gov.nist.javax.sip.header.AddressParametersHeader: void setAddress(javax.sip.address.Address)>($r3);

        $r4 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void SPorHT()>();

        $r5 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $r6 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        $z0 = virtualinvoke $r6.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label05;

     label02:
        if c0 == 0 goto label05;

        if c0 == 10 goto label05;

     label03:
        $r7 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        $z1 = virtualinvoke $r7.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z1 == 0 goto label05;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parseNameValueList(gov.nist.javax.sip.header.ParametersHeader)>(r10);

     label04:
        goto label06;

     label05:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r10);

     label06:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_leave(java.lang.String)>("AddressParametersParser.parse");

        return;

     label07:
        $r9 := @caughtexception;

        goto label10;

     label08:
        $r8 := @caughtexception;

     label09:
        throw $r8;

     label10:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_leave(java.lang.String)>("AddressParametersParser.parse");

        throw $r9;

        catch java.text.ParseException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.text.ParseException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.text.ParseException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }
}
