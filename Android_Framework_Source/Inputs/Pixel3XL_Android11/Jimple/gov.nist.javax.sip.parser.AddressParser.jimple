public class gov.nist.javax.sip.parser.AddressParser extends gov.nist.javax.sip.parser.Parser
{

    public void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        gov.nist.javax.sip.parser.Lexer r1;
        gov.nist.core.LexerCore $r2;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer> = r1;

        $r2 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("charLexer");

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        java.lang.String r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        $r2 = new gov.nist.javax.sip.parser.Lexer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Lexer: void <init>(java.lang.String,java.lang.String)>("charLexer", r1);

        r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer> = $r2;

        return;
    }

    public gov.nist.javax.sip.address.AddressImpl address(boolean) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        boolean z0, $z1, $z2, $z3, $z4;
        char c0, c2;
        gov.nist.core.LexerCore $r1, $r4, $r7, $r8;
        gov.nist.javax.sip.parser.Lexer $r2;
        java.text.ParseException $r3, $r5;
        java.lang.Throwable $r6;
        int i1;
        gov.nist.javax.sip.address.AddressImpl r9;
        gov.nist.javax.sip.parser.URLParser r10;
        gov.nist.javax.sip.address.GenericURI r11;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        z0 := @parameter0: boolean;

        $z1 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_enter(java.lang.String)>("address");

     label01:
        i1 = 0;

     label02:
        $r7 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $z3 = virtualinvoke $r7.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z3 == 0 goto label06;

        $r4 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(i1);

     label03:
        if c0 == 60 goto label06;

        if c0 == 34 goto label06;

        if c0 == 58 goto label06;

        if c0 != 47 goto label04;

        goto label06;

     label04:
        if c0 == 0 goto label05;

        i1 = i1 + 1;

        goto label02;

     label05:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: java.text.ParseException createParseException(java.lang.String)>("unexpected EOL");

        throw $r5;

     label06:
        $r8 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        c2 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(i1);

     label07:
        if c2 == 60 goto label13;

        if c2 != 34 goto label08;

        goto label13;

     label08:
        if c2 == 58 goto label10;

        if c2 != 47 goto label09;

        goto label10;

     label09:
        $r3 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: java.text.ParseException createParseException(java.lang.String)>("Bad address spec");

        throw $r3;

     label10:
        r9 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke r9.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

     label11:
        r10 = new gov.nist.javax.sip.parser.URLParser;

        $r1 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r2 = (gov.nist.javax.sip.parser.Lexer) $r1;

        specialinvoke r10.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r2);

        r11 = virtualinvoke r10.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(z0);

        virtualinvoke r9.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(2);

        virtualinvoke r9.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r11);

     label12:
        goto label14;

     label13:
        r9 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.javax.sip.address.AddressImpl nameAddr()>();

     label14:
        $z4 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z4 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("address");

     label15:
        return r9;

     label16:
        $r6 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z2 == 0 goto label17;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("address");

     label17:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    protected gov.nist.javax.sip.address.AddressImpl nameAddr() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParser r0;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r1, $r2, $r3, $r5, $r7, $r8, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22;
        char $c0, $c1;
        java.lang.String $r4, r29;
        gov.nist.javax.sip.parser.Lexer $r9, $r20;
        gov.nist.javax.sip.address.AddressImpl $r10, r27, r28;
        java.lang.Throwable $r24;
        gov.nist.javax.sip.parser.URLParser r25, r30;
        gov.nist.javax.sip.address.GenericURI r26, r31;

        r0 := @this: gov.nist.javax.sip.parser.AddressParser;

        $z0 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_enter(java.lang.String)>("nameAddr");

     label01:
        $r1 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r1.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 60 goto label04;

        $r16 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r17 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("sip_urlLexer");

        $r18 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        r25 = new gov.nist.javax.sip.parser.URLParser;

        $r19 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r20 = (gov.nist.javax.sip.parser.Lexer) $r19;

        specialinvoke r25.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r20);

        r26 = virtualinvoke r25.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(1);

        r27 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke r27.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        virtualinvoke r27.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        virtualinvoke r27.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r26);

        $r21 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void SPorHT()>();

        $r22 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(62);

     label02:
        $z2 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z2 == 0 goto label03;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label03:
        return r27;

     label04:
        r28 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke r28.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        virtualinvoke r28.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        $r2 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r2.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 34 goto label06;

        $r14 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        r29 = virtualinvoke $r14.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

        $r15 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        goto label07;

     label06:
        $r3 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        r29 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String getNextToken(char)>(60);

     label07:
        $r4 = virtualinvoke r29.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r28.<gov.nist.javax.sip.address.AddressImpl: void setDisplayName(java.lang.String)>($r4);

        $r5 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(60);

        $r7 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        r30 = new gov.nist.javax.sip.parser.URLParser;

        $r8 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        $r9 = (gov.nist.javax.sip.parser.Lexer) $r8;

        specialinvoke r30.<gov.nist.javax.sip.parser.URLParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r9);

        r31 = virtualinvoke r30.<gov.nist.javax.sip.parser.URLParser: gov.nist.javax.sip.address.GenericURI uriReference(boolean)>(1);

        $r10 = new gov.nist.javax.sip.address.AddressImpl;

        specialinvoke $r10.<gov.nist.javax.sip.address.AddressImpl: void <init>()>();

        virtualinvoke r28.<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)>(1);

        virtualinvoke r28.<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)>(r31);

        $r11 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = r0.<gov.nist.javax.sip.parser.AddressParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(62);

     label08:
        $z1 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z1 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label09:
        return r28;

     label10:
        $r24 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.AddressParser: boolean debug>;

        if $z3 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParser: void dbg_leave(java.lang.String)>("nameAddr");

     label11:
        throw $r24;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }
}
