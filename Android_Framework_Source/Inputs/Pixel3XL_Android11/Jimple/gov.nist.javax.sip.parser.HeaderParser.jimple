public class gov.nist.javax.sip.parser.HeaderParser extends gov.nist.javax.sip.parser.Parser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        gov.nist.javax.sip.parser.Lexer r1;
        gov.nist.core.LexerCore $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = r1;

        $r2 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("command_keywordLexer");

        return;
    }

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        $r2 = new gov.nist.javax.sip.parser.Lexer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Lexer: void <init>(java.lang.String,java.lang.String)>("command_keywordLexer", r1);

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = $r2;

        return;
    }

    protected java.util.Calendar date() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.util.Calendar r1;
        int i0, $i1;
        java.util.TimeZone $r2;
        gov.nist.core.LexerCore $r3, $r6, $r8, $r14, $r15;
        java.lang.String $r4, $r9, r13, $r16;
        java.text.ParseException $r5, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Exception $r11;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

     label01:
        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r4 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String number()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label02:
        if i0 <= 0 goto label28;

        if i0 > 31 goto label28;

     label03:
        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(5, i0);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r8 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r9 = virtualinvoke $r8.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r13 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("jan");

        if $z0 == 0 goto label05;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 0);

     label04:
        goto label26;

     label05:
        $z1 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("feb");

        if $z1 == 0 goto label07;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 1);

     label06:
        goto label26;

     label07:
        $z2 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("mar");

        if $z2 == 0 goto label09;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 2);

     label08:
        goto label26;

     label09:
        $z3 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("apr");

        if $z3 == 0 goto label11;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 3);

     label10:
        goto label26;

     label11:
        $z4 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("may");

        if $z4 == 0 goto label13;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 4);

     label12:
        goto label26;

     label13:
        $z5 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("jun");

        if $z5 == 0 goto label15;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 5);

     label14:
        goto label26;

     label15:
        $z6 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("jul");

        if $z6 == 0 goto label17;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 6);

     label16:
        goto label26;

     label17:
        $z7 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("aug");

        if $z7 == 0 goto label19;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 7);

     label18:
        goto label26;

     label19:
        $z8 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("sep");

        if $z8 == 0 goto label21;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 8);

     label20:
        goto label26;

     label21:
        $z9 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("oct");

        if $z9 == 0 goto label23;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 9);

     label22:
        goto label26;

     label23:
        $z10 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("nov");

        if $z10 == 0 goto label25;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 10);

     label24:
        goto label26;

     label25:
        $z11 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("dec");

        if $z11 == 0 goto label26;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 11);

     label26:
        $r14 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r15 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r16 = virtualinvoke $r15.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(1, $i1);

     label27:
        return r1;

     label28:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("Bad day ");

        throw $r5;

     label29:
        $r11 := @caughtexception;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad date field");

        throw $r12;

        catch java.lang.Exception from label01 to label02 with label29;
        catch java.lang.Exception from label03 to label04 with label29;
        catch java.lang.Exception from label05 to label06 with label29;
        catch java.lang.Exception from label07 to label08 with label29;
        catch java.lang.Exception from label09 to label10 with label29;
        catch java.lang.Exception from label11 to label12 with label29;
        catch java.lang.Exception from label13 to label14 with label29;
        catch java.lang.Exception from label15 to label16 with label29;
        catch java.lang.Exception from label17 to label18 with label29;
        catch java.lang.Exception from label19 to label20 with label29;
        catch java.lang.Exception from label21 to label22 with label29;
        catch java.lang.Exception from label23 to label24 with label29;
        catch java.lang.Exception from label25 to label26 with label29;
        catch java.lang.Exception from label26 to label27 with label29;
        catch java.lang.Exception from label28 to label29 with label29;
    }

    protected void headerName(int) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        int i0;
        gov.nist.core.LexerCore $r1, $r3, $r4, $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r1.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(i0);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void SPorHT()>();

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1, $r5, r7;
        gov.nist.core.LexerCore $r2, $r3, $r4;
        gov.nist.javax.sip.header.ExtensionHeaderImpl $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        $r2 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r7 = virtualinvoke $r2.<gov.nist.core.LexerCore: java.lang.String getNextToken(char)>(58);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String getLine()>();

        r1 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r6 = new gov.nist.javax.sip.header.ExtensionHeaderImpl;

        specialinvoke $r6.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void <init>(java.lang.String)>(r7);

        virtualinvoke $r6.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void setValue(java.lang.String)>(r1);

        return $r6;
    }

    protected void time(java.util.Calendar) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        gov.nist.core.LexerCore $r1, $r3, $r5, $r7, $r9;
        java.lang.String $r2, $r6, $r10;
        int $i0, $i1, $i2;
        java.lang.Exception $r11;
        java.text.ParseException $r12;
        java.util.Calendar r13;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r13 := @parameter0: java.util.Calendar;

     label1:
        $r1 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r2 = virtualinvoke $r1.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        virtualinvoke r13.<java.util.Calendar: void set(int,int)>(11, $i0);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r5 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        virtualinvoke r13.<java.util.Calendar: void set(int,int)>(12, $i1);

        $r7 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r9 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        virtualinvoke r13.<java.util.Calendar: void set(int,int)>(13, $i2);

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("error processing time ");

        throw $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected int wkday() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        gov.nist.core.LexerCore $r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r12;
        java.text.ParseException $r10;
        java.lang.Throwable $r11;
        boolean z0, z1, z2, z3, z4, z5, z6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_enter(java.lang.String)>("wkday");

     label01:
        $r1 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r2 = virtualinvoke $r1.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r12 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = "Mon";

        z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label02:
        if z0 == 0 goto label03;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 2;

     label03:
        $r4 = "Tue";

        z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label04:
        if z1 == 0 goto label05;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 3;

     label05:
        $r5 = "Wed";

        z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label06:
        if z2 == 0 goto label07;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 4;

     label07:
        $r6 = "Thu";

        z3 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label08:
        if z3 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 5;

     label09:
        $r7 = "Fri";

        z4 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label10:
        if z4 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 6;

     label11:
        $r8 = "Sat";

        z5 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label12:
        if z5 == 0 goto label13;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 7;

     label13:
        $r9 = "Sun";

        z6 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r12);

     label14:
        if z6 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return 1;

     label15:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad wkday");

        throw $r10;

     label16:
        $r11 := @caughtexception;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
    }
}
