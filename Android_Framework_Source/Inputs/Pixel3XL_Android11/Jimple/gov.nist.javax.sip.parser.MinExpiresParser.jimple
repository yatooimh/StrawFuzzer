public class gov.nist.javax.sip.parser.MinExpiresParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.MinExpiresParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.MinExpiresParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.MinExpiresParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.MinExpiresParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.MinExpiresParser r0;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r3, $r4, $r5;
        int $i0;
        java.lang.Throwable $r7, $r10;
        java.lang.String $r8, r11;
        java.text.ParseException $r9;
        gov.nist.javax.sip.header.MinExpires r14;
        javax.sip.InvalidArgumentException r15;

        r0 := @this: gov.nist.javax.sip.parser.MinExpiresParser;

        $z0 = <gov.nist.javax.sip.parser.MinExpiresParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MinExpiresParser: void dbg_enter(java.lang.String)>("MinExpiresParser.parse");

     label01:
        r14 = new gov.nist.javax.sip.header.MinExpires;

        specialinvoke r14.<gov.nist.javax.sip.header.MinExpires: void <init>()>();

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.MinExpiresParser: void headerName(int)>(2110);

        virtualinvoke r14.<gov.nist.javax.sip.header.MinExpires: void setHeaderName(java.lang.String)>("Min-Expires");

        $r3 = r0.<gov.nist.javax.sip.parser.MinExpiresParser: gov.nist.core.LexerCore lexer>;

        r11 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String number()>();

     label03:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

        virtualinvoke r14.<gov.nist.javax.sip.header.MinExpires: void setExpires(int)>($i0);

     label04:
        $r4 = r0.<gov.nist.javax.sip.parser.MinExpiresParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void SPorHT()>();

        $r5 = r0.<gov.nist.javax.sip.parser.MinExpiresParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

     label05:
        $z1 = <gov.nist.javax.sip.parser.MinExpiresParser: boolean debug>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MinExpiresParser: void dbg_leave(java.lang.String)>("MinExpiresParser.parse");

     label06:
        return r14;

     label07:
        $r7 := @caughtexception;

     label08:
        r15 = (javax.sip.InvalidArgumentException) $r7;

        $r8 = virtualinvoke r15.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.parser.MinExpiresParser: java.text.ParseException createParseException(java.lang.String)>($r8);

        throw $r9;

     label09:
        $r10 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.MinExpiresParser: boolean debug>;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MinExpiresParser: void dbg_leave(java.lang.String)>("MinExpiresParser.parse");

     label10:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }
}
