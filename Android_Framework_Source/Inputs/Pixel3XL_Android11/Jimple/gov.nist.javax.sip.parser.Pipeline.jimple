public class gov.nist.javax.sip.parser.Pipeline extends java.io.InputStream
{
    private java.util.LinkedList buffList;
    private gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer;
    private boolean isClosed;
    private java.util.TimerTask myTimerTask;
    private java.io.InputStream pipe;
    private int readTimeout;
    private java.util.Timer timer;

    public void <init>(java.io.InputStream, int, java.util.Timer)
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.io.InputStream r1;
        int i0;
        java.util.Timer r2;
        java.util.LinkedList $r3;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Timer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.Timer timer> = r2;

        r0.<gov.nist.javax.sip.parser.Pipeline: java.io.InputStream pipe> = r1;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList> = $r3;

        r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout> = i0;

        return;
    }

    public void close() throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.util.LinkedList r1, $r3;
        java.io.InputStream $r4;
        java.lang.Throwable $r5;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed> = 1;

        r1 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        entermonitor r1;

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        $r4 = r0.<gov.nist.javax.sip.parser.Pipeline: java.io.InputStream pipe>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int read() throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.util.LinkedList r1, $r3, $r7, $r8, $r19;
        boolean z0, $z1, $z2, $z3;
        gov.nist.javax.sip.parser.Pipeline$Buffer $r2, $r5, $r6, $r9, $r10, $r11, $r12, $r13, r20;
        java.lang.Object $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.Throwable $r14, $r16, $r17;
        java.lang.String $r15, $r18;
        java.io.IOException r26, r27;
        java.util.NoSuchElementException r28, r29;
        java.lang.InterruptedException r30;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r1 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        entermonitor r1;

     label01:
        $r2 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        if $r2 == null goto label04;

        $r9 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i3 = $r9.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r10 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i2 = $r10.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i3 >= $i2 goto label04;

        $r11 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        i6 = virtualinvoke $r11.<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()>();

        $r12 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i5 = $r12.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r13 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i4 = $r13.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i5 != $i4 goto label02;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = null;

     label02:
        exitmonitor r1;

     label03:
        return i6;

     label04:
        $z1 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z1 == 0 goto label06;

        $r8 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $z2 = virtualinvoke $r8.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 == 0 goto label06;

        exitmonitor r1;

     label05:
        return -1;

     label06:
        $r19 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $z3 = virtualinvoke $r19.<java.util.LinkedList: boolean isEmpty()>();

        if $z3 == 0 goto label10;

        $r7 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r7.<java.lang.Object: void wait()>();

        z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

     label07:
        if z0 == 0 goto label06;

     label08:
        exitmonitor r1;

     label09:
        return -1;

     label10:
        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r20 = (gov.nist.javax.sip.parser.Pipeline$Buffer) $r4;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = r20;

        i7 = virtualinvoke r20.<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()>();

        $r5 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i1 = $r5.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r6 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i0 = $r6.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i1 != $i0 goto label11;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = null;

     label11:
        exitmonitor r1;

     label12:
        return i7;

     label13:
        $r14 := @caughtexception;

     label14:
        r28 = (java.util.NoSuchElementException) $r14;

        virtualinvoke r28.<java.util.NoSuchElementException: void printStackTrace()>();

        r26 = new java.io.IOException;

        r29 = (java.util.NoSuchElementException) $r14;

        $r15 = virtualinvoke r29.<java.util.NoSuchElementException: java.lang.String getMessage()>();

        specialinvoke r26.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw r26;

     label15:
        $r17 := @caughtexception;

     label16:
        r27 = new java.io.IOException;

        r30 = (java.lang.InterruptedException) $r17;

        $r18 = virtualinvoke r30.<java.lang.InterruptedException: java.lang.String getMessage()>();

        specialinvoke r27.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw r27;

     label17:
        $r16 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.InterruptedException from label06 to label07 with label15;
        catch java.util.NoSuchElementException from label06 to label07 with label13;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.InterruptedException from label10 to label11 with label15;
        catch java.util.NoSuchElementException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void startTimer()
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        int $i0, $i1;
        gov.nist.javax.sip.parser.Pipeline$MyTimer $r2;
        long $l2;
        java.util.Timer $r3;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        $i0 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        if $i0 != -1 goto label1;

        return;

     label1:
        $r2 = new gov.nist.javax.sip.parser.Pipeline$MyTimer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Pipeline$MyTimer: void <init>(gov.nist.javax.sip.parser.Pipeline,gov.nist.javax.sip.parser.Pipeline)>(r0, r0);

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask> = $r2;

        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.Timer timer>;

        $i1 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        $l2 = (long) $i1;

        virtualinvoke $r3.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r2, $l2);

        return;
    }

    public void stopTimer()
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.util.TimerTask r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        $i0 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        if $i0 != -1 goto label1;

        return;

     label1:
        r1 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask>;

        if r1 == null goto label2;

        virtualinvoke r1.<java.util.TimerTask: boolean cancel()>();

     label2:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        boolean $z0;
        java.io.IOException $r1;
        gov.nist.javax.sip.parser.Pipeline$Buffer $r2;
        int $i0;
        java.util.LinkedList $r3, $r4, r8;
        java.lang.Throwable $r5;
        byte[] r6;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r6 := @parameter0: byte[];

        $z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z0 != 0 goto label6;

        $r2 = new gov.nist.javax.sip.parser.Pipeline$Buffer;

        $i0 = lengthof r6;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Pipeline$Buffer: void <init>(gov.nist.javax.sip.parser.Pipeline,byte[],int)>(r0, r6, $i0);

        r8 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        entermonitor r8;

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor r8;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r8;

     label5:
        throw $r5;

     label6:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Closed!!");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        int i0, i1;
        boolean $z0;
        java.io.IOException $r1;
        gov.nist.javax.sip.parser.Pipeline$Buffer $r2;
        java.util.LinkedList $r3, $r4, r8;
        java.lang.Throwable $r5;
        byte[] r6;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r6 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z0 != 0 goto label6;

        $r2 = new gov.nist.javax.sip.parser.Pipeline$Buffer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Pipeline$Buffer: void <init>(gov.nist.javax.sip.parser.Pipeline,byte[],int)>(r0, r6, i1);

        $r2.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr> = i0;

        r8 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        entermonitor r8;

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r2);

        $r4 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor r8;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r8;

     label5:
        throw $r5;

     label6:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Closed!!");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
