public final class gov.nist.javax.sip.parser.PipelinedMsgParser extends java.lang.Object implements java.lang.Runnable
{
    private static int uid;
    private int maxMessageSize;
    private java.lang.Thread mythread;
    private gov.nist.javax.sip.parser.Pipeline rawInputStream;
    protected gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener;
    private int sizeCounter;

    static void <clinit>()
    {
        <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid> = 0;

        return;
    }

    protected void <init>()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(gov.nist.javax.sip.parser.Pipeline)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.Pipeline r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Pipeline;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,boolean,int)>(null, r1, 0, 0);

        return;
    }

    public void <init>(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, int)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.SIPMessageListener r1;
        gov.nist.javax.sip.parser.Pipeline r2;
        int i0;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r2 := @parameter1: gov.nist.javax.sip.parser.Pipeline;

        i0 := @parameter2: int;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,boolean,int)>(r1, r2, 0, i0);

        return;
    }

    public void <init>(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, boolean, int)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        boolean z0;
        int i0, $i1;
        java.lang.Thread $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        gov.nist.javax.sip.parser.SIPMessageListener r6;
        gov.nist.javax.sip.parser.Pipeline r7;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r6 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r7 := @parameter1: gov.nist.javax.sip.parser.Pipeline;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = r6;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream> = r7;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize> = i0;

        $r1 = new java.lang.Thread;

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.Thread mythread> = $r1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PipelineThread-");

        $i1 = staticinvoke <gov.nist.javax.sip.parser.PipelinedMsgParser: int getNewUid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.Thread: void setName(java.lang.String)>($r5);

        return;
    }

    private static int getNewUid()
    {
        int i0, $i1;
        java.lang.Throwable $r1;

        entermonitor class "Lgov/nist/javax/sip/parser/PipelinedMsgParser;";

     label1:
        i0 = <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid>;

        $i1 = i0 + 1;

        <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid> = $i1;

     label2:
        exitmonitor class "Lgov/nist/javax/sip/parser/PipelinedMsgParser;";

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor class "Lgov/nist/javax/sip/parser/PipelinedMsgParser;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        java.io.InputStream r1;
        char c0;
        java.lang.StringBuffer $r3;
        java.io.IOException $r4, $r7;
        int $i1, $i2, i3, i4;
        java.lang.String $r5;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: java.io.InputStream;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

     label1:
        i3 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i3 == -1 goto label6;

        c0 = (char) i3;

        $i1 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        if $i1 <= 0 goto label3;

        $i2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter>;

        i4 = $i2 - 1;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter> = i4;

        if i4 <= 0 goto label2;

        goto label3;

     label2:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Max size exceeded!");

        throw $r7;

     label3:
        if c0 == 13 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label4:
        if c0 != 10 goto label5;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;

     label5:
        goto label1;

     label6:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("End of stream");

        throw $r4;
    }

    protected java.lang.Object clone()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0, $r2;
        gov.nist.javax.sip.parser.Pipeline $r3;
        gov.nist.javax.sip.parser.SIPMessageListener $r4;
        java.lang.Thread $r5;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r2 = new gov.nist.javax.sip.parser.PipelinedMsgParser;

        specialinvoke $r2.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>()>();

        $r3 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        $r2.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream> = $r3;

        $r4 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        $r2.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = $r4;

        $r5 = new java.lang.Thread;

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2);

        virtualinvoke $r5.<java.lang.Thread: void setName(java.lang.String)>("PipelineThread");

        return $r2;
    }

    public void close()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.Pipeline $r2;
        java.lang.Throwable $r3;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

     label1:
        $r2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void processInput()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        java.lang.Thread $r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r1 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.Thread mythread>;

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }

    public void run()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        gov.nist.javax.sip.parser.Pipeline $r2, $r5, $r11, $r12, $r13, $r17, $r26, $r31, $r33, $r35, r37;
        java.lang.String $r4, $r8, $r16, $r19, $r21, r39, r40;
        gov.nist.javax.sip.parser.SIPMessageListener $r7, $r10, r49;
        javax.sip.header.ContentLengthHeader $r9;
        java.lang.Throwable $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r32, $r34, $r36;
        java.lang.Exception $r27, r63, r64, r65, r66, r67, r68, r69, r70;
        gov.nist.javax.sip.message.SIPMessage r43;
        gov.nist.javax.sip.header.ContentLength r44;
        byte[] r46;
        java.lang.StringBuffer r59;
        gov.nist.javax.sip.parser.StringMsgParser r60;
        java.lang.StringBuilder r61, r62;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r37 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

     label01:
        $i4 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter> = $i4;

        r59 = new java.lang.StringBuffer;

        specialinvoke r59.<java.lang.StringBuffer: void <init>()>();

        $z5 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z5 == 0 goto label02;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Starting parse!");

     label02:
        r39 = specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.String readLine(java.io.InputStream)>(r37);

        $z6 = virtualinvoke r39.<java.lang.String: boolean equals(java.lang.Object)>("\n");

        if $z6 == 0 goto label04;

        $z4 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z4 == 0 goto label03;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Discarding blank line. ");

     label03:
        goto label02;

     label04:
        virtualinvoke r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r39);

        $r2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void startTimer()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Reading Input Stream");

     label05:
        r40 = specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.String readLine(java.io.InputStream)>(r37);

        virtualinvoke r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        $r4 = virtualinvoke r40.<java.lang.String: java.lang.String trim()>();

        z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

     label06:
        if z0 == 0 goto label55;

     label07:
        $r5 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r5.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        virtualinvoke r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r40);

        r60 = new gov.nist.javax.sip.parser.StringMsgParser;

        $r7 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        specialinvoke r60.<gov.nist.javax.sip.parser.StringMsgParser: void <init>(gov.nist.javax.sip.parser.ParseExceptionListener)>($r7);

        r60.<gov.nist.javax.sip.parser.StringMsgParser: boolean readBody> = 0;

     label08:
        $z1 = <gov.nist.core.Debug: boolean debug>;

        if $z1 == 0 goto label09;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("About to parse : ");

        $r19 = virtualinvoke r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r21);

     label09:
        $r8 = virtualinvoke r59.<java.lang.StringBuffer: java.lang.String toString()>();

        r43 = virtualinvoke r60.<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.message.SIPMessage parseSIPMessage(java.lang.String)>($r8);

     label10:
        if r43 != null goto label13;

     label11:
        $r17 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r17.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label12:
        goto label01;

     label13:
        $z2 = <gov.nist.core.Debug: boolean debug>;

        if $z2 == 0 goto label14;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Completed parsing message");

     label14:
        $r9 = virtualinvoke r43.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLength()>();

        r44 = (gov.nist.javax.sip.header.ContentLength) $r9;

     label15:
        if r44 == null goto label18;

     label16:
        i5 = virtualinvoke r44.<gov.nist.javax.sip.header.ContentLength: int getContentLength()>();

     label17:
        goto label19;

     label18:
        i5 = 0;

     label19:
        $z3 = <gov.nist.core.Debug: boolean debug>;

        if $z3 == 0 goto label20;

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("contentLength ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r16 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r16);

     label20:
        if i5 != 0 goto label23;

     label21:
        virtualinvoke r43.<gov.nist.javax.sip.message.SIPMessage: void removeContent()>();

     label22:
        goto label42;

     label23:
        $i1 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        if $i1 == 0 goto label24;

        $i3 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter>;

        if i5 >= $i3 goto label42;

     label24:
        r46 = newarray (byte)[i5];

     label25:
        i6 = 0;

     label26:
        if i6 >= i5 goto label41;

     label27:
        $r11 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r11.<gov.nist.javax.sip.parser.Pipeline: void startTimer()>();

     label28:
        $i2 = i5 - i6;

        i0 = virtualinvoke r37.<gov.nist.javax.sip.parser.Pipeline: int read(byte[],int,int)>(r46, i6, $i2);

     label29:
        if i0 <= 0 goto label32;

        i6 = i6 + i0;

     label30:
        $r13 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r13.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label31:
        goto label26;

     label32:
        $r12 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r12.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label33:
        goto label41;

     label34:
        $r34 := @caughtexception;

        goto label39;

     label35:
        $r32 := @caughtexception;

     label36:
        r63 = (java.lang.Exception) $r32;

        staticinvoke <gov.nist.core.Debug: void logError(java.lang.String,java.lang.Exception)>("Exception Reading Content", r63);

     label37:
        $r33 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r33.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label38:
        goto label41;

     label39:
        $r35 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r35.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label40:
        throw $r34;

     label41:
        virtualinvoke r43.<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(byte[])>(r46);

     label42:
        r49 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

     label43:
        if r49 == null goto label51;

     label44:
        $r10 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        interfaceinvoke $r10.<gov.nist.javax.sip.parser.SIPMessageListener: void processMessage(gov.nist.javax.sip.message.SIPMessage)>(r43);

     label45:
        goto label51;

     label46:
        $r27 := @caughtexception;

     label47:
        virtualinvoke r37.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label48:
        goto label50;

     label49:
        $r29 := @caughtexception;

        r64 = (java.lang.Exception) $r29;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r64);

     label50:
        return;

     label51:
        goto label01;

     label52:
        $r23 := @caughtexception;

     label53:
        r65 = (java.lang.Exception) $r23;

        staticinvoke <gov.nist.core.Debug: void logError(java.lang.String,java.lang.Exception)>("Detected a parse error", r65);

     label54:
        goto label01;

     label55:
        goto label05;

     label56:
        $r30 := @caughtexception;

     label57:
        $r31 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r31.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        r66 = (java.lang.Exception) $r30;

        staticinvoke <gov.nist.core.Debug: void printStackTrace(java.lang.Exception)>(r66);

     label58:
        virtualinvoke r37.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label59:
        goto label61;

     label60:
        $r22 := @caughtexception;

        r67 = (java.lang.Exception) $r22;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r67);

     label61:
        return;

     label62:
        $r25 := @caughtexception;

     label63:
        r68 = (java.lang.Exception) $r25;

        staticinvoke <gov.nist.core.Debug: void printStackTrace(java.lang.Exception)>(r68);

        $r26 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r26.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label64:
        virtualinvoke r37.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label65:
        goto label67;

     label66:
        $r24 := @caughtexception;

        r69 = (java.lang.Exception) $r24;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r69);

     label67:
        return;

     label68:
        $r36 := @caughtexception;

     label69:
        virtualinvoke r37.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label70:
        goto label72;

     label71:
        $r28 := @caughtexception;

        r70 = (java.lang.Exception) $r28;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r70);

     label72:
        throw $r36;

        catch java.lang.Throwable from label01 to label02 with label68;
        catch java.io.IOException from label02 to label03 with label62;
        catch java.lang.Throwable from label02 to label03 with label68;
        catch java.lang.Throwable from label04 to label05 with label68;
        catch java.io.IOException from label05 to label06 with label56;
        catch java.lang.Throwable from label05 to label06 with label68;
        catch java.lang.Throwable from label07 to label08 with label68;
        catch java.text.ParseException from label08 to label09 with label52;
        catch java.lang.Throwable from label08 to label09 with label68;
        catch java.text.ParseException from label09 to label10 with label52;
        catch java.lang.Throwable from label09 to label10 with label68;
        catch java.text.ParseException from label11 to label12 with label52;
        catch java.lang.Throwable from label11 to label12 with label68;
        catch java.lang.Throwable from label13 to label14 with label68;
        catch java.lang.Throwable from label14 to label15 with label68;
        catch java.lang.Throwable from label16 to label17 with label68;
        catch java.lang.Throwable from label19 to label20 with label68;
        catch java.lang.Throwable from label21 to label22 with label68;
        catch java.lang.Throwable from label23 to label24 with label68;
        catch java.lang.Throwable from label24 to label25 with label68;
        catch java.lang.Throwable from label27 to label28 with label68;
        catch java.io.IOException from label28 to label29 with label35;
        catch java.lang.Throwable from label28 to label29 with label34;
        catch java.lang.Throwable from label30 to label31 with label68;
        catch java.lang.Throwable from label32 to label33 with label68;
        catch java.lang.Throwable from label36 to label37 with label34;
        catch java.lang.Throwable from label37 to label38 with label68;
        catch java.lang.Throwable from label39 to label40 with label68;
        catch java.lang.Throwable from label40 to label41 with label68;
        catch java.lang.Throwable from label41 to label42 with label68;
        catch java.lang.Throwable from label42 to label43 with label68;
        catch java.lang.Exception from label44 to label45 with label46;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.io.IOException from label47 to label48 with label49;
        catch java.lang.Throwable from label53 to label54 with label68;
        catch java.lang.Throwable from label57 to label58 with label68;
        catch java.io.IOException from label58 to label59 with label60;
        catch java.lang.Throwable from label63 to label64 with label68;
        catch java.io.IOException from label64 to label65 with label66;
        catch java.io.IOException from label69 to label70 with label71;
    }

    public void setMessageListener(gov.nist.javax.sip.parser.SIPMessageListener)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.SIPMessageListener r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = r1;

        return;
    }
}
