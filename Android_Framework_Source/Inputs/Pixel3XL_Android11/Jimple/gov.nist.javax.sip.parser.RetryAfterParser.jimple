public class gov.nist.javax.sip.parser.RetryAfterParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.RetryAfterParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.RetryAfterParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.RetryAfterParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.RetryAfterParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.RetryAfterParser r0;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r17, $r19, $r22, $r23, $r25, $r26, $r27, $r44;
        int $i0, $i2;
        char $c1, $c3;
        gov.nist.core.Token $r12, $r20;
        java.lang.String $r21, $r28, $r30, $r33, $r37, $r40, r43, r45, r46;
        java.lang.Throwable $r29, $r32, $r35, $r36, $r39;
        java.text.ParseException $r31, $r34, $r38, $r41;
        gov.nist.javax.sip.header.RetryAfter r52;
        javax.sip.InvalidArgumentException r53, r55;
        java.lang.NumberFormatException r54, r56;

        r0 := @this: gov.nist.javax.sip.parser.RetryAfterParser;

        $z0 = <gov.nist.javax.sip.parser.RetryAfterParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: void dbg_enter(java.lang.String)>("RetryAfterParser.parse");

     label01:
        r52 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke r52.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: void headerName(int)>(2073);

        $r2 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        r43 = virtualinvoke $r2.<gov.nist.core.LexerCore: java.lang.String number()>();

     label03:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r43);

        virtualinvoke r52.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>($i0);

     label04:
        $r3 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void SPorHT()>();

        $r4 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 40 goto label05;

        $r27 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        $r28 = virtualinvoke $r27.<gov.nist.core.LexerCore: java.lang.String comment()>();

        virtualinvoke r52.<gov.nist.javax.sip.header.RetryAfter: void setComment(java.lang.String)>($r28);

     label05:
        $r5 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void SPorHT()>();

     label06:
        $r44 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r44.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 59 goto label16;

        $r6 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r8 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

        $r9 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r11 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        $r12 = virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r45 = virtualinvoke $r12.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $z2 = virtualinvoke r45.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("duration");

        if $z2 == 0 goto label13;

        $r23 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r25 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: void SPorHT()>();

        $r26 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        r46 = virtualinvoke $r26.<gov.nist.core.LexerCore: java.lang.String number()>();

     label07:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r46);

        virtualinvoke r52.<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)>($i2);

     label08:
        goto label14;

     label09:
        $r29 := @caughtexception;

     label10:
        r53 = (javax.sip.InvalidArgumentException) $r29;

        $r30 = virtualinvoke r53.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r31 = virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: java.text.ParseException createParseException(java.lang.String)>($r30);

        throw $r31;

     label11:
        $r36 := @caughtexception;

     label12:
        r54 = (java.lang.NumberFormatException) $r36;

        $r37 = virtualinvoke r54.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r38 = virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: java.text.ParseException createParseException(java.lang.String)>($r37);

        throw $r38;

     label13:
        $r13 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: void SPorHT()>();

        $r14 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r16 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

        $r17 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r19 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        $r20 = virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r21 = virtualinvoke $r20.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r52.<gov.nist.javax.sip.header.RetryAfter: void setParameter(java.lang.String,java.lang.String)>(r45, $r21);

     label14:
        $r22 = r0.<gov.nist.javax.sip.parser.RetryAfterParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: void SPorHT()>();

     label15:
        goto label06;

     label16:
        $z1 = <gov.nist.javax.sip.parser.RetryAfterParser: boolean debug>;

        if $z1 == 0 goto label17;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: void dbg_leave(java.lang.String)>("RetryAfterParser.parse");

     label17:
        return r52;

     label18:
        $r32 := @caughtexception;

     label19:
        r55 = (javax.sip.InvalidArgumentException) $r32;

        $r33 = virtualinvoke r55.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r34 = virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: java.text.ParseException createParseException(java.lang.String)>($r33);

        throw $r34;

     label20:
        $r39 := @caughtexception;

     label21:
        r56 = (java.lang.NumberFormatException) $r39;

        $r40 = virtualinvoke r56.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r41 = virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: java.text.ParseException createParseException(java.lang.String)>($r40);

        throw $r41;

     label22:
        $r35 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.RetryAfterParser: boolean debug>;

        if $z3 == 0 goto label23;

        virtualinvoke r0.<gov.nist.javax.sip.parser.RetryAfterParser: void dbg_leave(java.lang.String)>("RetryAfterParser.parse");

     label23:
        throw $r35;

        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.NumberFormatException from label03 to label04 with label20;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label18;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.NumberFormatException from label07 to label08 with label11;
        catch javax.sip.InvalidArgumentException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }
}
