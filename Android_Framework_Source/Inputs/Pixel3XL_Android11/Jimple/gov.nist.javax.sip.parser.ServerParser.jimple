public class gov.nist.javax.sip.parser.ServerParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ServerParser r0;
        int i0, $i4, $i5, i8;
        boolean $z0, $z1, $z2;
        gov.nist.javax.sip.header.Server $r2;
        gov.nist.core.LexerCore $r3, $r5, $r6, $r7, $r8, $r9, $r16, $r17, $r20;
        char $c1, $c2, $c3, $c6, $c7;
        java.text.ParseException $r4;
        java.lang.String $r13, $r18, $r19, r21, r23, r24;
        java.lang.Throwable $r14, $r15;
        java.lang.StringBuilder r22;

        r0 := @this: gov.nist.javax.sip.parser.ServerParser;

        $z0 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_enter(java.lang.String)>("ServerParser.parse");

     label01:
        $r2 = new gov.nist.javax.sip.header.Server;

        specialinvoke $r2.<gov.nist.javax.sip.header.Server: void <init>()>();

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void headerName(int)>(2066);

        $r3 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r3.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label20;

     label03:
        $r20 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c7 = virtualinvoke $r20.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c7 == 10 goto label18;

        $r5 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 0 goto label18;

        $r6 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r6.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 40 goto label05;

        $r9 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        r21 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String comment()>();

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r13 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>($r13);

     label04:
        goto label03;

     label05:
        i8 = 0;

     label06:
        $r7 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        i0 = virtualinvoke $r7.<gov.nist.core.LexerCore: int markInputPosition()>();

     label07:
        i8 = i0;

     label08:
        $r8 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        r23 = virtualinvoke $r8.<gov.nist.core.LexerCore: java.lang.String getString(char)>(47);

     label09:
        r24 = r23;

        i8 = i0;

     label10:
        $i4 = virtualinvoke r23.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $c6 = virtualinvoke r23.<java.lang.String: char charAt(int)>($i5);

        if $c6 != 10 goto label13;

     label11:
        i8 = i0;

     label12:
        r24 = virtualinvoke r23.<java.lang.String: java.lang.String trim()>();

     label13:
        i8 = i0;

     label14:
        virtualinvoke $r2.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>(r24);

     label15:
        goto label03;

     label16:
        $r15 := @caughtexception;

     label17:
        $r16 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void rewindInputPosition(int)>(i8);

        $r17 = r0.<gov.nist.javax.sip.parser.ServerParser: gov.nist.core.LexerCore lexer>;

        $r18 = virtualinvoke $r17.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r2.<gov.nist.javax.sip.header.Server: void addProductToken(java.lang.String)>($r19);

     label18:
        $z2 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z2 == 0 goto label19;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_leave(java.lang.String)>("ServerParser.parse");

     label19:
        return $r2;

     label20:
        $r4 = virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: java.text.ParseException createParseException(java.lang.String)>("empty header");

        throw $r4;

     label21:
        $r14 := @caughtexception;

        $z1 = <gov.nist.javax.sip.parser.ServerParser: boolean debug>;

        if $z1 == 0 goto label22;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ServerParser: void dbg_leave(java.lang.String)>("ServerParser.parse");

     label22:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.text.ParseException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.text.ParseException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.text.ParseException from label10 to label11 with label16;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.text.ParseException from label12 to label13 with label16;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.text.ParseException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
    }
}
