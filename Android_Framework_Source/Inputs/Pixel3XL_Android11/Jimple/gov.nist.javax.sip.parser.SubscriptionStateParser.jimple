public class gov.nist.javax.sip.parser.SubscriptionStateParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.core.LexerCore $r2, $r4, $r7, $r9, $r10, $r12, $r14, $r16, $r17, $r19, $r22, $r24, $r25, $r27, $r29, $r31, $r32, $r34, $r36, $r38, $r39, $r41, $r58, $r66;
        gov.nist.core.Token $r5, $r13, $r20, $r28, $r35, $r42;
        java.lang.String $r6, $r21, $r43, $r45, $r48, $r51, $r54, r59, r60, r63;
        int $i0, $i1;
        java.lang.Throwable $r44, $r47, $r50, $r53, $r56;
        java.text.ParseException $r46, $r49, $r52, $r55;
        char $c2;
        gov.nist.javax.sip.header.SubscriptionState r68;
        javax.sip.InvalidArgumentException r69, r71;
        java.lang.NumberFormatException r70, r72;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        $z0 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_enter(java.lang.String)>("SubscriptionStateParser.parse");

     label01:
        r68 = new gov.nist.javax.sip.header.SubscriptionState;

        specialinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void <init>()>();

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void headerName(int)>(2104);

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setHeaderName(java.lang.String)>("Subscription-State");

        $r2 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r4 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r6 = virtualinvoke $r5.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setState(java.lang.String)>($r6);

     label03:
        $r58 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r58.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 59 goto label22;

        $r7 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r9 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

        $r10 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r12 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r59 = virtualinvoke $r13.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $z2 = virtualinvoke r59.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("reason");

        if $z2 == 0 goto label05;

        $r36 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r36.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r38 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r38.<gov.nist.core.LexerCore: void SPorHT()>();

        $r39 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r39.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r41 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r42 = virtualinvoke $r41.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r43 = virtualinvoke $r42.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setReasonCode(java.lang.String)>($r43);

     label04:
        goto label20;

     label05:
        $z3 = virtualinvoke r59.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("expires");

        if $z3 == 0 goto label12;

        $r29 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r29.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r31 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r31.<gov.nist.core.LexerCore: void SPorHT()>();

        $r32 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r32.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r34 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r35 = virtualinvoke $r34.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r60 = virtualinvoke $r35.<gov.nist.core.Token: java.lang.String getTokenValue()>();

     label06:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r60);

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setExpires(int)>($i1);

     label07:
        goto label20;

     label08:
        $r47 := @caughtexception;

     label09:
        r69 = (javax.sip.InvalidArgumentException) $r47;

        $r48 = virtualinvoke r69.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r49 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r48);

        throw $r49;

     label10:
        $r53 := @caughtexception;

     label11:
        r70 = (java.lang.NumberFormatException) $r53;

        $r54 = virtualinvoke r70.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r55 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r54);

        throw $r55;

     label12:
        $z4 = virtualinvoke r59.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("retry-after");

        if $z4 == 0 goto label19;

        $r22 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r24 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: void SPorHT()>();

        $r25 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r27 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r28 = virtualinvoke $r27.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r63 = virtualinvoke $r28.<gov.nist.core.Token: java.lang.String getTokenValue()>();

     label13:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r63);

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setRetryAfter(int)>($i0);

     label14:
        goto label20;

     label15:
        $r50 := @caughtexception;

     label16:
        r71 = (javax.sip.InvalidArgumentException) $r50;

        $r51 = virtualinvoke r71.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r52 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r51);

        throw $r52;

     label17:
        $r44 := @caughtexception;

     label18:
        r72 = (java.lang.NumberFormatException) $r44;

        $r45 = virtualinvoke r72.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r46 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r45);

        throw $r46;

     label19:
        $r14 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r16 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

        $r17 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r19 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r20 = virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r21 = virtualinvoke $r20.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r68.<gov.nist.javax.sip.header.SubscriptionState: void setParameter(java.lang.String,java.lang.String)>(r59, $r21);

     label20:
        $r66 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r66.<gov.nist.core.LexerCore: void SPorHT()>();

     label21:
        goto label03;

     label22:
        $z1 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z1 == 0 goto label23;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_leave(java.lang.String)>("SubscriptionStateParser.parse");

     label23:
        return r68;

     label24:
        $r56 := @caughtexception;

        $z5 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z5 == 0 goto label25;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_leave(java.lang.String)>("SubscriptionStateParser.parse");

     label25:
        throw $r56;

        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.NumberFormatException from label06 to label07 with label10;
        catch javax.sip.InvalidArgumentException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.NumberFormatException from label13 to label14 with label17;
        catch javax.sip.InvalidArgumentException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
    }
}
