public class gov.nist.javax.sip.parser.TimeStampParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        char c0, $c2, $c3;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r16, $r18;
        long $l1;
        int $i4;
        float $f0, $f1, $f2;
        java.lang.String $r15, $r22, $r24, $r27, $r31, $r34, r37, r38, r40, r41;
        java.lang.Throwable $r23, $r26, $r29, $r30, $r33;
        java.text.ParseException $r25, $r28, $r32, $r35;
        gov.nist.javax.sip.header.TimeStamp r48;
        java.lang.StringBuilder r49, r50;
        javax.sip.InvalidArgumentException r51, r53;
        java.lang.NumberFormatException r52, r54;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        $z0 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_enter(java.lang.String)>("TimeStampParser.parse");

     label01:
        r48 = new gov.nist.javax.sip.header.TimeStamp;

        specialinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void <init>()>();

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void headerName(int)>(2103);

        virtualinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void setHeaderName(java.lang.String)>("Timestamp");

        $r2 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void SPorHT()>();

        $r3 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r37 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String number()>();

     label03:
        $r4 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label04:
        if c0 != 46 goto label07;

     label05:
        $r16 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(46);

        $r18 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r38 = virtualinvoke $r18.<gov.nist.core.LexerCore: java.lang.String number()>();

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r22 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r22);

        virtualinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void setTimeStamp(float)>($f2);

     label06:
        goto label08;

     label07:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r37);

        virtualinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void setTime(long)>($l1);

     label08:
        $r5 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void SPorHT()>();

        $r6 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r6.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 10 goto label17;

        $r7 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r40 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String number()>();

     label09:
        $r8 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 46 goto label11;

        $r9 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(46);

        $r11 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r41 = virtualinvoke $r11.<gov.nist.core.LexerCore: java.lang.String number()>();

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r15 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r15);

        virtualinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void setDelay(float)>($f1);

     label10:
        goto label12;

     label11:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r40);

        $f0 = (float) $i4;

        virtualinvoke r48.<gov.nist.javax.sip.header.TimeStamp: void setDelay(float)>($f0);

     label12:
        goto label17;

     label13:
        $r23 := @caughtexception;

     label14:
        r51 = (javax.sip.InvalidArgumentException) $r23;

        $r24 = virtualinvoke r51.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r24);

        throw $r25;

     label15:
        $r30 := @caughtexception;

     label16:
        r52 = (java.lang.NumberFormatException) $r30;

        $r31 = virtualinvoke r52.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r32 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r31);

        throw $r32;

     label17:
        $z1 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z1 == 0 goto label18;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_leave(java.lang.String)>("TimeStampParser.parse");

     label18:
        return r48;

     label19:
        $r26 := @caughtexception;

     label20:
        r53 = (javax.sip.InvalidArgumentException) $r26;

        $r27 = virtualinvoke r53.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r28 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r27);

        throw $r28;

     label21:
        $r33 := @caughtexception;

     label22:
        r54 = (java.lang.NumberFormatException) $r33;

        $r34 = virtualinvoke r54.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r35 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r34);

        throw $r35;

     label23:
        $r29 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z2 == 0 goto label24;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_leave(java.lang.String)>("TimeStampParser.parse");

     label24:
        throw $r29;

        catch java.lang.Throwable from label02 to label03 with label23;
        catch java.lang.NumberFormatException from label03 to label04 with label21;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label19;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.NumberFormatException from label05 to label06 with label21;
        catch javax.sip.InvalidArgumentException from label05 to label06 with label19;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.NumberFormatException from label07 to label08 with label21;
        catch javax.sip.InvalidArgumentException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.NumberFormatException from label09 to label10 with label15;
        catch javax.sip.InvalidArgumentException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.NumberFormatException from label11 to label12 with label15;
        catch javax.sip.InvalidArgumentException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
    }
}
