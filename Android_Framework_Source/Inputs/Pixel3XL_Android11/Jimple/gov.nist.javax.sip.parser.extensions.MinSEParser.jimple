public class gov.nist.javax.sip.parser.extensions.MinSEParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r19;
        int $i0, $i1, i2;
        gov.nist.javax.sip.parser.extensions.MinSEParser $r1;
        java.lang.String $r2, $r6, $r8, $r12, $r13, $r16, $r18;
        gov.nist.javax.sip.header.SIPHeader $r3;
        java.lang.StringBuilder $r4, $r9, $r14;
        gov.nist.javax.sip.header.extensions.MinSE r20;
        java.io.PrintStream r21, r23, r25;

        r19 := @parameter0: java.lang.String[];

        r0 = newarray (java.lang.String)[2];

        r0[0] = "Min-SE: 30\n";

        r0[1] = "Min-SE: 45;some-param=somevalue\n";

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        $r1 = new gov.nist.javax.sip.parser.extensions.MinSEParser;

        $r2 = r0[i2];

        specialinvoke $r1.<gov.nist.javax.sip.parser.extensions.MinSEParser: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r20 = (gov.nist.javax.sip.header.extensions.MinSE) $r3;

        r21 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r6 = virtualinvoke r20.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String encode()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r21.<java.io.PrintStream: void println(java.lang.String)>($r8);

        r23 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\ntime=");

        $i1 = virtualinvoke r20.<gov.nist.javax.sip.header.extensions.MinSE: int getExpires()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r23.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r20.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String getParameter(java.lang.String)>("some-param");

        if $r13 == null goto label2;

        r25 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("some-param=");

        $r16 = virtualinvoke r20.<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String getParameter(java.lang.String)>("some-param");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r25.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.extensions.MinSEParser r0;
        java.lang.String r1, $r8;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r3, $r4;
        int $i0;
        java.lang.Throwable $r5, $r7, $r10;
        java.text.ParseException $r6, $r9;
        gov.nist.javax.sip.header.extensions.MinSE r15;
        javax.sip.InvalidArgumentException r16;

        r0 := @this: gov.nist.javax.sip.parser.extensions.MinSEParser;

        r15 = new gov.nist.javax.sip.header.extensions.MinSE;

        specialinvoke r15.<gov.nist.javax.sip.header.extensions.MinSE: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void headerName(int)>(2134);

        $r3 = r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

     label02:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        virtualinvoke r15.<gov.nist.javax.sip.header.extensions.MinSE: void setExpires(int)>($i0);

     label03:
        $r4 = r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r15);

     label04:
        $z1 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z1 == 0 goto label05;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_leave(java.lang.String)>("parse");

     label05:
        return r15;

     label06:
        $r7 := @caughtexception;

     label07:
        r16 = (javax.sip.InvalidArgumentException) $r7;

        $r8 = virtualinvoke r16.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: java.text.ParseException createParseException(java.lang.String)>($r8);

        throw $r9;

     label08:
        $r5 := @caughtexception;

     label09:
        $r6 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: java.text.ParseException createParseException(java.lang.String)>("bad integer format");

        throw $r6;

     label10:
        $r10 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.extensions.MinSEParser: boolean debug>;

        if $z2 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.MinSEParser: void dbg_leave(java.lang.String)>("parse");

     label11:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.NumberFormatException from label02 to label03 with label08;
        catch javax.sip.InvalidArgumentException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }
}
