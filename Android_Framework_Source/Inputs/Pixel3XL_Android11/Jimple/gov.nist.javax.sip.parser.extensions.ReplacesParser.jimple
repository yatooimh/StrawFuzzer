public class gov.nist.javax.sip.parser.extensions.ReplacesParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.extensions.ReplacesParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReplacesParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.extensions.ReplacesParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReplacesParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        gov.nist.javax.sip.header.extensions.Replaces r0;
        int $i0, i1;
        gov.nist.javax.sip.parser.extensions.ReplacesParser $r1;
        java.lang.String $r2, $r6, $r8, $r11, $r14, $r17, $r20, $r23, $r25;
        gov.nist.javax.sip.header.SIPHeader $r3;
        java.lang.StringBuilder $r4, $r9, $r15;
        java.lang.String[] r26, r27;
        java.io.PrintStream r28, r30, r32;

        r26 := @parameter0: java.lang.String[];

        r27 = newarray (java.lang.String)[2];

        r27[0] = "Replaces: 12345th5z8z\n";

        r27[1] = "Replaces: 12345th5z8z;to-tag=tozght6-45;from-tag=fromzght789-337-2\n";

        i1 = 0;

     label1:
        $i0 = lengthof r27;

        if i1 >= $i0 goto label2;

        $r1 = new gov.nist.javax.sip.parser.extensions.ReplacesParser;

        $r2 = r27[i1];

        specialinvoke $r1.<gov.nist.javax.sip.parser.extensions.ReplacesParser: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<gov.nist.javax.sip.parser.extensions.ReplacesParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r0 = (gov.nist.javax.sip.header.extensions.Replaces) $r3;

        r28 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing => ");

        $r6 = r27[i1];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<java.io.PrintStream: void println(java.lang.String)>($r8);

        r30 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r11 = virtualinvoke r0.<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String encode()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("==> ");

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<java.io.PrintStream: void print(java.lang.String)>($r14);

        r32 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("callId ");

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getCallId()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from-tag=");

        $r20 = virtualinvoke r0.<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getFromTag()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to-tag=");

        $r23 = virtualinvoke r0.<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String getToTag()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r32.<java.io.PrintStream: void println(java.lang.String)>($r25);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.extensions.ReplacesParser r0;
        gov.nist.javax.sip.header.extensions.Replaces r1;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r2, $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReplacesParser;

        $z0 = <gov.nist.javax.sip.parser.extensions.ReplacesParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: void dbg_enter(java.lang.String)>("parse");

     label1:
        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: void headerName(int)>(2135);

        r1 = new gov.nist.javax.sip.header.extensions.Replaces;

        specialinvoke r1.<gov.nist.javax.sip.header.extensions.Replaces: void <init>()>();

        $r2 = r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void SPorHT()>();

        $r3 = r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: gov.nist.core.LexerCore lexer>;

        r6 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String byteStringNoSemicolon()>();

        $r4 = r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        virtualinvoke r1.<gov.nist.javax.sip.header.extensions.Replaces: void setCallId(java.lang.String)>(r6);

     label2:
        $z1 = <gov.nist.javax.sip.parser.extensions.ReplacesParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: void dbg_leave(java.lang.String)>("parse");

     label3:
        return r1;

     label4:
        $r5 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.extensions.ReplacesParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReplacesParser: void dbg_leave(java.lang.String)>("parse");

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
