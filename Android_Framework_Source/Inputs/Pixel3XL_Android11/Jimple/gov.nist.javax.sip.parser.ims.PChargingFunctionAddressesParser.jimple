public class gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        int $i0, i1;
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser $r0;
        java.lang.String $r1, $r4, $r6, $r10, $r12;
        java.lang.StringBuilder $r2, $r8;
        gov.nist.javax.sip.header.SIPHeader $r7;
        java.lang.String[] r13, r14;
        java.io.PrintStream r16, r19;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r18;

        r13 := @parameter0: java.lang.String[];

        r14 = newarray (java.lang.String)[3];

        r14[0] = "P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n";

        r14[1] = "P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n";

        r14[2] = "P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n";

        i1 = 0;

     label1:
        $i0 = lengthof r14;

        if i1 >= $i0 goto label2;

        $r0 = new gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        $r1 = r14[i1];

        specialinvoke $r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void <init>(java.lang.String)>($r1);

        r16 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("original = ");

        $r4 = r14[i1];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = virtualinvoke $r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r18 = (gov.nist.javax.sip.header.ims.PChargingFunctionAddresses) $r7;

        r19 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r10 = virtualinvoke r18.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.lang.String encode()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r19.<java.io.PrintStream: void println(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        char c0, $c1;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r1, $r2, $r3, $r5, $r9;
        java.lang.Throwable $r6, $r7;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r8;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void headerName(int)>(2124);

        r8 = new gov.nist.javax.sip.header.ims.PChargingFunctionAddresses;

        specialinvoke r8.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void <init>()>();

     label02:
        $r9 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void parseParameter(gov.nist.javax.sip.header.ims.PChargingFunctionAddresses)>(r8);

        $r1 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r1.<gov.nist.core.LexerCore: void SPorHT()>();

        $r2 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r2.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label03:
        if c0 == 10 goto label06;

        if c0 != 0 goto label04;

        goto label06;

     label04:
        $r3 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r5 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        goto label02;

     label06:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r8);

     label07:
        $z2 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z2 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parse");

     label08:
        return r8;

     label09:
        $r6 := @caughtexception;

     label10:
        throw $r6;

     label11:
        $r7 := @caughtexception;

        $z1 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z1 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parse");

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.text.ParseException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.text.ParseException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    protected void parseParameter(gov.nist.javax.sip.header.ims.PChargingFunctionAddresses) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        boolean $z0, $z1, $z2;
        gov.nist.core.NameValue $r1;
        java.lang.Throwable $r2;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r3;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r3 := @parameter0: gov.nist.javax.sip.header.ims.PChargingFunctionAddresses;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_enter(java.lang.String)>("parseParameter");

     label1:
        $r1 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.NameValue nameValue(char)>(61);

        virtualinvoke r3.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setMultiParameter(gov.nist.core.NameValue)>($r1);

     label2:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parseParameter");

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parseParameter");

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
