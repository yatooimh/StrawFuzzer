public class gov.nist.javax.sip.parser.ims.PChargingVectorParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        gov.nist.javax.sip.header.ims.PChargingVector r1;
        char c0, $c1;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r2, $r3, $r4, $r6, $r9;
        java.lang.Throwable $r7, $r8;
        java.lang.String r10;
        java.text.ParseException r11;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void headerName(int)>(2125);

        r1 = new gov.nist.javax.sip.header.ims.PChargingVector;

        specialinvoke r1.<gov.nist.javax.sip.header.ims.PChargingVector: void <init>()>();

     label02:
        $r9 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void parseParameter(gov.nist.javax.sip.header.ims.PChargingVector)>(r1);

        $r2 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void SPorHT()>();

        $r3 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r3.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label03:
        if c0 == 10 goto label06;

        if c0 != 0 goto label04;

        goto label06;

     label04:
        $r4 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        goto label02;

     label06:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        r10 = virtualinvoke r1.<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getParameter(java.lang.String)>("icid-value");

     label07:
        if r10 == null goto label09;

        $z1 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z1 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parse");

     label08:
        return r1;

     label09:
        r11 = new java.text.ParseException;

        specialinvoke r11.<java.text.ParseException: void <init>(java.lang.String,int)>("Missing a required Parameter : icid-value", 0);

        throw r11;

     label10:
        $r8 := @caughtexception;

     label11:
        throw $r8;

     label12:
        $r7 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z2 == 0 goto label13;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parse");

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.text.ParseException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.text.ParseException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    protected void parseParameter(gov.nist.javax.sip.header.ims.PChargingVector) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        boolean $z0, $z1, $z2;
        gov.nist.core.NameValue $r1;
        java.lang.Throwable $r2;
        gov.nist.javax.sip.header.ims.PChargingVector r3;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r3 := @parameter0: gov.nist.javax.sip.header.ims.PChargingVector;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_enter(java.lang.String)>("parseParameter");

     label1:
        $r1 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.NameValue nameValue(char)>(61);

        virtualinvoke r3.<gov.nist.javax.sip.header.ims.PChargingVector: void setParameter(gov.nist.core.NameValue)>($r1);

     label2:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parseParameter");

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parseParameter");

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
