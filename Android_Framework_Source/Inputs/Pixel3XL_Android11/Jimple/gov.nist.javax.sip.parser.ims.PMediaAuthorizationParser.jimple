public class gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    public void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        gov.nist.core.Token r2;
        boolean $z0, $z1, $z3;
        gov.nist.core.LexerCore $r4, $r6, $r8, $r9, $r10, $r11, $r18;
        java.lang.String $r7, $r14;
        char $c0, $c1;
        java.lang.Throwable $r13, $r16;
        java.text.ParseException $r15;
        gov.nist.javax.sip.header.ims.PMediaAuthorization r17, r22, r23;
        gov.nist.javax.sip.header.ims.PMediaAuthorizationList r21;
        javax.sip.InvalidArgumentException r24;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        r21 = new gov.nist.javax.sip.header.ims.PMediaAuthorizationList;

        specialinvoke r21.<gov.nist.javax.sip.header.ims.PMediaAuthorizationList: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_enter(java.lang.String)>("MediaAuthorizationParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void headerName(int)>(2130);

        r22 = new gov.nist.javax.sip.header.ims.PMediaAuthorization;

        r17 = r22;

        specialinvoke r22.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void <init>()>();

        virtualinvoke r22.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setHeaderName(java.lang.String)>("P-Media-Authorization");

     label02:
        $r18 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r18.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label10;

        $r4 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label03:
        $r7 = virtualinvoke r2.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r17.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setMediaAuthorizationToken(java.lang.String)>($r7);

     label04:
        virtualinvoke r21.<gov.nist.javax.sip.header.ims.PMediaAuthorizationList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r17);

        $r8 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        $r9 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 44 goto label06;

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        r23 = new gov.nist.javax.sip.header.ims.PMediaAuthorization;

        r17 = r23;

        specialinvoke r23.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void <init>()>();

     label06:
        $r10 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void SPorHT()>();

     label07:
        goto label02;

     label08:
        $r13 := @caughtexception;

     label09:
        r24 = (javax.sip.InvalidArgumentException) $r13;

        $r14 = virtualinvoke r24.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: java.text.ParseException createParseException(java.lang.String)>($r14);

        throw $r15;

     label10:
        $z1 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z1 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_leave(java.lang.String)>("MediaAuthorizationParser.parse");

     label11:
        return r21;

     label12:
        $r16 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z3 == 0 goto label13;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_leave(java.lang.String)>("MediaAuthorizationParser.parse");

     label13:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }
}
