public class gov.nist.javax.sip.parser.ims.PPreferredServiceParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        gov.nist.core.LexerCore $r1, $r3, $r4, $r6, $r7;
        java.lang.String[] $r9, $r11;
        java.lang.String $r10, $r12, r18, r19, r22;
        java.lang.Throwable $r13, $r14, $r15, $r16;
        gov.nist.javax.sip.header.ims.PPreferredService r28;
        javax.sip.InvalidArgumentException r29, r30, r31, r32, r33, r34;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        $z1 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label01:
        $r1 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r1.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2144);

        $r3 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void SPorHT()>();

        $r4 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        r28 = new gov.nist.javax.sip.header.ims.PPreferredService;

        specialinvoke r28.<gov.nist.javax.sip.header.ims.PPreferredService: void <init>()>();

        $r7 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        r18 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $z2 = virtualinvoke r18.<java.lang.String: boolean contains(java.lang.CharSequence)>("urn:urn-7:");

        if $z2 == 0 goto label18;

        z0 = virtualinvoke r18.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-service");

     label02:
        if z0 == 0 goto label09;

     label03:
        $r11 = virtualinvoke r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-service.");

        r19 = $r11[1];

        $r12 = virtualinvoke r19.<java.lang.String: java.lang.String trim()>();

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 != 0 goto label05;

        virtualinvoke r28.<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)>(r19);

     label04:
        goto label08;

     label05:
        r29 = new javax.sip.InvalidArgumentException;

        specialinvoke r29.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-service");

        throw r29;

     label06:
        $r16 := @caughtexception;

     label07:
        r32 = (javax.sip.InvalidArgumentException) $r16;

        virtualinvoke r32.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label08:
        goto label18;

     label09:
        $z3 = virtualinvoke r18.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-application");

        if $z3 == 0 goto label15;

        $r9 = virtualinvoke r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-application");

        r22 = $r9[1];

        $r10 = virtualinvoke r22.<java.lang.String: java.lang.String trim()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 != 0 goto label11;

        virtualinvoke r28.<gov.nist.javax.sip.header.ims.PPreferredService: void setApplicationIdentifiers(java.lang.String)>(r22);

     label10:
        goto label14;

     label11:
        r30 = new javax.sip.InvalidArgumentException;

        specialinvoke r30.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-application");

        throw r30;

     label12:
        $r13 := @caughtexception;

     label13:
        r33 = (javax.sip.InvalidArgumentException) $r13;

        virtualinvoke r33.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label14:
        goto label18;

     label15:
        r31 = new javax.sip.InvalidArgumentException;

        specialinvoke r31.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN is not well formed");

        throw r31;

     label16:
        $r15 := @caughtexception;

     label17:
        r34 = (javax.sip.InvalidArgumentException) $r15;

        virtualinvoke r34.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label18:
        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.javax.sip.header.SIPHeader parse()>();

     label19:
        $z7 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z7 == 0 goto label20;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label20:
        return r28;

     label21:
        $r14 := @caughtexception;

        $z6 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z6 == 0 goto label22;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label22:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch javax.sip.InvalidArgumentException from label05 to label06 with label06;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch javax.sip.InvalidArgumentException from label11 to label12 with label12;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch javax.sip.InvalidArgumentException from label15 to label16 with label16;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
    }
}
