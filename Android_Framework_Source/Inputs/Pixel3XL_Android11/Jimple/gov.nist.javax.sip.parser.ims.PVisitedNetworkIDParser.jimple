public class gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser r0;
        gov.nist.javax.sip.header.ims.PVisitedNetworkID r1;
        char c0, $c1;
        gov.nist.javax.sip.header.ims.PVisitedNetworkIDList $r2;
        boolean $z0, $z2, $z3;
        gov.nist.core.LexerCore $r3, $r5, $r6, $r8, $r9, $r10, $r15, $r17, $r20;
        java.lang.String $r13;
        java.text.ParseException $r14;
        java.lang.Throwable $r18;
        java.lang.StringBuilder r21;

        r0 := @this: gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser;

        $r2 = new gov.nist.javax.sip.header.ims.PVisitedNetworkIDList;

        specialinvoke $r2.<gov.nist.javax.sip.header.ims.PVisitedNetworkIDList: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_enter(java.lang.String)>("VisitedNetworkIDParser.parse");

     label01:
        $r3 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2123);

        $r5 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void SPorHT()>();

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r8 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

     label02:
        r1 = new gov.nist.javax.sip.header.ims.PVisitedNetworkID;

        specialinvoke r1.<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void <init>()>();

        $r20 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r20.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 34 goto label04;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void parseQuotedString(gov.nist.javax.sip.header.ims.PVisitedNetworkID)>(r1);

     label03:
        goto label05;

     label04:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void parseToken(gov.nist.javax.sip.header.ims.PVisitedNetworkID)>(r1);

     label05:
        virtualinvoke $r2.<gov.nist.javax.sip.header.ims.PVisitedNetworkIDList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r1);

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: void SPorHT()>();

        $r10 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label06:
        if c0 != 44 goto label09;

     label07:
        $r15 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r17 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: void SPorHT()>();

     label08:
        goto label02;

     label09:
        if c0 != 10 goto label11;

        $z2 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z2 == 0 goto label10;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_leave(java.lang.String)>("VisitedNetworkIDParser.parse");

     label10:
        return $r2;

     label11:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected char = ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r13 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: java.text.ParseException createParseException(java.lang.String)>($r13);

        throw $r14;

     label12:
        $r18 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z3 == 0 goto label13;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_leave(java.lang.String)>("VisitedNetworkIDParser.parse");

     label13:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    protected void parseQuotedString(gov.nist.javax.sip.header.ims.PVisitedNetworkID) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser r0;
        java.lang.StringBuffer r1;
        char c0, $c1, $c2;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r2, $r4, $r5, $r8;
        java.text.ParseException $r3, r13;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        gov.nist.javax.sip.header.ims.PVisitedNetworkID r12;

        r0 := @this: gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser;

        r12 := @parameter0: gov.nist.javax.sip.header.ims.PVisitedNetworkID;

        $z0 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_enter(java.lang.String)>("parseQuotedString");

     label01:
        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r2.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 34 goto label13;

        $r4 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void consume(int)>(1);

     label02:
        $r5 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r5.<gov.nist.core.LexerCore: char getNextChar()>();

     label03:
        if c0 != 34 goto label07;

     label04:
        $r10 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r12.<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(java.lang.String)>($r10);

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r12);

     label05:
        $z1 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_leave(java.lang.String)>("parseQuotedString.parse");

     label06:
        return;

     label07:
        if c0 == 0 goto label12;

        if c0 != 92 goto label10;

     label08:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r8 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r8.<gov.nist.core.LexerCore: char getNextChar()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label09:
        goto label11;

     label10:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label11:
        goto label02;

     label12:
        r13 = new java.text.ParseException;

        specialinvoke r13.<java.text.ParseException: void <init>(java.lang.String,int)>("unexpected EOL", 1);

        throw r13;

     label13:
        $r3 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: java.text.ParseException createParseException(java.lang.String)>("unexpected char");

        throw $r3;

     label14:
        $r11 := @caughtexception;

        $z2 = <gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: boolean debug>;

        if $z2 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: void dbg_leave(java.lang.String)>("parseQuotedString.parse");

     label15:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    protected void parseToken(gov.nist.javax.sip.header.ims.PVisitedNetworkID) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser r0;
        gov.nist.javax.sip.header.ims.PVisitedNetworkID r1;
        gov.nist.core.LexerCore $r2, $r4;
        gov.nist.core.Token $r5;

        r0 := @this: gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser;

        r1 := @parameter0: gov.nist.javax.sip.header.ims.PVisitedNetworkID;

        $r2 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r4 = r0.<gov.nist.javax.sip.parser.ims.PVisitedNetworkIDParser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)>($r5);

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        return;
    }
}
