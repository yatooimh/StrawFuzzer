public class gov.nist.javax.sip.parser.ims.ServiceRouteParser extends gov.nist.javax.sip.parser.AddressParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.ServiceRouteParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.ServiceRouteParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.ServiceRouteParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.ServiceRouteParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.ServiceRouteParser r0;
        char c0, $c1;
        gov.nist.javax.sip.header.ims.ServiceRouteList $r2;
        boolean $z0, $z2, $z3;
        gov.nist.core.LexerCore $r3, $r5, $r6, $r8, $r9, $r11, $r13, $r16, $r17;
        java.text.ParseException $r10;
        java.lang.Throwable $r14;
        gov.nist.javax.sip.header.ims.ServiceRoute r15;

        r0 := @this: gov.nist.javax.sip.parser.ims.ServiceRouteParser;

        $r2 = new gov.nist.javax.sip.header.ims.ServiceRouteList;

        specialinvoke $r2.<gov.nist.javax.sip.header.ims.ServiceRouteList: void <init>()>();

        $z0 = <gov.nist.javax.sip.parser.ims.ServiceRouteParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: void dbg_enter(java.lang.String)>("ServiceRouteParser.parse");

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2120);

        $r5 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void SPorHT()>();

        $r6 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r8 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

     label2:
        r15 = new gov.nist.javax.sip.header.ims.ServiceRoute;

        specialinvoke r15.<gov.nist.javax.sip.header.ims.ServiceRoute: void <init>()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void parse(gov.nist.javax.sip.header.AddressParametersHeader)>(r15);

        virtualinvoke $r2.<gov.nist.javax.sip.header.ims.ServiceRouteList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r15);

        $r16 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

        $r17 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r17.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 44 goto label4;

        $r11 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r13 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: void SPorHT()>();

     label3:
        goto label2;

     label4:
        $r9 = r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label5:
        if c0 != 10 goto label7;

        $z2 = <gov.nist.javax.sip.parser.ims.ServiceRouteParser: boolean debug>;

        if $z2 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: void dbg_leave(java.lang.String)>("ServiceRouteParser.parse");

     label6:
        return $r2;

     label7:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: java.text.ParseException createParseException(java.lang.String)>("unexpected char");

        throw $r10;

     label8:
        $r14 := @caughtexception;

        $z3 = <gov.nist.javax.sip.parser.ims.ServiceRouteParser: boolean debug>;

        if $z3 == 0 goto label9;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.ServiceRouteParser: void dbg_leave(java.lang.String)>("ServiceRouteParser.parse");

     label9:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }
}
