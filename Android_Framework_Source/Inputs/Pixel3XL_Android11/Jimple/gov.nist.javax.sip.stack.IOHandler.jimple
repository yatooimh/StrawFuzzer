class gov.nist.javax.sip.stack.IOHandler extends java.lang.Object
{
    private static java.lang.String TCP;
    private static java.lang.String TLS;
    private java.util.concurrent.Semaphore ioSemaphore;
    private gov.nist.javax.sip.SipStackImpl sipStack;
    private java.util.concurrent.ConcurrentHashMap socketTable;

    static void <clinit>()
    {
        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP> = "tcp";

        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS> = "tls";

        return;
    }

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;
        java.util.concurrent.Semaphore $r2;
        gov.nist.javax.sip.SipStackImpl $r3;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.Semaphore;

        specialinvoke $r2.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore> = $r2;

        $r3 = (gov.nist.javax.sip.SipStackImpl) r1;

        r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable> = $r4;

        return;
    }

    protected static java.lang.String makeKey(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private void writeChunks(java.io.OutputStream, byte[], int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.io.OutputStream r1;
        int i0, $i1, i2, i3;
        java.lang.Throwable $r2;
        byte[] r3;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: byte[];

        i0 := @parameter2: int;

        entermonitor r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        $i1 = i2 + 8192;

        if $i1 >= i0 goto label2;

        i3 = 8192;

        goto label3;

     label2:
        i3 = i0 - i2;

     label3:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i2, i3);

     label4:
        i2 = i2 + 8192;

        goto label1;

     label5:
        exitmonitor r1;

     label6:
        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r2;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void closeAll()
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.util.Enumeration r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.net.Socket r5;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        r1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.net.Socket) $r3;

     label2:
        virtualinvoke r5.<java.net.Socket: void close()>();

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected java.net.Socket getSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.net.Socket $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.net.Socket) $r3;

        return $r4;
    }

    public java.net.SocketAddress obtainLocalAddress(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        java.lang.String r3;
        java.net.Socket r4, r8;
        java.net.SocketAddress $r5;
        gov.nist.javax.sip.SipStackImpl $r6;
        gov.nist.core.net.NetworkLayer $r7;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r1, i0);

        r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r3);

        r8 = r4;

        if r4 != null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r8 = interfaceinvoke $r7.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r3, r8);

     label1:
        $r5 = virtualinvoke r8.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        return $r5;
    }

    protected void putSocket(java.lang.String, java.net.Socket)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.net.Socket r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.Socket;

        $r3 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected void removeSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.net.Socket sendBytes(java.net.InetAddress, java.net.InetAddress, int, java.lang.String, byte[], boolean, gov.nist.javax.sip.stack.MessageChannel) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r101;
        int i0, i1, $i2, $i4, i5, i6;
        gov.nist.javax.sip.SipStackImpl $r2, $r3, $r5, $r16, $r17, $r21, $r23, $r27, $r31, $r39, $r43, $r51, $r52, $r55, $r59, $r63, $r64, $r66, $r88, $r89, $r96, $r97;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        java.lang.String $r4, $r14, $r26, $r30, $r38, $r42, $r49, $r58, $r62, $r71, $r77, $r100, r102, $r107, r108, r132;
        gov.nist.core.net.NetworkLayer $r6, $r18, $r53;
        java.io.OutputStream $r15, $r50, $r54, r142;
        gov.nist.javax.sip.stack.TLSMessageChannel $r19, $r20;
        java.lang.String[] $r22;
        gov.nist.core.StackLogger $r40, $r65, $r90, r105, r114, r116, r120, r124, r136, r138;
        java.util.concurrent.ConcurrentHashMap $r41;
        java.lang.Exception $r78, $r81;
        java.lang.Throwable $r79, $r82, $r83, $r84, $r85, $r87, $r91, $r92, $r93, $r94, $r95, r143;
        java.util.concurrent.Semaphore $r80, $r86, r109, $r123, r133, $r146;
        byte[] r103;
        gov.nist.javax.sip.stack.MessageChannel r104;
        byte b3;
        java.util.concurrent.TimeUnit r110, r134;
        java.net.Socket r111, r113, r171, r172, r173, r174, r175;
        java.lang.Object r135;
        javax.net.ssl.SSLSocket r140;
        java.net.DatagramSocket r153;
        java.lang.StringBuilder r154, r155, r156, r157, r158, r159, r163, r164, r166;
        java.io.IOException r160, r161, r162, r167, r168, r169;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl r165;
        java.net.DatagramPacket r170;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r101 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        r102 := @parameter3: java.lang.String;

        r103 := @parameter4: byte[];

        z8 := @parameter5: boolean;

        r104 := @parameter6: gov.nist.javax.sip.stack.MessageChannel;

        if z8 == 0 goto label01;

        b3 = 2;

        goto label02;

     label01:
        b3 = 1;

     label02:
        i1 = lengthof r103;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label03;

        $r66 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r105 = virtualinvoke $r66.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r154 = new java.lang.StringBuilder;

        specialinvoke r154.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendBytes ");

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inAddr ");

        $r71 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length = ");

        virtualinvoke r154.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r77 = virtualinvoke r154.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r105.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r77);

     label03:
        $r3 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label04;

        $r63 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r63.<gov.nist.javax.sip.SipStackImpl: boolean isLogStackTraceOnMessageSend()>();

        if $z5 == 0 goto label04;

        $r64 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r65 = virtualinvoke $r64.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r65.<gov.nist.core.StackLogger: void logStackTrace(int)>(16);

     label04:
        $r107 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP>;

        $i4 = virtualinvoke r102.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r107);

        if $i4 != 0 goto label33;

        r108 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r1, i0);

     label05:
        r109 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

     label06:
        r110 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label07:
        z9 = virtualinvoke r109.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, r110);

     label08:
        if z9 == 0 goto label28;

        r111 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r108);

        i5 = 0;

     label09:
        r113 = r111;

        if i5 >= b3 goto label25;

        if r111 != null goto label13;

     label10:
        $r51 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r51.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label11;

        $r55 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r114 = virtualinvoke $r55.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r155 = new java.lang.StringBuilder;

        specialinvoke r155.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        virtualinvoke r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r58 = virtualinvoke r155.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r114.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r58);

        $r59 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r116 = virtualinvoke $r59.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r156 = new java.lang.StringBuilder;

        specialinvoke r156.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        virtualinvoke r156.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r62 = virtualinvoke r156.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r116.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r62);

     label11:
        $r52 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r53 = virtualinvoke $r52.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r113 = interfaceinvoke $r53.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress)>(r1, i0, r101);

        $r54 = virtualinvoke r113.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r54, r103, i1);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r108, r113);

     label12:
        goto label25;

     label13:
        $r50 = virtualinvoke r111.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r50, r103, i1);

     label14:
        r113 = r111;

        goto label25;

     label15:
        $r85 := @caughtexception;

        goto label24;

     label16:
        $r95 := @caughtexception;

     label17:
        $r96 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r96.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label19;

        $r97 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r120 = virtualinvoke $r97.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r157 = new java.lang.StringBuilder;

        specialinvoke r157.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r157.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException occured retryCount ");

        virtualinvoke r157.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r100 = virtualinvoke r157.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r120.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r100);

     label18:
        goto label19;

     label19:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r108);

     label20:
        virtualinvoke r111.<java.net.Socket: void close()>();

     label21:
        goto label23;

     label22:
        $r78 := @caughtexception;

     label23:
        r111 = null;

        i5 = i5 + 1;

        goto label09;

     label24:
        $r86 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r86.<java.util.concurrent.Semaphore: void release()>();

        throw $r85;

     label25:
        $r123 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r123.<java.util.concurrent.Semaphore: void release()>();

        if r113 != null goto label27;

        $r31 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label26;

        $r39 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r40 = virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r41 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r42 = virtualinvoke $r41.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        interfaceinvoke $r40.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r42);

        $r43 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r124 = virtualinvoke $r43.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r158 = new java.lang.StringBuilder;

        specialinvoke r158.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        virtualinvoke r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r158.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r49 = virtualinvoke r158.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r124.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r49);

        goto label26;

     label26:
        r159 = new java.lang.StringBuilder;

        specialinvoke r159.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r159.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r160 = new java.io.IOException;

        $r38 = virtualinvoke r159.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r160.<java.io.IOException: void <init>(java.lang.String)>($r38);

        throw r160;

     label27:
        return r113;

     label28:
        r161 = new java.io.IOException;

        specialinvoke r161.<java.io.IOException: void <init>(java.lang.String)>("Could not acquire IO Semaphore after 10 seconds -- giving up ");

        throw r161;

     label29:
        $r91 := @caughtexception;

        goto label32;

     label30:
        $r94 := @caughtexception;

        goto label32;

     label31:
        $r84 := @caughtexception;

     label32:
        r162 = new java.io.IOException;

        specialinvoke r162.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw r162;

     label33:
        $r4 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS>;

        $i2 = virtualinvoke r102.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r4);

        if $i2 != 0 goto label61;

        r132 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r1, i0);

     label34:
        r133 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        r134 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label35:
        z10 = virtualinvoke r133.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, r134);

     label36:
        if z10 == 0 goto label56;

        r135 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r132);

        i6 = 0;

     label37:
        if i6 >= b3 goto label54;

        if r135 != null goto label43;

     label38:
        $r16 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label39;

        $r23 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r136 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r163 = new java.lang.StringBuilder;

        specialinvoke r163.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        virtualinvoke r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke r163.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r136.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

        $r27 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        r138 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r164 = new java.lang.StringBuilder;

        specialinvoke r164.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        virtualinvoke r164.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r30 = virtualinvoke r164.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r138.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r30);

     label39:
        $r17 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r18 = virtualinvoke $r17.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r135 = interfaceinvoke $r18.<gov.nist.core.net.NetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>(r1, i0, r101);

        r140 = (javax.net.ssl.SSLSocket) r135;

        r165 = new gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl;

        $r19 = (gov.nist.javax.sip.stack.TLSMessageChannel) r104;

        specialinvoke r165.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: void <init>(gov.nist.javax.sip.stack.TLSMessageChannel)>($r19);

        $r20 = (gov.nist.javax.sip.stack.TLSMessageChannel) r104;

        virtualinvoke $r20.<gov.nist.javax.sip.stack.TLSMessageChannel: void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r165);

        virtualinvoke r140.<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r165);

        $r21 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r22 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>();

        virtualinvoke r140.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r22);

        virtualinvoke r140.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r171 = (java.net.Socket) r135;

        r142 = virtualinvoke r171.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label40:
        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>(r142, r103, i1);

        r172 = (java.net.Socket) r135;

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r132, r172);

     label41:
        goto label54;

     label42:
        $r79 := @caughtexception;

        r143 = $r79;

        goto label53;

     label43:
        r173 = (java.net.Socket) r135;

        $r15 = virtualinvoke r173.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r15, r103, i1);

     label44:
        goto label54;

     label45:
        $r82 := @caughtexception;

        r143 = $r82;

        goto label53;

     label46:
        $r87 := @caughtexception;

     label47:
        $r88 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r88.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label48;

        $r89 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r90 = virtualinvoke $r89.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r90.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r87);

     label48:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r132);

     label49:
        r174 = (java.net.Socket) r135;

        virtualinvoke r174.<java.net.Socket: void close()>();

     label50:
        goto label52;

     label51:
        $r81 := @caughtexception;

     label52:
        r135 = null;

        i6 = i6 + 1;

        goto label37;

     label53:
        $r80 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r80.<java.util.concurrent.Semaphore: void release()>();

        throw r143;

     label54:
        $r146 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r146.<java.util.concurrent.Semaphore: void release()>();

        if r135 == null goto label55;

        r175 = (java.net.Socket) r135;

        return r175;

     label55:
        r166 = new java.lang.StringBuilder;

        specialinvoke r166.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r166.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r167 = new java.io.IOException;

        $r14 = virtualinvoke r166.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r167.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw r167;

     label56:
        r168 = new java.io.IOException;

        specialinvoke r168.<java.io.IOException: void <init>(java.lang.String)>("Timeout acquiring IO SEM");

        throw r168;

     label57:
        $r92 := @caughtexception;

        goto label60;

     label58:
        $r83 := @caughtexception;

        goto label60;

     label59:
        $r93 := @caughtexception;

     label60:
        r169 = new java.io.IOException;

        specialinvoke r169.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw r169;

     label61:
        $r5 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r153 = interfaceinvoke $r6.<gov.nist.core.net.NetworkLayer: java.net.DatagramSocket createDatagramSocket()>();

        virtualinvoke r153.<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>(r1, i0);

        r170 = new java.net.DatagramPacket;

        specialinvoke r170.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>(r103, 0, i1, r1, i0);

        virtualinvoke r153.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r170);

        virtualinvoke r153.<java.net.DatagramSocket: void close()>();

        return null;

        catch java.lang.InterruptedException from label05 to label06 with label31;
        catch java.lang.InterruptedException from label06 to label07 with label30;
        catch java.lang.InterruptedException from label07 to label08 with label29;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.lang.Throwable from label19 to label20 with label15;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label15;
        catch java.lang.InterruptedException from label28 to label29 with label29;
        catch java.lang.InterruptedException from label34 to label35 with label59;
        catch java.lang.InterruptedException from label35 to label36 with label58;
        catch java.lang.Throwable from label38 to label39 with label42;
        catch java.lang.Throwable from label39 to label40 with label42;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.io.IOException from label43 to label44 with label46;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label47 to label48 with label45;
        catch java.lang.Throwable from label48 to label49 with label45;
        catch java.lang.Exception from label49 to label50 with label51;
        catch java.lang.Throwable from label49 to label50 with label45;
        catch java.lang.InterruptedException from label56 to label57 with label57;
    }
}
