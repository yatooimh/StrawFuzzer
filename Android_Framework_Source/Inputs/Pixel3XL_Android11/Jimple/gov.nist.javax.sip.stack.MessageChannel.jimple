public abstract class gov.nist.javax.sip.stack.MessageChannel extends java.lang.Object
{
    protected transient gov.nist.javax.sip.stack.MessageProcessor messageProcessor;
    protected int useCount;

    public void <init>()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final boolean copyHeader(java.lang.String, java.lang.String, java.lang.StringBuffer)
    {
        java.lang.String r0, r1;
        java.lang.StringBuffer r2;
        int i0, i1, $i2;
        java.lang.CharSequence $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.StringBuffer;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r0);

        if i0 == -1 goto label1;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("\r\n", i0);

        if i1 == -1 goto label1;

        $i2 = i0 - 2;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i2, i1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r3);

        return 1;

     label1:
        return 0;
    }

    private static final boolean copyViaHeaders(java.lang.String, java.lang.StringBuffer)
    {
        java.lang.String r0;
        java.lang.StringBuffer r1;
        int i0, $i1, i2;
        java.lang.CharSequence $r2;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.StringBuffer;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("Via");

        z0 = 0;

     label1:
        if i2 == -1 goto label3;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\r\n", i2);

        if i0 == -1 goto label2;

        $i1 = i2 - 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i1, i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r2);

        z0 = 1;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("Via", i0);

        goto label1;

     label2:
        return 0;

     label3:
        return z0;
    }

    public static java.lang.String getKey(gov.nist.core.HostPort, java.lang.String)
    {
        gov.nist.core.HostPort r0;
        java.lang.String r1, $r7, $r11, $r12;
        java.lang.StringBuilder $r3;
        gov.nist.core.Host $r6;
        int $i0;

        r0 := @parameter0: gov.nist.core.HostPort;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke r0.<gov.nist.core.HostPort: gov.nist.core.Host getHost()>();

        $r7 = virtualinvoke $r6.<gov.nist.core.Host: java.lang.String getHostname()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke r0.<gov.nist.core.HostPort: int getPort()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        return $r12;
    }

    public static java.lang.String getKey(java.net.InetAddress, int, java.lang.String)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.String r1, $r6, $r10, $r11;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        return $r11;
    }

    public abstract void close();

    protected final java.lang.String createBadReqRes(java.lang.String, java.text.ParseException)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        java.lang.StringBuffer $r2;
        java.lang.StringBuilder $r3, $r11, $r18, $r24, $r33, $r39;
        java.lang.String $r5, $r8, $r13, $r15, $r20, $r22, $r27, $r29, $r30, $r31, $r35, $r37, $r41, $r43, r46, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.javax.sip.header.ContentType $r10;
        gov.nist.javax.sip.header.ContentLength $r17, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.text.ParseException r47;
        javax.sip.header.ServerHeader r49;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r46 := @parameter0: java.lang.String;

        r47 := @parameter1: java.text.ParseException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>(512);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIP/2.0 400 Bad Request (");

        $r5 = virtualinvoke r47.<java.text.ParseException: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $z0 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyViaHeaders(java.lang.String,java.lang.StringBuffer)>(r46, $r2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $z1 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("CSeq", r46, $r2);

        if $z1 != 0 goto label02;

        return null;

     label02:
        $z2 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("Call-ID", r46, $r2);

        if $z2 != 0 goto label03;

        return null;

     label03:
        $z3 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("From", r46, $r2);

        if $z3 != 0 goto label04;

        return null;

     label04:
        $z4 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("To", r46, $r2);

        if $z4 != 0 goto label05;

        return null;

     label05:
        i9 = virtualinvoke $r2.<java.lang.StringBuffer: int indexOf(java.lang.String)>("To");

        if i9 == -1 goto label06;

        $i8 = virtualinvoke $r2.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>("tag", i9);

        if $i8 != -1 goto label06;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";tag=badreq");

     label06:
        r49 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r49 == null goto label07;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r41 = virtualinvoke r49.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

     label07:
        i10 = virtualinvoke r46.<java.lang.String: int length()>();

        $z5 = r0 instanceof gov.nist.javax.sip.stack.UDPMessageChannel;

        if $z5 == 0 goto label09;

        $i0 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        $i1 = $i0 + i10;

        $r29 = "Content-Type";

        $i2 = virtualinvoke $r29.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        $r30 = ": message/sipfrag\r\n";

        $i4 = virtualinvoke $r30.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $r31 = "Content-Length";

        $i6 = virtualinvoke $r31.<java.lang.String: int length()>();

        $i7 = $i5 + $i6;

        if $i7 >= 1300 goto label08;

        goto label09;

     label08:
        $r32 = new gov.nist.javax.sip.header.ContentLength;

        specialinvoke $r32.<gov.nist.javax.sip.header.ContentLength: void <init>(int)>(0);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r35 = virtualinvoke $r32.<gov.nist.javax.sip.header.ContentLength: java.lang.String toString()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        goto label10;

     label09:
        $r10 = new gov.nist.javax.sip.header.ContentType;

        specialinvoke $r10.<gov.nist.javax.sip.header.ContentType: void <init>(java.lang.String,java.lang.String)>("message", "sipfrag");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r13 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = new gov.nist.javax.sip.header.ContentLength;

        specialinvoke $r17.<gov.nist.javax.sip.header.ContentLength: void <init>(int)>(i10);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r20 = virtualinvoke $r17.<gov.nist.javax.sip.header.ContentLength: java.lang.String toString()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n\r\n");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

     label10:
        $r58 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r58;
    }

    public java.lang.String getHost()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;
        java.net.InetAddress $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r3;
    }

    public gov.nist.core.HostPort getHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke $r2.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        virtualinvoke $r2.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return $r2;
    }

    public abstract java.lang.String getKey();

    public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        return $r1;
    }

    public abstract java.lang.String getPeerAddress();

    public gov.nist.core.HostPort getPeerHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke $r2.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        virtualinvoke $r2.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return $r2;
    }

    protected abstract java.net.InetAddress getPeerInetAddress();

    public abstract java.net.InetAddress getPeerPacketSourceAddress();

    public abstract int getPeerPacketSourcePort();

    public abstract int getPeerPort();

    protected abstract java.lang.String getPeerProtocol();

    public int getPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 = r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        return $i0;

     label1:
        return -1;
    }

    public java.lang.String getRawIpSourceAddress()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        java.net.InetAddress $r1;
        java.lang.Exception $r2;
        java.lang.String r3, r4, r5;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        r4 = null;

     label1:
        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r3);

        r5 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label2:
        r4 = r5;

        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>($r2);

     label4:
        return r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();

    public abstract java.lang.String getTransport();

    public gov.nist.javax.sip.header.Via getViaHeader()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.header.Via $r3;
        java.lang.String $r4;
        gov.nist.core.HostPort $r5;
        java.lang.Throwable $r6;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r3 = new gov.nist.javax.sip.header.Via;

        specialinvoke $r3.<gov.nist.javax.sip.header.Via: void <init>()>();

     label1:
        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        virtualinvoke $r3.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getHostPort()>();

        virtualinvoke $r3.<gov.nist.javax.sip.header.Via: void setSentBy(gov.nist.core.HostPort)>($r5);

        return $r3;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public abstract java.lang.String getViaHost();

    public gov.nist.core.HostPort getViaHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getViaHost()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke $r2.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getViaPort()>();

        virtualinvoke $r2.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return $r2;
    }

    public abstract int getViaPort();

    public abstract boolean isReliable();

    public abstract boolean isSecure();

    protected void logMessage(gov.nist.javax.sip.message.SIPMessage, java.net.InetAddress, int, long)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.net.InetAddress r2;
        int i0, $i2, i3;
        long l1;
        gov.nist.core.ServerLogger r3;
        java.lang.String r4, $r9, $r14, $r15, $r19;
        gov.nist.javax.sip.stack.SIPTransactionStack $r5, $r7;
        gov.nist.core.StackLogger $r6;
        boolean $z0;
        java.lang.StringBuilder $r8, $r13;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z0 = interfaceinvoke $r6.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z0 != 0 goto label1;

        return;

     label1:
        i3 = i0;

        if i0 != -1 goto label2;

        i3 = 5060;

     label2:
        $r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        r3 = $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i2 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toString()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,boolean,long)>(r1, r4, $r19, 1, l1);

        return;
    }

    public void logResponse(gov.nist.javax.sip.message.SIPResponse, long, java.lang.String)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        long l0;
        java.lang.String r2, $r17, $r18, r19, $r22, r23;
        int i1, i2, $i3;
        gov.nist.javax.sip.header.ContactList $r9, $r10;
        javax.sip.header.Header $r11;
        javax.sip.header.ContactHeader $r12;
        javax.sip.address.Address $r13;
        gov.nist.javax.sip.address.AddressImpl $r14;
        java.lang.StringBuilder $r15, $r20;
        gov.nist.javax.sip.stack.SIPTransactionStack $r24;
        gov.nist.core.ServerLogger $r25;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        i1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        i2 = i1;

        if i1 != 0 goto label1;

        i2 = i1;

        $r9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        if $r9 == null goto label1;

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.header.ContactList: javax.sip.header.Header getFirst()>();

        $r12 = (javax.sip.header.ContactHeader) $r11;

        $r13 = interfaceinvoke $r12.<javax.sip.header.ContactHeader: javax.sip.address.Address getAddress()>();

        $r14 = (gov.nist.javax.sip.address.AddressImpl) $r13;

        i2 = virtualinvoke $r14.<gov.nist.javax.sip.address.AddressImpl: int getPort()>();

     label1:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String toString()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r25 = $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r25.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,java.lang.String,boolean,long)>(r1, r19, r23, r2, 0, l0);

        return;
    }

    public abstract void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException;

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.net.InetAddress r2;
        int i0;
        long l1;
        java.lang.String $r3;
        byte[] $r4;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r3);

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r4, r2, i0, $z0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r2, i0, l1);

        return;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage, javax.sip.address.Hop) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.MessageChannel r0, r30;
        gov.nist.javax.sip.message.SIPMessage r1;
        javax.sip.address.Hop r2;
        long l0;
        java.net.InetAddress r3, $r10;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.String $r4, $r6, $r11, $r12;
        gov.nist.javax.sip.stack.SIPTransactionStack $r5, $r8, $r14, $r15, $r17, $r20, $r22, $r26;
        byte[] $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        gov.nist.core.StackLogger $r9, $r16, $r18, $r21, $r23, $r27;
        gov.nist.javax.sip.stack.RawMessageChannel $r13;
        java.lang.Exception $r19;
        java.lang.Throwable $r24, $r25;
        gov.nist.javax.sip.stack.MessageProcessor[] r28;
        gov.nist.javax.sip.stack.MessageProcessor r29;
        java.io.IOException r33;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: javax.sip.address.Hop;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getHost()>();

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r4);

     label01:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        r28 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()>();

        i1 = lengthof r28;

     label02:
        i9 = 0;

     label03:
        if i9 >= i1 goto label09;

        r29 = r28[i9];

     label04:
        $r10 = virtualinvoke r29.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $z2 = virtualinvoke $r10.<java.net.InetAddress: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label08;

        $i4 = virtualinvoke r29.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        $i5 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        if $i4 != $i5 goto label08;

        $r11 = virtualinvoke r29.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        $r12 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label08;

     label05:
        $i6 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        r30 = virtualinvoke r29.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>(r3, $i6);

        $z4 = r30 instanceof gov.nist.javax.sip.stack.RawMessageChannel;

        if $z4 == 0 goto label08;

        $r13 = (gov.nist.javax.sip.stack.RawMessageChannel) r30;

        interfaceinvoke $r13.<gov.nist.javax.sip.stack.RawMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>(r1);

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $z5 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label06;

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r18 = virtualinvoke $r17.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r18.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Self routing message");

     label06:
        $r15 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r16 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z6 = interfaceinvoke $r16.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z6 == 0 goto label07;

        $i7 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r3, $i7, l0);

     label07:
        return;

     label08:
        i9 = i9 + 1;

        goto label03;

     label09:
        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r6);

        $i2 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r7, r3, $i2, $z0);

     label10:
        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z1 = interfaceinvoke $r9.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z1 == 0 goto label11;

        $i3 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r3, $i3, l0);

     label11:
        return;

     label12:
        $r25 := @caughtexception;

        goto label18;

     label13:
        $r19 := @caughtexception;

     label14:
        $r20 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r21 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z7 = interfaceinvoke $r21.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(4);

        if $z7 == 0 goto label15;

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r23 = virtualinvoke $r22.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error self routing message cause by: ", $r19);

     label15:
        r33 = new java.io.IOException;

        specialinvoke r33.<java.io.IOException: void <init>(java.lang.String)>("Error self routing message");

        throw r33;

     label16:
        $r24 := @caughtexception;

     label17:
        throw $r24;

     label18:
        $r26 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r27 = virtualinvoke $r26.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z8 = interfaceinvoke $r27.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z8 == 0 goto label19;

        $i8 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r3, $i8, l0);

     label19:
        throw $r25;

        catch java.io.IOException from label01 to label02 with label16;
        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.lang.Exception from label04 to label05 with label13;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
        catch java.lang.Throwable from label17 to label18 with label12;
    }

    protected abstract void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException;

    protected void uncache()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        return;
    }
}
