public abstract class gov.nist.javax.sip.stack.SIPTransactionStack extends java.lang.Object implements gov.nist.javax.sip.stack.SIPTransactionEventListener, gov.nist.javax.sip.stack.SIPDialogEventListener
{
    public static final int BASE_TIMER_INTERVAL;
    public static final int CONNECTION_LINGER_TIME;
    protected static final java.util.Set dialogCreatingMethods;
    private java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount;
    protected gov.nist.core.net.AddressResolver addressResolver;
    protected boolean cacheClientConnections;
    protected boolean cacheServerConnections;
    protected boolean cancelClientTransactionChecked;
    protected boolean checkBranchId;
    private java.util.concurrent.ConcurrentHashMap clientTransactionTable;
    protected int clientTransactionTableHiwaterMark;
    protected int clientTransactionTableLowaterMark;
    protected gov.nist.javax.sip.stack.DefaultRouter defaultRouter;
    protected java.util.concurrent.ConcurrentHashMap dialogTable;
    protected java.util.concurrent.ConcurrentHashMap earlyDialogTable;
    private java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable;
    protected java.util.HashSet forkedEvents;
    protected boolean generateTimeStampHeader;
    protected gov.nist.javax.sip.stack.IOHandler ioHandler;
    protected boolean isAutomaticDialogErrorHandlingEnabled;
    protected boolean isAutomaticDialogSupportEnabled;
    protected boolean isBackToBackUserAgent;
    protected boolean isDialogTerminatedEventDeliveredForNullDialog;
    protected gov.nist.javax.sip.LogRecordFactory logRecordFactory;
    protected boolean logStackTraceOnMessageSend;
    protected int maxConnections;
    protected int maxContentLength;
    protected int maxForkTime;
    protected int maxListenerResponseTime;
    protected int maxMessageSize;
    private java.util.concurrent.ConcurrentHashMap mergeTable;
    private java.util.Collection messageProcessors;
    protected boolean needsLogging;
    protected gov.nist.core.net.NetworkLayer networkLayer;
    private boolean non2XXAckPassedToListener;
    protected java.lang.String outboundProxy;
    private java.util.concurrent.ConcurrentHashMap pendingTransactions;
    protected int readTimeout;
    protected int receiveUdpBufferSize;
    protected boolean remoteTagReassignmentAllowed;
    protected java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions;
    protected boolean rfc2543Supported;
    protected javax.sip.address.Router router;
    protected java.lang.String routerPath;
    protected int sendUdpBufferSize;
    protected gov.nist.core.ServerLogger serverLogger;
    private java.util.concurrent.ConcurrentHashMap serverTransactionTable;
    protected int serverTransactionTableHighwaterMark;
    protected int serverTransactionTableLowaterMark;
    protected gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory;
    protected java.lang.String stackAddress;
    protected boolean stackDoesCongestionControl;
    protected java.net.InetAddress stackInetAddress;
    private gov.nist.core.StackLogger stackLogger;
    protected java.lang.String stackName;
    private java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck;
    protected gov.nist.core.ThreadAuditor threadAuditor;
    protected int threadPoolSize;
    private java.util.Timer timer;
    protected boolean toExit;
    boolean udpFlag;
    protected boolean unlimitedClientTransactionTableSize;
    protected boolean unlimitedServerTransactionTableSize;
    protected boolean useRouterForAll;

    static void <clinit>()
    {
        java.util.HashSet $r1;
        java.util.Set $r2, $r3;

        <gov.nist.javax.sip.stack.SIPTransactionStack: int CONNECTION_LINGER_TIME> = 8;

        <gov.nist.javax.sip.stack.SIPTransactionStack: int BASE_TIMER_INTERVAL> = 500;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods> = $r1;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("REFER");

        $r2 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("INVITE");

        $r3 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("SUBSCRIBE");

        return;
    }

    protected void <init>()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        gov.nist.core.ThreadAuditor $r2, $r17;
        java.util.HashSet $r3;
        java.util.ArrayList $r4;
        gov.nist.javax.sip.stack.IOHandler $r5;
        gov.nist.javax.sip.DefaultAddressResolver $r6;
        java.util.concurrent.ConcurrentHashMap $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16;
        java.util.Timer $r14, $r19;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer $r18;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedServerTransactionTableSize> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableHighwaterMark> = 5000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableLowaterMark> = 4000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableHiwaterMark> = 1000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableLowaterMark> = 800;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount> = $r1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean rfc2543Supported> = 1;

        $r2 = new gov.nist.core.ThreadAuditor;

        specialinvoke $r2.<gov.nist.core.ThreadAuditor: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor threadAuditor> = $r2;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cancelClientTransactionChecked> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean remoteTagReassignmentAllowed> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean stackDoesCongestionControl> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isBackToBackUserAgent> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogErrorHandlingEnabled> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents> = $r3;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = -1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheServerConnections> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors> = $r4;

        $r5 = new gov.nist.javax.sip.stack.IOHandler;

        specialinvoke $r5.<gov.nist.javax.sip.stack.IOHandler: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler> = $r5;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout> = -1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxListenerResponseTime> = -1;

        $r6 = new gov.nist.javax.sip.DefaultAddressResolver;

        specialinvoke $r6.<gov.nist.javax.sip.DefaultAddressResolver: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable> = $r8;

        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable> = $r9;

        $r10 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable> = $r12;

        $r13 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions> = $r13;

        $r14 = new java.util.Timer;

        specialinvoke $r14.<java.util.Timer: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = $r14;

        $r15 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r15.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions> = $r15;

        $r16 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r16.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable> = $r16;

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        $z0 = virtualinvoke $r17.<gov.nist.core.ThreadAuditor: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        $r18 = new gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer;

        specialinvoke $r18.<gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.core.ThreadAuditor$ThreadHandle)>(r0, null);

        virtualinvoke $r19.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r18, 0L);

     label1:
        return;
    }

    protected void <init>(gov.nist.javax.sip.stack.StackMessageFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.StackMessageFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.StackMessageFactory;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory> = r1;

        return;
    }

    static java.util.concurrent.ConcurrentHashMap access$000(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        return $r1;
    }

    private void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        gov.nist.core.StackLogger $r1, $r20, $r21, $r30, r31, r34;
        gov.nist.javax.sip.stack.SIPServerTransaction $r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r16, r24, $r28;
        java.lang.StringBuilder $r5, $r11;
        java.lang.String $r8, $r14, r27, r33;
        java.util.concurrent.atomic.AtomicInteger $r9, $r15, $r17;
        int $i1, $i2;
        java.lang.Throwable $r18;
        java.lang.Exception $r19;
        gov.nist.javax.sip.stack.SIPTransaction r22;
        gov.nist.javax.sip.message.SIPRequest r23;
        gov.nist.javax.sip.stack.SIPClientTransaction $r29;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r22 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        r23 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $z0 = r22 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label12;

        $z2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize>;

        if $z2 != 0 goto label09;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i1 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableHiwaterMark>;

        if $i1 <= $i2 goto label10;

     label01:
        r24 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        entermonitor r24;

     label02:
        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r16.<java.lang.Object: void wait()>();

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        virtualinvoke $r17.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        exitmonitor r24;

     label03:
        goto label08;

     label04:
        $r18 := @caughtexception;

     label05:
        exitmonitor r24;

     label06:
        throw $r18;

     label07:
        $r19 := @caughtexception;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r20.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label08;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Exception occured while waiting for room", $r19);

     label08:
        goto label10;

     label09:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label10:
        r27 = virtualinvoke r23.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r28 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r29 = (gov.nist.javax.sip.stack.SIPClientTransaction) r22;

        virtualinvoke $r28.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r29);

        $r30 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r30.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label11;

        r31 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" putTransactionHash :  key = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r31.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label11:
        goto label14;

     label12:
        r33 = virtualinvoke r23.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r1.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label13;

        r34 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" putTransactionHash :  key = ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r34.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r8);

     label13:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r2 = (gov.nist.javax.sip.stack.SIPServerTransaction) r22;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, $r2);

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Exception from label06 to label07 with label07;
    }

    private java.lang.String auditDialogs(java.util.Set, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        long l0, l1, $l2, $l4, $l5;
        java.util.Iterator r1;
        java.util.concurrent.ConcurrentHashMap $r2, r31;
        java.util.Collection $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r11, $r17, $r23;
        java.lang.String $r7, $r13, $r26, r30, r34, r36, r39, r40, r42, r46;
        java.lang.Object $r10;
        byte $b3, $b6;
        int $i7, i8, i9, i10;
        gov.nist.core.StackLogger $r22, r43;
        java.lang.Throwable $r27, $r28, r47;
        java.util.Set r29;
        java.util.LinkedList r32;
        gov.nist.javax.sip.stack.SIPDialog r33;
        javax.sip.header.CallIdHeader r35;
        javax.sip.DialogState r37;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r29 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        r30 = "  Leaked dialogs:\n";

        i8 = 0;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r31 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        entermonitor r31;

     label01:
        r32 = new java.util.LinkedList;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        specialinvoke r32.<java.util.LinkedList: void <init>(java.util.Collection)>($r3);

        exitmonitor r31;

     label02:
        r1 = virtualinvoke r32.<java.util.LinkedList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r33 = (gov.nist.javax.sip.stack.SIPDialog) $r10;

        r34 = null;

        if r33 == null goto label04;

        r35 = virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.CallIdHeader getCallId()>();

        goto label05;

     label04:
        r35 = null;

     label05:
        if r35 == null goto label06;

        r34 = interfaceinvoke r35.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

     label06:
        if r33 == null goto label10;

        if r34 == null goto label10;

        r36 = r30;

        i9 = i8;

        $z1 = interfaceinvoke r29.<java.util.Set: boolean contains(java.lang.Object)>(r34);

        if $z1 != 0 goto label11;

        $l2 = r33.<gov.nist.javax.sip.stack.SIPDialog: long auditTag>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label07;

        r33.<gov.nist.javax.sip.stack.SIPDialog: long auditTag> = l1;

        r36 = r30;

        i9 = i8;

        goto label11;

     label07:
        r36 = r30;

        i9 = i8;

        $l4 = r33.<gov.nist.javax.sip.stack.SIPDialog: long auditTag>;

        $l5 = l1 - $l4;

        $b6 = $l5 cmp l0;

        if $b6 < 0 goto label11;

        i10 = i8 + 1;

        r37 = virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog id: ");

        $r13 = virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dialog state: ");

        if r37 == null goto label08;

        r39 = virtualinvoke r37.<javax.sip.DialogState: java.lang.String toString()>();

        goto label09;

     label08:
        r39 = "null";

     label09:
        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        r40 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r42 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = <gov.nist.javax.sip.stack.SIPDialog: int TERMINATED_STATE>;

        virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>($i7);

        r36 = r42;

        i9 = i10;

        $r22 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r22.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label11;

        r43 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auditDialogs: leaked ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r43.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

        r36 = r42;

        i9 = i10;

        goto label11;

     label10:
        i9 = i8;

        r36 = r30;

     label11:
        r30 = r36;

        i8 = i9;

        goto label03;

     label12:
        if i8 <= 0 goto label13;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Total: ");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" leaked dialogs detected and removed.\n");

        r46 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label13:
        r46 = null;

     label14:
        return r46;

     label15:
        $r28 := @caughtexception;

        r47 = $r28;

     label16:
        exitmonitor r31;

     label17:
        throw r47;

     label18:
        $r27 := @caughtexception;

        r47 = $r27;

        goto label16;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        long l0, l1, $l2, $l4, $l5;
        java.util.Iterator r1;
        gov.nist.javax.sip.stack.SIPTransaction r2;
        java.util.LinkedList $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r13, $r21, $r26;
        java.lang.String $r9, $r15, $r29, r31, r32, r35, r37, r38, r39, r41, r45;
        java.lang.Object $r12;
        byte $b3, $b6;
        java.lang.Class $r14;
        java.util.concurrent.ConcurrentHashMap r30;
        int i7, i8, i9;
        javax.sip.TransactionState r33;
        gov.nist.javax.sip.message.SIPRequest r34;
        gov.nist.core.StackLogger r42;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r30 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        l0 := @parameter1: long;

        r31 = "  Leaked transactions:\n";

        i7 = 0;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = new java.util.LinkedList;

        $r5 = virtualinvoke r30.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        specialinvoke $r4.<java.util.LinkedList: void <init>(java.util.Collection)>($r5);

        r1 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r12;

        r32 = r31;

        i8 = i7;

        if r2 == null goto label08;

        $l2 = r2.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label02;

        r2.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag> = l1;

        r32 = r31;

        i8 = i7;

        goto label08;

     label02:
        r32 = r31;

        i8 = i7;

        $l4 = r2.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag>;

        $l5 = l1 - $l4;

        $b6 = $l5 cmp l0;

        if $b6 < 0 goto label08;

        i9 = i7 + 1;

        r33 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        r34 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r34 == null goto label03;

        r35 = virtualinvoke r34.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        goto label04;

     label03:
        r35 = null;

     label04:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state: ");

        if r33 == null goto label05;

        r37 = virtualinvoke r33.<javax.sip.TransactionState: java.lang.String toString()>();

        goto label06;

     label05:
        r37 = "null";

     label06:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", OR: ");

        r38 = "null";

        if r35 == null goto label07;

        r38 = r35;

     label07:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        r39 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r41 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        r32 = r41;

        i8 = i9;

        $z1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label08;

        r42 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auditTransactions: leaked ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r42.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r29);

        i8 = i9;

        r32 = r41;

     label08:
        r31 = r32;

        i7 = i8;

        goto label01;

     label09:
        if i7 <= 0 goto label10;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Total: ");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" leaked transactions detected and removed.\n");

        r45 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        r45 = null;

     label11:
        return r45;
    }

    public static boolean isDialogCreated(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public void addExtensionMethod(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r3, $r4;
        boolean $z0, $z2;
        java.util.Set $r2;
        gov.nist.core.StackLogger $r5, $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label2;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("NOTIFY Supported Natively");

        goto label2;

     label1:
        $r2 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        return;
    }

    public void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    protected void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Collection r1, $r2;
        java.lang.Throwable $r3;
        gov.nist.javax.sip.stack.MessageProcessor r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r4 := @parameter0: gov.nist.javax.sip.stack.MessageProcessor;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        entermonitor r1;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("added transaction ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r8);

     label1:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        return;
    }

    public void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("added transaction ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r8);

     label1:
        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: void map()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        return;
    }

    public void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.lang.String r2;
        javax.sip.message.Request $r3;
        gov.nist.javax.sip.message.SIPRequest $r4;
        gov.nist.javax.sip.header.Via $r5;
        java.util.concurrent.ConcurrentHashMap $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r4 = (gov.nist.javax.sip.message.SIPRequest) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r2 == null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label1:
        return;
    }

    public java.lang.String auditStack(java.util.Set, long, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        long l0, l1;
        java.lang.String r1, r2, r3, r8, r10, r11, r12;
        java.util.concurrent.ConcurrentHashMap $r5, $r6;
        java.util.Set r7;
        java.lang.StringBuilder $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r7 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditDialogs(java.util.Set,long)>(r7, l0);

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        r2 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap,long)>($r5, l1);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r3 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap,long)>($r6, l1);

        if r1 != null goto label1;

        if r2 != null goto label1;

        r8 = null;

        if r3 == null goto label7;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIP Stack Audit:\n");

        if r1 == null goto label2;

        r10 = r1;

        goto label3;

     label2:
        r10 = "";

     label3:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        if r2 == null goto label4;

        r11 = r2;

        goto label5;

     label4:
        r11 = "";

     label5:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r12 = "";

        if r3 == null goto label6;

        r12 = r3;

     label6:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        return r8;
    }

    public boolean checkBranchId()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean checkBranchId>;

        return $z0;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPClientTransaction $r2;
        gov.nist.javax.sip.stack.MessageChannel r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r3 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.javax.sip.stack.SIPClientTransaction;

        specialinvoke $r2.<gov.nist.javax.sip.stack.SIPClientTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r3);

        virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

        return $r2;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.SipProviderImpl, gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.SipProviderImpl r1;
        gov.nist.javax.sip.message.SIPResponse r2;
        gov.nist.javax.sip.stack.SIPDialog $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.SipProviderImpl;

        r2 := @parameter1: gov.nist.javax.sip.message.SIPResponse;

        $r3 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.SipProviderImpl,gov.nist.javax.sip.message.SIPResponse)>(r1, r2);

        return $r3;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction, gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        java.lang.String r2;
        gov.nist.javax.sip.stack.SIPDialog r3, $r8, r14;
        javax.sip.message.Request $r4;
        gov.nist.javax.sip.message.SIPRequest $r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r9, $r11;
        java.lang.Object $r7, $r10;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPClientTransaction r13;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r13 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        r1 := @parameter1: gov.nist.javax.sip.message.SIPResponse;

        $r4 = virtualinvoke r13.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        $r5 = (gov.nist.javax.sip.message.SIPRequest) $r4;

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        if $r7 == null goto label1;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (gov.nist.javax.sip.stack.SIPDialog) $r10;

        r14 = r3;

        $z0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: boolean isFinalResponse()>();

        if $z0 == 0 goto label2;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

        r14 = r3;

        goto label2;

     label1:
        $r8 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r8.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>(r13, r1);

        r14 = $r8;

     label2:
        return r14;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        gov.nist.javax.sip.stack.SIPDialog r2, $r3, $r8, $r16, r20;
        boolean $z0;
        javax.sip.message.Request $r4;
        gov.nist.javax.sip.message.SIPRequest $r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r9, $r11, $r17;
        java.lang.Object $r7, $r12;
        javax.sip.DialogState $r13, $r14, $r15;
        gov.nist.javax.sip.stack.SIPTransaction r19;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r19 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $z0 = r19 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label6;

        $r4 = virtualinvoke r19.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        $r5 = (gov.nist.javax.sip.message.SIPRequest) $r4;

        r1 = virtualinvoke $r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r7 == null goto label4;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (gov.nist.javax.sip.stack.SIPDialog) $r12;

        $r13 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r13 == null goto label2;

        $r14 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r15 = <javax.sip.DialogState: javax.sip.DialogState EARLY>;

        if $r14 != $r15 goto label1;

        goto label2;

     label1:
        $r16 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r16.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r19);

        r20 = $r16;

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r17.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r16);

        goto label3;

     label2:
        r20 = r2;

     label3:
        goto label5;

     label4:
        $r8 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r8.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r19);

        r20 = $r8;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

     label5:
        goto label7;

     label6:
        $r3 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r19);

        r20 = $r3;

     label7:
        return r20;
    }

    public gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageProcessor, javax.sip.address.Hop) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.address.Hop r1;
        gov.nist.core.Host $r4;
        java.lang.String $r5, $r9;
        gov.nist.core.HostPort $r6;
        int $i0, $i1;
        gov.nist.javax.sip.stack.SIPClientTransaction $r7, $r8, r13;
        gov.nist.javax.sip.message.SIPRequest r10;
        gov.nist.javax.sip.stack.MessageProcessor r11;
        gov.nist.javax.sip.stack.MessageChannel r12;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r10 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r11 := @parameter1: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter2: javax.sip.address.Hop;

        $r4 = new gov.nist.core.Host;

        specialinvoke $r4.<gov.nist.core.Host: void <init>()>();

        $r5 = interfaceinvoke r1.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke $r4.<gov.nist.core.Host: void setHostname(java.lang.String)>($r5);

        $r6 = new gov.nist.core.HostPort;

        specialinvoke $r6.<gov.nist.core.HostPort: void <init>()>();

        virtualinvoke $r6.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r4);

        $i0 = interfaceinvoke r1.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke $r6.<gov.nist.core.HostPort: void setPort(int)>($i0);

        r12 = virtualinvoke r11.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>($r6);

        if r12 != null goto label1;

        return null;

     label1:
        r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r10, r12);

        $r7 = (gov.nist.javax.sip.stack.SIPClientTransaction) r13;

        $i1 = interfaceinvoke r1.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke $r7.<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaPort(int)>($i1);

        $r8 = (gov.nist.javax.sip.stack.SIPClientTransaction) r13;

        $r9 = interfaceinvoke r1.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaHost(java.lang.String)>($r9);

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r13);

        return r13;
    }

    protected gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(java.net.InetAddress, int, java.lang.String) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1, $r9, $r11, $r13;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r5;
        gov.nist.javax.sip.stack.TCPMessageProcessor $r6;
        gov.nist.javax.sip.stack.UDPMessageProcessor $r7;
        java.lang.Throwable $r8, $r12;
        java.lang.ClassNotFoundException $r10;
        java.net.InetAddress r14;
        java.lang.String r15;
        gov.nist.javax.sip.stack.MessageProcessor r19;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r14 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r15 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("udp");

        if $z0 == 0 goto label1;

        $r7 = new gov.nist.javax.sip.stack.UDPMessageProcessor;

        specialinvoke $r7.<gov.nist.javax.sip.stack.UDPMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r14, r0, i0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r7);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean udpFlag> = 1;

        return $r7;

     label1:
        $z1 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tcp");

        if $z1 == 0 goto label2;

        $r6 = new gov.nist.javax.sip.stack.TCPMessageProcessor;

        specialinvoke $r6.<gov.nist.javax.sip.stack.TCPMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r14, r0, i0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r6);

        return $r6;

     label2:
        $z2 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tls");

        if $z2 == 0 goto label3;

        $r5 = new gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke $r5.<gov.nist.javax.sip.stack.TLSMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r14, r0, i0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r5);

        return $r5;

     label3:
        $z3 = virtualinvoke r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sctp");

        if $z3 == 0 goto label9;

     label4:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("gov.nist.javax.sip.stack.sctp.SCTPMessageProcessor");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r19 = (gov.nist.javax.sip.stack.MessageProcessor) $r4;

        virtualinvoke r19.<gov.nist.javax.sip.stack.MessageProcessor: void initialize(java.net.InetAddress,int,gov.nist.javax.sip.stack.SIPTransactionStack)>(r14, i0, r0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>(r19);

     label5:
        return r19;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error initializing SCTP", $r12);

        throw $r13;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error initializing SCTP", $r8);

        throw $r9;

     label8:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SCTP not supported (needs Java 7 and SCTP jar in classpath)");

        throw $r11;

     label9:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad transport");

        throw $r1;

        catch java.lang.ClassNotFoundException from label4 to label5 with label8;
        catch java.lang.InstantiationException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
    }

    public gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String, int, javax.sip.address.Hop) throws java.net.UnknownHostException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0, $i1, $i2;
        javax.sip.address.Hop r1;
        java.util.Iterator r3;
        gov.nist.core.Host $r5;
        java.lang.String $r6, $r10, $r11, $r13, r20;
        gov.nist.core.HostPort $r7;
        java.util.Collection $r8;
        java.lang.Object $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.net.InetAddress $r12;
        java.lang.Throwable $r14, $r17;
        gov.nist.core.StackLogger $r15, $r16, $r18, $r19;
        gov.nist.javax.sip.stack.MessageChannel r22, r24;
        gov.nist.javax.sip.stack.MessageProcessor r23;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r20 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: javax.sip.address.Hop;

        $r5 = new gov.nist.core.Host;

        specialinvoke $r5.<gov.nist.core.Host: void <init>()>();

        $r6 = interfaceinvoke r1.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke $r5.<gov.nist.core.Host: void setHostname(java.lang.String)>($r6);

        $r7 = new gov.nist.core.HostPort;

        specialinvoke $r7.<gov.nist.core.HostPort: void <init>()>();

        virtualinvoke $r7.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r5);

        $i1 = interfaceinvoke r1.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke $r7.<gov.nist.core.HostPort: void setPort(int)>($i1);

        r22 = null;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        if r22 != null goto label7;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r23 = (gov.nist.javax.sip.stack.MessageProcessor) $r9;

        $r10 = interfaceinvoke r1.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r11 = virtualinvoke r23.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r23.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r13 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z1 = virtualinvoke r20.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label1;

        $i2 = virtualinvoke r23.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        if i0 != $i2 goto label1;

     label2:
        r24 = virtualinvoke r23.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>($r7);

     label3:
        r22 = r24;

        goto label1;

     label4:
        $r14 := @caughtexception;

        r24 = r22;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r15.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label3;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r16.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r14);

        r24 = r22;

        goto label3;

     label5:
        $r17 := @caughtexception;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r18.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label6;

        $r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r19.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r17);

     label6:
        throw $r17;

     label7:
        return r22;

        catch java.net.UnknownHostException from label2 to label3 with label5;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.MessageChannel r1;
        int i0, $i1, $i2, $i3, i5;
        float f0, $f1, $f2;
        boolean $z0, z1;
        java.util.concurrent.ConcurrentHashMap $r2;
        double $d0, $d1, $d2;
        byte $b4;
        gov.nist.javax.sip.stack.SIPServerTransaction $r3, $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.MessageChannel;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedServerTransactionTableSize>;

        if $z0 == 0 goto label1;

        $r4 = new gov.nist.javax.sip.stack.SIPServerTransaction;

        specialinvoke $r4.<gov.nist.javax.sip.stack.SIPServerTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r1);

        return $r4;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        i5 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: int size()>();

        i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableLowaterMark>;

        $i1 = i5 - i0;

        $f2 = (float) $i1;

        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableHighwaterMark>;

        $i3 = $i2 - i0;

        $f1 = (float) $i3;

        f0 = $f2 / $f1;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = (double) f0;

        $d2 = 1.0 - $d1;

        $b4 = $d0 cmpl $d2;

        if $b4 <= 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label4;

        return null;

     label4:
        $r3 = new gov.nist.javax.sip.stack.SIPServerTransaction;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPServerTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r1);

        return $r3;
    }

    protected void decrementActiveClientTransactionCount()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap r1, $r4;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableLowaterMark>;

        if $i0 > $i1 goto label6;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize>;

        if $z0 != 0 goto label6;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        entermonitor r1;

     label1:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r4.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.SipListener r1;
        java.lang.Object $r2;
        gov.nist.javax.sip.SipStackImpl $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        gov.nist.javax.sip.stack.SIPDialogErrorEvent r5;
        gov.nist.javax.sip.stack.SIPDialog r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r5 := @parameter0: gov.nist.javax.sip.stack.SIPDialogErrorEvent;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: java.lang.Object getSource()>();

        r6 = (gov.nist.javax.sip.stack.SIPDialog) $r2;

        $r3 = (gov.nist.javax.sip.SipStackImpl) r0;

        r1 = virtualinvoke $r3.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener getSipListener()>();

     label2:
        if r6 == null goto label4;

     label3:
        $z0 = r1 instanceof gov.nist.javax.sip.SipListenerExt;

        if $z0 != 0 goto label4;

        virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: void delete()>();

     label4:
        exitmonitor r0;

        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void disableLogging()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r1.<gov.nist.core.StackLogger: void disableLogging()>();

        return;
    }

    public void enableLogging()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r1.<gov.nist.core.StackLogger: void enableLogging()>();

        return;
    }

    public gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest, boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        gov.nist.core.StackLogger $r2, $r5, $r6, r19;
        java.util.concurrent.ConcurrentHashMap $r3, $r9;
        java.util.Collection $r4, $r10;
        java.lang.Object $r7, $r11;
        gov.nist.javax.sip.stack.SIPTransaction $r8, $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r18;
        java.util.Iterator r21, r23;
        gov.nist.javax.sip.stack.SIPServerTransaction r22;
        gov.nist.javax.sip.stack.SIPClientTransaction r24;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        z0 := @parameter1: boolean;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label1;

        r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findCancelTransaction request= \n");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nfindCancelRequest isServer=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r19.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r18);

     label1:
        if z0 == 0 goto label5;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r21 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r11 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (gov.nist.javax.sip.stack.SIPTransaction) $r11;

        r22 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r12;

        $z6 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z6 == 0 goto label3;

        return r22;

     label3:
        goto label2;

     label4:
        goto label8;

     label5:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r23 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r7 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (gov.nist.javax.sip.stack.SIPTransaction) $r7;

        r24 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r8;

        $z4 = virtualinvoke r24.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z4 == 0 goto label7;

        return r24;

     label7:
        goto label6;

     label8:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label9;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not find transaction for cancel request");

     label9:
        return null;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findMergedTransaction(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1, r23;
        java.util.Iterator r2;
        gov.nist.javax.sip.stack.SIPDialog r3;
        java.lang.String $r4, $r16, $r17, r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.ConcurrentHashMap $r5, $r7;
        java.lang.Object $r6, $r9;
        java.util.Collection $r8;
        javax.sip.Dialog $r10;
        javax.sip.Transaction $r11, $r12, $r13, $r14, $r18;
        gov.nist.javax.sip.stack.SIPServerTransaction $r15, $r19, r21, r22;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 != 0 goto label1;

        return null;

     label1:
        r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r20);

        r21 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r6;

        if r20 != null goto label2;

        return null;

     label2:
        if r21 == null goto label3;

        $z4 = virtualinvoke r21.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z4 != 0 goto label3;

        return r21;

     label3:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (javax.sip.Dialog) $r9;

        r3 = (gov.nist.javax.sip.stack.SIPDialog) $r10;

        $r11 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        if $r11 == null goto label5;

        $r12 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $z1 = $r12 instanceof javax.sip.ServerTransaction;

        if $z1 == 0 goto label5;

        $r13 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        r22 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r13;

        $r14 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $r15 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r14;

        r23 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $z2 = virtualinvoke r22.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z2 != 0 goto label5;

        $r16 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $r17 = virtualinvoke r23.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z3 == 0 goto label5;

        $r18 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $r19 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r18;

        return $r19;

     label5:
        goto label4;

     label6:
        return null;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.String $r6, $r11, $r13;
        java.lang.Object $r7;
        gov.nist.javax.sip.stack.SIPServerTransaction $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("looking for pending tx for :");

        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r13);

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r7 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r7;

        return $r8;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.ListeningPointImpl)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Iterator r1;
        java.lang.String r2, r3, $r12, $r14, $r18, $r20, $r23, $r24, $r25, $r26, $r27, $r31, $r35, $r37, $r41;
        gov.nist.javax.sip.header.Event r4, r48;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.concurrent.ConcurrentHashMap $r5, $r36;
        java.util.Collection $r6;
        gov.nist.core.StackLogger $r7, $r10, $r16, $r21, $r28, $r29, $r32, $r33, $r39, r44, r46, r49, r52, r54, r56, r58, r61, r63, r66;
        javax.sip.header.ToHeader $r8;
        javax.sip.header.Header $r9;
        java.lang.StringBuilder $r11, $r22, $r30, $r34, $r40, r45, r53, r55, r57, r59;
        java.lang.Object $r13;
        gov.nist.javax.sip.header.From $r15;
        javax.sip.header.CallIdHeader $r17;
        gov.nist.javax.sip.header.CallID $r19;
        int $i0;
        java.lang.Throwable $r38;
        gov.nist.javax.sip.message.SIPRequest r42;
        gov.nist.javax.sip.ListeningPointImpl r43;
        gov.nist.javax.sip.stack.SIPClientTransaction r51, r60;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r42 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r43 := @parameter1: gov.nist.javax.sip.ListeningPointImpl;

     label01:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r7.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label02;

        r44 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ct table size = ");

        $r36 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $i0 = virtualinvoke $r36.<java.util.concurrent.ConcurrentHashMap: int size()>();

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r37 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r44.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r37);

     label02:
        $r8 = virtualinvoke r42.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ToHeader getTo()>();

        r2 = interfaceinvoke $r8.<javax.sip.header.ToHeader: java.lang.String getTag()>();

     label03:
        if r2 != null goto label05;

        $r33 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z11 = interfaceinvoke $r33.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label04;

        r46 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(null);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r46.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r35);

     label04:
        return null;

     label05:
        $r9 = virtualinvoke r42.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Event");

        r48 = (gov.nist.javax.sip.header.Event) $r9;

     label06:
        if r48 != null goto label10;

     label07:
        $r28 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z9 = interfaceinvoke $r28.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label08;

        $r32 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("event Header is null -- returning null");

     label08:
        $r29 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z10 = interfaceinvoke $r29.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label09;

        r49 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(null);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r49.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r31);

     label09:
        return null;

     label10:
        $z13 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label22;

        $r13 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r51 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r13;

        $r14 = virtualinvoke r51.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("SUBSCRIBE");

        if $z3 != 0 goto label12;

     label11:
        goto label10;

     label12:
        $r15 = r51.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.From 'from'>;

        r3 = virtualinvoke $r15.<gov.nist.javax.sip.header.From: java.lang.String getTag()>();

        r4 = r51.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.Event event>;

     label13:
        if r4 != null goto label14;

        goto label10;

     label14:
        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r16.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label15;

        r52 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ct.fromTag = ");

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r52.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r24);

        r54 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thisToTag = ");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r54.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r25);

        r56 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hisEvent = ");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r26 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r56.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

        r58 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eventHdr ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        $r27 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r58.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r27);

     label15:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z5 == 0 goto label21;

     label16:
        if r4 == null goto label21;

     label17:
        $z6 = virtualinvoke r48.<gov.nist.javax.sip.header.Event: boolean match(gov.nist.javax.sip.header.Event)>(r4);

        if $z6 == 0 goto label21;

        $r17 = virtualinvoke r42.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CallIdHeader getCallId()>();

        $r18 = interfaceinvoke $r17.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

        $r19 = r51.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.CallID callId>;

        $r20 = virtualinvoke $r19.<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()>();

        $z7 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r20);

        if $z7 == 0 goto label21;

        z0 = virtualinvoke r51.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean acquireSem()>();

     label18:
        r60 = null;

        if z0 == 0 goto label19;

        r60 = r51;

     label19:
        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z8 = interfaceinvoke $r21.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label20;

        r61 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r60);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r61.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r23);

     label20:
        return r60;

     label21:
        goto label10;

     label22:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r10.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label23;

        r63 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(null);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r63.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label23:
        return null;

     label24:
        $r38 := @caughtexception;

        $r39 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z12 = interfaceinvoke $r39.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label25;

        r66 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(null);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r66.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r41);

     label25:
        throw $r38;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
    }

    public gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage, boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.header.Via $r1, $r19;
        java.lang.String $r2, $r7, $r11, $r17, $r18, $r20, $r26, $r32, $r34, $r38, r42, r54;
        java.util.concurrent.ConcurrentHashMap $r3, $r13, $r21, $r27, $r33;
        java.util.Collection $r4, $r22;
        gov.nist.core.StackLogger $r5, $r9, $r12, $r15, $r24, $r29, $r30, $r36, r44, r46, r50, r55, r58, r62, r64, r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10, z11, z12, $z13, z14;
        java.lang.StringBuilder $r6, $r10, $r16, $r25, $r31, $r37, r45, r56;
        java.lang.Object $r8, $r14, $r23, $r28;
        java.lang.Throwable $r35;
        gov.nist.javax.sip.message.SIPMessage r39;
        gov.nist.javax.sip.stack.SIPTransaction r40, r41, r43, r52, r53, r57;
        java.util.Iterator r48, r60;
        gov.nist.javax.sip.stack.SIPServerTransaction r49;
        gov.nist.javax.sip.stack.SIPClientTransaction r61;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r39 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        z8 := @parameter1: boolean;

        r40 = null;

        if z8 == 0 goto label40;

        r41 = null;

     label01:
        $r19 = virtualinvoke r39.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r20 = virtualinvoke $r19.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r20 == null goto label28;

     label02:
        r41 = null;

     label03:
        r42 = virtualinvoke r39.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

     label04:
        r41 = null;

     label05:
        $r27 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r28 = virtualinvoke $r27.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r42);

        r43 = (gov.nist.javax.sip.stack.SIPTransaction) $r28;

     label06:
        r41 = r43;

     label07:
        $r29 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z5 = interfaceinvoke $r29.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label24;

     label08:
        r41 = r43;

     label09:
        r44 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

     label10:
        r41 = r43;

     label11:
        r45 = new java.lang.StringBuilder;

     label12:
        r41 = r43;

     label13:
        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

     label14:
        r41 = r43;

     label15:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("serverTx: looking for key ");

     label16:
        r41 = r43;

     label17:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

     label18:
        r41 = r43;

     label19:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" existing=");

     label20:
        r41 = r43;

     label21:
        $r33 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

     label22:
        r41 = r43;

     label23:
        $r34 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r44.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r34);

     label24:
        r41 = r43;

     label25:
        z9 = virtualinvoke r42.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

     label26:
        r40 = r43;

        if z9 == 0 goto label28;

        $r30 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z6 = interfaceinvoke $r30.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label27;

        r46 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r46.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r32);

     label27:
        return r43;

     label28:
        r41 = r40;

     label29:
        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r22 = virtualinvoke $r21.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r48 = interfaceinvoke $r22.<java.util.Collection: java.util.Iterator iterator()>();

     label30:
        r41 = r40;

     label31:
        $z10 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label39;

     label32:
        r41 = r40;

     label33:
        $r23 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r23;

     label34:
        r41 = r40;

     label35:
        z11 = virtualinvoke r49.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r39);

     label36:
        if z11 == 0 goto label38;

        $r24 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z4 = interfaceinvoke $r24.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label37;

        r50 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r50.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

     label37:
        return r49;

     label38:
        goto label30;

     label39:
        r52 = r40;

        goto label75;

     label40:
        r53 = null;

        r41 = null;

     label41:
        $r1 = virtualinvoke r39.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r2 == null goto label64;

     label42:
        r41 = null;

     label43:
        r54 = virtualinvoke r39.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

     label44:
        r41 = null;

     label45:
        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r12.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label58;

     label46:
        r41 = null;

     label47:
        r55 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

     label48:
        r41 = null;

     label49:
        r56 = new java.lang.StringBuilder;

     label50:
        r41 = null;

     label51:
        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

     label52:
        r41 = null;

     label53:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clientTx: looking for key ");

     label54:
        r41 = null;

     label55:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

     label56:
        r41 = null;

     label57:
        $r18 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r55.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r18);

     label58:
        r41 = null;

     label59:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r54);

        r57 = (gov.nist.javax.sip.stack.SIPTransaction) $r14;

     label60:
        r41 = r57;

     label61:
        z12 = virtualinvoke r54.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

     label62:
        r53 = r57;

        if z12 == 0 goto label64;

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z3 = interfaceinvoke $r15.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label63;

        r58 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r57);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r58.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r17);

     label63:
        return r57;

     label64:
        r41 = r53;

     label65:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r60 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label66:
        r52 = r53;

        r41 = r53;

     label67:
        $z13 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label75;

     label68:
        r41 = r53;

     label69:
        $r8 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r8;

     label70:
        r41 = r53;

     label71:
        z14 = virtualinvoke r61.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r39);

     label72:
        if z14 == 0 goto label74;

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z1 = interfaceinvoke $r9.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label73;

        r62 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r61);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r62.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label73:
        return r61;

     label74:
        goto label66;

     label75:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z0 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label76;

        r64 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r52);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r64.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label76:
        return r52;

     label77:
        $r35 := @caughtexception;

        $r36 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z7 = interfaceinvoke $r36.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label78;

        r67 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r67.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r38);

     label78:
        throw $r35;

        catch java.lang.Throwable from label01 to label02 with label77;
        catch java.lang.Throwable from label03 to label04 with label77;
        catch java.lang.Throwable from label05 to label06 with label77;
        catch java.lang.Throwable from label07 to label08 with label77;
        catch java.lang.Throwable from label09 to label10 with label77;
        catch java.lang.Throwable from label11 to label12 with label77;
        catch java.lang.Throwable from label13 to label14 with label77;
        catch java.lang.Throwable from label15 to label16 with label77;
        catch java.lang.Throwable from label17 to label18 with label77;
        catch java.lang.Throwable from label19 to label20 with label77;
        catch java.lang.Throwable from label21 to label22 with label77;
        catch java.lang.Throwable from label23 to label24 with label77;
        catch java.lang.Throwable from label25 to label26 with label77;
        catch java.lang.Throwable from label29 to label30 with label77;
        catch java.lang.Throwable from label31 to label32 with label77;
        catch java.lang.Throwable from label33 to label34 with label77;
        catch java.lang.Throwable from label35 to label36 with label77;
        catch java.lang.Throwable from label41 to label42 with label77;
        catch java.lang.Throwable from label43 to label44 with label77;
        catch java.lang.Throwable from label45 to label46 with label77;
        catch java.lang.Throwable from label47 to label48 with label77;
        catch java.lang.Throwable from label49 to label50 with label77;
        catch java.lang.Throwable from label51 to label52 with label77;
        catch java.lang.Throwable from label53 to label54 with label77;
        catch java.lang.Throwable from label55 to label56 with label77;
        catch java.lang.Throwable from label57 to label58 with label77;
        catch java.lang.Throwable from label59 to label60 with label77;
        catch java.lang.Throwable from label61 to label62 with label77;
        catch java.lang.Throwable from label65 to label66 with label77;
        catch java.lang.Throwable from label67 to label68 with label77;
        catch java.lang.Throwable from label69 to label70 with label77;
        catch java.lang.Throwable from label71 to label72 with label77;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        gov.nist.javax.sip.header.Via $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        gov.nist.javax.sip.stack.SIPServerTransaction $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r5 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r5;

        return $r6;
    }

    public int getActiveClientTransactionCount()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public gov.nist.core.net.AddressResolver getAddressResolver()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.AddressResolver $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver>;

        return $r1;
    }

    public int getClientTransactionTableSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r13;
        gov.nist.javax.sip.stack.SIPDialog r2;
        gov.nist.core.StackLogger r3, $r7;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.lang.StringBuilder $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (gov.nist.javax.sip.stack.SIPDialog) $r6;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r7.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDialog(");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") : returning ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r13);

     label1:
        return r2;
    }

    public java.util.Collection getDialogs()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.HashSet $r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r5;
        java.util.Collection $r4, $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke $r2.<java.util.HashSet: boolean addAll(java.util.Collection)>($r4);

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke $r2.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        return $r2;
    }

    public java.util.Collection getDialogs(javax.sip.DialogState)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.DialogState r1, $r6, $r10, $r11;
        java.util.Iterator r3;
        gov.nist.javax.sip.stack.SIPDialog r4;
        java.util.HashSet $r5;
        boolean $z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r7, $r12;
        java.util.Collection $r8, $r13;
        java.lang.Object $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: javax.sip.DialogState;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = <javax.sip.DialogState: javax.sip.DialogState EARLY>;

        $z0 = virtualinvoke $r6.<javax.sip.DialogState: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke $r5.<java.util.HashSet: boolean addAll(java.util.Collection)>($r13);

        goto label4;

     label1:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (gov.nist.javax.sip.stack.SIPDialog) $r9;

        $r10 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r10 == null goto label3;

        $r11 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $z2 = virtualinvoke $r11.<javax.sip.DialogState: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

     label3:
        goto label2;

     label4:
        return $r5;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        gov.nist.javax.sip.stack.SIPClientTransaction $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r3;

        return $r4;
    }

    public java.lang.String getHostAddress()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress>;

        return $r1;
    }

    public javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r4, $r5, r13, r14;
        java.lang.StringBuffer $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object $r6;
        javax.sip.Dialog $r7;
        gov.nist.javax.sip.header.extensions.JoinHeader r12;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r12 := @parameter0: gov.nist.javax.sip.header.extensions.JoinHeader;

        r13 = interfaceinvoke r12.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getCallId()>();

        r1 = interfaceinvoke r12.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getFromTag()>();

        r14 = interfaceinvoke r12.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getToTag()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>(r13);

        if r14 == null goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

     label1:
        if r1 == null goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

     label2:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (javax.sip.Dialog) $r6;

        return $r7;
    }

    public int getMaxMessageSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize>;

        return $i0;
    }

    protected gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Collection r1, $r3;
        gov.nist.javax.sip.stack.MessageProcessor[] $r2, r6;
        java.lang.Object[] $r4;
        java.lang.Throwable $r5;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        entermonitor r1;

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        $r2 = newarray (gov.nist.javax.sip.stack.MessageProcessor)[0];

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r6 = (gov.nist.javax.sip.stack.MessageProcessor[]) $r4;

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public gov.nist.core.net.NetworkLayer getNetworkLayer()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.NetworkLayer r1;
        gov.nist.core.net.DefaultNetworkLayer $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer networkLayer>;

        if r1 != null goto label1;

        $r2 = <gov.nist.core.net.DefaultNetworkLayer: gov.nist.core.net.DefaultNetworkLayer SINGLETON>;

        return $r2;

     label1:
        return r1;
    }

    public javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest) throws javax.sip.SipException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        boolean $z0, $z1;
        javax.sip.address.URI $r2;
        gov.nist.javax.sip.stack.DefaultRouter $r3;
        javax.sip.address.Hop $r4, $r6, $r7;
        gov.nist.javax.sip.header.RouteList $r5;
        javax.sip.address.Router r8, r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean useRouterForAll>;

        if $z0 == 0 goto label2;

        r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if r8 == null goto label1;

        $r7 = interfaceinvoke r8.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r7;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $z1 = interfaceinvoke $r2.<javax.sip.address.URI: boolean isSipURI()>();

        if $z1 != 0 goto label5;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RouteList getRouteHeaders()>();

        if $r5 == null goto label3;

        goto label5;

     label3:
        r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if r9 == null goto label4;

        $r6 = interfaceinvoke r9.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r6;

     label4:
        return null;

     label5:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r4;
    }

    public int getReceiveUdpBufferSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int receiveUdpBufferSize>;

        return $i0;
    }

    public javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Iterator r1;
        java.lang.String $r3, $r14, r20, r21, r22, r24;
        gov.nist.core.StackLogger $r4, r25;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r5, $r7;
        java.lang.Object $r6, $r9, r28;
        java.util.Collection $r8;
        gov.nist.javax.sip.stack.SIPDialog $r10;
        gov.nist.javax.sip.header.extensions.ReplacesHeader r19;
        javax.sip.Dialog r27, r32;
        gov.nist.javax.sip.stack.SIPClientTransaction r29;
        java.lang.StringBuffer r30;
        java.lang.StringBuilder r31;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r19 := @parameter0: gov.nist.javax.sip.header.extensions.ReplacesHeader;

        r20 = interfaceinvoke r19.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getCallId()>();

        r21 = interfaceinvoke r19.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getFromTag()>();

        r22 = interfaceinvoke r19.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getToTag()>();

        r30 = new java.lang.StringBuffer;

        specialinvoke r30.<java.lang.StringBuffer: void <init>(java.lang.String)>(r20);

        if r22 == null goto label1;

        virtualinvoke r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r22);

     label1:
        if r21 == null goto label2;

        virtualinvoke r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

     label2:
        $r3 = virtualinvoke r30.<java.lang.StringBuffer: java.lang.String toString()>();

        r24 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        r25 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking for dialog ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r14 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r25.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label3:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r24);

        r27 = (javax.sip.Dialog) $r6;

        r28 = r27;

        if r27 != null goto label6;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        r28 = r27;

        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r29 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r9;

        $r10 = virtualinvoke r29.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r24);

        if $r10 == null goto label5;

        r28 = virtualinvoke r29.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r24);

        goto label6;

     label5:
        goto label4;

     label6:
        r32 = (javax.sip.Dialog) r28;

        return r32;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        gov.nist.javax.sip.stack.SIPServerTransaction $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r3;

        return $r4;
    }

    public javax.sip.address.Router getRouter()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.address.Router $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        return $r1;
    }

    public javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.header.RequestLine $r1;
        boolean $z0, $z1, $z2;
        javax.sip.address.URI $r2, $r5;
        java.lang.String $r3, $r6;
        gov.nist.javax.sip.stack.DefaultRouter $r4, $r7, $r9;
        javax.sip.address.Router $r8, r11;
        gov.nist.javax.sip.message.SIPRequest r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r10 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r1 = virtualinvoke r10.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()>();

        if $r1 != null goto label1;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r9;

     label1:
        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean useRouterForAll>;

        if $z0 == 0 goto label2;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        return $r8;

     label2:
        $r2 = virtualinvoke r10.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $r3 = interfaceinvoke $r2.<javax.sip.address.URI: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("sip");

        if $z1 != 0 goto label5;

        $r5 = virtualinvoke r10.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $r6 = interfaceinvoke $r5.<javax.sip.address.URI: java.lang.String getScheme()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("sips");

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if r11 == null goto label4;

        return r11;

     label4:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r7;

     label5:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r4;
    }

    public int getSendUdpBufferSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int sendUdpBufferSize>;

        return $i0;
    }

    public gov.nist.core.ServerLogger getServerLogger()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.ServerLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        return $r1;
    }

    public int getServerTransactionTableSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public gov.nist.core.StackLogger getStackLogger()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        return $r1;
    }

    public gov.nist.core.ThreadAuditor getThreadAuditor()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.ThreadAuditor $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor threadAuditor>;

        return $r1;
    }

    public java.util.Timer getTimer()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Timer $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        return $r1;
    }

    public boolean isAlive()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit>;

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean isCancelClientTransactionChecked()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cancelClientTransactionChecked>;

        return $z0;
    }

    public boolean isEventForked(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r12;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0, $z1, $z2;
        java.util.HashSet $r5, $r10;
        java.lang.StringBuilder $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isEventForked: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returning ");

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents>;

        $z2 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents>;

        $z1 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        return $z1;
    }

    public boolean isLogStackTraceOnMessageSend()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend>;

        return $z0;
    }

    public boolean isLoggingEnabled()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger r1;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        if r1 != null goto label1;

        z0 = 0;

        goto label2;

     label1:
        z0 = interfaceinvoke r1.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

     label2:
        return z0;
    }

    public boolean isNon2XXAckPassedToListener()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean non2XXAckPassedToListener>;

        return $z0;
    }

    public boolean isRemoteTagReassignmentAllowed()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean remoteTagReassignmentAllowed>;

        return $z0;
    }

    public boolean isRfc2543Supported()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean rfc2543Supported>;

        return $z0;
    }

    public boolean isTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.message.Request $r1;
        gov.nist.javax.sip.message.SIPRequest $r2;
        gov.nist.javax.sip.header.Via $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPServerTransaction r5;
        java.lang.String r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r5 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r1 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r2 = (gov.nist.javax.sip.message.SIPRequest) $r1;

        $r3 = virtualinvoke $r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r6 = virtualinvoke $r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)>(r6);

        return $z0;
    }

    public void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $z0 = r1.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMapped>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        r1.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMapped> = 1;

        return;
    }

    public gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r7, $r8, $r9, $r15, $r19, $r23;
        java.util.Iterator r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r5;
        java.lang.Object $r4, $r24;
        java.util.Collection $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.javax.sip.stack.MessageChannel $r10, r28;
        gov.nist.javax.sip.stack.StackMessageFactory $r11;
        gov.nist.javax.sip.stack.ServerRequestInterface $r12;
        java.lang.StringBuilder $r13;
        gov.nist.javax.sip.header.Via $r18;
        java.lang.Exception $r25;
        gov.nist.core.StackLogger $r26, $r36, r37;
        gov.nist.javax.sip.message.SIPRequest r27;
        gov.nist.javax.sip.stack.SIPServerTransaction r29, r30, r31, r32, r33, r34, r35;
        gov.nist.javax.sip.message.SIPResponse r39;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r27 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r28 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r1 = virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: void setMessageChannel(java.lang.Object)>(r28);

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r29 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r4;

        if r29 == null goto label01;

        r30 = r29;

        $z6 = virtualinvoke r29.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r27);

        if $z6 != 0 goto label06;

     label01:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        r31 = null;

        r32 = null;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z0 != 0 goto label03;

     label02:
        r31 = r32;

        $z8 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label03;

        r31 = r32;

        if r32 != null goto label03;

        $r24 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r33 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r24;

        $z5 = virtualinvoke r33.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r27);

        if $z5 == 0 goto label02;

        r32 = r33;

        goto label02;

     label03:
        r30 = r31;

        if r31 != null goto label06;

        r34 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)>(r27);

        if r34 == null goto label05;

        virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>(r34);

        if r34 == null goto label04;

        $z4 = virtualinvoke r34.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

        if $z4 == 0 goto label04;

        return r34;

     label04:
        return null;

     label05:
        r35 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)>(r28);

        r30 = r35;

        if r35 == null goto label06;

        virtualinvoke r35.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r27);

        virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>(r35);

        r30 = r35;

     label06:
        $r36 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z9 = interfaceinvoke $r36.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label07;

        r37 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("newSIPServerRequest( ");

        $r15 = virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r18 = virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r19 = virtualinvoke $r18.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r23 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r37.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r23);

     label07:
        if r30 == null goto label08;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        $r12 = interfaceinvoke $r11.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r27, r30);

        virtualinvoke r30.<gov.nist.javax.sip.stack.SIPServerTransaction: void setRequestInterface(gov.nist.javax.sip.stack.ServerRequestInterface)>($r12);

     label08:
        if r30 == null goto label09;

        $z3 = virtualinvoke r30.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

        if $z3 == 0 goto label09;

        return r30;

     label09:
        if r30 == null goto label14;

     label10:
        $z1 = virtualinvoke r30.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r27);

        if $z1 == 0 goto label11;

        $r8 = virtualinvoke r30.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getMethod()>();

        $r9 = virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label11;

        r39 = virtualinvoke r27.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(100);

        virtualinvoke r39.<gov.nist.javax.sip.message.SIPResponse: void removeContent()>();

        $r10 = virtualinvoke r30.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        virtualinvoke $r10.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r39);

     label11:
        goto label13;

     label12:
        $r25 := @caughtexception;

        $z7 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label13;

        $r26 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r26.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Exception occured sending TRYING");

     label13:
        return null;

     label14:
        return null;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    public gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.MessageChannel r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.concurrent.ConcurrentHashMap $r2, $r4;
        java.lang.Object $r3, $r14;
        java.util.Collection $r5;
        gov.nist.core.StackLogger $r6, $r7, $r9, $r10, $r11, $r22;
        gov.nist.javax.sip.stack.StackMessageFactory $r8, $r12;
        long $l0, $l1;
        gov.nist.javax.sip.stack.ServerResponseInterface $r13, r23;
        gov.nist.javax.sip.message.SIPResponse r15;
        java.lang.String r16;
        gov.nist.javax.sip.stack.SIPClientTransaction r17, r18, r20, r21;
        java.util.Iterator r19;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r15 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r1 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r16 = virtualinvoke r15.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r3;

        if r17 == null goto label01;

        r18 = r17;

        $z5 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r15);

        if $z5 != 0 goto label05;

        r18 = r17;

        $z6 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z6 != 0 goto label05;

     label01:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r19 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        r20 = null;

     label02:
        $z7 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label03;

        if r20 != null goto label03;

        $r14 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r14;

        $z4 = virtualinvoke r21.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r15);

        if $z4 == 0 goto label02;

        r20 = r21;

        goto label02;

     label03:
        r18 = r20;

        if r20 != null goto label05;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r11.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z3 == 0 goto label04;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r1.<gov.nist.javax.sip.stack.MessageChannel: void logResponse(gov.nist.javax.sip.message.SIPResponse,long,java.lang.String)>(r15, $l1, "before processing");

     label04:
        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        $r13 = interfaceinvoke $r12.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r15, r1);

        return $r13;

     label05:
        z0 = virtualinvoke r18.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean acquireSem()>();

        $r22 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z8 = interfaceinvoke $r22.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z8 == 0 goto label06;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r18.<gov.nist.javax.sip.stack.SIPClientTransaction: void logResponse(gov.nist.javax.sip.message.SIPResponse,long,java.lang.String)>(r15, $l0, "before processing");

     label06:
        if z0 == 0 goto label09;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        r23 = interfaceinvoke $r8.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r15, r18);

        if r23 == null goto label07;

        virtualinvoke r18.<gov.nist.javax.sip.stack.SIPClientTransaction: void setResponseInterface(gov.nist.javax.sip.stack.ServerResponseInterface)>(r23);

        goto label10;

     label07:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r9.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label08;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("returning null - serverResponseInterface is null!");

     label08:
        virtualinvoke r18.<gov.nist.javax.sip.stack.SIPClientTransaction: void releaseSem()>();

        return null;

     label09:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r6.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label10;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r7.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not aquire semaphore !!");

     label10:
        if z0 == 0 goto label11;

        return r18;

     label11:
        return null;
    }

    public java.net.SocketAddress obtainLocalAddress(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        gov.nist.javax.sip.stack.IOHandler $r3;
        java.net.SocketAddress $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: java.net.SocketAddress obtainLocalAddress(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        return $r4;
    }

    public void printDialogTable()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r6;
        java.util.concurrent.ConcurrentHashMap $r3, $r8;
        java.lang.String $r5, $r10;
        gov.nist.core.StackLogger r11;
        java.io.PrintStream r13;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r11 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog table  = ");

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r11.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r5);

        r13 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog table = ");

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        return;
    }

    public void putDialog(gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r14, $r23;
        java.util.concurrent.ConcurrentHashMap $r3, $r6, $r20;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.StackLogger $r4, $r5, $r8, $r15, r25, r27;
        java.lang.StringBuilder $r9, $r16;
        java.lang.Object $r21;
        gov.nist.javax.sip.stack.SIPDialog r24;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r24 := @parameter0: gov.nist.javax.sip.stack.SIPDialog;

        r1 = virtualinvoke r24.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r15.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label1;

        r25 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putDialog: dialog already exists");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in table = ");

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r21 = virtualinvoke $r20.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r25.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r23);

     label1:
        return;

     label2:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label3;

        r27 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putDialog dialogId=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dialog = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r27.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label3:
        virtualinvoke r24.<gov.nist.javax.sip.stack.SIPDialog: void setStack(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label4;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logStackTrace()>();

     label4:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r24);

        return;
    }

    public void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction, gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        gov.nist.javax.sip.message.SIPRequest r4;
        java.lang.String r5;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        r4 := @parameter1: gov.nist.javax.sip.message.SIPRequest;

        r5 = virtualinvoke r4.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        if r5 == null goto label1;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r1);

     label1:
        return;
    }

    public void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.String $r6, $r11;
        java.lang.StringBuilder $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putPendingTransaction: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r6 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        return;
    }

    protected void reInit()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1, $r15;
        boolean $z0;
        java.util.ArrayList $r2;
        gov.nist.javax.sip.stack.IOHandler $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.Timer $r13;
        java.util.concurrent.atomic.AtomicInteger $r14;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r1.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Re-initializing !");

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors> = $r2;

        $r3 = new gov.nist.javax.sip.stack.IOHandler;

        specialinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable> = $r5;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable> = $r8;

        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable> = $r9;

        $r10 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable> = $r12;

        $r13 = new java.util.Timer;

        specialinvoke $r13.<java.util.Timer: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = $r13;

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount> = $r14;

        return;
    }

    public void removeDialog(gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPDialog r1;
        java.lang.String r2, r17;
        boolean $z0, $z1, $z2;
        javax.sip.DialogTerminatedEvent $r3, $r8;
        gov.nist.javax.sip.SipProviderImpl $r4, $r5, $r9, $r10;
        java.util.concurrent.ConcurrentHashMap $r6, $r11, $r13, $r15;
        java.lang.Object $r7;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialog;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        r17 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getEarlyDialogId()>();

        if r17 == null goto label1;

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r17);

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r17);

     label1:
        if r2 == null goto label3;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        if $r7 != r1 goto label2;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $z2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: boolean testAndSetIsDialogTerminatedEventDelivered()>();

        if $z2 != 0 goto label4;

        $r8 = new javax.sip.DialogTerminatedEvent;

        $r9 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        specialinvoke $r8.<javax.sip.DialogTerminatedEvent: void <init>(java.lang.Object,javax.sip.Dialog)>($r9, r1);

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r10.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>($r8, null);

        goto label4;

     label3:
        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog>;

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: boolean testAndSetIsDialogTerminatedEventDelivered()>();

        if $z1 != 0 goto label4;

        $r3 = new javax.sip.DialogTerminatedEvent;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        specialinvoke $r3.<javax.sip.DialogTerminatedEvent: void <init>(java.lang.Object,javax.sip.Dialog)>($r4, r1);

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r5.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>($r3, null);

        goto label4;

     label4:
        return;
    }

    public void removeDialog(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        gov.nist.core.StackLogger $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Silently removing dialog from table");

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void removeFromMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1, $r6;
        boolean $z0;
        javax.sip.message.Request $r2;
        gov.nist.javax.sip.message.SIPRequest $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        gov.nist.javax.sip.stack.SIPServerTransaction r7;
        java.lang.String r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r7 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r1.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Removing tx from merge table ");

     label1:
        $r2 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r3 = (gov.nist.javax.sip.message.SIPRequest) $r2;

        r8 = virtualinvoke $r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        if r8 == null goto label2;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r8);

     label2:
        return;
    }

    protected void removeMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Collection r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        gov.nist.javax.sip.stack.MessageProcessor r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r4 := @parameter0: gov.nist.javax.sip.stack.MessageProcessor;

        r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        entermonitor r1;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        virtualinvoke r4.<gov.nist.javax.sip.stack.MessageProcessor: void stop()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger r2, $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.String $r6, $r10, $r12;
        java.lang.StringBuilder $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removePendingTx: ");

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r6 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r6);

        return;
    }

    public void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        gov.nist.core.StackLogger r2, $r4, $r6, $r18, $r25, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        java.util.concurrent.ConcurrentHashMap $r5, $r19;
        javax.sip.TransactionTerminatedEvent $r7, $r22;
        javax.sip.ClientTransaction $r8;
        java.lang.StringBuilder $r9, $r26;
        java.lang.String $r14, $r15, $r28, $r32, r35, r37, r39;
        int $i0, $i1, $i2;
        gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask $r16;
        long $l3;
        java.util.Timer $r17;
        gov.nist.javax.sip.stack.SIPServerTransaction $r20, $r21, $r24;
        javax.sip.ServerTransaction $r23;
        java.lang.Object r36, r40;
        gov.nist.javax.sip.SipProviderImpl r38, r43;
        gov.nist.javax.sip.stack.SIPClientTransaction r41;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        r33 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Transaction = ");

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction = ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r33.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r32);

     label1:
        $z1 = r1 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label5;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z5 = interfaceinvoke $r18.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label2;

        $r25 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r25.<gov.nist.core.StackLogger: void logStackTrace()>();

     label2:
        r35 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        r36 = virtualinvoke $r19.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r35);

        r37 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()>();

        $r20 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r20);

        $r21 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>($r21);

        $z7 = virtualinvoke r37.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("INVITE");

        if $z7 == 0 goto label3;

        $r24 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeFromMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction)>($r24);

     label3:
        r38 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r36 == null goto label4;

        $z8 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: boolean testAndSetTransactionTerminatedEvent()>();

        if $z8 == 0 goto label4;

        $r22 = new javax.sip.TransactionTerminatedEvent;

        $r23 = (javax.sip.ServerTransaction) r1;

        specialinvoke $r22.<javax.sip.TransactionTerminatedEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction)>(r38, $r23);

        virtualinvoke r38.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>($r22, r1);

     label4:
        goto label7;

     label5:
        r39 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r40 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r39);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r6.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label6;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVED client tx ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KEY = ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

        if r40 == null goto label6;

        r41 = (gov.nist.javax.sip.stack.SIPClientTransaction) r40;

        $r15 = virtualinvoke r41.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label6;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime>;

        if $i0 == 0 goto label6;

        $r16 = new gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask;

        specialinvoke $r16.<gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.SIPClientTransaction)>(r0, r41);

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime>;

        $i2 = $i1 * 1000;

        $l3 = (long) $i2;

        virtualinvoke $r17.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r16, $l3);

     label6:
        if r40 == null goto label7;

        $z3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: boolean testAndSetTransactionTerminatedEvent()>();

        if $z3 == 0 goto label7;

        r43 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        $r7 = new javax.sip.TransactionTerminatedEvent;

        $r8 = (javax.sip.ClientTransaction) r1;

        specialinvoke $r7.<javax.sip.TransactionTerminatedEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction)>(r43, $r8);

        virtualinvoke r43.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>($r7, r1);

     label7:
        return;
    }

    protected void removeTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentHashMap $r2, $r10;
        gov.nist.core.StackLogger $r4, $r9, $r12, r19, r22;
        java.lang.StringBuilder $r5, $r13;
        java.lang.String $r8, $r16, r18, r21;
        gov.nist.javax.sip.stack.SIPTransaction r17;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r17 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = r17 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label3;

        r18 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r9.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label2;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logStackTrace()>();

        r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removing client Tx : ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r19.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r16);

     label2:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r18);

        goto label4;

     label3:
        $z1 = r17 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label4;

        r21 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r21);

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label4;

        r22 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removing server Tx : ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r22.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r8);

        goto label4;

     label4:
        return;
    }

    public boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.message.Request $r1;
        gov.nist.javax.sip.message.SIPRequest $r2;
        gov.nist.javax.sip.header.Via $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r5;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPServerTransaction r7;
        java.lang.String r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r7 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r1 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r2 = (gov.nist.javax.sip.message.SIPRequest) $r1;

        $r3 = virtualinvoke $r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r8 = virtualinvoke $r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r8 == null goto label1;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r8);

        return 1;

     label1:
        return 0;
    }

    public void setAddressResolver(gov.nist.core.net.AddressResolver)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.AddressResolver r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.core.net.AddressResolver;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver> = r1;

        return;
    }

    public void setDeliverDialogTerminatedEventForNullDialog()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog> = 1;

        return;
    }

    protected void setHostAddress(java.lang.String) throws java.net.UnknownHostException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r3, $r8;
        int $i0, $i1;
        char $c2;
        java.lang.StringBuilder $r4;
        java.net.InetAddress $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        $i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(58);

        if $i0 == $i1 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c2 == 91 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress> = $r8;

        goto label2;

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress> = r1;

     label2:
        $r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.net.InetAddress stackInetAddress> = $r9;

        return;
    }

    public void setLogRecordFactory(gov.nist.javax.sip.LogRecordFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.LogRecordFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.LogRecordFactory;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.LogRecordFactory logRecordFactory> = r1;

        return;
    }

    public void setLogStackTraceOnMessageSend(boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend> = z0;

        return;
    }

    public void setMaxConnections(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections> = i0;

        return;
    }

    protected void setMessageFactory(gov.nist.javax.sip.stack.StackMessageFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.StackMessageFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.StackMessageFactory;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory> = r1;

        return;
    }

    public void setNon2XXAckPassedToListener(boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean non2XXAckPassedToListener> = z0;

        return;
    }

    public void setReceiveUdpBufferSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int receiveUdpBufferSize> = i0;

        return;
    }

    protected void setRouter(javax.sip.address.Router)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.address.Router r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: javax.sip.address.Router;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router> = r1;

        return;
    }

    public void setSendUdpBufferSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int sendUdpBufferSize> = i0;

        return;
    }

    public void setSingleThreaded()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = 1;

        return;
    }

    public void setStackLogger(gov.nist.core.StackLogger)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.core.StackLogger;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger> = r1;

        return;
    }

    public void setStackName(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackName> = r1;

        return;
    }

    public void setThreadPoolSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = i0;

        return;
    }

    public void setTimer(java.util.Timer)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Timer r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.util.Timer;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = r1;

        return;
    }

    public void stopStack()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2, $r4, $r5, $r6, r14;
        gov.nist.javax.sip.stack.IOHandler $r3;
        gov.nist.core.ServerLogger $r7;
        gov.nist.javax.sip.stack.MessageProcessor $r8;
        java.lang.Throwable $r9, $r10, $r11, $r12;
        java.util.Timer r13;
        java.util.Collection r15;
        gov.nist.javax.sip.stack.MessageProcessor[] r16;
        int i0, $i1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        if r13 == null goto label01;

        virtualinvoke r13.<java.util.Timer: void cancel()>();

     label01:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = null;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit> = 1;

        entermonitor r0;

     label02:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label03:
        r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        entermonitor r14;

     label04:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor r14;

     label05:
        r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        entermonitor r15;

     label06:
        r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()>();

     label07:
        i0 = 0;

     label08:
        $i1 = lengthof r16;

        if i0 >= $i1 goto label10;

        $r8 = r16[i0];

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r8);

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        virtualinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: void closeAll()>();

        exitmonitor r15;

     label11:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r7.<gov.nist.core.ServerLogger: void closeLogFile()>();

        return;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r15;

     label17:
        throw $r12;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r14;

     label20:
        throw $r11;

     label21:
        $r10 := @caughtexception;

     label22:
        exitmonitor r0;

     label23:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.InterruptedException from label11 to label12 with label13;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        java.lang.Object $r2;
        int $i0;
        javax.sip.TransactionState $r3;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPServerTransaction $r4;
        java.lang.Throwable $r5;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r6 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r1 = (gov.nist.javax.sip.stack.SIPTransaction) $r2;

        $i0 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label3;

        $r3 = <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE>;

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>($r3);

        $z0 = r1 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z0 == 0 goto label2;

        $r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        $r4.<gov.nist.javax.sip.stack.SIPServerTransaction: int collectionTime> = 0;

     label2:
        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: void disableTimeoutTimer()>();

        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: void disableRetransmissionTimer()>();

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
