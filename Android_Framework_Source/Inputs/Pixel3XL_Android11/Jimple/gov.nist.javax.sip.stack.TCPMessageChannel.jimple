public class gov.nist.javax.sip.stack.TCPMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.SIPMessageListener, java.lang.Runnable, gov.nist.javax.sip.stack.RawMessageChannel
{
    protected boolean isCached;
    protected boolean isRunning;
    protected java.lang.String key;
    protected java.lang.String myAddress;
    protected java.io.InputStream myClientInputStream;
    protected java.io.OutputStream myClientOutputStream;
    private gov.nist.javax.sip.parser.PipelinedMsgParser myParser;
    protected int myPort;
    private java.net.Socket mySock;
    private java.lang.Thread mythread;
    protected java.net.InetAddress peerAddress;
    protected int peerPort;
    protected java.lang.String peerProtocol;
    protected gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    private gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor;

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r1;

        return;
    }

    protected void <init>(java.net.InetAddress, int, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TCPMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.InetAddress r1, $r4, $r6;
        int i0, $i1, $i2;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        gov.nist.javax.sip.stack.TCPMessageProcessor r3;
        boolean $z0;
        java.lang.String $r5, $r7;
        gov.nist.core.StackLogger $r8, $r9;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: gov.nist.javax.sip.stack.SIPTransactionStack;

        r3 := @parameter3: gov.nist.javax.sip.stack.TCPMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TCPMessageChannel ");

        $r9 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress> = r1;

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort> = i0;

        $i1 = virtualinvoke r3.<gov.nist.javax.sip.stack.TCPMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int myPort> = $i1;

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String peerProtocol> = "TCP";

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor> = r3;

        $r4 = virtualinvoke r3.<gov.nist.javax.sip.stack.TCPMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String myAddress> = $r5;

        $r6 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $i2 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        $r7 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r6, $i2, "TCP");

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String key> = $r7;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r3;

        return;
    }

    protected void <init>(java.net.Socket, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TCPMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;
        gov.nist.javax.sip.stack.TCPMessageProcessor r2;
        boolean $z0;
        java.net.InetAddress $r3, $r4;
        java.lang.String $r5;
        java.net.Socket $r6, $r8, $r12, r16;
        java.io.InputStream $r7;
        java.io.OutputStream $r9;
        java.lang.Thread $r10, $r11, $r13;
        int $i0, $i1;
        gov.nist.core.StackLogger $r14, $r15;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r16 := @parameter0: java.net.Socket;

        r1 := @parameter1: gov.nist.javax.sip.stack.SIPTransactionStack;

        r2 := @parameter2: gov.nist.javax.sip.stack.TCPMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TCPMessageChannel ");

        $r15 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock> = r16;

        $r3 = virtualinvoke r16.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress> = $r3;

        $r4 = virtualinvoke r2.<gov.nist.javax.sip.stack.TCPMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String myAddress> = $r5;

        $r6 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r7 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.InputStream myClientInputStream> = $r7;

        $r8 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r9 = virtualinvoke $r8.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.OutputStream myClientOutputStream> = $r9;

        $r10 = new java.lang.Thread;

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.Thread mythread> = $r10;

        virtualinvoke $r10.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r11 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r11.<java.lang.Thread: void setName(java.lang.String)>("TCPMessageChannelThread");

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r1;

        $r12 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $i0 = virtualinvoke $r12.<java.net.Socket: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort> = $i0;

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor> = r2;

        $i1 = virtualinvoke r2.<gov.nist.javax.sip.stack.TCPMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int myPort> = $i1;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r2;

        $r13 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r13.<java.lang.Thread: void start()>();

        return;
    }

    static java.net.Socket access$000(gov.nist.javax.sip.stack.TCPMessageChannel)
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.Socket $r1;

        r0 := @parameter0: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        return $r1;
    }

    private void sendMessage(byte[], boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        boolean z0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;
        gov.nist.javax.sip.stack.MessageProcessor $r2;
        gov.nist.javax.sip.stack.IOHandler $r3;
        java.net.InetAddress $r4, $r6;
        java.lang.String $r5;
        int $i0;
        java.lang.Throwable $r7;
        byte[] r8;
        java.net.Socket r9, r10, $r13;
        java.io.InputStream $r12;
        java.io.OutputStream $r14;
        java.lang.Thread $r15;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r8 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r3 = $r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r2 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r4 = virtualinvoke $r2.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r6 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        $r5 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String peerProtocol>;

        r9 = virtualinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r4, $r6, $i0, $r5, r8, z0, r0);

        r10 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        if r9 == r10 goto label5;

        if r9 == null goto label5;

        if r10 == null goto label4;

     label1:
        virtualinvoke r10.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        goto label4;

     label4:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock> = r9;

        $r12 = virtualinvoke r9.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.InputStream myClientInputStream> = $r12;

        $r13 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r14 = virtualinvoke $r13.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.OutputStream myClientOutputStream> = $r14;

        $r15 = new java.lang.Thread;

        specialinvoke $r15.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        virtualinvoke $r15.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r15.<java.lang.Thread: void setName(java.lang.String)>("TCPMessageChannelThread");

        virtualinvoke $r15.<java.lang.Thread: void start()>();

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.Socket $r2, $r8;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r10, $r11;
        boolean $z0, $z1;
        java.lang.String $r7, $r15;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r12, r17;
        gov.nist.core.StackLogger r16, r19;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        if $r2 == null goto label2;

        $r8 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r8.<java.net.Socket: void close()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock> = null;

     label2:
        $r3 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r16 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing message Channel ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r16.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label5;

        $r11 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r19 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing socket ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r19.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r15);

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0, r6;
        java.lang.Class $r1, $r2;
        boolean $z0;
        java.net.Socket $r3, $r4;
        java.lang.Object r5;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r5 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r6 = (gov.nist.javax.sip.stack.TCPMessageChannel) r5;

        $r4 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r3 = r6.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        if $r4 == $r3 goto label2;

        return 0;

     label2:
        return 1;
    }

    public java.lang.String getKey()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int $i0;
        java.net.InetAddress $r1;
        java.lang.String r2, r3;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r2 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String key>;

        if r2 == null goto label1;

        return r2;

     label1:
        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        r3 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r1, $i0, "TCP");

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String key> = r3;

        return r3;
    }

    public java.lang.String getPeerAddress()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r3;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getHost()>();

        return $r2;
    }

    protected java.net.InetAddress getPeerInetAddress()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public java.net.InetAddress getPeerPacketSourceAddress()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public int getPeerPacketSourcePort()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        return $i0;
    }

    public int getPeerPort()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        return $i0;
    }

    public java.lang.String getPeerProtocol()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String peerProtocol>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        return $r1;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        return "TCP";
    }

    public java.lang.String getViaHost()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String myAddress>;

        return $r1;
    }

    public int getViaPort()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int myPort>;

        return $i0;
    }

    public void handleException(java.text.ParseException, gov.nist.javax.sip.message.SIPMessage, java.lang.Class, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        java.text.ParseException r1;
        java.lang.String r2, $r17, $r19, r27, r31, r32;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r5, $r7, $r10, $r12, $r14, $r20, $r23, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        gov.nist.core.StackLogger $r6, $r11, $r13, $r21, $r24, r29;
        byte[] $r8;
        java.net.InetAddress $r9;
        int $i0;
        java.lang.StringBuilder $r15;
        java.lang.Throwable $r22;
        gov.nist.javax.sip.message.SIPMessage r25;
        java.lang.Class r26;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r1 := @parameter0: java.text.ParseException;

        r25 := @parameter1: gov.nist.javax.sip.message.SIPMessage;

        r26 := @parameter2: java.lang.Class;

        r27 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $r3 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label01;

        $r20 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r21 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r1);

     label01:
        if r26 == null goto label10;

        $z1 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/From;");

        if $z1 != 0 goto label02;

        $z6 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/To;");

        if $z6 != 0 goto label02;

        $z7 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/CSeq;");

        if $z7 != 0 goto label02;

        $z8 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/Via;");

        if $z8 != 0 goto label02;

        $z9 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/CallID;");

        if $z9 != 0 goto label02;

        $z10 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/RequestLine;");

        if $z10 != 0 goto label02;

        $z11 = virtualinvoke r26.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/StatusLine;");

        if $z11 == 0 goto label10;

     label02:
        $r28 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r28.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label03;

        $r14 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r29 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered Bad Message \n");

        $r17 = virtualinvoke r25.<gov.nist.javax.sip.message.SIPMessage: java.lang.String toString()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r29.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r19);

     label03:
        r31 = virtualinvoke r25.<gov.nist.javax.sip.message.SIPMessage: java.lang.String toString()>();

        $z2 = virtualinvoke r31.<java.lang.String: boolean startsWith(java.lang.String)>("SIP/");

        if $z2 != 0 goto label09;

        $z3 = virtualinvoke r31.<java.lang.String: boolean startsWith(java.lang.String)>("ACK ");

        if $z3 != 0 goto label09;

        r32 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String createBadReqRes(java.lang.String,java.text.ParseException)>(r31, r1);

        if r32 == null goto label08;

        $r7 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z5 = virtualinvoke $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label04;

        $r10 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending automatic 400 Bad Request:");

        $r12 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r13.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(r32);

     label04:
        $r8 = virtualinvoke r32.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress getPeerInetAddress()>();

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int getPeerPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r8, $r9, $i0, 0);

     label05:
        goto label07;

     label06:
        $r22 := @caughtexception;

        $r23 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r24 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r24.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r22);

     label07:
        goto label09;

     label08:
        $r4 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z4 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label09;

        $r5 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not formulate automatic 400 Bad Request");

     label09:
        throw r1;

     label10:
        virtualinvoke r25.<gov.nist.javax.sip.message.SIPMessage: void addUnparsed(java.lang.String)>(r27);

        return;

        catch java.io.IOException from label04 to label05 with label06;
    }

    public boolean isReliable()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        return 1;
    }

    public boolean isSecure()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        return 0;
    }

    public void processMessage(gov.nist.javax.sip.message.SIPMessage) throws java.lang.Exception
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        long l0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        java.lang.String r1, $r24, $r45, $r53, $r58, $r65, $r69, $r80, $r82, $r92, $r103, r105, r119;
        javax.sip.header.FromHeader $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r5, $r11, $r12, $r13, $r18, $r21, $r27, $r28, $r29, $r31, $r32, $r34, $r35, $r36, $r37, $r43, $r48, $r59, $r62, $r77, $r87, $r88, $r97, $r120;
        gov.nist.core.StackLogger $r4, $r6, $r14, $r30, $r33, $r38, $r60, $r98, r113, r117;
        javax.sip.header.ToHeader $r7;
        javax.sip.header.CallIdHeader $r8;
        javax.sip.header.CSeqHeader $r9;
        gov.nist.javax.sip.header.ViaList $r10, r100;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        gov.nist.javax.sip.stack.SIPTransaction $r15, $r16, $r19, $r20, $r40, $r85, $r94, $r95;
        gov.nist.javax.sip.stack.SIPClientTransaction $r17;
        javax.sip.header.ContentLengthHeader $r25, $r26, $r41, $r42;
        gov.nist.javax.sip.stack.SIPServerTransaction $r39, $r84;
        gov.nist.javax.sip.message.SIPResponse $r44, r111;
        byte[] $r46;
        gov.nist.core.HostPort $r49;
        gov.nist.javax.sip.stack.MessageProcessor $r51, $r56, $r70;
        java.net.InetAddress $r52, $r67, $r68, $r76, $r81;
        javax.sip.header.Header $r61;
        gov.nist.core.net.AddressResolver $r63;
        javax.sip.address.Hop $r64, r102;
        java.net.Socket $r66, $r72, $r75, $r78;
        gov.nist.javax.sip.stack.TCPMessageProcessor $r71;
        java.net.SocketAddress $r73;
        java.net.InetSocketAddress $r74;
        gov.nist.javax.sip.stack.IOHandler $r79;
        java.lang.Throwable $r83, $r86, $r93, $r96;
        gov.nist.javax.sip.message.SIPMessage r99;
        gov.nist.javax.sip.header.Via r101;
        gov.nist.javax.sip.message.SIPRequest r106;
        gov.nist.core.ServerLogger r107;
        gov.nist.javax.sip.stack.ServerRequestInterface r109;
        gov.nist.javax.sip.stack.ServerResponseInterface r112;
        java.lang.StringBuilder r121, r123, r124;
        java.lang.Exception r122, r125;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r99 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        $r2 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFrom()>();

        if $r2 == null goto label41;

        $r7 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getTo()>();

        if $r7 == null goto label41;

        $r8 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()>();

        if $r8 == null goto label41;

        $r9 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()>();

        if $r9 == null goto label41;

        $r10 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        if $r10 != null goto label01;

        goto label41;

     label01:
        r100 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $z1 = r99 instanceof gov.nist.javax.sip.message.SIPRequest;

        if $z1 == 0 goto label08;

        $r61 = virtualinvoke r100.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        r101 = (gov.nist.javax.sip.header.Via) $r61;

        $r62 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r63 = $r62.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver>;

        $r64 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: javax.sip.address.Hop getHop()>();

        r102 = interfaceinvoke $r63.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>($r64);

        $r65 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String peerProtocol> = $r65;

     label02:
        $r66 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r67 = virtualinvoke $r66.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress> = $r67;

        $z15 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: boolean hasParameter(java.lang.String)>("rport");

        if $z15 != 0 goto label03;

        $r80 = interfaceinvoke r102.<javax.sip.address.Hop: java.lang.String getHost()>();

        $r81 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $r82 = virtualinvoke $r81.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z17 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>($r82);

        if $z17 != 0 goto label04;

     label03:
        $r68 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $r69 = virtualinvoke $r68.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r101.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("received", $r69);

     label04:
        $i8 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        $r103 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        virtualinvoke r101.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("rport", $r103);

     label05:
        goto label07;

     label06:
        $r96 := @caughtexception;

        $r97 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r98 = virtualinvoke $r97.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r125 = (java.lang.Exception) $r96;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception,gov.nist.core.StackLogger)>(r125, $r98);

     label07:
        $z16 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isCached>;

        if $z16 != 0 goto label08;

        $r70 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r71 = (gov.nist.javax.sip.stack.TCPMessageProcessor) $r70;

        virtualinvoke $r71.<gov.nist.javax.sip.stack.TCPMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isCached> = 1;

        $r72 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r73 = virtualinvoke $r72.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();

        $r74 = (java.net.InetSocketAddress) $r73;

        i9 = virtualinvoke $r74.<java.net.InetSocketAddress: int getPort()>();

        $r75 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r76 = virtualinvoke $r75.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r105 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>($r76, i9);

        $r77 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r79 = $r77.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r78 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r79.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r105, $r78);

     label08:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        z0 = r99 instanceof gov.nist.javax.sip.message.SIPRequest;

        i10 = 0;

        if z0 == 0 goto label22;

        r106 = (gov.nist.javax.sip.message.SIPRequest) r99;

        $r31 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z10 = virtualinvoke $r31.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label09;

        $r59 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r60 = virtualinvoke $r59.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r60.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("----Processing Message---");

     label09:
        $r32 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r33 = virtualinvoke $r32.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z11 = interfaceinvoke $r33.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z11 == 0 goto label10;

        $r48 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r107 = $r48.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        $r49 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.core.HostPort getPeerHostPort()>();

        r1 = virtualinvoke $r49.<gov.nist.core.HostPort: java.lang.String toString()>();

        r121 = new java.lang.StringBuilder;

        specialinvoke r121.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r52 = virtualinvoke $r51.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r53 = virtualinvoke $r52.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r56 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $i7 = virtualinvoke $r56.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r58 = virtualinvoke r121.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r107.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,boolean,long)>(r99, r1, $r58, 0, l0);

     label10:
        $r34 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i4 = virtualinvoke $r34.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i4 <= 0 goto label14;

        i11 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: int getSize()>();

        $r41 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r41 != null goto label11;

        i12 = 0;

        goto label12;

     label11:
        $r42 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        i12 = interfaceinvoke $r42.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label12:
        $i5 = i11 + i12;

        $r43 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i6 = virtualinvoke $r43.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i5 > $i6 goto label13;

        goto label14;

     label13:
        $r44 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(513);

        $r45 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getTransport()>();

        $r46 = virtualinvoke $r44.<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)>($r45);

        specialinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],boolean)>($r46, 0);

        r122 = new java.lang.Exception;

        specialinvoke r122.<java.lang.Exception: void <init>(java.lang.String)>("Message size exceeded");

        throw r122;

     label14:
        $r35 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r109 = virtualinvoke $r35.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r106, r0);

        if r109 == null goto label20;

     label15:
        interfaceinvoke r109.<gov.nist.javax.sip.stack.ServerRequestInterface: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r106, r0);

     label16:
        $z13 = r109 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z13 == 0 goto label17;

        $r39 = (gov.nist.javax.sip.stack.SIPServerTransaction) r109;

        $z14 = virtualinvoke $r39.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z14 != 0 goto label17;

        $r40 = (gov.nist.javax.sip.stack.SIPTransaction) r109;

        virtualinvoke $r40.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label17:
        goto label21;

     label18:
        $r83 := @caughtexception;

        $z18 = r109 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z18 == 0 goto label19;

        $r84 = (gov.nist.javax.sip.stack.SIPServerTransaction) r109;

        $z19 = virtualinvoke $r84.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z19 != 0 goto label19;

        $r85 = (gov.nist.javax.sip.stack.SIPTransaction) r109;

        virtualinvoke $r85.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label19:
        throw $r83;

     label20:
        $r36 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r36.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label21;

        $r37 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r38 = virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r38.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Dropping request -- could not acquire semaphore in 10 sec");

     label21:
        goto label38;

     label22:
        r111 = (gov.nist.javax.sip.message.SIPResponse) r99;

     label23:
        virtualinvoke r111.<gov.nist.javax.sip.message.SIPResponse: void checkHeaders()>();

     label24:
        $r11 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i1 <= 0 goto label28;

        i13 = virtualinvoke r111.<gov.nist.javax.sip.message.SIPResponse: int getSize()>();

        $r25 = virtualinvoke r111.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r25 != null goto label25;

        goto label26;

     label25:
        $r26 = virtualinvoke r111.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        i10 = interfaceinvoke $r26.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label26:
        $i2 = i13 + i10;

        $r27 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i3 = virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i2 <= $i3 goto label28;

        $r28 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z9 = virtualinvoke $r28.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label27;

        $r29 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r30 = virtualinvoke $r29.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r30.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Message size exceeded");

     label27:
        return;

     label28:
        $r12 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r112 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r111, r0);

        if r112 == null goto label37;

     label29:
        $z2 = r112 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z2 == 0 goto label32;

        $r17 = (gov.nist.javax.sip.stack.SIPClientTransaction) r112;

        $z5 = virtualinvoke $r17.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean checkFromTag(gov.nist.javax.sip.message.SIPResponse)>(r111);

        if $z5 != 0 goto label32;

        $r18 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z6 = virtualinvoke $r18.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label30;

        $r21 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r113 = virtualinvoke $r21.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping response message with invalid tag >>> ");

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r111);

        $r24 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r113.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r24);

     label30:
        $z7 = r112 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z7 == 0 goto label31;

        $r19 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        $z8 = virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z8 != 0 goto label31;

        $r20 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label31:
        return;

     label32:
        interfaceinvoke r112.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r111, r0);

     label33:
        $z3 = r112 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z3 == 0 goto label34;

        $r15 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        $z4 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z4 != 0 goto label34;

        $r16 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        virtualinvoke $r16.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label34:
        goto label38;

     label35:
        $r93 := @caughtexception;

        $z21 = r112 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z21 == 0 goto label36;

        $r94 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        $z22 = virtualinvoke $r94.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z22 != 0 goto label36;

        $r95 = (gov.nist.javax.sip.stack.SIPTransaction) r112;

        virtualinvoke $r95.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label36:
        throw $r93;

     label37:
        $r13 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Application is blocked -- could not acquire semaphore -- dropping response");

     label38:
        return;

     label39:
        $r86 := @caughtexception;

        $r87 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z20 = virtualinvoke $r87.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z20 == 0 goto label40;

        $r88 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r117 = virtualinvoke $r88.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r124 = new java.lang.StringBuilder;

        specialinvoke r124.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping Badly formatted response message >>> ");

        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r111);

        $r92 = virtualinvoke r124.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r117.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r92);

     label40:
        return;

     label41:
        r119 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()>();

        $r120 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z23 = virtualinvoke $r120.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z23 == 0 goto label42;

        $r3 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(">>> Dropped Bad Msg");

        $r5 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(r119);

     label42:
        return;

        catch java.text.ParseException from label02 to label03 with label06;
        catch java.text.ParseException from label03 to label04 with label06;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.text.ParseException from label23 to label24 with label39;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label32 to label33 with label35;
    }

    public void run()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.StringBuilder r1;
        gov.nist.javax.sip.parser.Pipeline $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r8, $r12, $r24, $r25, $r28, $r37;
        java.io.InputStream $r5, $r9;
        java.util.Timer $r6;
        gov.nist.javax.sip.parser.PipelinedMsgParser $r7, $r15, $r19, $r35;
        java.lang.String $r10, $r22, $r31;
        byte[] $r11, $r23, r45;
        java.net.Socket $r13, $r26;
        gov.nist.javax.sip.stack.TCPMessageProcessor $r14, $r16, $r18, $r27, $r34, r44, r46, r47, r50, r56, r57, r60, r62;
        java.lang.Throwable $r17, $r21, $r32, $r33, $r39, $r40;
        java.lang.Exception $r20, $r36, $r41;
        boolean $z0;
        gov.nist.core.StackLogger $r38, r55;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $r2 = new gov.nist.javax.sip.parser.Pipeline;

        $r5 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.InputStream myClientInputStream>;

        $r3 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout>;

        $r4 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        specialinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void <init>(java.io.InputStream,int,java.util.Timer)>($r5, $i1, $r6);

        $r7 = new gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r8 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i2 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        specialinvoke $r7.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,int)>(r0, $r2, $i2);

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser> = $r7;

        virtualinvoke $r7.<gov.nist.javax.sip.parser.PipelinedMsgParser: void processInput()>();

        r44 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i3 = r44.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount>;

        $i4 = $i3 + 1;

        r44.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount> = $i4;

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isRunning> = 1;

     label01:
        r45 = newarray (byte)[4096];

        $r9 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.InputStream myClientInputStream>;

        i0 = virtualinvoke $r9.<java.io.InputStream: int read(byte[],int,int)>(r45, 0, 4096);

     label02:
        if i0 != -1 goto label14;

     label03:
        $r10 = "\r\n\r\n";

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r11);

     label04:
        $r12 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i5 = $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i5 == -1 goto label10;

        r46 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        entermonitor r46;

     label05:
        r47 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i8 = r47.<gov.nist.javax.sip.stack.TCPMessageProcessor: int nConnections>;

        $i9 = $i8 - 1;

        r47.<gov.nist.javax.sip.stack.TCPMessageProcessor: int nConnections> = $i9;

        $r16 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r16.<java.lang.Object: void notify()>();

        exitmonitor r46;

     label06:
        goto label10;

     label07:
        $r32 := @caughtexception;

     label08:
        exitmonitor r46;

     label09:
        throw $r32;

     label10:
        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

        $r13 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r13.<java.net.Socket: void close()>();

     label11:
        goto label13;

     label12:
        $r39 := @caughtexception;

     label13:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isRunning> = 0;

        $r14 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r14.<gov.nist.javax.sip.stack.TCPMessageProcessor: void remove(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

        r50 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i6 = r50.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount>;

        $i7 = $i6 - 1;

        r50.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount> = $i7;

        $r15 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r15.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        return;

     label14:
        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[],int,int)>(r45, 0, i0);

     label15:
        goto label19;

     label16:
        $r33 := @caughtexception;

        goto label35;

     label17:
        $r36 := @caughtexception;

     label18:
        $r37 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r38 = virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception,gov.nist.core.StackLogger)>($r36, $r38);

     label19:
        goto label01;

     label20:
        $r21 := @caughtexception;

     label21:
        $r22 = "\r\n\r\n";

        $r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r23);

     label22:
        goto label24;

     label23:
        $r41 := @caughtexception;

     label24:
        $r24 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label25;

        $r28 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r55 = virtualinvoke $r28.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException  closing sock ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r31 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r55.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r31);

     label25:
        $r25 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i12 = $r25.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i12 == -1 goto label31;

        r56 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        entermonitor r56;

     label26:
        r57 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i13 = r57.<gov.nist.javax.sip.stack.TCPMessageProcessor: int nConnections>;

        $i14 = $i13 - 1;

        r57.<gov.nist.javax.sip.stack.TCPMessageProcessor: int nConnections> = $i14;

        $r27 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r27.<java.lang.Object: void notify()>();

        exitmonitor r56;

     label27:
        goto label31;

     label28:
        $r40 := @caughtexception;

     label29:
        exitmonitor r56;

     label30:
        throw $r40;

     label31:
        $r26 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r26.<java.net.Socket: void close()>();

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label32:
        goto label34;

     label33:
        $r17 := @caughtexception;

     label34:
        goto label37;

     label35:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isRunning> = 0;

        $r34 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r34.<gov.nist.javax.sip.stack.TCPMessageProcessor: void remove(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

        r60 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i15 = r60.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount>;

        $i16 = $i15 - 1;

        r60.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount> = $i16;

        $r35 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r35.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        throw $r33;

     label36:
        $r20 := @caughtexception;

     label37:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isRunning> = 0;

        $r18 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r18.<gov.nist.javax.sip.stack.TCPMessageProcessor: void remove(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

        r62 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        $i10 = r62.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount>;

        $i11 = $i10 - 1;

        r62.<gov.nist.javax.sip.stack.TCPMessageProcessor: int useCount> = $i11;

        $r19 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r19.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        return;

        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.io.IOException from label14 to label15 with label20;
        catch java.lang.Exception from label14 to label15 with label17;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label16;
        catch java.lang.Exception from label24 to label25 with label36;
        catch java.lang.Throwable from label24 to label25 with label16;
        catch java.io.IOException from label25 to label26 with label33;
        catch java.lang.Exception from label25 to label26 with label36;
        catch java.lang.Throwable from label25 to label26 with label16;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.io.IOException from label30 to label31 with label33;
        catch java.lang.Exception from label30 to label31 with label36;
        catch java.lang.Throwable from label30 to label31 with label16;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.lang.Exception from label31 to label32 with label36;
        catch java.lang.Throwable from label31 to label32 with label16;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        byte[] r2;
        long l0;
        java.lang.String $r3;
        gov.nist.javax.sip.stack.SIPTransactionStack $r4;
        gov.nist.core.StackLogger $r5;
        boolean $z0;
        int $i1;
        java.net.InetAddress $r6;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.lang.String getTransport()>();

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r3);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],boolean)>(r2, 1);

        $r4 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z0 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z0 == 0 goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.InetAddress peerAddress>;

        $i1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: int peerPort>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.TCPMessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, $r6, $i1, l0);

     label1:
        return;
    }

    public void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2, $r10;
        gov.nist.javax.sip.stack.MessageProcessor $r3;
        gov.nist.javax.sip.stack.IOHandler $r4;
        java.net.InetAddress $r5, r14;
        java.io.InputStream $r6;
        java.net.Socket $r7, r15, r16;
        java.io.OutputStream $r8;
        java.lang.Thread $r9;
        java.util.Timer $r11;
        gov.nist.javax.sip.stack.TCPMessageChannel$1 $r12;
        byte[] r13;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        r13 := @parameter0: byte[];

        r14 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r13 == null goto label3;

        if r14 == null goto label3;

        $r2 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r3 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r5 = virtualinvoke $r3.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        r15 = virtualinvoke $r4.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r5, r14, i0, "TCP", r13, z0, r0);

        r16 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        if r15 == r16 goto label2;

        if r15 == null goto label2;

        if r16 == null goto label1;

        $r10 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        $r12 = new gov.nist.javax.sip.stack.TCPMessageChannel$1;

        specialinvoke $r12.<gov.nist.javax.sip.stack.TCPMessageChannel$1: void <init>(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

        virtualinvoke $r11.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r12, 8000L);

     label1:
        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock> = r15;

        $r6 = virtualinvoke r15.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.InputStream myClientInputStream> = $r6;

        $r7 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.net.Socket mySock>;

        $r8 = virtualinvoke $r7.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        r0.<gov.nist.javax.sip.stack.TCPMessageChannel: java.io.OutputStream myClientOutputStream> = $r8;

        $r9 = new java.lang.Thread;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        virtualinvoke $r9.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r9.<java.lang.Thread: void setName(java.lang.String)>("TCPMessageChannelThread");

        virtualinvoke $r9.<java.lang.Thread: void start()>();

     label2:
        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument");

        throw $r1;
    }

    protected void uncache()
    {
        gov.nist.javax.sip.stack.TCPMessageChannel r0;
        boolean $z0, $z1;
        gov.nist.javax.sip.stack.TCPMessageProcessor $r1;

        r0 := @this: gov.nist.javax.sip.stack.TCPMessageChannel;

        $z0 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isCached>;

        if $z0 == 0 goto label1;

        $z1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: boolean isRunning>;

        if $z1 != 0 goto label1;

        $r1 = r0.<gov.nist.javax.sip.stack.TCPMessageChannel: gov.nist.javax.sip.stack.TCPMessageProcessor tcpMessageProcessor>;

        virtualinvoke $r1.<gov.nist.javax.sip.stack.TCPMessageProcessor: void remove(gov.nist.javax.sip.stack.TCPMessageChannel)>(r0);

     label1:
        return;
    }
}
