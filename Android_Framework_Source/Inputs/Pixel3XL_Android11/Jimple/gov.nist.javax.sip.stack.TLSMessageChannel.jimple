public final class gov.nist.javax.sip.stack.TLSMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.SIPMessageListener, java.lang.Runnable, gov.nist.javax.sip.stack.RawMessageChannel
{
    private javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener;
    protected boolean isCached;
    protected boolean isRunning;
    private java.lang.String key;
    private java.lang.String myAddress;
    private java.io.InputStream myClientInputStream;
    private gov.nist.javax.sip.parser.PipelinedMsgParser myParser;
    private int myPort;
    private java.net.Socket mySock;
    private java.lang.Thread mythread;
    private java.net.InetAddress peerAddress;
    private int peerPort;
    private java.lang.String peerProtocol;
    private gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    private gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor;

    protected void <init>(java.net.InetAddress, int, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TLSMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress r1, $r4, $r6;
        int i0, $i1, $i2;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        gov.nist.javax.sip.stack.TLSMessageProcessor r3;
        boolean $z0;
        java.lang.String $r5, $r7;
        gov.nist.core.StackLogger $r8, $r9;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: gov.nist.javax.sip.stack.SIPTransactionStack;

        r3 := @parameter3: gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TLSMessageChannel (outgoing)");

        $r9 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = r1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort> = i0;

        $i1 = virtualinvoke r3.<gov.nist.javax.sip.stack.TLSMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort> = $i1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol> = "TLS";

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor> = r3;

        $r4 = virtualinvoke r3.<gov.nist.javax.sip.stack.TLSMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress> = $r5;

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r7 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r6, $i2, "TLS");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key> = $r7;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r3;

        return;
    }

    protected void <init>(java.net.Socket, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TLSMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;
        gov.nist.javax.sip.stack.TLSMessageProcessor r2;
        javax.net.ssl.SSLSocket r3, $r4;
        boolean $z0, $z1;
        java.net.Socket $r5, $r9, $r13, r18;
        java.net.InetAddress $r6, $r7;
        java.lang.String $r8;
        java.io.InputStream $r10;
        java.lang.Thread $r11, $r12, $r14;
        int $i0, $i1;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r15;
        gov.nist.core.StackLogger $r16, $r17;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r18 := @parameter0: java.net.Socket;

        r1 := @parameter1: gov.nist.javax.sip.stack.SIPTransactionStack;

        r2 := @parameter2: gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r16 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r16.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TLSMessageChannel (incoming)");

        $r17 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r17.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        $r4 = (javax.net.ssl.SSLSocket) r18;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = $r4;

        $z1 = r18 instanceof javax.net.ssl.SSLSocket;

        if $z1 == 0 goto label2;

        r3 = (javax.net.ssl.SSLSocket) r18;

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>(1);

        $r15 = new gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl;

        specialinvoke $r15.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: void <init>(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener> = $r15;

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>($r15);

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void startHandshake()>();

     label2:
        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r6 = virtualinvoke $r5.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = $r6;

        $r7 = virtualinvoke r2.<gov.nist.javax.sip.stack.TLSMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r8 = virtualinvoke $r7.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress> = $r8;

        $r9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r10 = virtualinvoke $r9.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r10;

        $r11 = new java.lang.Thread;

        specialinvoke $r11.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread> = $r11;

        virtualinvoke $r11.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r12.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor> = r2;

        $i0 = virtualinvoke r2.<gov.nist.javax.sip.stack.TLSMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort> = $i0;

        $r13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $i1 = virtualinvoke $r13.<java.net.Socket: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort> = $i1;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r2;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r14.<java.lang.Thread: void start()>();

        return;
    }

    private void sendMessage(byte[], boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        boolean z0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;
        gov.nist.javax.sip.stack.IOHandler $r2;
        gov.nist.javax.sip.stack.MessageProcessor $r3;
        java.net.InetAddress $r4, $r6;
        java.lang.String $r5;
        int $i0;
        java.lang.Throwable $r7;
        byte[] r8;
        java.net.Socket r9, r10;
        java.io.InputStream $r12;
        java.lang.Thread $r13;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r8 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r2 = $r1.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol>;

        r9 = virtualinvoke $r2.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r4, $r6, $i0, $r5, r8, z0, r0);

        r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if r9 == r10 goto label5;

        if r9 == null goto label5;

        if r10 == null goto label4;

     label1:
        virtualinvoke r10.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        goto label4;

     label4:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = r9;

        $r12 = virtualinvoke r9.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r12;

        $r13 = new java.lang.Thread;

        specialinvoke $r13.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        virtualinvoke $r13.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r13.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        virtualinvoke $r13.<java.lang.Thread: void start()>();

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.Socket $r2, $r8;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r10, $r11;
        boolean $z0, $z1;
        java.lang.String $r7, $r15;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r12, r17;
        gov.nist.core.StackLogger r16, r18;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r2 == null goto label2;

        $r8 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r8.<java.net.Socket: void close()>();

     label2:
        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r16 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing message Channel ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r16.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label5;

        $r11 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r18 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing socket ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r18.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r15);

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0, r6;
        java.lang.Class $r1, $r2;
        boolean $z0;
        java.net.Socket $r3, $r4;
        java.lang.Object r5;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r5 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r6 = (gov.nist.javax.sip.stack.TLSMessageChannel) r5;

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r3 = r6.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r4 == $r3 goto label2;

        return 0;

     label2:
        return 1;
    }

    public gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        javax.net.ssl.HandshakeCompletedListener $r1;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r2;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener>;

        $r2 = (gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl) $r1;

        return $r2;
    }

    public java.lang.String getKey()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;
        java.net.InetAddress $r1;
        java.lang.String r2, r3;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key>;

        if r2 == null goto label1;

        return r2;

     label1:
        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        r3 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r1, $i0, "TLS");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key> = r3;

        return r3;
    }

    public java.lang.String getPeerAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r3;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getHost()>();

        return $r2;
    }

    protected java.net.InetAddress getPeerInetAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public java.net.InetAddress getPeerPacketSourceAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public int getPeerPacketSourcePort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        return $i0;
    }

    public int getPeerPort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        return $i0;
    }

    public java.lang.String getPeerProtocol()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        return $r1;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return "tls";
    }

    public java.lang.String getViaHost()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress>;

        return $r1;
    }

    public int getViaPort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort>;

        return $i0;
    }

    public void handleException(java.text.ParseException, gov.nist.javax.sip.message.SIPMessage, java.lang.Class, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.text.ParseException r1;
        java.lang.String r2, $r18, r26, r30, r31;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r5, $r7, $r10, $r12, $r14, $r19, $r22, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        gov.nist.core.StackLogger $r6, $r11, $r13, $r20, $r23, r28;
        byte[] $r8;
        java.net.InetAddress $r9;
        int $i0;
        java.lang.StringBuilder $r15;
        java.lang.Throwable $r21;
        gov.nist.javax.sip.message.SIPMessage r24;
        java.lang.Class r25;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.text.ParseException;

        r24 := @parameter1: gov.nist.javax.sip.message.SIPMessage;

        r25 := @parameter2: java.lang.Class;

        r26 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label01;

        $r19 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r20 = virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r1);

     label01:
        if r25 == null goto label10;

        $z1 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/From;");

        if $z1 != 0 goto label02;

        $z6 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/To;");

        if $z6 != 0 goto label02;

        $z7 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/CSeq;");

        if $z7 != 0 goto label02;

        $z8 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/Via;");

        if $z8 != 0 goto label02;

        $z9 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/CallID;");

        if $z9 != 0 goto label02;

        $z10 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/RequestLine;");

        if $z10 != 0 goto label02;

        $z11 = virtualinvoke r25.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lgov/nist/javax/sip/header/StatusLine;");

        if $z11 == 0 goto label10;

     label02:
        $r27 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label03;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r28 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered bad message \n");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r28.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r18);

     label03:
        r30 = virtualinvoke r24.<gov.nist.javax.sip.message.SIPMessage: java.lang.String toString()>();

        $z2 = virtualinvoke r30.<java.lang.String: boolean startsWith(java.lang.String)>("SIP/");

        if $z2 != 0 goto label09;

        $z3 = virtualinvoke r30.<java.lang.String: boolean startsWith(java.lang.String)>("ACK ");

        if $z3 != 0 goto label09;

        r31 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String createBadReqRes(java.lang.String,java.text.ParseException)>(r30, r1);

        if r31 == null goto label08;

        $r7 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z5 = virtualinvoke $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label04;

        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending automatic 400 Bad Request:");

        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r13.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(r31);

     label04:
        $r8 = virtualinvoke r31.<java.lang.String: byte[] getBytes()>();

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerInetAddress()>();

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r8, $r9, $i0, 0);

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

        $r22 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r23 = virtualinvoke $r22.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>($r21);

     label07:
        goto label09;

     label08:
        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z4 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label09;

        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not formulate automatic 400 Bad Request");

     label09:
        throw r1;

     label10:
        virtualinvoke r24.<gov.nist.javax.sip.message.SIPMessage: void addUnparsed(java.lang.String)>(r26);

        return;

        catch java.io.IOException from label04 to label05 with label06;
    }

    public boolean isReliable()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return 1;
    }

    public boolean isSecure()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return 1;
    }

    public void processMessage(gov.nist.javax.sip.message.SIPMessage) throws java.lang.Exception
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        long l0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        java.lang.String r1, $r7, $r27, $r49, $r57, $r62, $r69, $r73, $r81, $r83, $r94, $r103, r105, r122;
        javax.sip.header.FromHeader $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r8, $r14, $r15, $r16, $r21, $r24, $r30, $r31, $r32, $r34, $r35, $r37, $r38, $r40, $r41, $r47, $r52, $r63, $r66, $r78, $r89, $r90, $r123;
        gov.nist.core.StackLogger $r9, $r17, $r33, $r36, $r42, $r64, r116, r120, r124;
        javax.sip.header.ToHeader $r10;
        javax.sip.header.CallIdHeader $r11;
        javax.sip.header.CSeqHeader $r12;
        gov.nist.javax.sip.header.ViaList $r13, r100;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        gov.nist.javax.sip.stack.SIPTransaction $r18, $r19, $r22, $r23, $r44, $r86, $r87, $r97;
        gov.nist.javax.sip.stack.SIPClientTransaction $r20;
        javax.sip.header.ContentLengthHeader $r28, $r29, $r45, $r46;
        double $d0, $d1;
        gov.nist.javax.sip.stack.SIPServerTransaction $r43, $r96;
        gov.nist.javax.sip.message.SIPResponse $r48, r111, r114;
        byte[] $r50;
        gov.nist.core.HostPort $r53;
        gov.nist.javax.sip.stack.MessageProcessor $r55, $r60, $r74;
        java.net.InetAddress $r56, $r71, $r72, $r77, $r82;
        javax.sip.header.Header $r65;
        gov.nist.core.net.AddressResolver $r67;
        javax.sip.address.Hop $r68, r102;
        java.net.Socket $r70, $r76, $r79;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r75;
        gov.nist.javax.sip.stack.IOHandler $r80;
        java.lang.Throwable $r84, $r85, $r88, $r95;
        java.lang.Exception $r98, r127, r132;
        gov.nist.javax.sip.message.SIPMessage r99;
        gov.nist.javax.sip.header.Via r101;
        gov.nist.javax.sip.message.SIPRequest r106;
        gov.nist.core.ServerLogger r107;
        gov.nist.javax.sip.stack.ServerRequestInterface r109;
        gov.nist.javax.sip.stack.ServerResponseInterface r115;
        java.lang.StringBuilder r126, r129, r130, r131;
        gov.nist.javax.sip.header.RetryAfter r128;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r99 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        $r2 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFrom()>();

        if $r2 == null goto label45;

        $r10 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getTo()>();

        if $r10 == null goto label45;

        $r11 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()>();

        if $r11 == null goto label45;

        $r12 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()>();

        if $r12 == null goto label45;

        $r13 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        if $r13 != null goto label01;

        goto label45;

     label01:
        r100 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $z1 = r99 instanceof gov.nist.javax.sip.message.SIPRequest;

        if $z1 == 0 goto label08;

        $r65 = virtualinvoke r100.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        r101 = (gov.nist.javax.sip.header.Via) $r65;

        $r66 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r67 = $r66.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver>;

        $r68 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: javax.sip.address.Hop getHop()>();

        r102 = interfaceinvoke $r67.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>($r68);

        $r69 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol> = $r69;

     label02:
        $r70 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r71 = virtualinvoke $r70.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = $r71;

        $z15 = virtualinvoke r101.<gov.nist.javax.sip.header.Via: boolean hasParameter(java.lang.String)>("rport");

        if $z15 != 0 goto label03;

        $r81 = interfaceinvoke r102.<javax.sip.address.Hop: java.lang.String getHost()>();

        $r82 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $r83 = virtualinvoke $r82.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z17 = virtualinvoke $r81.<java.lang.String: boolean equals(java.lang.Object)>($r83);

        if $z17 != 0 goto label04;

     label03:
        $r72 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $r73 = virtualinvoke $r72.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r101.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("received", $r73);

     label04:
        $i10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r103 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        virtualinvoke r101.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("rport", $r103);

     label05:
        goto label07;

     label06:
        $r84 := @caughtexception;

        r132 = (java.lang.Exception) $r84;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r132);

     label07:
        $z16 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached>;

        if $z16 != 0 goto label08;

        $r74 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r75 = (gov.nist.javax.sip.stack.TLSMessageProcessor) $r74;

        virtualinvoke $r75.<gov.nist.javax.sip.stack.TLSMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached> = 1;

        $r76 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r77 = virtualinvoke $r76.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $i9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        r105 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>($r77, $i9);

        $r78 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r80 = $r78.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r79 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r80.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r105, $r79);

     label08:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        z0 = r99 instanceof gov.nist.javax.sip.message.SIPRequest;

        i11 = 0;

        if z0 == 0 goto label26;

        r106 = (gov.nist.javax.sip.message.SIPRequest) r99;

        $r34 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z10 = virtualinvoke $r34.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label09;

        $r63 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r64 = virtualinvoke $r63.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r64.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("----Processing Message---");

     label09:
        $r35 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r36 = virtualinvoke $r35.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z11 = interfaceinvoke $r36.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z11 == 0 goto label10;

        $r52 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r107 = $r52.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        $r53 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.core.HostPort getPeerHostPort()>();

        r1 = virtualinvoke $r53.<gov.nist.core.HostPort: java.lang.String toString()>();

        r126 = new java.lang.StringBuilder;

        specialinvoke r126.<java.lang.StringBuilder: void <init>()>();

        $r55 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r56 = virtualinvoke $r55.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r57 = virtualinvoke $r56.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r60 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $i8 = virtualinvoke $r60.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r62 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r107.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,boolean,long)>(r99, r1, $r62, 0, l0);

     label10:
        $r37 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i4 = virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i4 <= 0 goto label14;

        i12 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: int getSize()>();

        $r45 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r45 != null goto label11;

        i13 = 0;

        goto label12;

     label11:
        $r46 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        i13 = interfaceinvoke $r46.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label12:
        $i6 = i12 + i13;

        $r47 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i7 = virtualinvoke $r47.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i6 > $i7 goto label13;

        goto label14;

     label13:
        $r48 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(513);

        $r49 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()>();

        $r50 = virtualinvoke $r48.<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)>($r49);

        specialinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],boolean)>($r50, 0);

        r127 = new java.lang.Exception;

        specialinvoke r127.<java.lang.Exception: void <init>(java.lang.String)>("Message size exceeded");

        throw r127;

     label14:
        $r38 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r109 = virtualinvoke $r38.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r106, r0);

        if r109 == null goto label20;

     label15:
        interfaceinvoke r109.<gov.nist.javax.sip.stack.ServerRequestInterface: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r106, r0);

     label16:
        $z13 = r109 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z13 == 0 goto label17;

        $r43 = (gov.nist.javax.sip.stack.SIPServerTransaction) r109;

        $z14 = virtualinvoke $r43.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z14 != 0 goto label17;

        $r44 = (gov.nist.javax.sip.stack.SIPTransaction) r109;

        virtualinvoke $r44.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label17:
        goto label25;

     label18:
        $r95 := @caughtexception;

        $z21 = r109 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z21 == 0 goto label19;

        $r96 = (gov.nist.javax.sip.stack.SIPServerTransaction) r109;

        $z22 = virtualinvoke $r96.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z22 != 0 goto label19;

        $r97 = (gov.nist.javax.sip.stack.SIPTransaction) r109;

        virtualinvoke $r97.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label19:
        throw $r95;

     label20:
        r111 = virtualinvoke r106.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(503);

        r128 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke r128.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

     label21:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 10.0;

        $i5 = (int) $d1;

        virtualinvoke r128.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>($i5);

        virtualinvoke r111.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r128);

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r111);

     label22:
        goto label24;

     label23:
        $r98 := @caughtexception;

     label24:
        $r40 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r40.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label25;

        $r41 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r42 = virtualinvoke $r41.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r42.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Dropping message -- could not acquire semaphore");

     label25:
        goto label42;

     label26:
        r114 = (gov.nist.javax.sip.message.SIPResponse) r99;

     label27:
        virtualinvoke r114.<gov.nist.javax.sip.message.SIPResponse: void checkHeaders()>();

     label28:
        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i1 <= 0 goto label32;

        i14 = virtualinvoke r114.<gov.nist.javax.sip.message.SIPResponse: int getSize()>();

        $r28 = virtualinvoke r114.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r28 != null goto label29;

        goto label30;

     label29:
        $r29 = virtualinvoke r114.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        i11 = interfaceinvoke $r29.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label30:
        $i2 = i14 + i11;

        $r30 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i3 = virtualinvoke $r30.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i2 <= $i3 goto label32;

        $r31 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z9 = virtualinvoke $r31.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label31;

        $r32 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r33 = virtualinvoke $r32.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r33.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Message size exceeded");

     label31:
        return;

     label32:
        $r15 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r115 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r114, r0);

        if r115 == null goto label41;

     label33:
        $z2 = r115 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z2 == 0 goto label36;

        $r20 = (gov.nist.javax.sip.stack.SIPClientTransaction) r115;

        $z5 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean checkFromTag(gov.nist.javax.sip.message.SIPResponse)>(r114);

        if $z5 != 0 goto label36;

        $r21 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z6 = virtualinvoke $r21.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label34;

        $r24 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r116 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping response message with invalid tag >>> ");

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r114);

        $r27 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r116.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r27);

     label34:
        $z7 = r115 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z7 == 0 goto label35;

        $r22 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        $z8 = virtualinvoke $r22.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z8 != 0 goto label35;

        $r23 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label35:
        return;

     label36:
        interfaceinvoke r115.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r114, r0);

     label37:
        $z3 = r115 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z3 == 0 goto label38;

        $r18 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        $z4 = virtualinvoke $r18.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z4 != 0 goto label38;

        $r19 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label38:
        goto label42;

     label39:
        $r85 := @caughtexception;

        $z18 = r115 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z18 == 0 goto label40;

        $r86 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        $z19 = virtualinvoke $r86.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z19 != 0 goto label40;

        $r87 = (gov.nist.javax.sip.stack.SIPTransaction) r115;

        virtualinvoke $r87.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label40:
        throw $r85;

     label41:
        $r16 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r17 = virtualinvoke $r16.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r17.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Could not get semaphore... dropping response");

     label42:
        return;

     label43:
        $r88 := @caughtexception;

        $r89 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z20 = virtualinvoke $r89.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z20 == 0 goto label44;

        $r90 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r120 = virtualinvoke $r90.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r130 = new java.lang.StringBuilder;

        specialinvoke r130.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping Badly formatted response message >>> ");

        virtualinvoke r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r114);

        $r94 = virtualinvoke r130.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r120.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r94);

     label44:
        return;

     label45:
        r122 = virtualinvoke r99.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()>();

        $r123 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z23 = virtualinvoke $r123.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z23 == 0 goto label46;

        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r124 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r131 = new java.lang.StringBuilder;

        specialinvoke r131.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad message ");

        virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r122);

        $r7 = virtualinvoke r131.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r124.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r7);

        $r8 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logError(java.lang.String)>(">>> Dropped Bad Msg");

     label46:
        return;

        catch java.text.ParseException from label02 to label03 with label06;
        catch java.text.ParseException from label03 to label04 with label06;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.text.ParseException from label27 to label28 with label43;
        catch java.lang.Throwable from label33 to label34 with label39;
        catch java.lang.Throwable from label36 to label37 with label39;
    }

    public void run()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.StringBuilder r1;
        gov.nist.javax.sip.parser.Pipeline $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r8, $r12, $r18, $r19, $r24;
        java.io.InputStream $r5, $r9;
        java.util.Timer $r6;
        gov.nist.javax.sip.parser.PipelinedMsgParser $r7, $r15, $r22, $r35;
        java.lang.String $r10, $r27, $r31;
        byte[] $r11, $r32, r43;
        java.net.Socket $r13, $r20;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r14, $r16, $r21, $r23, $r34, r42, r44, r45, r48, r54, r55, r58, r60;
        java.lang.Exception $r17, $r29, $r37;
        boolean $z0;
        java.lang.Throwable $r28, $r30, $r33, $r36, $r38, $r39;
        gov.nist.core.StackLogger r53;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r2 = new gov.nist.javax.sip.parser.Pipeline;

        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream>;

        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout>;

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        specialinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void <init>(java.io.InputStream,int,java.util.Timer)>($r5, $i1, $r6);

        $r7 = new gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r8 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i2 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        specialinvoke $r7.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,int)>(r0, $r2, $i2);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser> = $r7;

        virtualinvoke $r7.<gov.nist.javax.sip.parser.PipelinedMsgParser: void processInput()>();

        r42 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i3 = r42.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i4 = $i3 + 1;

        r42.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i4;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 1;

     label01:
        r43 = newarray (byte)[4096];

        $r9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream>;

        i0 = virtualinvoke $r9.<java.io.InputStream: int read(byte[],int,int)>(r43, 0, 4096);

     label02:
        if i0 != -1 goto label14;

     label03:
        $r10 = "\r\n\r\n";

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r11);

     label04:
        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i5 = $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i5 == -1 goto label10;

        r44 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        entermonitor r44;

     label05:
        r45 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i8 = r45.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections>;

        $i9 = $i8 - 1;

        r45.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections> = $i9;

        $r16 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r16.<java.lang.Object: void notify()>();

        exitmonitor r44;

     label06:
        goto label10;

     label07:
        $r38 := @caughtexception;

     label08:
        exitmonitor r44;

     label09:
        throw $r38;

     label10:
        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

        $r13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r13.<java.net.Socket: void close()>();

     label11:
        goto label13;

     label12:
        $r39 := @caughtexception;

     label13:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r14.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r48 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i6 = r48.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i7 = $i6 - 1;

        r48.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i7;

        $r15 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r15.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        return;

     label14:
        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[],int,int)>(r43, 0, i0);

     label15:
        goto label19;

     label16:
        $r33 := @caughtexception;

        goto label35;

     label17:
        $r29 := @caughtexception;

     label18:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>($r29);

     label19:
        goto label01;

     label20:
        $r30 := @caughtexception;

     label21:
        $r31 = "\r\n\r\n";

        $r32 = virtualinvoke $r31.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r32);

     label22:
        goto label24;

     label23:
        $r17 := @caughtexception;

     label24:
        $r18 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r18.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label25;

        $r24 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r53 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException  closing sock ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r27 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r53.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r27);

     label25:
        $r19 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i10 = $r19.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i10 == -1 goto label31;

        r54 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        entermonitor r54;

     label26:
        r55 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i13 = r55.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections>;

        $i14 = $i13 - 1;

        r55.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections> = $i14;

        $r23 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r23.<java.lang.Object: void notify()>();

        exitmonitor r54;

     label27:
        goto label31;

     label28:
        $r36 := @caughtexception;

     label29:
        exitmonitor r54;

     label30:
        throw $r36;

     label31:
        $r20 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r20.<java.net.Socket: void close()>();

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label32:
        goto label34;

     label33:
        $r28 := @caughtexception;

     label34:
        goto label37;

     label35:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r34 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r34.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r58 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i15 = r58.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i16 = $i15 - 1;

        r58.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i16;

        $r35 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r35.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        throw $r33;

     label36:
        $r37 := @caughtexception;

     label37:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r21 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r21.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r60 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i11 = r60.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i12 = $i11 - 1;

        r60.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i12;

        $r22 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r22.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        return;

        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.Exception from label01 to label02 with label17;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.Exception from label03 to label04 with label17;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.lang.Exception from label09 to label10 with label17;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.io.IOException from label14 to label15 with label20;
        catch java.lang.Exception from label14 to label15 with label17;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label16;
        catch java.lang.Exception from label24 to label25 with label36;
        catch java.lang.Throwable from label24 to label25 with label16;
        catch java.io.IOException from label25 to label26 with label33;
        catch java.lang.Exception from label25 to label26 with label36;
        catch java.lang.Throwable from label25 to label26 with label16;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.io.IOException from label30 to label31 with label33;
        catch java.lang.Exception from label30 to label31 with label36;
        catch java.lang.Throwable from label30 to label31 with label16;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.lang.Exception from label31 to label32 with label36;
        catch java.lang.Throwable from label31 to label32 with label16;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        byte[] r2;
        long l0;
        java.lang.String $r3;
        boolean $z0, $z1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r4;
        gov.nist.core.StackLogger $r5;
        int $i1;
        java.net.InetAddress $r6;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()>();

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r3);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        specialinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],boolean)>(r2, $z0);

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z1 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z1 == 0 goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, $r6, $i1, l0);

     label1:
        return;
    }

    public void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int i0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2;
        gov.nist.javax.sip.stack.MessageProcessor $r3;
        gov.nist.javax.sip.stack.IOHandler $r4;
        java.net.InetAddress $r5, r8;
        java.lang.Throwable $r6;
        byte[] r7;
        java.net.Socket r9, r10;
        java.io.InputStream $r12;
        java.lang.Thread $r13;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r7 := @parameter0: byte[];

        r8 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r7 == null goto label6;

        if r8 == null goto label6;

        $r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r5 = virtualinvoke $r3.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        r9 = virtualinvoke $r4.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r5, r8, i0, "TLS", r7, z0, r0);

        r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if r9 == r10 goto label5;

        if r9 == null goto label5;

        if r10 == null goto label4;

     label1:
        virtualinvoke r10.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        goto label4;

     label4:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = r9;

        $r12 = virtualinvoke r9.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r12;

        $r13 = new java.lang.Thread;

        specialinvoke $r13.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        virtualinvoke $r13.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r13.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        virtualinvoke $r13.<java.lang.Thread: void start()>();

     label5:
        return;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument");

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        javax.net.ssl.HandshakeCompletedListener r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener> = r1;

        return;
    }

    protected void uncache()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        boolean $z0, $z1;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $z0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached>;

        if $z0 == 0 goto label1;

        $z1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning>;

        if $z1 != 0 goto label1;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r1.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

     label1:
        return;
    }
}
