public class junit.extensions.RepeatedTest extends junit.extensions.TestDecorator
{
    private int fTimesRepeat;

    public void <init>(junit.framework.Test, int)
    {
        junit.extensions.RepeatedTest r0;
        junit.framework.Test r1;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: junit.extensions.RepeatedTest;

        r1 := @parameter0: junit.framework.Test;

        i0 := @parameter1: int;

        specialinvoke r0.<junit.extensions.TestDecorator: void <init>(junit.framework.Test)>(r1);

        if i0 < 0 goto label1;

        r0.<junit.extensions.RepeatedTest: int fTimesRepeat> = i0;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repetition count must be >= 0");

        throw $r2;
    }

    public int countTestCases()
    {
        junit.extensions.RepeatedTest r0;
        int $i0, $i1, $i2;

        r0 := @this: junit.extensions.RepeatedTest;

        $i0 = specialinvoke r0.<junit.extensions.TestDecorator: int countTestCases()>();

        $i1 = r0.<junit.extensions.RepeatedTest: int fTimesRepeat>;

        $i2 = $i0 * $i1;

        return $i2;
    }

    public void run(junit.framework.TestResult)
    {
        junit.extensions.RepeatedTest r0;
        junit.framework.TestResult r1;
        int $i0, i1;
        boolean $z0;

        r0 := @this: junit.extensions.RepeatedTest;

        r1 := @parameter0: junit.framework.TestResult;

        i1 = 0;

     label1:
        $i0 = r0.<junit.extensions.RepeatedTest: int fTimesRepeat>;

        if i1 >= $i0 goto label3;

        $z0 = virtualinvoke r1.<junit.framework.TestResult: boolean shouldStop()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        specialinvoke r0.<junit.extensions.TestDecorator: void run(junit.framework.TestResult)>(r1);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        junit.extensions.RepeatedTest r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r6;

        r0 := @this: junit.extensions.RepeatedTest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<junit.extensions.TestDecorator: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(repeated)");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
