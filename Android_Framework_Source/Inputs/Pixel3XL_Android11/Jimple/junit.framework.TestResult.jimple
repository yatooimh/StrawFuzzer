public class junit.framework.TestResult extends java.lang.Object
{
    protected java.util.List fErrors;
    protected java.util.List fFailures;
    protected java.util.List fListeners;
    protected int fRunTests;
    private boolean fStop;

    public void <init>()
    {
        junit.framework.TestResult r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: junit.framework.TestResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<junit.framework.TestResult: java.util.List fFailures> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<junit.framework.TestResult: java.util.List fErrors> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<junit.framework.TestResult: java.util.List fListeners> = $r3;

        r0.<junit.framework.TestResult: int fRunTests> = 0;

        r0.<junit.framework.TestResult: boolean fStop> = 0;

        return;
    }

    private java.util.List cloneListeners()
    {
        junit.framework.TestResult r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        java.util.ArrayList r3;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r1 = r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r1);

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.framework.TestResult r0;
        java.lang.Throwable r1, $r6;
        junit.framework.TestFailure r2;
        java.util.List $r3, r8;
        boolean $z1;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;
        junit.framework.Test r7;
        java.util.Iterator r9;

        r0 := @this: junit.framework.TestResult;

        r7 := @parameter0: junit.framework.Test;

        r1 := @parameter1: java.lang.Throwable;

        entermonitor r0;

     label1:
        r8 = r0.<junit.framework.TestResult: java.util.List fErrors>;

        r2 = new junit.framework.TestFailure;

        specialinvoke r2.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>(r7, r1);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r3 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r9 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        interfaceinvoke $r5.<junit.framework.TestListener: void addError(junit.framework.Test,java.lang.Throwable)>(r7, r1);

     label3:
        goto label2;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.framework.TestResult r0;
        junit.framework.AssertionFailedError r1;
        junit.framework.TestFailure r2;
        java.util.List $r3, r8;
        boolean $z1;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;
        java.lang.Throwable $r6;
        junit.framework.Test r7;
        java.util.Iterator r9;

        r0 := @this: junit.framework.TestResult;

        r7 := @parameter0: junit.framework.Test;

        r1 := @parameter1: junit.framework.AssertionFailedError;

        entermonitor r0;

     label1:
        r8 = r0.<junit.framework.TestResult: java.util.List fFailures>;

        r2 = new junit.framework.TestFailure;

        specialinvoke r2.<junit.framework.TestFailure: void <init>(junit.framework.Test,java.lang.Throwable)>(r7, r1);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r3 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r9 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        interfaceinvoke $r5.<junit.framework.TestListener: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>(r7, r1);

     label3:
        goto label2;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void addListener(junit.framework.TestListener)
    {
        junit.framework.TestResult r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        junit.framework.TestListener r3;

        r0 := @this: junit.framework.TestResult;

        r3 := @parameter0: junit.framework.TestListener;

        entermonitor r0;

     label1:
        $r1 = r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void endTest(junit.framework.Test)
    {
        junit.framework.TestResult r0;
        junit.framework.Test r1;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.Test;

        $r3 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        interfaceinvoke $r5.<junit.framework.TestListener: void endTest(junit.framework.Test)>(r1);

        goto label1;

     label2:
        return;
    }

    public int errorCount()
    {
        junit.framework.TestResult r0;
        int i0;
        java.util.List $r2;
        java.lang.Throwable $r3;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        $r2 = r0.<junit.framework.TestResult: java.util.List fErrors>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Enumeration errors()
    {
        junit.framework.TestResult r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        java.util.Enumeration r3;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        $r1 = r0.<junit.framework.TestResult: java.util.List fErrors>;

        r3 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int failureCount()
    {
        junit.framework.TestResult r0;
        int i0;
        java.util.List $r2;
        java.lang.Throwable $r3;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        $r2 = r0.<junit.framework.TestResult: java.util.List fFailures>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.Enumeration failures()
    {
        junit.framework.TestResult r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        java.util.Enumeration r3;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        $r1 = r0.<junit.framework.TestResult: java.util.List fFailures>;

        r3 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeListener(junit.framework.TestListener)
    {
        junit.framework.TestResult r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        junit.framework.TestListener r3;

        r0 := @this: junit.framework.TestResult;

        r3 := @parameter0: junit.framework.TestListener;

        entermonitor r0;

     label1:
        $r1 = r0.<junit.framework.TestResult: java.util.List fListeners>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void run(junit.framework.TestCase)
    {
        junit.framework.TestResult r0;
        junit.framework.TestCase r1;
        junit.framework.TestResult$1 $r2;

        r0 := @this: junit.framework.TestResult;

        r1 := @parameter0: junit.framework.TestCase;

        virtualinvoke r0.<junit.framework.TestResult: void startTest(junit.framework.Test)>(r1);

        $r2 = new junit.framework.TestResult$1;

        specialinvoke $r2.<junit.framework.TestResult$1: void <init>(junit.framework.TestResult,junit.framework.TestCase)>(r0, r1);

        virtualinvoke r0.<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)>(r1, $r2);

        virtualinvoke r0.<junit.framework.TestResult: void endTest(junit.framework.Test)>(r1);

        return;
    }

    public int runCount()
    {
        junit.framework.TestResult r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        i0 = r0.<junit.framework.TestResult: int fRunTests>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void runProtected(junit.framework.Test, junit.framework.Protectable)
    {
        junit.framework.TestResult r0;
        java.lang.Throwable $r1;
        java.lang.ThreadDeath $r2;
        junit.framework.AssertionFailedError $r3;
        junit.framework.Test r4;
        junit.framework.Protectable r5;

        r0 := @this: junit.framework.TestResult;

        r4 := @parameter0: junit.framework.Test;

        r5 := @parameter1: junit.framework.Protectable;

     label1:
        interfaceinvoke r5.<junit.framework.Protectable: void protect()>();

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<junit.framework.TestResult: void addError(junit.framework.Test,java.lang.Throwable)>(r4, $r1);

        goto label6;

     label4:
        $r2 := @caughtexception;

        throw $r2;

     label5:
        $r3 := @caughtexception;

        virtualinvoke r0.<junit.framework.TestResult: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>(r4, $r3);

        goto label2;

     label6:
        return;

        catch junit.framework.AssertionFailedError from label1 to label2 with label5;
        catch java.lang.ThreadDeath from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean shouldStop()
    {
        junit.framework.TestResult r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        z0 = r0.<junit.framework.TestResult: boolean fStop>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startTest(junit.framework.Test)
    {
        junit.framework.TestResult r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        junit.framework.TestListener $r4;
        java.lang.Throwable $r5;
        junit.framework.Test r6;

        r0 := @this: junit.framework.TestResult;

        r6 := @parameter0: junit.framework.Test;

        i0 = interfaceinvoke r6.<junit.framework.Test: int countTestCases()>();

        entermonitor r0;

     label1:
        $i1 = r0.<junit.framework.TestResult: int fRunTests>;

        $i2 = $i1 + i0;

        r0.<junit.framework.TestResult: int fRunTests> = $i2;

        exitmonitor r0;

     label2:
        $r2 = specialinvoke r0.<junit.framework.TestResult: java.util.List cloneListeners()>();

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (junit.framework.TestListener) $r3;

        interfaceinvoke $r4.<junit.framework.TestListener: void startTest(junit.framework.Test)>(r6);

        goto label3;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void stop()
    {
        junit.framework.TestResult r0;
        java.lang.Throwable $r2;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        r0.<junit.framework.TestResult: boolean fStop> = 1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean wasSuccessful()
    {
        junit.framework.TestResult r0;
        int i0, $i1;
        java.lang.Throwable $r2;
        boolean z0;

        r0 := @this: junit.framework.TestResult;

        entermonitor r0;

     label1:
        $i1 = virtualinvoke r0.<junit.framework.TestResult: int failureCount()>();

        if $i1 != 0 goto label3;

        i0 = virtualinvoke r0.<junit.framework.TestResult: int errorCount()>();

     label2:
        if i0 != 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r0;

        return z0;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }
}
