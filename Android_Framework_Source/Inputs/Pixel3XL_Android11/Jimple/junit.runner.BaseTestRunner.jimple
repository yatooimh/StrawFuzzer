public abstract class junit.runner.BaseTestRunner extends java.lang.Object implements junit.framework.TestListener
{
    public static final java.lang.String SUITE_METHODNAME;
    private static java.util.Properties fPreferences;
    static boolean fgFilterStack;
    static int fgMaxMessageLength;
    boolean fLoading;

    static void <clinit>()
    {
        int $i0;

        <junit.runner.BaseTestRunner: java.lang.String SUITE_METHODNAME> = "suite";

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = 500;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 1;

        $i0 = staticinvoke <junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>("maxmessage", 500);

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = $i0;

        return;
    }

    public void <init>()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = 1;

        return;
    }

    static boolean filterLine(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.String[] r1;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.String;

        r1 = newarray (java.lang.String)[8];

        r1[0] = "junit.framework.TestCase";

        r1[1] = "junit.framework.TestResult";

        r1[2] = "junit.framework.TestSuite";

        r1[3] = "junit.framework.Assert.";

        r1[4] = "junit.swingui.TestRunner";

        r1[5] = "junit.awtui.TestRunner";

        r1[6] = "junit.textui.TestRunner";

        r1[7] = "java.lang.reflect.Method.invoke(";

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $r2 = r1[i2];

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r2);

        if $i1 <= 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static java.lang.String getFilteredTrace(java.lang.String)
    {
        java.lang.String r0, $r8, r10;
        boolean $z0, $z1;
        java.io.StringWriter $r4;
        java.io.PrintWriter $r5;
        java.io.BufferedReader $r6;
        java.io.StringReader $r7;
        java.lang.Exception $r9;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <junit.runner.BaseTestRunner: boolean showStackRaw()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r4 = new java.io.StringWriter;

        specialinvoke $r4.<java.io.StringWriter: void <init>()>();

        $r5 = new java.io.PrintWriter;

        specialinvoke $r5.<java.io.PrintWriter: void <init>(java.io.Writer)>($r4);

        $r6 = new java.io.BufferedReader;

        $r7 = new java.io.StringReader;

        specialinvoke $r7.<java.io.StringReader: void <init>(java.lang.String)>(r0);

        specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7);

     label2:
        r10 = virtualinvoke $r6.<java.io.BufferedReader: java.lang.String readLine()>();

     label3:
        if r10 == null goto label6;

     label4:
        $z1 = staticinvoke <junit.runner.BaseTestRunner: boolean filterLine(java.lang.String)>(r10);

        if $z1 != 0 goto label2;

        virtualinvoke $r5.<java.io.PrintWriter: void println(java.lang.String)>(r10);

     label5:
        goto label2;

     label6:
        $r8 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        return $r8;

     label7:
        $r9 := @caughtexception;

        return r0;

        catch java.lang.Exception from label2 to label3 with label7;
        catch java.lang.Exception from label4 to label5 with label7;
    }

    public static java.lang.String getFilteredTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.StringWriter $r2;
        java.io.PrintWriter $r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.lang.Throwable;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

        $r5 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>($r4);

        return $r5;
    }

    public static int getPreference(java.lang.String, int)
    {
        int i0, i1;
        java.lang.Throwable $r0;
        java.lang.String r1, r2;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        r2 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>(r1);

        if r2 != null goto label1;

        return i1;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        i1 = i0;

        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        return i1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String getPreference(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Properties $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        return $r2;
    }

    protected static java.util.Properties getPreferences()
    {
        java.util.Properties $r1, $r2, $r3, $r5;

        $r1 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        if $r1 != null goto label1;

        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>()>();

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = $r3;

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("loading", "true");

        $r5 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("filterstack", "true");

        staticinvoke <junit.runner.BaseTestRunner: void readPreferences()>();

     label1:
        $r2 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        return $r2;
    }

    private static java.io.File getPreferencesFile()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, "junit.properties");

        return $r0;
    }

    private static void readPreferences()
    {
        java.io.File $r0;
        java.util.Properties $r1, $r2, r10;
        java.lang.Throwable $r3, $r4, $r5, $r6;
        java.io.FileInputStream r7, r8, r9;

        r7 = null;

        r8 = null;

     label01:
        r9 = new java.io.FileInputStream;

     label02:
        r7 = null;

        r8 = null;

     label03:
        $r0 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke r9.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label04:
        r7 = r9;

        r8 = r9;

     label05:
        r10 = new java.util.Properties;

     label06:
        r7 = r9;

        r8 = r9;

     label07:
        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        specialinvoke r10.<java.util.Properties: void <init>(java.util.Properties)>($r1);

     label08:
        r7 = r9;

        r8 = r9;

     label09:
        staticinvoke <junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>(r10);

     label10:
        r7 = r9;

        r8 = r9;

     label11:
        $r2 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>(r9);

     label12:
        virtualinvoke r9.<java.io.InputStream: void close()>();

     label13:
        goto label23;

     label14:
        $r4 := @caughtexception;

        goto label23;

     label15:
        $r5 := @caughtexception;

        if r7 == null goto label19;

     label16:
        virtualinvoke r7.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r3 := @caughtexception;

        goto label19;

     label19:
        throw $r5;

     label20:
        $r6 := @caughtexception;

        if r8 == null goto label13;

     label21:
        virtualinvoke r8.<java.io.InputStream: void close()>();

     label22:
        goto label13;

     label23:
        return;

        catch java.io.IOException from label01 to label02 with label20;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.io.IOException from label05 to label06 with label20;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label20;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.io.IOException from label11 to label12 with label20;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label21 to label22 with label14;
    }

    public static void savePreferences() throws java.io.IOException
    {
        java.io.FileOutputStream $r2;
        java.io.File $r3;
        java.util.Properties $r4;
        java.lang.Throwable $r5;

        $r2 = new java.io.FileOutputStream;

        $r3 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

     label1:
        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r4.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>($r2, "");

     label2:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void setPreference(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.Properties $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    protected static void setPreferences(java.util.Properties)
    {
        java.util.Properties r0;

        r0 := @parameter0: java.util.Properties;

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = r0;

        return;
    }

    protected static boolean showStackRaw()
    {
        java.lang.String $r0;
        boolean $z0, $z1, z2;

        $r0 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("filterstack");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label2;

        $z1 = <junit.runner.BaseTestRunner: boolean fgFilterStack>;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static java.lang.String truncate(java.lang.String)
    {
        java.lang.String r0, $r2, r5;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1;

        r0 := @parameter0: java.lang.String;

        r5 = r0;

        $i0 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i0 == -1 goto label1;

        r5 = r0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i1 <= $i2 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i3 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r5;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.Throwable r1, $r2;
        junit.framework.Test r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r3 := @parameter0: junit.framework.Test;

        r1 := @parameter1: java.lang.Throwable;

        entermonitor r0;

     label1:
        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(1, r3, r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.AssertionFailedError r1;
        java.lang.Throwable $r2;
        junit.framework.Test r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r3 := @parameter0: junit.framework.Test;

        r1 := @parameter1: junit.framework.AssertionFailedError;

        entermonitor r0;

     label1:
        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(2, r3, r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void clearStatus()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        return;
    }

    public java.lang.String elapsedTimeAsString(long)
    {
        junit.runner.BaseTestRunner r0;
        long l0;
        java.text.NumberFormat $r1;
        double $d0, $d1;
        java.lang.String $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $d0 = (double) l0;

        $d1 = $d0 / 1000.0;

        $r2 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d1);

        return $r2;
    }

    public void endTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        junit.framework.Test r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r3 := @parameter0: junit.framework.Test;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testEnded(java.lang.String)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String extractClassName(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, $r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Default package for");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;

     label1:
        return r1;
    }

    public junit.framework.Test getTest(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, $r8, $r10, $r16, $r20, $r22, $r27, $r29, r32, r44;
        int $i0, $i1;
        java.lang.Class[] $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r23, $r26;
        java.lang.ClassNotFoundException $r11;
        java.lang.Exception $r17, $r30;
        java.lang.Class r33;
        java.lang.reflect.Method r34;
        junit.framework.Test r35;
        java.lang.StringBuilder r46, r47, r49, r50;
        junit.framework.TestSuite r48;
        java.lang.IllegalAccessException r51;
        java.lang.reflect.InvocationTargetException r52;

        r0 := @this: junit.runner.BaseTestRunner;

        r32 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r32.<java.lang.String: int length()>();

        if $i0 > 0 goto label01;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        return null;

     label01:
        r33 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>(r32);

     label02:
        $r2 = newarray (java.lang.Class)[0];

        r34 = virtualinvoke r33.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r2);

     label03:
        $i1 = virtualinvoke r34.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label04;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>("Suite() method must be static");

        return null;

     label04:
        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke r34.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        r35 = (junit.framework.Test) $r4;

     label05:
        if r35 != null goto label06;

        return r35;

     label06:
        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        return r35;

     label07:
        $r5 := @caughtexception;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        r51 = (java.lang.IllegalAccessException) $r5;

        $r8 = virtualinvoke r51.<java.lang.IllegalAccessException: java.lang.String toString()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r10);

        return null;

     label08:
        $r23 := @caughtexception;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        r52 = (java.lang.reflect.InvocationTargetException) $r23;

        $r26 = virtualinvoke r52.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r27 = virtualinvoke $r26.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r29);

        return null;

     label09:
        $r30 := @caughtexception;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        r48 = new junit.framework.TestSuite;

        specialinvoke r48.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r33);

        return r48;

     label10:
        $r17 := @caughtexception;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r20 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r22);

        return null;

     label11:
        $r11 := @caughtexception;

        r1 = virtualinvoke $r11.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        r44 = r1;

        if r1 != null goto label12;

        r44 = r32;

     label12:
        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found \"");

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r16 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r16);

        return null;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.Exception from label01 to label02 with label10;
        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
        catch java.lang.IllegalAccessException from label04 to label05 with label07;
    }

    protected java.lang.Class loadSuiteClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.String processArguments(java.lang.String[])
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r2, $r3, $r4, $r6, r7;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r5;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String[];

        r7 = null;

        i4 = 0;

     label1:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label8;

        $r2 = r1[i4];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-noloading");

        if $z0 == 0 goto label2;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void setLoading(boolean)>(0);

        goto label7;

     label2:
        $r3 = r1[i4];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-nofilterstack");

        if $z1 == 0 goto label3;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 0;

        goto label7;

     label3:
        $r4 = r1[i4];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-c");

        if $z2 == 0 goto label6;

        $i2 = lengthof r1;

        $i1 = i4 + 1;

        if $i2 <= $i1 goto label4;

        $i3 = i4 + 1;

        $r6 = r1[$i3];

        r7 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>($r6);

        goto label5;

     label4:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Missing Test class name");

     label5:
        i4 = i4 + 1;

        goto label7;

     label6:
        r7 = r1[i4];

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return r7;
    }

    protected abstract void runFailed(java.lang.String);

    public void setLoading(boolean)
    {
        junit.runner.BaseTestRunner r0;
        boolean z0;

        r0 := @this: junit.runner.BaseTestRunner;

        z0 := @parameter0: boolean;

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = z0;

        return;
    }

    public void startTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        junit.framework.Test r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r3 := @parameter0: junit.framework.Test;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testStarted(java.lang.String)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract void testEnded(java.lang.String);

    public abstract void testFailed(int, junit.framework.Test, java.lang.Throwable);

    public abstract void testStarted(java.lang.String);

    protected boolean useReloadingTestSuiteLoader()
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String $r1;
        boolean $z0, $z1, z2;

        r0 := @this: junit.runner.BaseTestRunner;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("loading");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $z1 = r0.<junit.runner.BaseTestRunner: boolean fLoading>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }
}
