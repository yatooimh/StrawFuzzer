public class org.apache.commons.codec.binary.Base64 extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    static final int BASELENGTH;
    static final byte[] CHUNK_SEPARATOR;
    static final int CHUNK_SIZE;
    static final int EIGHTBIT;
    static final int FOURBYTE;
    static final int LOOKUPLENGTH;
    static final byte PAD;
    static final int SIGN;
    static final int SIXTEENBIT;
    static final int TWENTYFOURBITGROUP;
    private static byte[] base64Alphabet;
    private static byte[] lookUpBase64Alphabet;

    static void <clinit>()
    {
        java.lang.String $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11, r12;
        byte $b0, $b1, $b2, $b3, $b5, $b6, $b8, $b9, $b11, $b12, $b15, $b16, $b19, $b20, $b22, $b23, $b24;
        int $i4, $i7, $i10, $i13, $i14, $i17, $i18, $i21, i25, i26, i27, i28, i29, i30, i31, i32, i33;

        <org.apache.commons.codec.binary.Base64: int TWENTYFOURBITGROUP> = 24;

        <org.apache.commons.codec.binary.Base64: int SIXTEENBIT> = 16;

        <org.apache.commons.codec.binary.Base64: int SIGN> = -128;

        <org.apache.commons.codec.binary.Base64: byte PAD> = 61;

        <org.apache.commons.codec.binary.Base64: int LOOKUPLENGTH> = 64;

        <org.apache.commons.codec.binary.Base64: int FOURBYTE> = 4;

        <org.apache.commons.codec.binary.Base64: int EIGHTBIT> = 8;

        <org.apache.commons.codec.binary.Base64: int CHUNK_SIZE> = 76;

        <org.apache.commons.codec.binary.Base64: int BASELENGTH> = 255;

        $r0 = "\r\n";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r1;

        $r2 = newarray (byte)[255];

        <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet> = $r2;

        $r3 = newarray (byte)[64];

        <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet> = $r3;

        i25 = 0;

     label01:
        if i25 >= 255 goto label02;

        $r10 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b24 = (byte) -1;

        $r10[i25] = $b24;

        i25 = i25 + 1;

        goto label01;

     label02:
        i26 = 90;

     label03:
        if i26 < 65 goto label04;

        $r9 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i21 = i26 - 65;

        $b22 = (byte) $i21;

        $b23 = (byte) $b22;

        $r9[i26] = $b23;

        i26 = i26 + -1;

        goto label03;

     label04:
        i27 = 122;

     label05:
        if i27 < 97 goto label06;

        $r8 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i17 = i27 - 97;

        $i18 = $i17 + 26;

        $b19 = (byte) $i18;

        $b20 = (byte) $b19;

        $r8[i27] = $b20;

        i27 = i27 + -1;

        goto label05;

     label06:
        i28 = 57;

     label07:
        if i28 < 48 goto label08;

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i13 = i28 - 48;

        $i14 = $i13 + 52;

        $b15 = (byte) $i14;

        $b16 = (byte) $b15;

        $r7[i28] = $b16;

        i28 = i28 + -1;

        goto label07;

     label08:
        r11 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b0 = (byte) 62;

        r11[43] = $b0;

        $b1 = (byte) 63;

        r11[47] = $b1;

        i29 = 0;

     label09:
        if i29 > 25 goto label10;

        $r6 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i10 = i29 + 65;

        $b11 = (byte) $i10;

        $b12 = (byte) $b11;

        $r6[i29] = $b12;

        i29 = i29 + 1;

        goto label09;

     label10:
        i30 = 26;

        i31 = 0;

     label11:
        if i30 > 51 goto label12;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i7 = i31 + 97;

        $b8 = (byte) $i7;

        $b9 = (byte) $b8;

        $r5[i30] = $b9;

        i30 = i30 + 1;

        i31 = i31 + 1;

        goto label11;

     label12:
        i32 = 52;

        i33 = 0;

     label13:
        if i32 > 61 goto label14;

        $r4 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i4 = i33 + 48;

        $b5 = (byte) $i4;

        $b6 = (byte) $b5;

        $r4[i32] = $b6;

        i32 = i32 + 1;

        i33 = i33 + 1;

        goto label13;

     label14:
        r12 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b2 = (byte) 43;

        r12[62] = $b2;

        $b3 = (byte) 47;

        r12[63] = $b3;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r0, r1, $r2, $r3, $r4, r5, r6;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i12, $i13, $i19, $i20, $i23, $i25, $i26, $i30, $i31, $i37, $i38, $i41, $i42, $i43, $i46, i48, i49, i51, i52, i53;
        byte $b4, $b8, $b10, $b11, $b14, $b15, $b16, $b17, $b18, $b21, $b22, $b24, $b27, $b28, $b29, $b32, $b33, $b34, $b35, $b36, $b39, $b40, $b44, $b45, b54, b55, b56, b57, b58, b59, b60;

        r5 := @parameter0: byte[];

        r0 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])>(r5);

        $i1 = lengthof r0;

        if $i1 != 0 goto label1;

        $r4 = newarray (byte)[0];

        return $r4;

     label1:
        $i2 = lengthof r0;

        i0 = $i2 / 4;

        i48 = lengthof r0;

     label2:
        $i3 = i48 - 1;

        $b4 = r0[$i3];

        if $b4 != 61 goto label3;

        i49 = i48 - 1;

        i48 = i49;

        if i49 != 0 goto label2;

        $r3 = newarray (byte)[0];

        return $r3;

     label3:
        $i5 = i48 - i0;

        r6 = newarray (byte)[$i5];

        i51 = 0;

        i52 = 0;

     label4:
        if i52 >= i0 goto label8;

        i53 = i52 * 4;

        $i6 = i53 + 2;

        b54 = r0[$i6];

        $i7 = i53 + 3;

        b55 = r0[$i7];

        r1 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b8 = r0[i53];

        b56 = r1[$b8];

        $i9 = i53 + 1;

        $b10 = r0[$i9];

        b57 = r1[$b10];

        if b54 == 61 goto label5;

        if b55 == 61 goto label5;

        b58 = r1[b54];

        b59 = r1[b55];

        $i30 = b56 << 2;

        $b29 = b57 >> 4;

        $i31 = $i30 | $b29;

        $b32 = (byte) $i31;

        $b33 = (byte) $b32;

        r6[i51] = $b33;

        $i41 = i51 + 1;

        $b34 = b57 & 15;

        $i37 = $b34 << 4;

        $b35 = b58 >> 2;

        $b36 = $b35 & 15;

        $i38 = $i37 | $b36;

        $b39 = (byte) $i38;

        $b40 = (byte) $b39;

        r6[$i41] = $b40;

        $i46 = i51 + 2;

        $i42 = b58 << 6;

        $i43 = $i42 | b59;

        $b44 = (byte) $i43;

        $b45 = (byte) $b44;

        r6[$i46] = $b45;

        goto label7;

     label5:
        if b54 != 61 goto label6;

        $i25 = b56 << 2;

        $b24 = b57 >> 4;

        $i26 = $i25 | $b24;

        $b27 = (byte) $i26;

        $b28 = (byte) $b27;

        r6[i51] = $b28;

        goto label7;

     label6:
        if b55 != 61 goto label7;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b60 = $r2[b54];

        $i12 = b56 << 2;

        $b11 = b57 >> 4;

        $i13 = $i12 | $b11;

        $b14 = (byte) $i13;

        $b15 = (byte) $b14;

        r6[i51] = $b15;

        $i23 = i51 + 1;

        $b16 = b57 & 15;

        $i19 = $b16 << 4;

        $b17 = b60 >> 2;

        $b18 = $b17 & 15;

        $i20 = $i19 | $b18;

        $b21 = (byte) $i20;

        $b22 = (byte) $b21;

        r6[$i23] = $b22;

     label7:
        i51 = i51 + 3;

        i52 = i52 + 1;

        goto label4;

     label8:
        return r6;
    }

    static byte[] discardNonBase64(byte[])
    {
        byte[] r0, r1, r2;
        int $i0, $i1, i4, i5, i6;
        byte $b2, $b3;
        boolean $z0;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        r0 = newarray (byte)[$i0];

        i4 = 0;

        i5 = 0;

     label1:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label3;

        i6 = i4;

        $b2 = r1[i5];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b2);

        if $z0 == 0 goto label2;

        $b3 = r1[i5];

        r0[i4] = $b3;

        i6 = i4 + 1;

     label2:
        i5 = i5 + 1;

        i4 = i6;

        goto label1;

     label3:
        r2 = newarray (byte)[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i4);

        return r2;
    }

    static byte[] discardWhitespace(byte[])
    {
        byte[] r0, r1, r2;
        byte b0, $b3, $b4;
        int $i1, $i2, i5, i6;

        r1 := @parameter0: byte[];

        $i1 = lengthof r1;

        r0 = newarray (byte)[$i1];

        i5 = 0;

        i6 = 0;

     label1:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label3;

        b0 = r1[i6];

        if b0 == 9 goto label2;

        if b0 == 10 goto label2;

        if b0 == 13 goto label2;

        if b0 == 32 goto label2;

        $b3 = r1[i6];

        $b4 = (byte) $b3;

        r0[i5] = $b4;

        i5 = i5 + 1;

        goto label2;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        r2 = newarray (byte)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i5);

        return r2;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        boolean z0;
        byte[] r0, $r1, $r2, r3, r4, r5, r6, r7, r8, r9;
        byte b0, b1, b2, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b17, $b18, $b21, $b22, $b24, $b26, $b27, $b28, $b29, $b30, $b32, $b33, $b35, $b37, $b41, $b42, $b43, $b44, $b45, $b46, $b47, $b48, $b49, $b50, $b53, $b54, $b58, $b59, $b61, $b62, $b63, b86, b87, b88, b91, b93, b96, b97, b99, b100, b101, b102, b103, b105, b107;
        int $i3, $i4, $i5, $i6, $i7, $i15, $i16, $i19, $i20, $i23, $i25, $i31, $i34, $i36, $i38, $i39, $i40, $i51, $i52, $i55, $i56, $i57, $i60, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i94, i95;
        float $f0, $f1;
        double $d0, $d1;
        short s89, s90, s92, s98, s104, s106;

        r3 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $i3 = lengthof r3;

        i74 = $i3 * 8;

        i75 = i74 % 24;

        i76 = i74 / 24;

        i77 = 0;

        if i75 == 0 goto label01;

        $i73 = i76 + 1;

        i78 = $i73 * 4;

        goto label02;

     label01:
        i78 = i76 * 4;

     label02:
        i79 = i78;

        if z0 == 0 goto label05;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i70 = lengthof $r1;

        if $i70 != 0 goto label03;

        i80 = 0;

        goto label04;

     label03:
        $f0 = (float) i78;

        $f1 = $f0 / 76.0F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i80 = (int) $d1;

     label04:
        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i71 = lengthof $r2;

        $i72 = $i71 * i80;

        i79 = i78 + $i72;

        i77 = i80;

     label05:
        r0 = newarray (byte)[i79];

        i81 = 0;

        i82 = 0;

        i83 = 76;

        i84 = 0;

     label06:
        if i82 >= i76 goto label15;

        i85 = i82 * 3;

        b86 = r3[i85];

        $i39 = i85 + 1;

        b87 = r3[$i39];

        $i40 = i85 + 2;

        b88 = r3[$i40];

        $b41 = b87 & 15;

        b0 = (byte) $b41;

        $b42 = b86 & 3;

        b1 = (byte) $b42;

        $b43 = b86 & -128;

        if $b43 != 0 goto label07;

        s89 = b86 >> 2;

        goto label08;

     label07:
        $b44 = b86 >> 2;

        s89 = $b44 ^ 192;

     label08:
        b2 = (byte) s89;

        $b45 = b87 & -128;

        if $b45 != 0 goto label09;

        s90 = b87 >> 4;

        goto label10;

     label09:
        $b46 = b87 >> 4;

        s90 = $b46 ^ 240;

     label10:
        b91 = (byte) s90;

        $b47 = b88 & -128;

        if $b47 != 0 goto label11;

        s92 = b88 >> 6;

        goto label12;

     label11:
        $b48 = b88 >> 6;

        s92 = $b48 ^ 252;

     label12:
        b93 = (byte) s92;

        r4 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b49 = r4[b2];

        $b50 = (byte) $b49;

        r0[i81] = $b50;

        $i55 = i81 + 1;

        $i51 = b1 << 4;

        $i52 = b91 | $i51;

        $b53 = r4[$i52];

        $b54 = (byte) $b53;

        r0[$i55] = $b54;

        $i60 = i81 + 2;

        $i56 = b0 << 2;

        $i57 = $i56 | b93;

        $b58 = r4[$i57];

        $b59 = (byte) $b58;

        r0[$i60] = $b59;

        $i64 = i81 + 3;

        $b61 = b88 & 63;

        $b62 = r4[$b61];

        $b63 = (byte) $b62;

        r0[$i64] = $b63;

        i81 = i81 + 4;

        if z0 == 0 goto label14;

        if i81 != i83 goto label13;

        r5 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i65 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r0, i81, $i65);

        i84 = i84 + 1;

        r6 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        i94 = lengthof r6;

        $i66 = lengthof r6;

        i81 = i81 + $i66;

        $i67 = i84 + 1;

        $i69 = $i67 * 76;

        $i68 = i94 * i84;

        i83 = $i69 + $i68;

        goto label14;

     label13:
        goto label14;

     label14:
        i82 = i82 + 1;

        goto label06;

     label15:
        i95 = i82 * 3;

        if i75 != 8 goto label18;

        b96 = r3[i95];

        $b26 = b96 & 3;

        b97 = (byte) $b26;

        $b27 = b96 & -128;

        if $b27 != 0 goto label16;

        s98 = b96 >> 2;

        goto label17;

     label16:
        $b28 = b96 >> 2;

        s98 = $b28 ^ 192;

     label17:
        b99 = (byte) s98;

        r7 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b29 = r7[b99];

        $b30 = (byte) $b29;

        r0[i81] = $b30;

        $i34 = i81 + 1;

        $i31 = b97 << 4;

        $b32 = r7[$i31];

        $b33 = (byte) $b32;

        r0[$i34] = $b33;

        $i36 = i81 + 2;

        $b35 = (byte) 61;

        r0[$i36] = $b35;

        $i38 = i81 + 3;

        $b37 = (byte) 61;

        r0[$i38] = $b37;

        goto label23;

     label18:
        if i75 != 16 goto label23;

        b100 = r3[i95];

        $i7 = i95 + 1;

        b101 = r3[$i7];

        $b8 = b101 & 15;

        b102 = (byte) $b8;

        $b9 = b100 & 3;

        b103 = (byte) $b9;

        $b10 = b100 & -128;

        if $b10 != 0 goto label19;

        s104 = b100 >> 2;

        goto label20;

     label19:
        $b11 = b100 >> 2;

        s104 = $b11 ^ 192;

     label20:
        b105 = (byte) s104;

        s106 = b101 >> 4;

        $b12 = b101 & -128;

        if $b12 != 0 goto label21;

        goto label22;

     label21:
        s106 = s106 ^ 240;

     label22:
        b107 = (byte) s106;

        r8 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b13 = r8[b105];

        $b14 = (byte) $b13;

        r0[i81] = $b14;

        $i19 = i81 + 1;

        $i15 = b103 << 4;

        $i16 = b107 | $i15;

        $b17 = r8[$i16];

        $b18 = (byte) $b17;

        r0[$i19] = $b18;

        $i23 = i81 + 2;

        $i20 = b102 << 2;

        $b21 = r8[$i20];

        $b22 = (byte) $b21;

        r0[$i23] = $b22;

        $i25 = i81 + 3;

        $b24 = (byte) 61;

        r0[$i25] = $b24;

        goto label23;

     label23:
        if z0 == 0 goto label25;

        if i84 >= i77 goto label24;

        r9 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i4 = lengthof r9;

        $i6 = i79 - $i4;

        $i5 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r0, $i6, $i5);

        goto label25;

     label24:
        goto label25;

     label25:
        return r0;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        int i0, i2;
        byte $b1;
        boolean $z0;
        byte[] r0, r1;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])>(r0);

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return 1;

     label1:
        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $b1 = r1[i2];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static boolean isBase64(byte)
    {
        byte b0, $b1;
        byte[] $r0;

        b0 := @parameter0: byte;

        if b0 != 61 goto label1;

        return 1;

     label1:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b1 = $r0[b0];

        if $b1 != -1 goto label2;

        return 0;

     label2:
        return 1;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        org.apache.commons.codec.DecoderException $r2;
        byte[] $r3, $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label1;

        $r3 = (byte[]) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r3);

        return $r4;

     label1:
        $r2 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r2.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 decode is not a byte[]");

        throw $r2;
    }

    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r1);

        return $r2;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        org.apache.commons.codec.EncoderException $r2;
        byte[] $r3, $r4;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label1;

        $r3 = (byte[]) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r3);

        return $r4;

     label1:
        $r2 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r2.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 encode is not a byte[]");

        throw $r2;
    }

    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r1, 0);

        return $r2;
    }
}
