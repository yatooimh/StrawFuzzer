public class org.apache.commons.codec.binary.Hex extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    private static final char[] DIGITS;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 97;

        $r0[11] = 98;

        $r0[12] = 99;

        $r0[13] = 100;

        $r0[14] = 101;

        $r0[15] = 102;

        <org.apache.commons.codec.binary.Hex: char[] DIGITS> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.commons.codec.binary.Hex r0;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decodeHex(char[]) throws org.apache.commons.codec.DecoderException
    {
        char[] r0;
        int i0, i1, i2, $i3, $i4, $i7, $i8, $i9, i12, i13, i14;
        byte[] r1;
        org.apache.commons.codec.DecoderException $r2;
        char $c5, $c6;
        byte $b10, $b11;

        r0 := @parameter0: char[];

        i0 = lengthof r0;

        $i3 = i0 & 1;

        if $i3 != 0 goto label3;

        $i4 = i0 >> 1;

        r1 = newarray (byte)[$i4];

        i12 = 0;

        i13 = 0;

     label1:
        if i13 >= i0 goto label2;

        $c5 = r0[i13];

        i1 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c5, i13);

        i14 = i13 + 1;

        $c6 = r0[i14];

        i2 = staticinvoke <org.apache.commons.codec.binary.Hex: int toDigit(char,int)>($c6, i14);

        i13 = i14 + 1;

        $i7 = i1 << 4;

        $i8 = $i7 | i2;

        $i9 = $i8 & 255;

        $b10 = (byte) $i9;

        $b11 = (byte) $b10;

        r1[i12] = $b11;

        i12 = i12 + 1;

        goto label1;

     label2:
        return r1;

     label3:
        $r2 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r2.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Odd number of characters.");

        throw $r2;
    }

    public static char[] encodeHex(byte[])
    {
        byte[] r0;
        int i0, i1, $i2, i12, i13;
        char[] r1, r2;
        byte $b3, $b8, $b9;
        short $s4, $s5;
        char $c6, $c7, $c10, $c11;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        $i2 = i0 << 1;

        r1 = newarray (char)[$i2];

        i12 = 0;

        i13 = 0;

     label1:
        if i12 >= i0 goto label2;

        i1 = i13 + 1;

        r2 = <org.apache.commons.codec.binary.Hex: char[] DIGITS>;

        $b3 = r0[i12];

        $s4 = $b3 & 240;

        $s5 = $s4 >>> 4;

        $c6 = r2[$s5];

        $c7 = (char) $c6;

        r1[i13] = $c7;

        i13 = i1 + 1;

        $b8 = r0[i12];

        $b9 = $b8 & 15;

        $c10 = r2[$b9];

        $c11 = (char) $c10;

        r1[i1] = $c11;

        i12 = i12 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException
    {
        char c0;
        int i1, i2;
        java.lang.StringBuilder $r1;
        org.apache.commons.codec.DecoderException $r6;
        java.lang.String $r7;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        i2 = staticinvoke <java.lang.Character: int digit(char,int)>(c0, 16);

        if i2 == -1 goto label1;

        return i2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hexadecimal charcter ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = new org.apache.commons.codec.DecoderException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        boolean $z0;
        java.lang.String $r1, $r4;
        java.lang.ClassCastException $r2;
        org.apache.commons.codec.DecoderException $r3;
        java.lang.Object r5;
        char[] r6;
        byte[] r7;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r5 := @parameter0: java.lang.Object;

     label1:
        $z0 = r5 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        $r1 = (java.lang.String) r5;

        r6 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

     label2:
        goto label4;

     label3:
        r6 = (char[]) r5;

     label4:
        r7 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>(r6);

     label5:
        return r7;

     label6:
        $r2 := @caughtexception;

        $r3 = new org.apache.commons.codec.DecoderException;

        $r4 = virtualinvoke $r2.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r3.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label3 to label4 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }

    public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        byte[] r1, $r4;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r1);

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r4 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r3);

        return $r4;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Hex r0;
        boolean $z0;
        java.lang.String $r1, $r4;
        java.lang.ClassCastException $r2;
        org.apache.commons.codec.EncoderException $r3;
        java.lang.Object r5;
        byte[] r6;
        char[] r7;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r5 := @parameter0: java.lang.Object;

     label1:
        $z0 = r5 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        $r1 = (java.lang.String) r5;

        r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

     label2:
        goto label4;

     label3:
        r6 = (byte[]) r5;

     label4:
        r7 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r6);

     label5:
        return r7;

     label6:
        $r2 := @caughtexception;

        $r3 = new org.apache.commons.codec.EncoderException;

        $r4 = virtualinvoke $r2.<java.lang.ClassCastException: java.lang.String getMessage()>();

        specialinvoke $r3.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label3 to label4 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }

    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Hex r0;
        byte[] r1, $r4;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: org.apache.commons.codec.binary.Hex;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        $r3 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r1);

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        return $r4;
    }
}
