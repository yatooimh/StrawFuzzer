public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    public static final java.lang.String PRIORITY_KEY;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String TCCL_KEY;
    private static final java.lang.String WEAK_HASHTABLE_CLASSNAME;
    private static java.lang.String diagnosticPrefix;
    private static java.io.PrintStream diagnosticsStream;
    protected static java.util.Hashtable factories;
    protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;
    private static java.lang.ClassLoader thisClassLoader;

    static void <clinit>()
    {
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r1;
        boolean $z0;

        <org.apache.commons.logging.LogFactory: java.lang.String WEAK_HASHTABLE_CLASSNAME> = "org.apache.commons.logging.impl.WeakHashtable";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.LogFactoryImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lorg/apache/commons/logging/LogFactory;");

        <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> = $r0;

        staticinvoke <org.apache.commons.logging.LogFactory: void initDiagnostics()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>(class "Lorg/apache/commons/logging/LogFactory;");

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>();

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = $r1;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED");

     label1:
        return;
    }

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0);

        return;
    }

    private static void cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory)
    {
        java.lang.ClassLoader r0;
        org.apache.commons.logging.LogFactory r1;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.commons.logging.LogFactory;

        if r1 == null goto label2;

        if r0 != null goto label1;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = r1;

        goto label2;

     label1:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        return;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r0, $r38;
        java.lang.String $r1, $r2, $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r19, $r20, $r28, r29, r41, r43, r46;
        java.lang.Class $r3, $r7, $r23, $r27, r31, r32, r33, r34, r35, r53;
        java.lang.ClassLoader $r5, $r14, $r18, $r26, r30;
        java.lang.NoClassDefFoundError $r13;
        java.lang.ClassNotFoundException $r17;
        java.lang.Exception $r21;
        org.apache.commons.logging.LogConfigurationException $r22, $r24;
        java.lang.ClassCastException $r25, r47;
        java.lang.StringBuilder r36, r37, r40, r42, r44, r45, r49, r51, r52;
        org.apache.commons.logging.LogFactory r39, r54;

        r29 := @parameter0: java.lang.String;

        r30 := @parameter1: java.lang.ClassLoader;

        r31 = null;

        r32 = null;

        r33 = null;

        r34 = null;

        if r30 == null goto label152;

        r32 = null;

     label001:
        r35 = virtualinvoke r30.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r29);

     label002:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label003:
        $r3 = class "Lorg/apache/commons/logging/LogFactory;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r35);

        if $z1 == 0 goto label021;

     label004:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label005:
        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label045;

     label006:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label007:
        r36 = new java.lang.StringBuilder;

     label008:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label009:
        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

     label010:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label011:
        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded class ");

     label012:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label013:
        $r10 = virtualinvoke r35.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label014:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label015:
        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from classloader ");

     label016:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label017:
        $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r30);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label018:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label019:
        $r12 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r12);

     label020:
        goto label045;

     label021:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label022:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label045;

     label023:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label024:
        r37 = new java.lang.StringBuilder;

     label025:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label026:
        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

     label027:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label028:
        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Factory class ");

     label029:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label030:
        $r4 = virtualinvoke r35.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label031:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label032:
        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loaded from classloader ");

     label033:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label034:
        $r5 = virtualinvoke r35.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r5);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label035:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label036:
        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend \'");

     label037:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label038:
        $r7 = class "Lorg/apache/commons/logging/LogFactory;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label039:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label040:
        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as loaded by this classloader.");

     label041:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label042:
        $r9 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label043:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label044:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", r30);

     label045:
        r34 = r35;

        r32 = r35;

        r31 = r35;

        r33 = r35;

     label046:
        $r38 = virtualinvoke r35.<java.lang.Class: java.lang.Object newInstance()>();

        r39 = (org.apache.commons.logging.LogFactory) $r38;

     label047:
        return r39;

     label048:
        $r25 := @caughtexception;

        r32 = r34;

        r33 = r34;

     label049:
        $r26 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r30 != $r26 goto label152;

     label050:
        r33 = r34;

     label051:
        z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>(r34);

     label052:
        r33 = r34;

     label053:
        r40 = new java.lang.StringBuilder;

     label054:
        r33 = r34;

     label055:
        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

     label056:
        r33 = r34;

     label057:
        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application has specified that a custom LogFactory implementation should be used but Class \'");

     label058:
        r33 = r34;

     label059:
        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

     label060:
        r33 = r34;

     label061:
        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be converted to \'");

     label062:
        r33 = r34;

     label063:
        $r27 = class "Lorg/apache/commons/logging/LogFactory;";

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

     label064:
        r33 = r34;

     label065:
        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

     label066:
        r33 = r34;

     label067:
        r41 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

     label068:
        if z0 == 0 goto label079;

        r33 = r34;

     label069:
        r42 = new java.lang.StringBuilder;

     label070:
        r33 = r34;

     label071:
        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

     label072:
        r33 = r34;

     label073:
        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

     label074:
        r33 = r34;

     label075:
        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes in incompatible classloaders. Background can be found in http://jakarta.apache.org/commons/logging/tech.html. If you have not explicitly specified a custom LogFactory then it is likely that the container has set one without your knowledge. In this case, consider using the commons-logging-adapters.jar file or specifying the standard LogFactory from the command line. ");

     label076:
        r33 = r34;

     label077:
        r43 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

     label078:
        goto label089;

     label079:
        r33 = r34;

     label080:
        r44 = new java.lang.StringBuilder;

     label081:
        r33 = r34;

     label082:
        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

     label083:
        r33 = r34;

     label084:
        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

     label085:
        r33 = r34;

     label086:
        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Please check the custom implementation. ");

     label087:
        r33 = r34;

     label088:
        r43 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

     label089:
        r33 = r34;

     label090:
        r45 = new java.lang.StringBuilder;

     label091:
        r33 = r34;

     label092:
        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

     label093:
        r33 = r34;

     label094:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

     label095:
        r33 = r34;

     label096:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Help can be found @http://jakarta.apache.org/commons/logging/troubleshooting.html.");

     label097:
        r33 = r34;

     label098:
        r46 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

     label099:
        r33 = r34;

     label100:
        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label103;

     label101:
        r33 = r34;

     label102:
        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r46);

     label103:
        r33 = r34;

     label104:
        r47 = new java.lang.ClassCastException;

     label105:
        r33 = r34;

     label106:
        specialinvoke r47.<java.lang.ClassCastException: void <init>(java.lang.String)>(r46);

     label107:
        r33 = r34;

     label108:
        throw r47;

     label109:
        $r13 := @caughtexception;

        r33 = r32;

     label110:
        $r14 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r30 != $r14 goto label131;

     label111:
        r33 = r32;

     label112:
        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label129;

     label113:
        r33 = r32;

     label114:
        r49 = new java.lang.StringBuilder;

     label115:
        r33 = r32;

     label116:
        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

     label117:
        r33 = r32;

     label118:
        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

     label119:
        r33 = r32;

     label120:
        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

     label121:
        r33 = r32;

     label122:
        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be loaded via classloader ");

     label123:
        r33 = r32;

     label124:
        $r15 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r30);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label125:
        r33 = r32;

     label126:
        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it depends on some other class that cannot be found.");

     label127:
        r33 = r32;

     label128:
        $r16 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r16);

     label129:
        r33 = r32;

     label130:
        throw $r13;

     label131:
        goto label152;

     label132:
        $r17 := @caughtexception;

        r32 = r31;

        r33 = r31;

     label133:
        $r18 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r30 != $r18 goto label152;

     label134:
        r33 = r31;

     label135:
        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label150;

     label136:
        r33 = r31;

     label137:
        r51 = new java.lang.StringBuilder;

     label138:
        r33 = r31;

     label139:
        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

     label140:
        r33 = r31;

     label141:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate any class called \'");

     label142:
        r33 = r31;

     label143:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

     label144:
        r33 = r31;

     label145:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via classloader ");

     label146:
        r33 = r31;

     label147:
        $r19 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r30);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label148:
        r33 = r31;

     label149:
        $r20 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r20);

     label150:
        r33 = r31;

     label151:
        throw $r17;

     label152:
        r33 = r32;

     label153:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label166;

     label154:
        r33 = r32;

     label155:
        r52 = new java.lang.StringBuilder;

     label156:
        r33 = r32;

     label157:
        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

     label158:
        r33 = r32;

     label159:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load factory class via classloader ");

     label160:
        r33 = r32;

     label161:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r30);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label162:
        r33 = r32;

     label163:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - trying the classloader associated with this LogFactory.");

     label164:
        r33 = r32;

     label165:
        $r2 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label166:
        r33 = r32;

     label167:
        r53 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r29);

     label168:
        r33 = r53;

     label169:
        $r0 = virtualinvoke r53.<java.lang.Class: java.lang.Object newInstance()>();

        r54 = (org.apache.commons.logging.LogFactory) $r0;

     label170:
        return r54;

     label171:
        $r21 := @caughtexception;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label172;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.");

     label172:
        if r33 == null goto label173;

        $r23 = class "Lorg/apache/commons/logging/LogFactory;";

        $z7 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r33);

        if $z7 != 0 goto label173;

        $r24 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r24.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", $r21);

        return $r24;

     label173:
        $r22 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r22.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r21);

        return $r22;

        catch java.lang.ClassNotFoundException from label001 to label002 with label132;
        catch java.lang.NoClassDefFoundError from label001 to label002 with label109;
        catch java.lang.ClassCastException from label001 to label002 with label048;
        catch java.lang.Exception from label001 to label002 with label171;
        catch java.lang.ClassNotFoundException from label003 to label004 with label132;
        catch java.lang.NoClassDefFoundError from label003 to label004 with label109;
        catch java.lang.ClassCastException from label003 to label004 with label048;
        catch java.lang.Exception from label003 to label004 with label171;
        catch java.lang.ClassNotFoundException from label005 to label006 with label132;
        catch java.lang.NoClassDefFoundError from label005 to label006 with label109;
        catch java.lang.ClassCastException from label005 to label006 with label048;
        catch java.lang.Exception from label005 to label006 with label171;
        catch java.lang.ClassNotFoundException from label007 to label008 with label132;
        catch java.lang.NoClassDefFoundError from label007 to label008 with label109;
        catch java.lang.ClassCastException from label007 to label008 with label048;
        catch java.lang.Exception from label007 to label008 with label171;
        catch java.lang.ClassNotFoundException from label009 to label010 with label132;
        catch java.lang.NoClassDefFoundError from label009 to label010 with label109;
        catch java.lang.ClassCastException from label009 to label010 with label048;
        catch java.lang.Exception from label009 to label010 with label171;
        catch java.lang.ClassNotFoundException from label011 to label012 with label132;
        catch java.lang.NoClassDefFoundError from label011 to label012 with label109;
        catch java.lang.ClassCastException from label011 to label012 with label048;
        catch java.lang.Exception from label011 to label012 with label171;
        catch java.lang.ClassNotFoundException from label013 to label014 with label132;
        catch java.lang.NoClassDefFoundError from label013 to label014 with label109;
        catch java.lang.ClassCastException from label013 to label014 with label048;
        catch java.lang.Exception from label013 to label014 with label171;
        catch java.lang.ClassNotFoundException from label015 to label016 with label132;
        catch java.lang.NoClassDefFoundError from label015 to label016 with label109;
        catch java.lang.ClassCastException from label015 to label016 with label048;
        catch java.lang.Exception from label015 to label016 with label171;
        catch java.lang.ClassNotFoundException from label017 to label018 with label132;
        catch java.lang.NoClassDefFoundError from label017 to label018 with label109;
        catch java.lang.ClassCastException from label017 to label018 with label048;
        catch java.lang.Exception from label017 to label018 with label171;
        catch java.lang.ClassNotFoundException from label019 to label020 with label132;
        catch java.lang.NoClassDefFoundError from label019 to label020 with label109;
        catch java.lang.ClassCastException from label019 to label020 with label048;
        catch java.lang.Exception from label019 to label020 with label171;
        catch java.lang.ClassNotFoundException from label022 to label023 with label132;
        catch java.lang.NoClassDefFoundError from label022 to label023 with label109;
        catch java.lang.ClassCastException from label022 to label023 with label048;
        catch java.lang.Exception from label022 to label023 with label171;
        catch java.lang.ClassNotFoundException from label024 to label025 with label132;
        catch java.lang.NoClassDefFoundError from label024 to label025 with label109;
        catch java.lang.ClassCastException from label024 to label025 with label048;
        catch java.lang.Exception from label024 to label025 with label171;
        catch java.lang.ClassNotFoundException from label026 to label027 with label132;
        catch java.lang.NoClassDefFoundError from label026 to label027 with label109;
        catch java.lang.ClassCastException from label026 to label027 with label048;
        catch java.lang.Exception from label026 to label027 with label171;
        catch java.lang.ClassNotFoundException from label028 to label029 with label132;
        catch java.lang.NoClassDefFoundError from label028 to label029 with label109;
        catch java.lang.ClassCastException from label028 to label029 with label048;
        catch java.lang.Exception from label028 to label029 with label171;
        catch java.lang.ClassNotFoundException from label030 to label031 with label132;
        catch java.lang.NoClassDefFoundError from label030 to label031 with label109;
        catch java.lang.ClassCastException from label030 to label031 with label048;
        catch java.lang.Exception from label030 to label031 with label171;
        catch java.lang.ClassNotFoundException from label032 to label033 with label132;
        catch java.lang.NoClassDefFoundError from label032 to label033 with label109;
        catch java.lang.ClassCastException from label032 to label033 with label048;
        catch java.lang.Exception from label032 to label033 with label171;
        catch java.lang.ClassNotFoundException from label034 to label035 with label132;
        catch java.lang.NoClassDefFoundError from label034 to label035 with label109;
        catch java.lang.ClassCastException from label034 to label035 with label048;
        catch java.lang.Exception from label034 to label035 with label171;
        catch java.lang.ClassNotFoundException from label036 to label037 with label132;
        catch java.lang.NoClassDefFoundError from label036 to label037 with label109;
        catch java.lang.ClassCastException from label036 to label037 with label048;
        catch java.lang.Exception from label036 to label037 with label171;
        catch java.lang.ClassNotFoundException from label038 to label039 with label132;
        catch java.lang.NoClassDefFoundError from label038 to label039 with label109;
        catch java.lang.ClassCastException from label038 to label039 with label048;
        catch java.lang.Exception from label038 to label039 with label171;
        catch java.lang.ClassNotFoundException from label040 to label041 with label132;
        catch java.lang.NoClassDefFoundError from label040 to label041 with label109;
        catch java.lang.ClassCastException from label040 to label041 with label048;
        catch java.lang.Exception from label040 to label041 with label171;
        catch java.lang.ClassNotFoundException from label042 to label043 with label132;
        catch java.lang.NoClassDefFoundError from label042 to label043 with label109;
        catch java.lang.ClassCastException from label042 to label043 with label048;
        catch java.lang.Exception from label042 to label043 with label171;
        catch java.lang.ClassNotFoundException from label044 to label045 with label132;
        catch java.lang.NoClassDefFoundError from label044 to label045 with label109;
        catch java.lang.ClassCastException from label044 to label045 with label048;
        catch java.lang.Exception from label044 to label045 with label171;
        catch java.lang.ClassNotFoundException from label046 to label047 with label132;
        catch java.lang.NoClassDefFoundError from label046 to label047 with label109;
        catch java.lang.ClassCastException from label046 to label047 with label048;
        catch java.lang.Exception from label046 to label047 with label171;
        catch java.lang.Exception from label049 to label050 with label171;
        catch java.lang.Exception from label051 to label052 with label171;
        catch java.lang.Exception from label053 to label054 with label171;
        catch java.lang.Exception from label055 to label056 with label171;
        catch java.lang.Exception from label057 to label058 with label171;
        catch java.lang.Exception from label059 to label060 with label171;
        catch java.lang.Exception from label061 to label062 with label171;
        catch java.lang.Exception from label063 to label064 with label171;
        catch java.lang.Exception from label065 to label066 with label171;
        catch java.lang.Exception from label067 to label068 with label171;
        catch java.lang.Exception from label069 to label070 with label171;
        catch java.lang.Exception from label071 to label072 with label171;
        catch java.lang.Exception from label073 to label074 with label171;
        catch java.lang.Exception from label075 to label076 with label171;
        catch java.lang.Exception from label077 to label078 with label171;
        catch java.lang.Exception from label080 to label081 with label171;
        catch java.lang.Exception from label082 to label083 with label171;
        catch java.lang.Exception from label084 to label085 with label171;
        catch java.lang.Exception from label086 to label087 with label171;
        catch java.lang.Exception from label088 to label089 with label171;
        catch java.lang.Exception from label090 to label091 with label171;
        catch java.lang.Exception from label092 to label093 with label171;
        catch java.lang.Exception from label094 to label095 with label171;
        catch java.lang.Exception from label096 to label097 with label171;
        catch java.lang.Exception from label098 to label099 with label171;
        catch java.lang.Exception from label100 to label101 with label171;
        catch java.lang.Exception from label102 to label103 with label171;
        catch java.lang.Exception from label104 to label105 with label171;
        catch java.lang.Exception from label106 to label107 with label171;
        catch java.lang.Exception from label108 to label109 with label171;
        catch java.lang.Exception from label110 to label111 with label171;
        catch java.lang.Exception from label112 to label113 with label171;
        catch java.lang.Exception from label114 to label115 with label171;
        catch java.lang.Exception from label116 to label117 with label171;
        catch java.lang.Exception from label118 to label119 with label171;
        catch java.lang.Exception from label120 to label121 with label171;
        catch java.lang.Exception from label122 to label123 with label171;
        catch java.lang.Exception from label124 to label125 with label171;
        catch java.lang.Exception from label126 to label127 with label171;
        catch java.lang.Exception from label128 to label129 with label171;
        catch java.lang.Exception from label130 to label131 with label171;
        catch java.lang.Exception from label133 to label134 with label171;
        catch java.lang.Exception from label135 to label136 with label171;
        catch java.lang.Exception from label137 to label138 with label171;
        catch java.lang.Exception from label139 to label140 with label171;
        catch java.lang.Exception from label141 to label142 with label171;
        catch java.lang.Exception from label143 to label144 with label171;
        catch java.lang.Exception from label145 to label146 with label171;
        catch java.lang.Exception from label147 to label148 with label171;
        catch java.lang.Exception from label149 to label150 with label171;
        catch java.lang.Exception from label151 to label152 with label171;
        catch java.lang.Exception from label153 to label154 with label171;
        catch java.lang.Exception from label155 to label156 with label171;
        catch java.lang.Exception from label157 to label158 with label171;
        catch java.lang.Exception from label159 to label160 with label171;
        catch java.lang.Exception from label161 to label162 with label171;
        catch java.lang.Exception from label163 to label164 with label171;
        catch java.lang.Exception from label165 to label166 with label171;
        catch java.lang.Exception from label167 to label168 with label171;
        catch java.lang.Exception from label169 to label170 with label171;
    }

    private static final java.util.Hashtable createFactoryStore()
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.util.Hashtable $r2, r8, r9;
        java.lang.Throwable $r3;
        java.lang.String $r4, r6, r7;
        boolean $z0, $z1;
        java.io.PrintStream $r5;

        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl");

        r7 = r6;

        if r6 != null goto label1;

        r7 = "org.apache.commons.logging.impl.WeakHashtable";

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r7);

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (java.util.Hashtable) $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r8 = null;

        $r4 = "org.apache.commons.logging.impl.WeakHashtable";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z0 != 0 goto label5;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label4;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        r8 = null;

        goto label5;

     label4:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        r8 = null;

     label5:
        r9 = r8;

        if r8 != null goto label6;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r9 = $r2;

     label6:
        return r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.Thread $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        boolean $z0;
        java.lang.ClassLoader r10, r12;
        java.lang.reflect.Method r11;
        org.apache.commons.logging.LogConfigurationException r18, r19;
        java.lang.reflect.InvocationTargetException r20, r21;

        r10 = null;

     label01:
        $r1 = class "Ljava/lang/Thread;";

        $r0 = (java.lang.Class[]) null;

        r11 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r0);

     label02:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = (java.lang.Object[]) null;

        $r4 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r3);

        r12 = (java.lang.ClassLoader) $r4;

     label03:
        r10 = r12;

        goto label06;

     label04:
        $r5 := @caughtexception;

     label05:
        r20 = (java.lang.reflect.InvocationTargetException) $r5;

        $r6 = virtualinvoke r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r6 instanceof java.lang.SecurityException;

        if $z0 == 0 goto label07;

     label06:
        goto label11;

     label07:
        r18 = new org.apache.commons.logging.LogConfigurationException;

        r21 = (java.lang.reflect.InvocationTargetException) $r5;

        $r7 = virtualinvoke r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke r18.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r7);

        throw r18;

     label08:
        $r9 := @caughtexception;

     label09:
        r19 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke r19.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IllegalAccessException", $r9);

        throw r19;

     label10:
        $r8 := @caughtexception;

        r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lorg/apache/commons/logging/LogFactory;");

     label11:
        return r10;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label04;
        catch java.lang.NoSuchMethodException from label02 to label03 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
        catch java.lang.NoSuchMethodException from label07 to label08 with label10;
        catch java.lang.NoSuchMethodException from label09 to label10 with label10;
    }

    private static org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)
    {
        java.util.Hashtable $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader r2;
        org.apache.commons.logging.LogFactory r3;

        r2 := @parameter0: java.lang.ClassLoader;

        if r2 != null goto label1;

        r3 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        goto label2;

     label1:
        $r0 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.apache.commons.logging.LogFactory) $r1;

     label2:
        return r3;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Throwable $r2;
        boolean $z0;
        java.lang.String $r7, $r9;
        java.lang.ClassLoader r10;
        java.lang.StringBuilder r12;
        java.lang.SecurityException r13;

        r0 := @parameter0: java.lang.Class;

     label1:
        r10 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return r10;

     label3:
        $r2 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get classloader for class \'");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to security restrictions - ");

        r13 = (java.lang.SecurityException) $r2;

        $r7 = virtualinvoke r13.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label4:
        throw $r2;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private static final java.util.Properties getConfigurationFile(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.String r0, $r5, $r7, $r9, $r10, $r11, r21, r23;
        java.util.Enumeration r1;
        java.net.URL r2, r16, r17, r19;
        java.util.Properties r3, r14, r15, r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r4, $r6, r22, r24, r25;
        java.lang.Object $r8;
        byte $b0;
        java.lang.Throwable $r12;
        java.lang.ClassLoader r13;
        double d0, d1, d2;

        r13 := @parameter0: java.lang.ClassLoader;

        r0 := @parameter1: java.lang.String;

        r14 = null;

        r15 = null;

        d0 = 0.0;

        r16 = null;

     label01:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r13, r0);

     label02:
        r17 = null;

        if r1 != null goto label03;

        return null;

     label03:
        r14 = r15;

        r16 = r17;

     label04:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label85;

     label05:
        r14 = r15;

        r16 = r17;

     label06:
        $r8 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.net.URL) $r8;

     label07:
        r14 = r15;

        r16 = r17;

     label08:
        r3 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>(r2);

     label09:
        r18 = r15;

        d1 = d0;

        r19 = r17;

        if r3 == null goto label84;

        if r15 != null goto label30;

        r18 = r3;

        r14 = r3;

        r16 = r2;

     label10:
        r21 = virtualinvoke r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label11:
        d1 = 0.0;

        if r21 == null goto label13;

        r14 = r3;

        r16 = r2;

     label12:
        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r21);

     label13:
        r14 = r3;

        r16 = r2;

     label14:
        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label29;

     label15:
        r14 = r3;

        r16 = r2;

     label16:
        r22 = new java.lang.StringBuilder;

     label17:
        r14 = r3;

        r16 = r2;

     label18:
        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

     label19:
        r14 = r3;

        r16 = r2;

     label20:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file found at \'");

     label21:
        r14 = r3;

        r16 = r2;

     label22:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label23:
        r14 = r3;

        r16 = r2;

     label24:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with priority ");

     label25:
        r14 = r3;

        r16 = r2;

     label26:
        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

     label27:
        r14 = r3;

        r16 = r2;

     label28:
        $r11 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11);

     label29:
        r19 = r2;

        goto label84;

     label30:
        r14 = r15;

        r16 = r17;

     label31:
        r23 = virtualinvoke r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label32:
        d2 = 0.0;

        if r23 == null goto label34;

        r14 = r15;

        r16 = r17;

     label33:
        d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r23);

     label34:
        $b0 = d2 cmpl d0;

        if $b0 <= 0 goto label59;

        r14 = r15;

        r16 = r17;

     label35:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label58;

     label36:
        r14 = r15;

        r16 = r17;

     label37:
        r24 = new java.lang.StringBuilder;

     label38:
        r14 = r15;

        r16 = r17;

     label39:
        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

     label40:
        r14 = r15;

        r16 = r17;

     label41:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

     label42:
        r14 = r15;

        r16 = r17;

     label43:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label44:
        r14 = r15;

        r16 = r17;

     label45:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with priority ");

     label46:
        r14 = r15;

        r16 = r17;

     label47:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

     label48:
        r14 = r15;

        r16 = r17;

     label49:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overrides file at \'");

     label50:
        r14 = r15;

        r16 = r17;

     label51:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

     label52:
        r14 = r15;

        r16 = r17;

     label53:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with priority ");

     label54:
        r14 = r15;

        r16 = r17;

     label55:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

     label56:
        r14 = r15;

        r16 = r17;

     label57:
        $r10 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label58:
        r19 = r2;

        r18 = r3;

        d1 = d2;

        goto label84;

     label59:
        r18 = r15;

        d1 = d0;

        r19 = r17;

        r14 = r15;

        r16 = r17;

     label60:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label84;

     label61:
        r14 = r15;

        r16 = r17;

     label62:
        r25 = new java.lang.StringBuilder;

     label63:
        r14 = r15;

        r16 = r17;

     label64:
        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

     label65:
        r14 = r15;

        r16 = r17;

     label66:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

     label67:
        r14 = r15;

        r16 = r17;

     label68:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label69:
        r14 = r15;

        r16 = r17;

     label70:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with priority ");

     label71:
        r14 = r15;

        r16 = r17;

     label72:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d2);

     label73:
        r14 = r15;

        r16 = r17;

     label74:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override file at \'");

     label75:
        r14 = r15;

        r16 = r17;

     label76:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

     label77:
        r14 = r15;

        r16 = r17;

     label78:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with priority ");

     label79:
        r14 = r15;

        r16 = r17;

     label80:
        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

     label81:
        r14 = r15;

        r16 = r17;

     label82:
        $r9 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label83:
        r19 = r17;

        d1 = d0;

        r18 = r15;

     label84:
        r15 = r18;

        d0 = d1;

        r17 = r19;

        goto label03;

     label85:
        goto label87;

     label86:
        $r12 := @caughtexception;

        r15 = r14;

        r17 = r16;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label87;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.");

        r17 = r16;

        r15 = r14;

     label87:
        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label89;

        if r15 != null goto label88;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] No properties file of name \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

        goto label89;

     label88:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file of name \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found at \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r5);

     label89:
        return r15;

        catch java.lang.SecurityException from label01 to label02 with label86;
        catch java.lang.SecurityException from label04 to label05 with label86;
        catch java.lang.SecurityException from label06 to label07 with label86;
        catch java.lang.SecurityException from label08 to label09 with label86;
        catch java.lang.SecurityException from label10 to label11 with label86;
        catch java.lang.SecurityException from label12 to label13 with label86;
        catch java.lang.SecurityException from label14 to label15 with label86;
        catch java.lang.SecurityException from label16 to label17 with label86;
        catch java.lang.SecurityException from label18 to label19 with label86;
        catch java.lang.SecurityException from label20 to label21 with label86;
        catch java.lang.SecurityException from label22 to label23 with label86;
        catch java.lang.SecurityException from label24 to label25 with label86;
        catch java.lang.SecurityException from label26 to label27 with label86;
        catch java.lang.SecurityException from label28 to label29 with label86;
        catch java.lang.SecurityException from label31 to label32 with label86;
        catch java.lang.SecurityException from label33 to label34 with label86;
        catch java.lang.SecurityException from label35 to label36 with label86;
        catch java.lang.SecurityException from label37 to label38 with label86;
        catch java.lang.SecurityException from label39 to label40 with label86;
        catch java.lang.SecurityException from label41 to label42 with label86;
        catch java.lang.SecurityException from label43 to label44 with label86;
        catch java.lang.SecurityException from label45 to label46 with label86;
        catch java.lang.SecurityException from label47 to label48 with label86;
        catch java.lang.SecurityException from label49 to label50 with label86;
        catch java.lang.SecurityException from label51 to label52 with label86;
        catch java.lang.SecurityException from label53 to label54 with label86;
        catch java.lang.SecurityException from label55 to label56 with label86;
        catch java.lang.SecurityException from label57 to label58 with label86;
        catch java.lang.SecurityException from label60 to label61 with label86;
        catch java.lang.SecurityException from label62 to label63 with label86;
        catch java.lang.SecurityException from label64 to label65 with label86;
        catch java.lang.SecurityException from label66 to label67 with label86;
        catch java.lang.SecurityException from label68 to label69 with label86;
        catch java.lang.SecurityException from label70 to label71 with label86;
        catch java.lang.SecurityException from label72 to label73 with label86;
        catch java.lang.SecurityException from label74 to label75 with label86;
        catch java.lang.SecurityException from label76 to label77 with label86;
        catch java.lang.SecurityException from label78 to label79 with label86;
        catch java.lang.SecurityException from label80 to label81 with label86;
        catch java.lang.SecurityException from label82 to label83 with label86;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory$1 $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.commons.logging.LogFactory$1;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0, $r5, r58;
        java.util.Properties r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Object $r3;
        java.lang.String $r4, $r10, $r11, $r17, $r22, $r26, $r28, $r32, $r33, $r36, $r40, $r41, $r44, $r50, $r51, $r54, r59, r60, r72, r77, r81;
        java.lang.Boolean $r23;
        java.lang.RuntimeException $r29;
        java.lang.Exception $r37;
        java.lang.Throwable $r45, $r47;
        org.apache.commons.logging.LogFactory r55, r62, r67, r76, r79;
        java.io.InputStream r68;
        java.io.BufferedReader r69, r87, r89;
        java.util.Enumeration r80;
        java.lang.StringBuilder r82, r83, r84, r85, r90, r91, r92;
        java.io.InputStreamReader r86, r88;
        java.lang.SecurityException r93;

        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        if r0 != null goto label01;

        $z14 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z14 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.");

     label01:
        r55 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>(r0);

        if r55 == null goto label02;

        return r55;

     label02:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        r82 = new java.lang.StringBuilder;

        specialinvoke r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ");

        $r26 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", r0);

     label03:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>(r0, "commons-logging.properties");

        r58 = r0;

        if r1 == null goto label04;

        r59 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl");

        r58 = r0;

        if r59 == null goto label04;

        r58 = r0;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r59);

        $z13 = virtualinvoke $r23.<java.lang.Boolean: boolean booleanValue()>();

        if $z13 != 0 goto label04;

        r58 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label04:
        $z18 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z18 == 0 goto label05;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label05:
        r60 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

     label06:
        if r60 == null goto label10;

     label07:
        $z12 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z12 == 0 goto label08;

        r83 = new java.lang.StringBuilder;

        specialinvoke r83.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as specified by system property ");

        virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r22 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r22);

     label08:
        r62 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r60, r58, r0);

     label09:
        goto label16;

     label10:
        r62 = r55;

     label11:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label16;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.");

     label12:
        r62 = r55;

        goto label16;

     label13:
        $r29 := @caughtexception;

        $z15 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z15 == 0 goto label14;

        r84 = new java.lang.StringBuilder;

        specialinvoke r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [");

        $r32 = virtualinvoke $r29.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as specified by a system property.");

        $r36 = virtualinvoke r84.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r36);

     label14:
        throw $r29;

     label15:
        $r47 := @caughtexception;

        r62 = r55;

        $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z17 == 0 goto label16;

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        r93 = (java.lang.SecurityException) $r47;

        $r50 = virtualinvoke r93.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r51 = virtualinvoke $r50.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r54 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r54);

        r62 = r55;

     label16:
        r67 = r62;

        if r62 != null goto label33;

        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label17;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label17:
        r68 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>(r0, "META-INF/services/org.apache.commons.logging.LogFactory");

     label18:
        if r68 == null goto label28;

     label19:
        r87 = new java.io.BufferedReader;

        r69 = r87;

        r86 = new java.io.InputStreamReader;

        specialinvoke r86.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r68, "UTF-8");

        specialinvoke r87.<java.io.BufferedReader: void <init>(java.io.Reader)>(r86);

     label20:
        goto label23;

     label21:
        $r45 := @caughtexception;

     label22:
        r88 = new java.io.InputStreamReader;

        specialinvoke r88.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r68);

        r89 = new java.io.BufferedReader;

        specialinvoke r89.<java.io.BufferedReader: void <init>(java.io.Reader)>(r88);

        r69 = r89;

     label23:
        r72 = virtualinvoke r69.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke r69.<java.io.BufferedReader: void close()>();

     label24:
        r67 = r62;

        if r72 == null goto label27;

        r67 = r62;

     label25:
        $r11 = "";

        $z10 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z10 != 0 goto label27;

        $z11 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z11 == 0 goto label26;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as specified by file \'");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which was present in the path of the context classloader.");

        $r17 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r17);

     label26:
        r67 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r72, r58, r0);

     label27:
        goto label31;

     label28:
        r67 = r62;

     label29:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label31;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.");

     label30:
        r67 = r62;

     label31:
        goto label33;

     label32:
        $r37 := @caughtexception;

        r67 = r62;

        $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z16 == 0 goto label33;

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r40 = virtualinvoke $r37.<java.lang.Exception: java.lang.String getMessage()>();

        $r41 = virtualinvoke $r40.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r44 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r44);

        r67 = r62;

     label33:
        r76 = r67;

        if r67 != null goto label39;

        if r1 == null goto label38;

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label34;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...");

     label34:
        r77 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if r77 == null goto label36;

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label35;

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'");

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r77);

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label35:
        r76 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r77, r58, r0);

        goto label37;

     label36:
        r76 = r67;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label37;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");

        r76 = r67;

     label37:
        goto label39;

     label38:
        r76 = r67;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label39;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..");

        r76 = r67;

     label39:
        r79 = r76;

        if r76 != null goto label41;

        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label40;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).");

     label40:
        $r5 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        r79 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r5, r0);

     label41:
        if r79 == null goto label43;

        staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r79);

        if r1 == null goto label43;

        r80 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label42:
        $z2 = interfaceinvoke r80.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label43;

        $r3 = interfaceinvoke r80.<java.util.Enumeration: java.lang.Object nextElement()>();

        r81 = (java.lang.String) $r3;

        $r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r81);

        virtualinvoke r79.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>(r81, $r4);

        goto label42;

     label43:
        return r79;

        catch java.lang.SecurityException from label05 to label06 with label15;
        catch java.lang.RuntimeException from label05 to label06 with label13;
        catch java.lang.SecurityException from label07 to label08 with label15;
        catch java.lang.RuntimeException from label07 to label08 with label13;
        catch java.lang.SecurityException from label08 to label09 with label15;
        catch java.lang.RuntimeException from label08 to label09 with label13;
        catch java.lang.SecurityException from label11 to label12 with label15;
        catch java.lang.RuntimeException from label11 to label12 with label13;
        catch java.lang.Exception from label17 to label18 with label32;
        catch java.io.UnsupportedEncodingException from label19 to label20 with label21;
        catch java.lang.Exception from label19 to label20 with label32;
        catch java.lang.Exception from label22 to label23 with label32;
        catch java.lang.Exception from label23 to label24 with label32;
        catch java.lang.Exception from label25 to label26 with label32;
        catch java.lang.Exception from label26 to label27 with label32;
        catch java.lang.Exception from label29 to label30 with label32;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0;
        org.apache.commons.logging.impl.Jdk14Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.logging.impl.Jdk14Logger;

        specialinvoke $r1.<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    private static java.util.Properties getProperties(java.net.URL)
    {
        java.net.URL r0;
        org.apache.commons.logging.LogFactory$5 $r1;
        java.lang.Object $r2;
        java.util.Properties $r3;

        r0 := @parameter0: java.net.URL;

        $r1 = new org.apache.commons.logging.LogFactory$5;

        specialinvoke $r1.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>(r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r3 = (java.util.Properties) $r2;

        return $r3;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$3 $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$3;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.io.InputStream) $r3;

        return $r4;
    }

    private static java.util.Enumeration getResources(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$4 $r2;
        java.lang.Object $r3;
        java.util.Enumeration $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$4;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.util.Enumeration) $r3;

        return $r4;
    }

    private static boolean implementsLogFactory(java.lang.Class)
    {
        java.lang.Class $r0, r24;
        java.lang.String $r2, $r5, $r7, $r10, $r15, $r17, $r21, $r23;
        java.lang.ClassNotFoundException $r11;
        java.lang.Throwable $r12;
        java.lang.LinkageError $r18;
        boolean z4, z5, z6, z7;
        java.lang.ClassLoader r25;
        java.lang.StringBuilder r33, r34, r35, r36;
        java.lang.SecurityException r37;

        r24 := @parameter0: java.lang.Class;

        z4 = 0;

        if r24 == null goto label38;

        z5 = 0;

        z6 = 0;

        z7 = 0;

     label01:
        r25 = virtualinvoke r24.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label02:
        if r25 != null goto label05;

        z5 = 0;

        z6 = 0;

        z7 = 0;

     label03:
        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader");

     label04:
        z4 = 0;

        goto label38;

     label05:
        z5 = 0;

        z6 = 0;

        z7 = 0;

     label06:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r25);

     label07:
        z5 = 0;

        z6 = 0;

        z7 = 0;

     label08:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, r25);

        z4 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r24);

     label09:
        if z4 == 0 goto label22;

        z5 = z4;

        z6 = z4;

        z7 = z4;

     label10:
        r33 = new java.lang.StringBuilder;

     label11:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label12:
        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

     label13:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label14:
        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

     label15:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label16:
        $r7 = virtualinvoke r24.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label17:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label18:
        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.");

     label19:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label20:
        $r10 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label21:
        goto label38;

     label22:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label23:
        r34 = new java.lang.StringBuilder;

     label24:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label25:
        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

     label26:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label27:
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

     label28:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label29:
        $r2 = virtualinvoke r24.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label30:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label31:
        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement LogFactory.");

     label32:
        z5 = z4;

        z6 = z4;

        z7 = z4;

     label33:
        $r5 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r5);

     label34:
        goto label38;

     label35:
        $r11 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?");

        z4 = z5;

        goto label38;

     label36:
        $r18 := @caughtexception;

        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r21 = virtualinvoke $r18.<java.lang.LinkageError: java.lang.String getMessage()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r23);

        z4 = z6;

        goto label38;

     label37:
        $r12 := @caughtexception;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        r37 = (java.lang.SecurityException) $r12;

        $r15 = virtualinvoke r37.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r17);

        z4 = z7;

     label38:
        return z4;

        catch java.lang.SecurityException from label01 to label02 with label37;
        catch java.lang.LinkageError from label01 to label02 with label36;
        catch java.lang.ClassNotFoundException from label01 to label02 with label35;
        catch java.lang.SecurityException from label03 to label04 with label37;
        catch java.lang.LinkageError from label03 to label04 with label36;
        catch java.lang.ClassNotFoundException from label03 to label04 with label35;
        catch java.lang.SecurityException from label06 to label07 with label37;
        catch java.lang.LinkageError from label06 to label07 with label36;
        catch java.lang.ClassNotFoundException from label06 to label07 with label35;
        catch java.lang.SecurityException from label08 to label09 with label37;
        catch java.lang.LinkageError from label08 to label09 with label36;
        catch java.lang.ClassNotFoundException from label08 to label09 with label35;
        catch java.lang.SecurityException from label10 to label11 with label37;
        catch java.lang.LinkageError from label10 to label11 with label36;
        catch java.lang.ClassNotFoundException from label10 to label11 with label35;
        catch java.lang.SecurityException from label12 to label13 with label37;
        catch java.lang.LinkageError from label12 to label13 with label36;
        catch java.lang.ClassNotFoundException from label12 to label13 with label35;
        catch java.lang.SecurityException from label14 to label15 with label37;
        catch java.lang.LinkageError from label14 to label15 with label36;
        catch java.lang.ClassNotFoundException from label14 to label15 with label35;
        catch java.lang.SecurityException from label16 to label17 with label37;
        catch java.lang.LinkageError from label16 to label17 with label36;
        catch java.lang.ClassNotFoundException from label16 to label17 with label35;
        catch java.lang.SecurityException from label18 to label19 with label37;
        catch java.lang.LinkageError from label18 to label19 with label36;
        catch java.lang.ClassNotFoundException from label18 to label19 with label35;
        catch java.lang.SecurityException from label20 to label21 with label37;
        catch java.lang.LinkageError from label20 to label21 with label36;
        catch java.lang.ClassNotFoundException from label20 to label21 with label35;
        catch java.lang.SecurityException from label23 to label24 with label37;
        catch java.lang.LinkageError from label23 to label24 with label36;
        catch java.lang.ClassNotFoundException from label23 to label24 with label35;
        catch java.lang.SecurityException from label25 to label26 with label37;
        catch java.lang.LinkageError from label25 to label26 with label36;
        catch java.lang.ClassNotFoundException from label25 to label26 with label35;
        catch java.lang.SecurityException from label27 to label28 with label37;
        catch java.lang.LinkageError from label27 to label28 with label36;
        catch java.lang.ClassNotFoundException from label27 to label28 with label35;
        catch java.lang.SecurityException from label29 to label30 with label37;
        catch java.lang.LinkageError from label29 to label30 with label36;
        catch java.lang.ClassNotFoundException from label29 to label30 with label35;
        catch java.lang.SecurityException from label31 to label32 with label37;
        catch java.lang.LinkageError from label31 to label32 with label36;
        catch java.lang.ClassNotFoundException from label31 to label32 with label35;
        catch java.lang.SecurityException from label33 to label34 with label37;
        catch java.lang.LinkageError from label33 to label34 with label36;
        catch java.lang.ClassNotFoundException from label33 to label34 with label35;
    }

    private static void initDiagnostics()
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r0;
        java.lang.String $r4, r10, r15;
        java.io.PrintStream $r5, $r6, r12;
        java.lang.Throwable $r7, $r8, $r9;
        java.io.FileOutputStream r11;
        java.lang.ClassLoader r13, $r14;

     label01:
        r10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.diagnostics.dest");

     label02:
        if r10 != null goto label03;

        return;

     label03:
        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT");

        if $z0 == 0 goto label04;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r6;

        goto label06;

     label04:
        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("STDERR");

        if $z1 == 0 goto label05;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r5;

        goto label06;

     label05:
        r11 = new java.io.FileOutputStream;

        specialinvoke r11.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r10, 1);

        r12 = new java.io.PrintStream;

        specialinvoke r12.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r11);

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = r12;

     label06:
        r13 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r14 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r14 != null goto label08;

     label07:
        r15 = "BOOTLOADER";

        goto label09;

     label08:
        r15 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r13);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        r15 = "UNKNOWN";

     label11:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactory from ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r4;

        return;

     label12:
        $r8 := @caughtexception;

        return;

     label13:
        $r9 := @caughtexception;

        return;

        catch java.lang.SecurityException from label01 to label02 with label13;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.lang.SecurityException from label06 to label07 with label10;
        catch java.lang.SecurityException from label08 to label09 with label10;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.io.PrintStream $r0;
        boolean z0;

        $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static void logClassLoaderEnvironment(java.lang.Class)
    {
        boolean $z0;
        java.lang.String $r1, $r3, $r5, $r7, $r12, $r14, $r19, $r24, r30;
        java.lang.StringBuilder $r8, $r15, $r21, r27, r28;
        java.lang.Throwable $r20, $r25;
        java.lang.Class r26;
        java.lang.ClassLoader r31;

        r26 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r3);

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Application classpath (java.class.path): ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.");

     label4:
        r30 = virtualinvoke r26.<java.lang.Class: java.lang.String getName()>();

     label5:
        r31 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r26);

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Class ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was loaded via classloader ");

        $r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r31);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Ancestry of classloader which loaded ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r19, r31);

        return;

     label7:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security forbids determining the classloader for ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r24);

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.SecurityException from label5 to label6 with label7;
    }

    private static final void logDiagnostic(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.io.PrintStream r1, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if r1 == null goto label1;

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix>;

        virtualinvoke r1.<java.io.PrintStream: void print(java.lang.String)>($r2);

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r4 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r4.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    private static void logHierarchy(java.lang.String, java.lang.ClassLoader)
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r11, $r22;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r5, $r9, $r13, $r18, $r25, r26, r28;
        java.lang.Throwable $r19, $r21;
        java.lang.ClassLoader r27, r30, r33;

        r26 := @parameter0: java.lang.String;

        r27 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        if r27 == null goto label02;

        r28 = virtualinvoke r27.<java.lang.Object: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r13 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r27);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == \'");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18);

     label02:
        r30 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label03:
        if r27 == null goto label09;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader tree:");

        $r3 = new java.lang.StringBuffer;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

     label04:
        $r5 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r27);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        if r27 != r30 goto label05;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ");

     label05:
        r33 = virtualinvoke r27.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label06:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        r27 = r33;

        if r33 != null goto label04;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT");

        goto label08;

     label07:
        $r19 := @caughtexception;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET");

     label08:
        $r9 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

     label09:
        return;

     label10:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security forbids determining the system classloader.");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r25);

        return;

        catch java.lang.SecurityException from label02 to label03 with label10;
        catch java.lang.SecurityException from label05 to label06 with label07;
    }

    protected static final void logRawDiagnostic(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        org.apache.commons.logging.LogFactory $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r1, null);

        return $r2;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0, r17;
        org.apache.commons.logging.LogFactory$2 $r1;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.LogFactory $r2;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r5, $r8, $r10, $r13, $r15, r16;
        java.lang.Object r18;
        org.apache.commons.logging.LogConfigurationException r19;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.ClassLoader;

        r0 := @parameter2: java.lang.ClassLoader;

        $r1 = new org.apache.commons.logging.LogFactory$2;

        specialinvoke $r1.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>(r16, r17);

        r18 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $z0 = r18 instanceof org.apache.commons.logging.LogConfigurationException;

        if $z0 == 0 goto label2;

        r19 = (org.apache.commons.logging.LogConfigurationException) r18;

        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while loading the factory class:");

        $r13 = virtualinvoke r19.<org.apache.commons.logging.LogConfigurationException: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r15);

     label1:
        throw r19;

     label2:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created object ");

        $r5 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r18);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to manage classloader ");

        $r8 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label3:
        $r2 = (org.apache.commons.logging.LogFactory) r18;

        return $r2;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r8;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void release(java.lang.ClassLoader)
    {
        org.apache.commons.logging.LogFactory r0, $r5, $r6;
        boolean $z0;
        java.util.Hashtable $r1, $r3, r15;
        java.lang.Object $r2;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11;
        java.lang.Throwable $r12;
        java.lang.ClassLoader r13;

        r13 := @parameter0: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing factory for classloader ");

        $r9 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r13);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11);

     label01:
        r15 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r15;

        if r13 != null goto label04;

     label02:
        $r5 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r5 == null goto label07;

        $r6 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r6.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label03:
        goto label07;

     label04:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r13);

        r0 = (org.apache.commons.logging.LogFactory) $r2;

     label05:
        if r0 == null goto label07;

     label06:
        virtualinvoke r0.<org.apache.commons.logging.LogFactory: void release()>();

        $r3 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r13);

     label07:
        exitmonitor r15;

     label08:
        return;

     label09:
        $r12 := @caughtexception;

     label10:
        exitmonitor r15;

     label11:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void releaseAll()
    {
        java.util.Hashtable r0, $r1, $r2;
        boolean $z0, $z1;
        org.apache.commons.logging.LogFactory $r3, $r4, $r6;
        java.lang.Object $r5;
        java.lang.Throwable $r7;
        java.util.Enumeration r8;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.");

     label01:
        r0 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r0;

     label02:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        r8 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label03:
        $z1 = interfaceinvoke r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label05;

        $r5 = interfaceinvoke r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (org.apache.commons.logging.LogFactory) $r5;

        virtualinvoke $r6.<org.apache.commons.logging.LogFactory: void release()>();

     label04:
        goto label03;

     label05:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: void clear()>();

        $r3 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r3 == null goto label06;

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r4.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);
}
