public class org.apache.commons.logging.impl.LogFactoryImpl extends org.apache.commons.logging.LogFactory
{
    public static final java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY;
    private static final java.lang.String LOGGING_IMPL_JDK14_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LOG4J_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER;
    private static final java.lang.String LOGGING_IMPL_SIMPLE_LOGGER;
    public static final java.lang.String LOG_PROPERTY;
    protected static final java.lang.String LOG_PROPERTY_OLD;
    private static final java.lang.String PKG_IMPL;
    private static final int PKG_LEN;
    private static final java.lang.String[] classesToDiscover;
    private boolean allowFlawedContext;
    private boolean allowFlawedDiscovery;
    private boolean allowFlawedHierarchy;
    protected java.util.Hashtable attributes;
    private java.lang.String diagnosticPrefix;
    protected java.util.Hashtable instances;
    private java.lang.String logClassName;
    protected java.lang.reflect.Constructor logConstructor;
    protected java.lang.Class[] logConstructorSignature;
    protected java.lang.reflect.Method logMethod;
    protected java.lang.Class[] logMethodSignature;
    private boolean useTCCL;

    static void <clinit>()
    {
        java.lang.String $r0;
        int $i0;
        java.lang.String[] $r1;

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String PKG_IMPL> = "org.apache.commons.logging.impl.";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY_OLD> = "org.apache.commons.logging.log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY> = "org.apache.commons.logging.Log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_SIMPLE_LOGGER> = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER> = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LOG4J_LOGGER> = "org.apache.commons.logging.impl.Log4JLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_JDK14_LOGGER> = "org.apache.commons.logging.impl.Jdk14Logger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedHierarchy";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedDiscovery";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedContext";

        $r0 = "org.apache.commons.logging.impl.";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "org.apache.commons.logging.impl.Log4JLogger";

        $r1[1] = "org.apache.commons.logging.impl.Jdk14Logger";

        $r1[2] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        $r1[3] = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r1, $r2;
        java.lang.Class[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = 1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances> = $r2;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = null;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature> = $r3;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Lorg/apache/commons/logging/LogFactory;";

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature> = $r4;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>();

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Instance created.");

     label1:
        return;
    }

    private org.apache.commons.logging.Log createLogFromClass(java.lang.String, java.lang.String, boolean) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Class[] $r1, $r3;
        java.lang.Object[] $r2;
        java.lang.reflect.Method $r4;
        java.lang.String $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r30, $r32, $r33, $r34, $r37, $r38, $r41, $r43, $r44, $r45, r46, r47, $r54, $r55, r61, r72, r79, r84, r88;
        java.lang.StringBuilder $r6, $r14, $r29, $r31, $r36, $r40, $r42, $r52, r60, r63, r66, r67, r71, r73, r78, r80, r90;
        java.lang.ClassLoader $r7, r49;
        java.lang.Throwable $r16, $r26, $r35, r69;
        java.lang.ClassNotFoundException $r17, $r21;
        org.apache.commons.logging.LogConfigurationException $r27;
        java.lang.ExceptionInInitializerError $r28;
        java.lang.NoClassDefFoundError $r39;
        java.lang.Class r50, r57, r59, r65, r68;
        java.lang.reflect.Constructor r51, r56, r58, r64;
        java.net.URL r62;
        java.lang.Object r74;
        org.apache.commons.logging.Log r75, r76;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r46 := @parameter0: java.lang.String;

        r47 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label001;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to instantiate \'");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r15);

     label001:
        r49 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>();

        r50 = null;

        r51 = null;

     label002:
        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to load \'");

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r54 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r49);

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r55);

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label003:
        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label061;

     label004:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label005:
        r60 = new java.lang.StringBuilder;

     label006:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label007:
        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

     label008:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label009:
        $r10 = virtualinvoke r46.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label010:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label011:
        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

     label012:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label013:
        r61 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

     label014:
        if r49 == null goto label017;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label015:
        r62 = virtualinvoke r49.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r61);

     label016:
        goto label027;

     label017:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label018:
        r63 = new java.lang.StringBuilder;

     label019:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label020:
        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

     label021:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label022:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

     label023:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label024:
        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

     label025:
        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label026:
        $r11 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        r62 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r11);

     label027:
        if r62 != null goto label044;

        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label028:
        r66 = new java.lang.StringBuilder;

     label029:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label030:
        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

     label031:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label032:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

     label033:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label034:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

     label035:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label036:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' [");

     label037:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label038:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

     label039:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label040:
        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be found.");

     label041:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label042:
        $r13 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r13);

     label043:
        goto label061;

     label044:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label045:
        r67 = new java.lang.StringBuilder;

     label046:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label047:
        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

     label048:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label049:
        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

     label050:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label051:
        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

     label052:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label053:
        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found at \'");

     label054:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label055:
        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r62);

     label056:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label057:
        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label058:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label059:
        $r12 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r12);

     label060:
        goto label061;

     label061:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label062:
        r68 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r46, 1, r49);

     label063:
        goto label095;

     label064:
        $r26 := @caughtexception;

        r69 = $r26;

        r51 = r64;

        r50 = r65;

        goto label133;

     label065:
        $r21 := @caughtexception;

        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label066:
        r71 = new java.lang.StringBuilder;

     label067:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label068:
        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

     label069:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label070:
        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

     label071:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label072:
        $r22 = virtualinvoke $r21.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label073:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label074:
        r72 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

     label075:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label076:
        r73 = new java.lang.StringBuilder;

     label077:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label078:
        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

     label079:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label080:
        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

     label081:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label082:
        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

     label083:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label084:
        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via classloader ");

     label085:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label086:
        $r23 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r49);

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

     label087:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label088:
        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label089:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label090:
        $r24 = virtualinvoke r72.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

     label091:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label092:
        $r25 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r25);

     label093:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label094:
        r68 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r46);

     label095:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label096:
        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature>;

        r51 = virtualinvoke r68.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

     label097:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label098:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r47;

        r74 = virtualinvoke r51.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

     label099:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label100:
        $z2 = r74 instanceof org.apache.commons.logging.Log;

        if $z2 == 0 goto label104;

     label101:
        r50 = r68;

        r64 = r51;

        r65 = r68;

        r56 = r51;

        r57 = r68;

        r58 = r51;

        r59 = r68;

     label102:
        r75 = (org.apache.commons.logging.Log) r74;

     label103:
        r76 = r75;

        goto label139;

     label104:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label105:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>(r49, r68);

     label106:
        goto label134;

     label107:
        $r17 := @caughtexception;

        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label108:
        r78 = new java.lang.StringBuilder;

     label109:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label110:
        specialinvoke r78.<java.lang.StringBuilder: void <init>()>();

     label111:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label112:
        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

     label113:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label114:
        $r18 = virtualinvoke $r17.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

     label115:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label116:
        r79 = virtualinvoke r78.<java.lang.StringBuilder: java.lang.String toString()>();

     label117:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label118:
        r80 = new java.lang.StringBuilder;

     label119:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label120:
        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

     label121:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label122:
        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

     label123:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label124:
        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

     label125:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label126:
        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via the LogFactoryImpl class classloader: ");

     label127:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label128:
        $r19 = virtualinvoke r79.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label129:
        r64 = r51;

        r65 = r50;

        r56 = r51;

        r57 = r50;

        r58 = r51;

        r59 = r50;

     label130:
        $r20 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r20);

     label131:
        r76 = null;

        goto label139;

     label132:
        $r16 := @caughtexception;

        r69 = $r16;

     label133:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>(r46, r49, r69);

     label134:
        if r49 != null goto label135;

        r76 = null;

        goto label139;

     label135:
        r49 = virtualinvoke r49.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label002;

     label136:
        $r27 := @caughtexception;

        throw $r27;

     label137:
        $r28 := @caughtexception;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r30 = virtualinvoke $r28.<java.lang.ExceptionInInitializerError: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        r84 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is unable to initialize itself when loaded via classloader ");

        $r32 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r49);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r33 = virtualinvoke r84.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r34);

        r76 = null;

        r51 = r56;

        r50 = r57;

        goto label139;

     label138:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r41 = virtualinvoke $r39.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        r88 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is missing dependencies when loaded via classloader ");

        $r43 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r49);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r44 = virtualinvoke r88.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r45);

        r50 = r59;

        r51 = r58;

        r76 = null;

     label139:
        if r76 == null goto label144;

        if z0 == 0 goto label144;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName> = r46;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = r51;

     label140:
        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature>;

        $r4 = virtualinvoke r50.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setLogFactory", $r3);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = $r4;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found method setLogFactory(LogFactory) in \'");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r5);

     label141:
        goto label143;

     label142:
        $r35 := @caughtexception;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INFO] \'");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r37 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r49);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not declare optional method setLogFactory(LogFactory)");

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r38);

     label143:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log adapter \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r7 = virtualinvoke r50.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been selected for use.");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r9);

     label144:
        return r76;

        catch java.lang.NoClassDefFoundError from label003 to label004 with label138;
        catch java.lang.ExceptionInInitializerError from label003 to label004 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label003 to label004 with label136;
        catch java.lang.Throwable from label003 to label004 with label132;
        catch java.lang.NoClassDefFoundError from label005 to label006 with label138;
        catch java.lang.ExceptionInInitializerError from label005 to label006 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label005 to label006 with label136;
        catch java.lang.Throwable from label005 to label006 with label132;
        catch java.lang.NoClassDefFoundError from label007 to label008 with label138;
        catch java.lang.ExceptionInInitializerError from label007 to label008 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label007 to label008 with label136;
        catch java.lang.Throwable from label007 to label008 with label132;
        catch java.lang.NoClassDefFoundError from label009 to label010 with label138;
        catch java.lang.ExceptionInInitializerError from label009 to label010 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label009 to label010 with label136;
        catch java.lang.Throwable from label009 to label010 with label132;
        catch java.lang.NoClassDefFoundError from label011 to label012 with label138;
        catch java.lang.ExceptionInInitializerError from label011 to label012 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label011 to label012 with label136;
        catch java.lang.Throwable from label011 to label012 with label132;
        catch java.lang.NoClassDefFoundError from label013 to label014 with label138;
        catch java.lang.ExceptionInInitializerError from label013 to label014 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label013 to label014 with label136;
        catch java.lang.Throwable from label013 to label014 with label132;
        catch java.lang.NoClassDefFoundError from label015 to label016 with label138;
        catch java.lang.ExceptionInInitializerError from label015 to label016 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label015 to label016 with label136;
        catch java.lang.Throwable from label015 to label016 with label132;
        catch java.lang.NoClassDefFoundError from label018 to label019 with label138;
        catch java.lang.ExceptionInInitializerError from label018 to label019 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label018 to label019 with label136;
        catch java.lang.Throwable from label018 to label019 with label132;
        catch java.lang.NoClassDefFoundError from label020 to label021 with label138;
        catch java.lang.ExceptionInInitializerError from label020 to label021 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label020 to label021 with label136;
        catch java.lang.Throwable from label020 to label021 with label132;
        catch java.lang.NoClassDefFoundError from label022 to label023 with label138;
        catch java.lang.ExceptionInInitializerError from label022 to label023 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label022 to label023 with label136;
        catch java.lang.Throwable from label022 to label023 with label132;
        catch java.lang.NoClassDefFoundError from label024 to label025 with label138;
        catch java.lang.ExceptionInInitializerError from label024 to label025 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label024 to label025 with label136;
        catch java.lang.Throwable from label024 to label025 with label132;
        catch java.lang.NoClassDefFoundError from label026 to label027 with label138;
        catch java.lang.ExceptionInInitializerError from label026 to label027 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label026 to label027 with label136;
        catch java.lang.Throwable from label026 to label027 with label132;
        catch java.lang.NoClassDefFoundError from label028 to label029 with label138;
        catch java.lang.ExceptionInInitializerError from label028 to label029 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label028 to label029 with label136;
        catch java.lang.Throwable from label028 to label029 with label064;
        catch java.lang.NoClassDefFoundError from label030 to label031 with label138;
        catch java.lang.ExceptionInInitializerError from label030 to label031 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label030 to label031 with label136;
        catch java.lang.Throwable from label030 to label031 with label064;
        catch java.lang.NoClassDefFoundError from label032 to label033 with label138;
        catch java.lang.ExceptionInInitializerError from label032 to label033 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label032 to label033 with label136;
        catch java.lang.Throwable from label032 to label033 with label064;
        catch java.lang.NoClassDefFoundError from label034 to label035 with label138;
        catch java.lang.ExceptionInInitializerError from label034 to label035 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label034 to label035 with label136;
        catch java.lang.Throwable from label034 to label035 with label064;
        catch java.lang.NoClassDefFoundError from label036 to label037 with label138;
        catch java.lang.ExceptionInInitializerError from label036 to label037 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label036 to label037 with label136;
        catch java.lang.Throwable from label036 to label037 with label064;
        catch java.lang.NoClassDefFoundError from label038 to label039 with label138;
        catch java.lang.ExceptionInInitializerError from label038 to label039 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label038 to label039 with label136;
        catch java.lang.Throwable from label038 to label039 with label064;
        catch java.lang.NoClassDefFoundError from label040 to label041 with label138;
        catch java.lang.ExceptionInInitializerError from label040 to label041 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label040 to label041 with label136;
        catch java.lang.Throwable from label040 to label041 with label064;
        catch java.lang.NoClassDefFoundError from label042 to label043 with label138;
        catch java.lang.ExceptionInInitializerError from label042 to label043 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label042 to label043 with label136;
        catch java.lang.Throwable from label042 to label043 with label064;
        catch java.lang.NoClassDefFoundError from label045 to label046 with label138;
        catch java.lang.ExceptionInInitializerError from label045 to label046 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label045 to label046 with label136;
        catch java.lang.Throwable from label045 to label046 with label064;
        catch java.lang.NoClassDefFoundError from label047 to label048 with label138;
        catch java.lang.ExceptionInInitializerError from label047 to label048 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label047 to label048 with label136;
        catch java.lang.Throwable from label047 to label048 with label064;
        catch java.lang.NoClassDefFoundError from label049 to label050 with label138;
        catch java.lang.ExceptionInInitializerError from label049 to label050 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label049 to label050 with label136;
        catch java.lang.Throwable from label049 to label050 with label064;
        catch java.lang.NoClassDefFoundError from label051 to label052 with label138;
        catch java.lang.ExceptionInInitializerError from label051 to label052 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label051 to label052 with label136;
        catch java.lang.Throwable from label051 to label052 with label064;
        catch java.lang.NoClassDefFoundError from label053 to label054 with label138;
        catch java.lang.ExceptionInInitializerError from label053 to label054 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label053 to label054 with label136;
        catch java.lang.Throwable from label053 to label054 with label064;
        catch java.lang.NoClassDefFoundError from label055 to label056 with label138;
        catch java.lang.ExceptionInInitializerError from label055 to label056 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label055 to label056 with label136;
        catch java.lang.Throwable from label055 to label056 with label064;
        catch java.lang.NoClassDefFoundError from label057 to label058 with label138;
        catch java.lang.ExceptionInInitializerError from label057 to label058 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label057 to label058 with label136;
        catch java.lang.Throwable from label057 to label058 with label064;
        catch java.lang.NoClassDefFoundError from label059 to label060 with label138;
        catch java.lang.ExceptionInInitializerError from label059 to label060 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label059 to label060 with label136;
        catch java.lang.Throwable from label059 to label060 with label064;
        catch java.lang.ClassNotFoundException from label062 to label063 with label065;
        catch java.lang.NoClassDefFoundError from label062 to label063 with label138;
        catch java.lang.ExceptionInInitializerError from label062 to label063 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label062 to label063 with label136;
        catch java.lang.Throwable from label062 to label063 with label064;
        catch java.lang.NoClassDefFoundError from label066 to label067 with label138;
        catch java.lang.ExceptionInInitializerError from label066 to label067 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label066 to label067 with label136;
        catch java.lang.Throwable from label066 to label067 with label064;
        catch java.lang.NoClassDefFoundError from label068 to label069 with label138;
        catch java.lang.ExceptionInInitializerError from label068 to label069 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label068 to label069 with label136;
        catch java.lang.Throwable from label068 to label069 with label064;
        catch java.lang.NoClassDefFoundError from label070 to label071 with label138;
        catch java.lang.ExceptionInInitializerError from label070 to label071 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label070 to label071 with label136;
        catch java.lang.Throwable from label070 to label071 with label064;
        catch java.lang.NoClassDefFoundError from label072 to label073 with label138;
        catch java.lang.ExceptionInInitializerError from label072 to label073 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label072 to label073 with label136;
        catch java.lang.Throwable from label072 to label073 with label064;
        catch java.lang.NoClassDefFoundError from label074 to label075 with label138;
        catch java.lang.ExceptionInInitializerError from label074 to label075 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label074 to label075 with label136;
        catch java.lang.Throwable from label074 to label075 with label064;
        catch java.lang.NoClassDefFoundError from label076 to label077 with label138;
        catch java.lang.ExceptionInInitializerError from label076 to label077 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label076 to label077 with label136;
        catch java.lang.Throwable from label076 to label077 with label064;
        catch java.lang.NoClassDefFoundError from label078 to label079 with label138;
        catch java.lang.ExceptionInInitializerError from label078 to label079 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label078 to label079 with label136;
        catch java.lang.Throwable from label078 to label079 with label064;
        catch java.lang.NoClassDefFoundError from label080 to label081 with label138;
        catch java.lang.ExceptionInInitializerError from label080 to label081 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label080 to label081 with label136;
        catch java.lang.Throwable from label080 to label081 with label064;
        catch java.lang.NoClassDefFoundError from label082 to label083 with label138;
        catch java.lang.ExceptionInInitializerError from label082 to label083 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label082 to label083 with label136;
        catch java.lang.Throwable from label082 to label083 with label064;
        catch java.lang.NoClassDefFoundError from label084 to label085 with label138;
        catch java.lang.ExceptionInInitializerError from label084 to label085 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label084 to label085 with label136;
        catch java.lang.Throwable from label084 to label085 with label064;
        catch java.lang.NoClassDefFoundError from label086 to label087 with label138;
        catch java.lang.ExceptionInInitializerError from label086 to label087 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label086 to label087 with label136;
        catch java.lang.Throwable from label086 to label087 with label064;
        catch java.lang.NoClassDefFoundError from label088 to label089 with label138;
        catch java.lang.ExceptionInInitializerError from label088 to label089 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label088 to label089 with label136;
        catch java.lang.Throwable from label088 to label089 with label064;
        catch java.lang.NoClassDefFoundError from label090 to label091 with label138;
        catch java.lang.ExceptionInInitializerError from label090 to label091 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label090 to label091 with label136;
        catch java.lang.Throwable from label090 to label091 with label064;
        catch java.lang.NoClassDefFoundError from label092 to label093 with label138;
        catch java.lang.ExceptionInInitializerError from label092 to label093 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label092 to label093 with label136;
        catch java.lang.Throwable from label092 to label093 with label064;
        catch java.lang.ClassNotFoundException from label094 to label095 with label107;
        catch java.lang.NoClassDefFoundError from label094 to label095 with label138;
        catch java.lang.ExceptionInInitializerError from label094 to label095 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label094 to label095 with label136;
        catch java.lang.Throwable from label094 to label095 with label064;
        catch java.lang.NoClassDefFoundError from label096 to label097 with label138;
        catch java.lang.ExceptionInInitializerError from label096 to label097 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label096 to label097 with label136;
        catch java.lang.Throwable from label096 to label097 with label064;
        catch java.lang.NoClassDefFoundError from label098 to label099 with label138;
        catch java.lang.ExceptionInInitializerError from label098 to label099 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label098 to label099 with label136;
        catch java.lang.Throwable from label098 to label099 with label064;
        catch java.lang.NoClassDefFoundError from label100 to label101 with label138;
        catch java.lang.ExceptionInInitializerError from label100 to label101 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label100 to label101 with label136;
        catch java.lang.Throwable from label100 to label101 with label064;
        catch java.lang.NoClassDefFoundError from label102 to label103 with label138;
        catch java.lang.ExceptionInInitializerError from label102 to label103 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label102 to label103 with label136;
        catch java.lang.Throwable from label102 to label103 with label064;
        catch java.lang.NoClassDefFoundError from label105 to label106 with label138;
        catch java.lang.ExceptionInInitializerError from label105 to label106 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label105 to label106 with label136;
        catch java.lang.Throwable from label105 to label106 with label064;
        catch java.lang.NoClassDefFoundError from label108 to label109 with label138;
        catch java.lang.ExceptionInInitializerError from label108 to label109 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label108 to label109 with label136;
        catch java.lang.Throwable from label108 to label109 with label064;
        catch java.lang.NoClassDefFoundError from label110 to label111 with label138;
        catch java.lang.ExceptionInInitializerError from label110 to label111 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label110 to label111 with label136;
        catch java.lang.Throwable from label110 to label111 with label064;
        catch java.lang.NoClassDefFoundError from label112 to label113 with label138;
        catch java.lang.ExceptionInInitializerError from label112 to label113 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label112 to label113 with label136;
        catch java.lang.Throwable from label112 to label113 with label064;
        catch java.lang.NoClassDefFoundError from label114 to label115 with label138;
        catch java.lang.ExceptionInInitializerError from label114 to label115 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label114 to label115 with label136;
        catch java.lang.Throwable from label114 to label115 with label064;
        catch java.lang.NoClassDefFoundError from label116 to label117 with label138;
        catch java.lang.ExceptionInInitializerError from label116 to label117 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label116 to label117 with label136;
        catch java.lang.Throwable from label116 to label117 with label064;
        catch java.lang.NoClassDefFoundError from label118 to label119 with label138;
        catch java.lang.ExceptionInInitializerError from label118 to label119 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label118 to label119 with label136;
        catch java.lang.Throwable from label118 to label119 with label064;
        catch java.lang.NoClassDefFoundError from label120 to label121 with label138;
        catch java.lang.ExceptionInInitializerError from label120 to label121 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label120 to label121 with label136;
        catch java.lang.Throwable from label120 to label121 with label064;
        catch java.lang.NoClassDefFoundError from label122 to label123 with label138;
        catch java.lang.ExceptionInInitializerError from label122 to label123 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label122 to label123 with label136;
        catch java.lang.Throwable from label122 to label123 with label064;
        catch java.lang.NoClassDefFoundError from label124 to label125 with label138;
        catch java.lang.ExceptionInInitializerError from label124 to label125 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label124 to label125 with label136;
        catch java.lang.Throwable from label124 to label125 with label064;
        catch java.lang.NoClassDefFoundError from label126 to label127 with label138;
        catch java.lang.ExceptionInInitializerError from label126 to label127 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label126 to label127 with label136;
        catch java.lang.Throwable from label126 to label127 with label064;
        catch java.lang.NoClassDefFoundError from label128 to label129 with label138;
        catch java.lang.ExceptionInInitializerError from label128 to label129 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label128 to label129 with label136;
        catch java.lang.Throwable from label128 to label129 with label064;
        catch java.lang.NoClassDefFoundError from label130 to label131 with label138;
        catch java.lang.ExceptionInInitializerError from label130 to label131 with label137;
        catch org.apache.commons.logging.LogConfigurationException from label130 to label131 with label136;
        catch java.lang.Throwable from label130 to label131 with label064;
        catch java.lang.Throwable from label140 to label141 with label142;
    }

    private org.apache.commons.logging.Log discoverLogImplementation(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.LogConfigurationException $r1, $r6;
        java.lang.String $r2, $r7, $r12, r13, r15;
        java.lang.StringBuffer $r3;
        java.lang.StringBuilder $r8;
        org.apache.commons.logging.Log r14, r17;
        int i0, $i1;
        java.lang.String[] r19;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r13 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Discovering a Log implementation...");

     label1:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>();

        r14 = null;

        r15 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>();

        if r15 == null goto label5;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to load user-specified log class \'");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'...");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r12);

     label2:
        r17 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r15, r13, 1);

        if r17 != null goto label4;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("User-specified log class \'");

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be found or is not useable.");

        if r15 == null goto label3;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r3, r15, "org.apache.commons.logging.impl.Log4JLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r3, r15, "org.apache.commons.logging.impl.Jdk14Logger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r3, r15, "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r3, r15, "org.apache.commons.logging.impl.SimpleLog");

     label3:
        $r6 = new org.apache.commons.logging.LogConfigurationException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label4:
        return r17;

     label5:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label6;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("No user-specified Log implementation; performing discovery using the standard supported logging implementations...");

     label6:
        i0 = 0;

     label7:
        r19 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $i1 = lengthof r19;

        if i0 >= $i1 goto label8;

        if r14 != null goto label8;

        $r2 = r19[i0];

        r14 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r2, r13, 1);

        i0 = i0 + 1;

        goto label7;

     label8:
        if r14 == null goto label9;

        return r14;

     label9:
        $r1 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r1.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("No suitable Log implementation");

        throw $r1;
    }

    private java.lang.String findUserSpecifiedLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r1, $r2;
        java.lang.Throwable $r3, $r9;
        java.lang.String $r6, $r8, $r12, $r14, r15, r16, r17, r20, r23;
        java.lang.StringBuilder r24, r25;
        java.lang.SecurityException r26, r27;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.Log\'");

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.Log");

        r15 = (java.lang.String) $r1;

        r16 = r15;

        if r15 != null goto label03;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label02;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.log\'");

     label02:
        $r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.log");

        r16 = (java.lang.String) $r2;

     label03:
        r17 = r16;

        if r16 != null goto label07;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label04;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.Log\'");

     label04:
        r17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r17 = r16;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label07;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.Log\' - ");

        r26 = (java.lang.SecurityException) $r9;

        $r12 = virtualinvoke r26.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

        r17 = r16;

     label07:
        r20 = r17;

        if r17 != null goto label11;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label08;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.log\'");

     label08:
        r20 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log");

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        r20 = r17;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label11;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.log\' - ");

        r27 = (java.lang.SecurityException) $r3;

        $r6 = virtualinvoke r27.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r8);

        r20 = r17;

     label11:
        r23 = r20;

        if r20 == null goto label12;

        r23 = virtualinvoke r20.<java.lang.String: java.lang.String trim()>();

     label12:
        return r23;

        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.SecurityException from label08 to label09 with label10;
    }

    private java.lang.ClassLoader getBaseClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.ClassLoader r1, r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.logging.LogConfigurationException $r2, $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lorg/apache/commons/logging/impl/LogFactoryImpl;");

        $z0 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL>;

        if $z0 != 0 goto label1;

        return r4;

     label1:
        r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoader()>();

        r5 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>(r1, r4);

        if r5 != null goto label4;

        $z3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z3 == 0 goto label3;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");

     label2:
        return r1;

     label3:
        $r3 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r3.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r3;

     label4:
        if r5 == r1 goto label6;

        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label6;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");

        goto label6;

     label5:
        $r2 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r2.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r2;

     label6:
        return r5;
    }

    private boolean getBooleanConfiguration(java.lang.String, boolean)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean z0, $z1;
        java.lang.Boolean $r1;
        java.lang.String r2, r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r3 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>(r2);

        if r3 != null goto label1;

        return z0;

     label1:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r3);

        $z1 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

        return $r1;
    }

    private java.lang.String getConfigurationValue(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r5, $r8, $r13, $r17, $r18, $r24, $r28, $r33, r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r2, $r14, $r19, $r25, $r30, r39, r40;
        java.lang.Throwable $r29;
        java.lang.Object r35;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Trying to get configuration for item ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r28);

     label01:
        r35 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>(r1);

        if r35 == null goto label03;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label02;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found LogFactory attribute [");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r24);

     label02:
        $r18 = virtualinvoke r35.<java.lang.Object: java.lang.String toString()>();

        return $r18;

     label03:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label04;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No LogFactory attribute found for ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r17);

     label04:
        r38 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r1);

     label05:
        if r38 == null goto label08;

     label06:
        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label07;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found system property [");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r13);

     label07:
        return r38;

     label08:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label09;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No system property found for property ");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r8);

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label11;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security prevented reading system property ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r33);

     label11:
        $z6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label12;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No configuration defined for item ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r5);

     label12:
        return null;

        catch java.lang.SecurityException from label04 to label05 with label10;
        catch java.lang.SecurityException from label06 to label07 with label10;
        catch java.lang.SecurityException from label08 to label09 with label10;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }

    private java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.ClassLoader r1, r2, r3, r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.ClassLoader;

        if r1 != null goto label1;

        return r2;

     label1:
        if r2 != null goto label2;

        return r1;

     label2:
        r3 = r1;

     label3:
        if r3 == null goto label5;

        if r3 != r2 goto label4;

        return r1;

     label4:
        r3 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label3;

     label5:
        r4 = r2;

     label6:
        if r4 == null goto label8;

        if r4 != r1 goto label7;

        return r2;

     label7:
        r4 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label6;

     label8:
        return null;
    }

    private void handleFlawedDiscovery(java.lang.String, java.lang.ClassLoader, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r9, $r12, $r14;
        java.lang.Throwable r2;
        boolean $z0, $z1;
        org.apache.commons.logging.LogConfigurationException $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r8;
        java.lang.ClassLoader r15;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate Log \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' -- ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

     label1:
        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z1 == 0 goto label2;

        return;

     label2:
        $r3 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r3.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r2);

        throw $r3;
    }

    private void handleFlawedHierarchy(java.lang.ClassLoader, java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class r1, $r2, $r21, $r30, $r47;
        int $i0, i1;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        java.lang.StringBuffer $r3, $r9, $r18, $r26;
        java.lang.String $r5, $r8, $r12, $r16, $r17, $r22, $r25, $r31, $r35, $r36, $r38, $r41, $r44, $r46, $r48, $r54, r56;
        org.apache.commons.logging.LogConfigurationException $r15, $r34;
        java.lang.Throwable $r49;
        java.lang.StringBuilder $r50, r59;
        java.lang.ClassLoader r55, r58;
        java.lang.Class[] r57;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r55 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Class;

        $r2 = class "Lorg/apache/commons/logging/Log;";

        r56 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        r57 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label01:
        z8 = 0;

        $i0 = lengthof r57;

        if i1 >= $i0 goto label03;

        $r47 = r57[i1];

        $r48 = virtualinvoke $r47.<java.lang.Class: java.lang.String getName()>();

        $z7 = virtualinvoke r56.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z7 == 0 goto label02;

        z8 = 1;

        goto label03;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if z8 == 0 goto label10;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label07;

     label04:
        r58 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lorg/apache/commons/logging/Log;");

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r38 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found in classloader ");

        $r41 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r55);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". It is bound to a Log interface which is not the one loaded from classloader ");

        $r44 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r58);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r46);

     label05:
        goto label07;

     label06:
        $r49 := @caughtexception;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while trying to output diagnostics about bad class \'");

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r54);

     label07:
        $z9 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy>;

        if $z9 != 0 goto label09;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context ");

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due to bad log hierarchy. ");

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r30 = class "Lorg/apache/commons/logging/Log;";

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $z6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label08;

        $r36 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r36);

     label08:
        $r34 = new org.apache.commons.logging.LogConfigurationException;

        $r35 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label09:
        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label13;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: bad log hierarchy. ");

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r21 = class "Lorg/apache/commons/logging/Log;";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $r25 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r25);

        goto label13;

     label10:
        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z1 != 0 goto label12;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context. ");

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log class \'");

        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label11;

        $r17 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r17);

     label11:
        $r15 = new org.apache.commons.logging.LogConfigurationException;

        $r16 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label12:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label13;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARNING] Log class \'");

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $r8 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r8);

     label13:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
    }

    private void informUponSimilarName(java.lang.StringBuffer, java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, r3;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN>;

        $i1 = $i0 + 5;

        $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, r3, 0, $i1);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Did you mean \'");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?");

     label2:
        return;
    }

    private void initConfiguration()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedContext", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext> = $z0;

        $z1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedDiscovery", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery> = $z1;

        $z2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedHierarchy", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy> = $z2;

        return;
    }

    private void initDiagnostics()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class $r2;
        java.lang.StringBuilder $r3;
        int $i0;
        java.lang.String $r9, r12;
        java.lang.Throwable $r10;
        java.lang.ClassLoader r11;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r11 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r2);

        if r11 != null goto label1;

        r12 = "BOOTLOADER";

        goto label2;

     label1:
        r12 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r11);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r12 = "UNKNOWN";

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactoryImpl@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix> = $r9;

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        return $z0;
    }

    private boolean isLogLibraryAvailable(java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r4, $r9, $r13, $r18, $r24, r25;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3;
        org.apache.commons.logging.Log $r5;
        java.lang.StringBuilder $r14, $r20, r26, r27;
        org.apache.commons.logging.LogConfigurationException $r19;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r25 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking for \'");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r18);

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r25, $r4, 0);

        if $r5 != null goto label3;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find \'");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r13 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r13);

     label2:
        return 0;

     label3:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label4;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found \'");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r9 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r9);

     label4:
        return 1;

     label5:
        $r19 := @caughtexception;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label6;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logging system \'");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is available but not useable.");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r24);

     label6:
        return 0;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label2 with label5;
        catch org.apache.commons.logging.LogConfigurationException from label3 to label4 with label5;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String[] getAttributeNames()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Vector $r2;
        java.util.Hashtable $r3;
        boolean $z0;
        int $i0, $i1, i2;
        java.lang.Object $r4, $r6;
        java.lang.String $r5, $r7;
        java.util.Enumeration r8;
        java.lang.String[] r9;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        r8 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        goto label1;

     label2:
        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        r9 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label3:
        $i1 = lengthof r9;

        if i2 >= $i1 goto label4;

        $r4 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $r5 = (java.lang.String) $r4;

        r9[i2] = $r5;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r9;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class r1;
        java.lang.String $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        org.apache.commons.logging.Log r2, r7;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.commons.logging.Log) $r4;

        r7 = r2;

        if r2 != null goto label1;

        r7 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>(r1);

        $r5 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

     label1:
        return r7;
    }

    protected java.lang.String getLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        return $r2;
    }

    protected java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.reflect.Constructor $r1, $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        return $r2;
    }

    protected boolean isJdk13LumberjackAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk13Lumberjack", "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        return $z0;
    }

    protected boolean isJdk14Available()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk14", "org.apache.commons.logging.impl.Jdk14Logger");

        return $z0;
    }

    protected boolean isLog4JAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Log4J", "org.apache.commons.logging.impl.Log4JLogger");

        return $z0;
    }

    protected void logDiagnostic(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r4, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: void logRawDiagnostic(java.lang.String)>($r7);

     label1:
        return;
    }

    protected org.apache.commons.logging.Log newInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.reflect.Constructor $r2, $r4;
        java.lang.Object[] $r3, $r7;
        java.lang.Object $r5;
        java.lang.reflect.Method $r6, $r8;
        org.apache.commons.logging.LogConfigurationException $r10, r21, r22, r23;
        java.lang.Throwable $r11, $r14, r19;
        java.lang.String r16;
        org.apache.commons.logging.Log r17;
        java.lang.reflect.InvocationTargetException r24;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r16 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r2 != null goto label3;

        r17 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>(r16);

     label2:
        goto label4;

     label3:
        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r16;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        r17 = (org.apache.commons.logging.Log) $r5;

     label4:
        $r6 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        if $r6 == null goto label5;

        $r8 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r17, $r7);

     label5:
        return r17;

     label6:
        $r14 := @caughtexception;

        r21 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke r21.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r14);

        throw r21;

     label7:
        $r11 := @caughtexception;

        r24 = (java.lang.reflect.InvocationTargetException) $r11;

        r19 = virtualinvoke r24.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if r19 == null goto label8;

        r22 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke r22.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r19);

        throw r22;

     label8:
        r23 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke r23.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r11);

        throw r23;

     label9:
        $r10 := @caughtexception;

        throw $r10;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label2 with label9;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch org.apache.commons.logging.LogConfigurationException from label3 to label4 with label9;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch org.apache.commons.logging.LogConfigurationException from label4 to label5 with label9;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label7;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void release()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Releasing all known loggers");

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r6;
        java.lang.Object r2;
        java.lang.reflect.Constructor $r3;
        java.util.Hashtable $r4, $r8;
        boolean $z0, $z1;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r3 == null goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("setAttribute: call too late; configuration already performed.");

     label1:
        if r2 != null goto label2;

        $r8 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("use_tccl");

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6);

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = $z1;

     label4:
        return;
    }
}
