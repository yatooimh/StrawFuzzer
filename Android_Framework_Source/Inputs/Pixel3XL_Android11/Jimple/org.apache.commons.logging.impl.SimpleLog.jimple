public class org.apache.commons.logging.impl.SimpleLog extends java.lang.Object implements org.apache.commons.logging.Log, java.io.Serializable
{
    protected static final java.lang.String DEFAULT_DATE_TIME_FORMAT;
    public static final int LOG_LEVEL_ALL;
    public static final int LOG_LEVEL_DEBUG;
    public static final int LOG_LEVEL_ERROR;
    public static final int LOG_LEVEL_FATAL;
    public static final int LOG_LEVEL_INFO;
    public static final int LOG_LEVEL_OFF;
    public static final int LOG_LEVEL_TRACE;
    public static final int LOG_LEVEL_WARN;
    protected static java.text.DateFormat dateFormatter;
    protected static java.lang.String dateTimeFormat;
    protected static boolean showDateTime;
    protected static boolean showLogName;
    protected static boolean showShortName;
    protected static final java.util.Properties simpleLogProps;
    protected static final java.lang.String systemPrefix;
    protected int currentLogLevel;
    protected java.lang.String logName;
    private java.lang.String shortLogName;

    static void <clinit>()
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Properties $r0, $r4;
        java.lang.String $r1, $r2, $r3, $r7;
        java.lang.Throwable $r5, $r8;
        java.text.SimpleDateFormat $r6, r11;
        java.io.InputStream r9;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String systemPrefix> = "org.apache.commons.logging.simplelog.";

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_WARN> = 4;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_TRACE> = 1;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_OFF> = 7;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_INFO> = 3;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_FATAL> = 6;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_ERROR> = 5;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_DEBUG> = 2;

        <org.apache.commons.logging.impl.SimpleLog: int LOG_LEVEL_ALL> = 0;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String DEFAULT_DATE_TIME_FORMAT> = "yyyy/MM/dd HH:mm:ss:SSS zzz";

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps> = $r0;

        <org.apache.commons.logging.impl.SimpleLog: boolean showLogName> = 0;

        <org.apache.commons.logging.impl.SimpleLog: boolean showShortName> = 1;

        <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime> = 0;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = "yyyy/MM/dd HH:mm:ss:SSS zzz";

        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = null;

        r9 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.io.InputStream getResourceAsStream(java.lang.String)>("simplelog.properties");

        if r9 == null goto label4;

     label1:
        $r4 = <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps>;

        virtualinvoke $r4.<java.util.Properties: void load(java.io.InputStream)>(r9);

        virtualinvoke r9.<java.io.InputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        $z1 = <org.apache.commons.logging.impl.SimpleLog: boolean showLogName>;

        $z2 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showlogname", $z1);

        <org.apache.commons.logging.impl.SimpleLog: boolean showLogName> = $z2;

        $z3 = <org.apache.commons.logging.impl.SimpleLog: boolean showShortName>;

        $z4 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showShortLogname", $z3);

        <org.apache.commons.logging.impl.SimpleLog: boolean showShortName> = $z4;

        $z5 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime>;

        z0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: boolean getBooleanProperty(java.lang.String,boolean)>("org.apache.commons.logging.simplelog.showdatetime", $z5);

        <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime> = z0;

        if z0 == 0 goto label8;

        $r1 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

        $r2 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("org.apache.commons.logging.simplelog.dateTimeFormat", $r1);

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = $r2;

     label5:
        r11 = new java.text.SimpleDateFormat;

        $r3 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

        specialinvoke r11.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r3);

        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = r11;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat> = "yyyy/MM/dd HH:mm:ss:SSS zzz";

        $r6 = new java.text.SimpleDateFormat;

        $r7 = <org.apache.commons.logging.impl.SimpleLog: java.lang.String dateTimeFormat>;

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r7);

        <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter> = $r6;

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.String r1, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, r21, r23, r24, r26;
        java.lang.StringBuilder $r2, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r21 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName> = null;

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = null;

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName> = r21;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.simplelog.log.");

        $r4 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r6);

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

        i0 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        r23 = r21;

        r24 = r1;

     label01:
        if r24 != null goto label02;

        if i0 <= -1 goto label02;

        r23 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.simplelog.log.");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r24 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>($r19);

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        i0 = virtualinvoke $r20.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        goto label01;

     label02:
        r26 = r24;

        if r24 != null goto label03;

        r26 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>("org.apache.commons.logging.simplelog.defaultlog");

     label03:
        $r8 = "all";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z0 == 0 goto label04;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(0);

        goto label11;

     label04:
        $r9 = "trace";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z1 == 0 goto label05;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(1);

        goto label11;

     label05:
        $r10 = "debug";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z2 == 0 goto label06;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(2);

        goto label11;

     label06:
        $r11 = "info";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z3 == 0 goto label07;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(3);

        goto label11;

     label07:
        $r12 = "warn";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z4 == 0 goto label08;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(4);

        goto label11;

     label08:
        $r13 = "error";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z5 == 0 goto label09;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(5);

        goto label11;

     label09:
        $r14 = "fatal";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z6 == 0 goto label10;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(6);

        goto label11;

     label10:
        $r15 = "off";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z7 == 0 goto label11;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)>(7);

     label11:
        return;
    }

    static java.lang.ClassLoader access$000()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }

    private static boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.lang.String $r0, r1, r2;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        goto label2;

     label1:
        $r0 = "true";

        z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label2:
        return z0;
    }

    private static java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Class $r0, $r2;
        java.lang.Class[] $r1;
        java.lang.Thread $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10;
        boolean $z0;
        java.lang.ClassLoader r11, r15;
        java.lang.reflect.Method r12;
        org.apache.commons.logging.LogConfigurationException r16;
        java.lang.reflect.InvocationTargetException r17, r18;

     label01:
        $r2 = class "Ljava/lang/Thread;";

        $r1 = (java.lang.Class[]) null;

        r12 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r1);

     label02:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = (java.lang.Object[]) null;

        $r5 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r4);

        r11 = (java.lang.ClassLoader) $r5;

     label03:
        goto label09;

     label04:
        $r7 := @caughtexception;

     label05:
        r17 = (java.lang.reflect.InvocationTargetException) $r7;

        $r8 = virtualinvoke r17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r8 instanceof java.lang.SecurityException;

        if $z0 == 0 goto label07;

     label06:
        r11 = null;

        goto label09;

     label07:
        r16 = new org.apache.commons.logging.LogConfigurationException;

        r18 = (java.lang.reflect.InvocationTargetException) $r7;

        $r9 = virtualinvoke r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke r16.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r9);

        throw r16;

     label08:
        $r10 := @caughtexception;

        r11 = null;

        goto label03;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        r11 = null;

     label11:
        r15 = r11;

        if r11 != null goto label12;

        $r0 = class "Lorg/apache/commons/logging/impl/SimpleLog;";

        r15 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label12:
        return r15;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.IllegalAccessException from label02 to label03 with label08;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label04;
        catch java.lang.NoSuchMethodException from label02 to label03 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
        catch java.lang.NoSuchMethodException from label07 to label08 with label10;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.logging.impl.SimpleLog$1 $r1;
        java.lang.Object $r2;
        java.io.InputStream $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.logging.impl.SimpleLog$1;

        specialinvoke $r1.<org.apache.commons.logging.impl.SimpleLog$1: void <init>(java.lang.String)>(r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r3 = (java.io.InputStream) $r2;

        return $r3;
    }

    private static java.lang.String getStringProperty(java.lang.String)
    {
        java.lang.String r0, r3, r4;
        java.util.Properties $r1;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.lang.String;

        r3 = null;

     label1:
        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

     label2:
        r3 = r4;

        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        if r3 != null goto label5;

        $r1 = <org.apache.commons.logging.impl.SimpleLog: java.util.Properties simpleLogProps>;

        r3 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        goto label5;

     label5:
        return r3;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private static java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 = staticinvoke <org.apache.commons.logging.impl.SimpleLog: java.lang.String getStringProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        r2 = r0;

        goto label1;

     label1:
        return r2;
    }

    public final void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, r1, null);

     label1:
        return;
    }

    public final void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(2, r1, r2);

     label1:
        return;
    }

    public final void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, r1, null);

     label1:
        return;
    }

    public final void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(5, r1, r2);

     label1:
        return;
    }

    public final void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, r1, null);

     label1:
        return;
    }

    public final void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(6, r1, r2);

     label1:
        return;
    }

    public int getLevel()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int $i0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $i0 = r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel>;

        return $i0;
    }

    public final void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, r1, null);

     label1:
        return;
    }

    public final void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(3, r1, r2);

     label1:
        return;
    }

    public final boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(2);

        return $z0;
    }

    public final boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(5);

        return $z0;
    }

    public final boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(6);

        return $z0;
    }

    public final boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(3);

        return $z0;
    }

    protected boolean isLevelEnabled(int)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel>;

        if i0 < $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        return $z0;
    }

    public final boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        return $z0;
    }

    protected void log(int, java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r1;
        java.lang.StringBuffer $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r12, $r14, $r15, $r18, $r19, $r20, $r23, $r31, r35, r36, $r37;
        java.io.StringWriter $r10;
        java.io.PrintWriter $r11;
        java.util.Date $r29;
        java.text.DateFormat $r30;
        java.lang.Object r34;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        i0 := @parameter0: int;

        r34 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Throwable;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $z0 = <org.apache.commons.logging.impl.SimpleLog: boolean showDateTime>;

        if $z0 == 0 goto label01;

        $r30 = <org.apache.commons.logging.impl.SimpleLog: java.text.DateFormat dateFormatter>;

        $r29 = new java.util.Date;

        specialinvoke $r29.<java.util.Date: void <init>()>();

        $r31 = virtualinvoke $r30.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r29);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label01:
        tableswitch(i0)
        {
            case 1: goto label08;
            case 2: goto label07;
            case 3: goto label06;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label03;
            default: goto label02;
        };

     label02:
        goto label09;

     label03:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[FATAL] ");

        goto label09;

     label04:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[ERROR] ");

        goto label09;

     label05:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARN] ");

        goto label09;

     label06:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[INFO] ");

        goto label09;

     label07:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[DEBUG] ");

        goto label09;

     label08:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[TRACE] ");

     label09:
        $z2 = <org.apache.commons.logging.impl.SimpleLog: boolean showShortName>;

        if $z2 == 0 goto label11;

        $r18 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        if $r18 != null goto label10;

        r35 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $i1 = virtualinvoke r35.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i2 = $i1 + 1;

        r36 = virtualinvoke r35.<java.lang.String: java.lang.String substring(int)>($i2);

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = r36;

        $i3 = virtualinvoke r36.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i4 = $i3 + 1;

        $r23 = virtualinvoke r36.<java.lang.String: java.lang.String substring(int)>($i4);

        r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName> = $r23;

     label10:
        $r19 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String shortLogName>;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r19);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        goto label12;

     label11:
        $z1 = <org.apache.commons.logging.impl.SimpleLog: boolean showLogName>;

        if $z1 == 0 goto label12;

        $r14 = r0.<org.apache.commons.logging.impl.SimpleLog: java.lang.String logName>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

     label12:
        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        if r1 == null goto label13;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $r7 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r10 = new java.io.StringWriter;

        specialinvoke $r10.<java.io.StringWriter: void <init>(int)>(1024);

        $r11 = new java.io.PrintWriter;

        specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.Writer)>($r10);

        virtualinvoke r1.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r11);

        virtualinvoke $r11.<java.io.PrintWriter: void close()>();

        $r12 = virtualinvoke $r10.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label13:
        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)>($r3);

        return;
    }

    public void setLevel(int)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        int i0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        i0 := @parameter0: int;

        r0.<org.apache.commons.logging.impl.SimpleLog: int currentLogLevel> = i0;

        return;
    }

    public final void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, r1, null);

     label1:
        return;
    }

    public final void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(1, r1, r2);

     label1:
        return;
    }

    public final void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, r1, null);

     label1:
        return;
    }

    public final void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: boolean isLevelEnabled(int)>(4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)>(4, r1, r2);

     label1:
        return;
    }

    protected void write(java.lang.StringBuffer)
    {
        org.apache.commons.logging.impl.SimpleLog r0;
        java.lang.StringBuffer r1;
        java.io.PrintStream $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.commons.logging.impl.SimpleLog;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }
}
