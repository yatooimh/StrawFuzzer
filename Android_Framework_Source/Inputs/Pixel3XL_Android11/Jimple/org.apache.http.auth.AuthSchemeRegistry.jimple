public final class org.apache.http.auth.AuthSchemeRegistry extends java.lang.Object
{
    private final java.util.Map registeredSchemes;

    public void <init>()
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes> = $r1;

        return;
    }

    public org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String, org.apache.http.params.HttpParams) throws java.lang.IllegalStateException
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        java.util.Locale $r1;
        java.util.Map $r2;
        java.lang.String $r3, $r7, r9;
        java.lang.Object $r4;
        java.lang.Throwable $r8;
        org.apache.http.params.HttpParams r10;
        org.apache.http.auth.AuthSchemeFactory r11;
        org.apache.http.auth.AuthScheme r12;
        java.lang.IllegalStateException r13;
        java.lang.StringBuilder r14;
        java.lang.IllegalArgumentException r16;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: org.apache.http.params.HttpParams;

        entermonitor r0;

        if r9 == null goto label7;

     label1:
        $r2 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r9.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r11 = (org.apache.http.auth.AuthSchemeFactory) $r4;

     label2:
        if r11 == null goto label5;

     label3:
        r12 = interfaceinvoke r11.<org.apache.http.auth.AuthSchemeFactory: org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams)>(r10);

     label4:
        exitmonitor r0;

        return r12;

     label5:
        r13 = new java.lang.IllegalStateException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported authentication scheme: ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r7 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r13;

     label6:
        $r8 := @caughtexception;

        goto label8;

     label7:
        r16 = new java.lang.IllegalArgumentException;

        specialinvoke r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw r16;

     label8:
        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.util.List getSchemeNames()
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        entermonitor r0;

     label1:
        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void register(java.lang.String, org.apache.http.auth.AuthSchemeFactory)
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        org.apache.http.auth.AuthSchemeFactory r1;
        java.util.Locale $r2;
        java.util.Map $r3;
        java.lang.String $r4, r7;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException r8, r9;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.auth.AuthSchemeFactory;

        entermonitor r0;

        if r7 == null goto label4;

        if r1 == null goto label3;

     label1:
        $r3 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        r8 = new java.lang.IllegalArgumentException;

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scheme factory may not be null");

        throw r8;

     label4:
        r9 = new java.lang.IllegalArgumentException;

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw r9;

     label5:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void setItems(java.util.Map)
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        java.util.Map $r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r4 := @parameter0: java.util.Map;

        entermonitor r0;

        if r4 != null goto label1;

        exitmonitor r0;

        return;

     label1:
        $r1 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void unregister(java.lang.String)
    {
        org.apache.http.auth.AuthSchemeRegistry r0;
        java.util.Locale $r1;
        java.util.Map $r2;
        java.lang.String $r3, r6;
        java.lang.Throwable $r5;
        java.lang.IllegalArgumentException r8;

        r0 := @this: org.apache.http.auth.AuthSchemeRegistry;

        r6 := @parameter0: java.lang.String;

        entermonitor r0;

        if r6 == null goto label4;

     label1:
        $r2 = r0.<org.apache.http.auth.AuthSchemeRegistry: java.util.Map registeredSchemes>;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        goto label5;

     label4:
        r8 = new java.lang.IllegalArgumentException;

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw r8;

     label5:
        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
