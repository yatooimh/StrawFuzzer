public class org.apache.http.client.methods.HttpOptions extends org.apache.http.client.methods.HttpRequestBase
{
    public static final java.lang.String METHOD_NAME;

    public void <init>()
    {
        org.apache.http.client.methods.HttpOptions r0;

        r0 := @this: org.apache.http.client.methods.HttpOptions;

        specialinvoke r0.<org.apache.http.client.methods.HttpRequestBase: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.http.client.methods.HttpOptions r0;
        java.lang.String r1;
        java.net.URI $r2;

        r0 := @this: org.apache.http.client.methods.HttpOptions;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.http.client.methods.HttpRequestBase: void <init>()>();

        $r2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.http.client.methods.HttpOptions: void setURI(java.net.URI)>($r2);

        return;
    }

    public void <init>(java.net.URI)
    {
        org.apache.http.client.methods.HttpOptions r0;
        java.net.URI r1;

        r0 := @this: org.apache.http.client.methods.HttpOptions;

        r1 := @parameter0: java.net.URI;

        specialinvoke r0.<org.apache.http.client.methods.HttpRequestBase: void <init>()>();

        virtualinvoke r0.<org.apache.http.client.methods.HttpOptions: void setURI(java.net.URI)>(r1);

        return;
    }

    public java.util.Set getAllowedMethods(org.apache.http.HttpResponse)
    {
        org.apache.http.client.methods.HttpOptions r0;
        org.apache.http.HeaderIterator r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r3;
        java.util.HashSet $r4;
        boolean $z0;
        org.apache.http.Header $r5;
        org.apache.http.HeaderElement $r6;
        java.lang.String $r7;
        org.apache.http.HttpResponse r8;
        org.apache.http.HeaderElement[] r9;

        r0 := @this: org.apache.http.client.methods.HttpOptions;

        r8 := @parameter0: org.apache.http.HttpResponse;

        if r8 == null goto label5;

        r1 = interfaceinvoke r8.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Allow");

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

     label1:
        $z0 = interfaceinvoke r1.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r1.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        r9 = interfaceinvoke $r5.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

        i0 = lengthof r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = r9[i1];

        $r7 = interfaceinvoke $r6.<org.apache.http.HeaderElement: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r3;
    }

    public java.lang.String getMethod()
    {
        org.apache.http.client.methods.HttpOptions r0;

        r0 := @this: org.apache.http.client.methods.HttpOptions;

        return "OPTIONS";
    }

    public static void <clinit>()
    {
        <org.apache.http.client.methods.HttpOptions: java.lang.String METHOD_NAME> = "OPTIONS";

        return;
    }
}
