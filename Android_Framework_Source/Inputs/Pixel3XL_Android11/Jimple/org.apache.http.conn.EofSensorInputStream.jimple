public class org.apache.http.conn.EofSensorInputStream extends java.io.InputStream implements org.apache.http.conn.ConnectionReleaseTrigger
{
    private org.apache.http.conn.EofSensorWatcher eofWatcher;
    private boolean selfClosed;
    protected java.io.InputStream wrappedStream;

    public void <init>(java.io.InputStream, org.apache.http.conn.EofSensorWatcher)
    {
        org.apache.http.conn.EofSensorInputStream r0;
        java.io.InputStream r1;
        org.apache.http.conn.EofSensorWatcher r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.apache.http.conn.EofSensorWatcher;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = r1;

        r0.<org.apache.http.conn.EofSensorInputStream: boolean selfClosed> = 0;

        r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher> = r2;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrapped stream may not be null.");

        throw $r3;
    }

    public void abortConnection() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r0.<org.apache.http.conn.EofSensorInputStream: boolean selfClosed> = 1;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkAbort()>();

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        boolean $z0;
        java.io.InputStream $r2;
        java.lang.Throwable $r3;
        int i0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        i0 = 0;

        $z0 = virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label4;

     label1:
        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkAbort()>();

        throw $r3;

     label4:
        return i0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void checkAbort() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        org.apache.http.conn.EofSensorWatcher $r1, $r3;
        java.io.InputStream $r2, r5;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r5 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        if r5 == null goto label6;

        z0 = 1;

     label1:
        $r1 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        if $r1 == null goto label2;

        $r3 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        z0 = interfaceinvoke $r3.<org.apache.http.conn.EofSensorWatcher: boolean streamAbort(java.io.InputStream)>(r5);

     label2:
        if z0 == 0 goto label4;

     label3:
        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        goto label6;

     label5:
        $r4 := @caughtexception;

        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void checkClose() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        org.apache.http.conn.EofSensorWatcher $r1, $r3;
        java.io.InputStream $r2, r5;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r5 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        if r5 == null goto label6;

        z0 = 1;

     label1:
        $r1 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        if $r1 == null goto label2;

        $r3 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        z0 = interfaceinvoke $r3.<org.apache.http.conn.EofSensorWatcher: boolean streamClosed(java.io.InputStream)>(r5);

     label2:
        if z0 == 0 goto label4;

     label3:
        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        goto label6;

     label5:
        $r4 := @caughtexception;

        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void checkEOF(int) throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        int i0;
        org.apache.http.conn.EofSensorWatcher $r1, $r3;
        java.io.InputStream $r2, r5;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        i0 := @parameter0: int;

        r5 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        if r5 == null goto label6;

        if i0 >= 0 goto label6;

        z0 = 1;

     label1:
        $r1 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        if $r1 == null goto label2;

        $r3 = r0.<org.apache.http.conn.EofSensorInputStream: org.apache.http.conn.EofSensorWatcher eofWatcher>;

        z0 = interfaceinvoke $r3.<org.apache.http.conn.EofSensorWatcher: boolean eofDetected(java.io.InputStream)>(r5);

     label2:
        if z0 == 0 goto label4;

     label3:
        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        goto label6;

     label5:
        $r4 := @caughtexception;

        r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream> = null;

        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r0.<org.apache.http.conn.EofSensorInputStream: boolean selfClosed> = 1;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkClose()>();

        return;
    }

    protected boolean isReadAllowed() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        boolean $z0, z1;
        java.io.IOException $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        $z0 = r0.<org.apache.http.conn.EofSensorInputStream: boolean selfClosed>;

        if $z0 != 0 goto label3;

        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        if $r2 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read on closed stream.");

        throw $r1;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        boolean $z0;
        java.io.InputStream $r2;
        java.lang.Throwable $r3;
        int i0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        i0 = -1;

        $z0 = virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label4;

     label1:
        $r2 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkEOF(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkAbort()>();

        throw $r3;

     label4:
        return i0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        boolean $z0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;
        byte[] r3;
        int i0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r3 := @parameter0: byte[];

        i0 = -1;

        $z0 = virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>(r3);

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkEOF(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkAbort()>();

        throw $r2;

     label4:
        return i0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;
        int i0, i1, i2;
        boolean $z0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;
        byte[] r3;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = -1;

        $z0 = virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: boolean isReadAllowed()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = r0.<org.apache.http.conn.EofSensorInputStream: java.io.InputStream wrappedStream>;

        i2 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>(r3, i0, i1);

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkEOF(int)>(i2);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void checkAbort()>();

        throw $r2;

     label4:
        return i2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void releaseConnection() throws java.io.IOException
    {
        org.apache.http.conn.EofSensorInputStream r0;

        r0 := @this: org.apache.http.conn.EofSensorInputStream;

        virtualinvoke r0.<org.apache.http.conn.EofSensorInputStream: void close()>();

        return;
    }
}
