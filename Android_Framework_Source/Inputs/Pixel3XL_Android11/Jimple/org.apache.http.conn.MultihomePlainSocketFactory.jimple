public final class org.apache.http.conn.MultihomePlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY;

    static void <clinit>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.MultihomePlainSocketFactory: void <init>()>();

        <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY>;

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        int i0, i1, i2, i3, $i4;
        java.lang.IllegalArgumentException $r1, $r2;
        java.net.InetSocketAddress $r3, r20;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r7, r17;
        java.net.Socket $r6, r8, r12;
        java.lang.String r9;
        java.net.InetAddress r10, r19;
        org.apache.http.params.HttpParams r11;
        java.net.InetAddress[] r13;
        java.util.ArrayList $r14;
        java.util.List $r16;
        java.util.Iterator r18;
        boolean $z1;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r8 := @parameter0: java.net.Socket;

        r9 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r10 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r11 := @parameter5: org.apache.http.params.HttpParams;

        if r9 == null goto label13;

        if r11 == null goto label12;

        r12 = r8;

        if r8 != null goto label01;

        r12 = virtualinvoke r0.<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>();

     label01:
        if r10 != null goto label02;

        if i1 <= 0 goto label04;

     label02:
        i2 = i1;

        if i1 >= 0 goto label03;

        i2 = 0;

     label03:
        $r3 = new java.net.InetSocketAddress;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r10, i2);

        virtualinvoke r12.<java.net.Socket: void bind(java.net.SocketAddress)>($r3);

     label04:
        i3 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r11);

        r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r9);

        $r14 = new java.util.ArrayList;

        $i4 = lengthof r13;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i4);

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r13);

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r14);

        r17 = null;

        r18 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r4 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.net.InetAddress) $r4;

     label06:
        r20 = new java.net.InetSocketAddress;

        specialinvoke r20.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r19, i0);

        virtualinvoke r12.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r20, i3);

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        r17 = $r5;

        $r6 = new java.net.Socket;

        specialinvoke $r6.<java.net.Socket: void <init>()>();

        r12 = $r6;

        goto label05;

     label09:
        $r7 := @caughtexception;

        throw $r7;

     label10:
        if r17 != null goto label11;

        return r12;

     label11:
        throw r17;

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r2;

     label13:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r1;

        catch java.net.SocketTimeoutException from label06 to label07 with label09;
        catch java.io.IOException from label06 to label07 with label08;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.net.Socket $r1;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = new java.net.Socket;

        specialinvoke $r1.<java.net.Socket: void <init>()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int hashCode()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = class "Lorg/apache/http/conn/scheme/PlainSocketFactory;";

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;
        java.net.Socket r1;
        java.lang.IllegalArgumentException $r2, $r4, $r5;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        r1 := @parameter0: java.net.Socket;

        if r1 == null goto label3;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Ljava/net/Socket;" goto label2;

        $z0 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;
    }
}
