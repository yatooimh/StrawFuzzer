public final class org.apache.http.conn.scheme.SchemeRegistry extends java.lang.Object
{
    private final java.util.Map registeredSchemes;

    public void <init>()
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes> = $r1;

        return;
    }

    public final org.apache.http.conn.scheme.Scheme get(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        org.apache.http.conn.scheme.Scheme r5;
        java.lang.IllegalArgumentException r7;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r4 := @parameter0: java.lang.String;

        entermonitor r0;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (org.apache.http.conn.scheme.Scheme) $r2;

     label2:
        exitmonitor r0;

        return r5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw r7;

     label5:
        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.StringBuilder r1;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;
        org.apache.http.conn.scheme.Scheme r8;
        java.lang.IllegalStateException r9;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r7 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r8 = virtualinvoke r0.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>(r7);

     label2:
        if r8 == null goto label3;

        exitmonitor r0;

        return r8;

     label3:
        r9 = new java.lang.IllegalStateException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheme \'");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not registered.");

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw r9;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        org.apache.http.HttpHost r3;
        org.apache.http.conn.scheme.Scheme r4;
        java.lang.IllegalArgumentException r6;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r3 := @parameter0: org.apache.http.HttpHost;

        entermonitor r0;

        if r3 == null goto label4;

     label1:
        $r1 = virtualinvoke r3.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        r4 = virtualinvoke r0.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r1);

     label2:
        exitmonitor r0;

        return r4;

     label3:
        $r2 := @caughtexception;

        goto label5;

     label4:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host must not be null.");

        throw r6;

     label5:
        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final java.util.List getSchemeNames()
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.ArrayList $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Throwable $r4;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        entermonitor r0;

     label1:
        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.Map $r1;
        java.lang.String $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        org.apache.http.conn.scheme.Scheme r5, r6;
        java.lang.IllegalArgumentException r8;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r5 := @parameter0: org.apache.http.conn.scheme.Scheme;

        entermonitor r0;

        if r5 == null goto label4;

     label1:
        $r1 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r2 = virtualinvoke r5.<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r5);

        r6 = (org.apache.http.conn.scheme.Scheme) $r3;

     label2:
        exitmonitor r0;

        return r6;

     label3:
        $r4 := @caughtexception;

        goto label5;

     label4:
        r8 = new java.lang.IllegalArgumentException;

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme must not be null.");

        throw r8;

     label5:
        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setItems(java.util.Map)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.Map $r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r4 := @parameter0: java.util.Map;

        entermonitor r0;

        if r4 != null goto label1;

        exitmonitor r0;

        return;

     label1:
        $r1 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r4);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final org.apache.http.conn.scheme.Scheme unregister(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        org.apache.http.conn.scheme.Scheme r5;
        java.lang.IllegalArgumentException r7;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r4 := @parameter0: java.lang.String;

        entermonitor r0;

        if r4 == null goto label4;

     label1:
        $r1 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        r5 = (org.apache.http.conn.scheme.Scheme) $r2;

     label2:
        exitmonitor r0;

        return r5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw r7;

     label5:
        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
