public abstract class org.apache.http.conn.ssl.AbstractVerifier extends java.lang.Object implements org.apache.http.conn.ssl.X509HostnameVerifier
{
    private static final java.lang.String[] BAD_COUNTRY_2LDS;
    private static final java.util.regex.Pattern IPV4_PATTERN;

    static void <clinit>()
    {
        java.lang.String[] r0;
        java.util.regex.Pattern $r1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}$");

        <org.apache.http.conn.ssl.AbstractVerifier: java.util.regex.Pattern IPV4_PATTERN> = $r1;

        r0 = newarray (java.lang.String)[14];

        r0[0] = "ac";

        r0[1] = "co";

        r0[2] = "com";

        r0[3] = "ed";

        r0[4] = "edu";

        r0[5] = "go";

        r0[6] = "gouv";

        r0[7] = "gov";

        r0[8] = "info";

        r0[9] = "lg";

        r0[10] = "ne";

        r0[11] = "net";

        r0[12] = "or";

        r0[13] = "org";

        <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS> = r0;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r0);

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean acceptableCountryWildcard(java.lang.String)
    {
        int i0, $i1, $i3, $i4;
        char $c2;
        java.lang.String[] $r0;
        java.lang.String r1, r2;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        z0 = 1;

        if i0 < 7 goto label3;

        if i0 > 9 goto label3;

        $i1 = i0 - 3;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 46 goto label3;

        $i3 = i0 - 3;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(2, $i3);

        $r0 = <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] BAD_COUNTRY_2LDS>;

        $i4 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r0, r2);

        if $i4 >= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        return 1;
    }

    public static int countDots(java.lang.String)
    {
        java.lang.String r0;
        int $i0, i2, i3, i4;
        char $c1;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        i4 = i2;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c1 != 46 goto label2;

        i4 = i2 + 1;

     label2:
        i3 = i3 + 1;

        i2 = i4;

        goto label1;

     label3:
        return i2;
    }

    public static java.lang.String[] getCNs(java.security.cert.X509Certificate)
    {
        java.util.List r0;
        org.apache.http.conn.ssl.AndroidDistinguishedNameParser $r1;
        javax.security.auth.x500.X500Principal $r2;
        boolean $z0;
        int $i0;
        java.security.cert.X509Certificate r4;
        java.lang.String[] r5;

        r4 := @parameter0: java.security.cert.X509Certificate;

        $r1 = new org.apache.http.conn.ssl.AndroidDistinguishedNameParser;

        $r2 = virtualinvoke r4.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        specialinvoke $r1.<org.apache.http.conn.ssl.AndroidDistinguishedNameParser: void <init>(javax.security.auth.x500.X500Principal)>($r2);

        r0 = virtualinvoke $r1.<org.apache.http.conn.ssl.AndroidDistinguishedNameParser: java.util.List getAllMostSpecificFirst(java.lang.String)>("cn");

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r5 = newarray (java.lang.String)[$i0];

        interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r5);

        return r5;

     label1:
        return null;
    }

    public static java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)
    {
        java.util.LinkedList $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.Object $r2, $r3, $r5;
        java.lang.Integer $r4;
        java.lang.String $r6, $r9;
        java.lang.Throwable $r7;
        java.lang.Class $r8;
        java.util.logging.Logger $r10;
        java.util.logging.Level $r11;
        java.security.cert.X509Certificate r12;
        java.util.Collection r13;
        java.util.Iterator r15;
        java.util.List r16;
        java.lang.String[] r17;

        r12 := @parameter0: java.security.cert.X509Certificate;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

     label1:
        r13 = virtualinvoke r12.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = class "Lorg/apache/http/conn/ssl/AbstractVerifier;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r9);

        $r11 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r11, "Error parsing certificate.", $r7);

        r13 = null;

     label4:
        if r13 == null goto label7;

        r15 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r2 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.List) $r2;

        $r3 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 != 2 goto label6;

        $r5 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label6:
        goto label5;

     label7:
        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        r17 = newarray (java.lang.String)[$i0];

        virtualinvoke $r1.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>(r17);

        return r17;

     label8:
        return null;

        catch java.security.cert.CertificateParsingException from label1 to label2 with label3;
    }

    private static boolean isIPv4Address(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.http.conn.ssl.AbstractVerifier: java.util.regex.Pattern IPV4_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public final void verify(java.lang.String, java.security.cert.X509Certificate) throws javax.net.ssl.SSLException
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;
        java.lang.String r1;
        java.security.cert.X509Certificate r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate;

        $r3 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>(r2);

        $r4 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>(r2);

        virtualinvoke r0.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>(r1, $r3, $r4);

        return;
    }

    public final void verify(java.lang.String, javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;
        java.lang.String r1;
        javax.net.ssl.SSLSocket r2;
        java.lang.NullPointerException $r3;
        javax.net.ssl.SSLSession $r4;
        java.security.cert.Certificate[] $r5;
        java.security.cert.Certificate $r6;
        java.security.cert.X509Certificate $r7;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.net.ssl.SSLSocket;

        if r1 == null goto label1;

        $r4 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r5 = interfaceinvoke $r4.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r6 = $r5[0];

        $r7 = (java.security.cert.X509Certificate) $r6;

        virtualinvoke r0.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>(r1, $r7);

        return;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("host to verify is null");

        throw $r3;
    }

    public final void verify(java.lang.String, java.lang.String[], java.lang.String[], boolean) throws javax.net.ssl.SSLException
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;
        java.lang.String r1, $r9, $r11, $r19, $r22, $r26, $r28, $r29, r33, r35, r36;
        boolean z0, z2, $z3, $z4, $z5, $z6, $z7, z10, z11, z12;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.util.Iterator r2;
        java.util.LinkedList $r3;
        java.lang.StringBuilder $r4, $r13;
        javax.net.ssl.SSLException $r8, $r18;
        java.lang.StringBuffer $r10;
        java.util.Locale $r12, $r21;
        java.lang.Object $r20;
        java.lang.String[] r30, r31;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r1 := @parameter0: java.lang.String;

        r30 := @parameter1: java.lang.String[];

        r31 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        if r30 == null goto label01;

        $i4 = lengthof r30;

        if $i4 <= 0 goto label01;

        $r28 = r30[0];

        if $r28 == null goto label01;

        $r29 = r30[0];

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r29);

     label01:
        if r31 == null goto label04;

        i0 = lengthof r31;

        i5 = 0;

     label02:
        if i5 >= i0 goto label04;

        r33 = r31[i5];

        if r33 == null goto label03;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r33);

     label03:
        i5 = i5 + 1;

        goto label02;

     label04:
        $z3 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z3 != 0 goto label16;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r12 = <java.util.Locale: java.util.Locale ENGLISH>;

        r35 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        z10 = 0;

        r2 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r20 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r22 = (java.lang.String) $r20;

        $r21 = <java.util.Locale: java.util.Locale ENGLISH>;

        r36 = virtualinvoke $r22.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r21);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r36);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" OR");

     label06:
        z11 = virtualinvoke r36.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if z11 == 0 goto label07;

        $i3 = virtualinvoke r36.<java.lang.String: int indexOf(int,int)>(46, 2);

        if $i3 == -1 goto label07;

        $z6 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)>(r36);

        if $z6 == 0 goto label07;

        $z7 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: boolean isIPv4Address(java.lang.String)>(r1);

        if $z7 != 0 goto label07;

        z12 = 1;

        goto label08;

     label07:
        z12 = 0;

     label08:
        if z12 == 0 goto label11;

        $r26 = virtualinvoke r36.<java.lang.String: java.lang.String substring(int)>(1);

        z2 = virtualinvoke r35.<java.lang.String: boolean endsWith(java.lang.String)>($r26);

        z10 = z2;

        if z2 == 0 goto label12;

        z10 = z2;

        if z0 == 0 goto label12;

        $i1 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>(r35);

        $i2 = staticinvoke <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)>(r36);

        if $i1 != $i2 goto label09;

        z10 = 1;

        goto label10;

     label09:
        z10 = 0;

     label10:
        goto label12;

     label11:
        z10 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>(r36);

     label12:
        if z10 == 0 goto label13;

        goto label14;

     label13:
        goto label05;

     label14:
        if z10 == 0 goto label15;

        return;

     label15:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hostname in certificate didn\'t match: <");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> !=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r18 = new javax.net.ssl.SSLException;

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label16:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate for <");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> doesn\'t contain CN or DNS subjectAlt");

        $r8 = new javax.net.ssl.SSLException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public final boolean verify(java.lang.String, javax.net.ssl.SSLSession)
    {
        org.apache.http.conn.ssl.AbstractVerifier r0;
        javax.net.ssl.SSLSession r1;
        java.security.cert.Certificate[] $r2;
        java.security.cert.Certificate $r3;
        java.security.cert.X509Certificate $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: org.apache.http.conn.ssl.AbstractVerifier;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.net.ssl.SSLSession;

     label1:
        $r2 = interfaceinvoke r1.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        $r3 = $r2[0];

        $r4 = (java.security.cert.X509Certificate) $r3;

        virtualinvoke r0.<org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)>(r6, $r4);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
    }
}
