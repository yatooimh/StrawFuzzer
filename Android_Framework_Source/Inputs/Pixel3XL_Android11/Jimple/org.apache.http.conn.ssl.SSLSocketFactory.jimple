public class org.apache.http.conn.ssl.SSLSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.LayeredSocketFactory
{
    public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    public static final java.lang.String TLS;
    private org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;
    private final javax.net.ssl.SSLSocketFactory socketfactory;
    private final javax.net.ssl.SSLContext sslcontext;

    static void <clinit>()
    {
        org.apache.http.conn.ssl.AllowAllHostnameVerifier $r0;
        org.apache.http.conn.ssl.BrowserCompatHostnameVerifier $r1;
        org.apache.http.conn.ssl.StrictHostnameVerifier $r2;

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String TLS> = "TLS";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSLV2> = "SSLv2";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSL> = "SSL";

        $r0 = new org.apache.http.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r0.<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r0;

        $r1 = new org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r1.<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r1;

        $r2 = new org.apache.http.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r2.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r2;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        $r2 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1, r8;
        java.security.SecureRandom r2;
        org.apache.http.conn.scheme.HostNameResolver r3;
        org.apache.http.conn.ssl.X509HostnameVerifier $r4;
        javax.net.ssl.SSLContext $r5, r13;
        javax.net.ssl.SSLSocketFactory $r6;
        java.lang.String r7, r9, r10;
        javax.net.ssl.KeyManager[] r11;
        javax.net.ssl.TrustManager[] r12;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.security.KeyStore;

        r9 := @parameter2: java.lang.String;

        r1 := @parameter3: java.security.KeyStore;

        r2 := @parameter4: java.security.SecureRandom;

        r3 := @parameter5: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r4;

        r10 = r7;

        if r7 != null goto label1;

        r10 = "TLS";

     label1:
        r11 = null;

        if r8 == null goto label2;

        r11 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore,java.lang.String)>(r8, r9);

     label2:
        r12 = null;

        if r1 == null goto label3;

        r12 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore)>(r1);

     label3:
        r13 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r10);

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = r13;

        virtualinvoke r13.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r11, r12, r2);

        $r5 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext>;

        $r6 = virtualinvoke $r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r6;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = r3;

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", null, null, r1, null, null);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", r1, r2, null, null, null);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1, r3;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.security.KeyStore;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", r1, r2, r3, null, null);

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = r1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    void <init>(org.apache.http.conn.ssl.SSLSocketFactory$1)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.SSLSocketFactory$1 r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.SSLSocketFactory$1;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>()>();

        return;
    }

    private static javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore, java.lang.String) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        java.security.KeyStore r0;
        javax.net.ssl.KeyManagerFactory r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, r5;
        javax.net.ssl.KeyManager[] $r4;
        char[] r6;

        r0 := @parameter0: java.security.KeyStore;

        r5 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r3);

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>();

        goto label2;

     label1:
        r6 = null;

     label2:
        virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r0, r6);

        $r4 = virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        return $r4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r2;
    }

    private static javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException
    {
        java.security.KeyStore r0;
        javax.net.ssl.TrustManagerFactory r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        javax.net.ssl.TrustManager[] $r4;

        r0 := @parameter0: java.security.KeyStore;

        if r0 == null goto label1;

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r3);

        virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r0);

        $r4 = virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        return $r4;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r2;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;

        $r0 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory$NoPreloadHolder: org.apache.http.conn.ssl.SSLSocketFactory access$100()>();

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        int i0, i1, i2, i3, i4;
        java.net.InetAddress r1, $r11;
        org.apache.http.params.HttpParams r2;
        javax.net.ssl.SSLSocket r3;
        java.lang.IllegalArgumentException $r4, $r5;
        java.net.InetSocketAddress $r6, $r7, $r9, r17;
        org.apache.http.conn.ssl.X509HostnameVerifier $r8;
        org.apache.http.conn.scheme.HostNameResolver $r10, $r16;
        java.lang.Throwable $r12;
        java.lang.Exception $r13;
        java.net.Socket r14;
        java.lang.String r15;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r14 := @parameter0: java.net.Socket;

        r15 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r2 := @parameter5: org.apache.http.params.HttpParams;

        if r15 == null goto label16;

        if r2 == null goto label15;

        if r14 == null goto label01;

        goto label02;

     label01:
        r14 = virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label02:
        r3 = (javax.net.ssl.SSLSocket) r14;

        if r1 != null goto label03;

        if i1 <= 0 goto label05;

     label03:
        i2 = i1;

        if i1 >= 0 goto label04;

        i2 = 0;

     label04:
        $r6 = new java.net.InetSocketAddress;

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i2);

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void bind(java.net.SocketAddress)>($r6);

     label05:
        i3 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r2);

        i4 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r2);

        $r16 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r16 == null goto label06;

        $r9 = new java.net.InetSocketAddress;

        $r10 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        $r11 = interfaceinvoke $r10.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>(r15);

        specialinvoke $r9.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r11, i0);

        r17 = $r9;

        goto label07;

     label06:
        $r7 = new java.net.InetSocketAddress;

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r15, i0);

        r17 = $r7;

     label07:
        virtualinvoke r3.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress,int)>(r17, i3);

        virtualinvoke r3.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(i4);

     label08:
        virtualinvoke r3.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r8 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r8.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r15, r3);

     label09:
        return r3;

     label10:
        $r12 := @caughtexception;

     label11:
        virtualinvoke r3.<javax.net.ssl.SSLSocket: void close()>();

     label12:
        goto label14;

     label13:
        $r13 := @caughtexception;

     label14:
        throw $r12;

     label15:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r5;

     label16:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r4;

        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, r5;
        org.apache.http.conn.ssl.X509HostnameVerifier $r4;
        javax.net.ssl.SSLSocket r6;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r5 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r5, r1, i0, z0);

        r6 = (javax.net.ssl.SSLSocket) $r3;

        virtualinvoke r6.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r4 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r4.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r1, r6);

        return r6;
    }

    public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.net.Socket r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        if r1 == null goto label3;

        $z0 = r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z1 != 0 goto label1;

        return 1;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r3;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;
    }

    public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.X509HostnameVerifier;

        if r1 == null goto label1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;
    }
}
