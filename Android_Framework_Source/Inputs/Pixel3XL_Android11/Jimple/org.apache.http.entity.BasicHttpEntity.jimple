public class org.apache.http.entity.BasicHttpEntity extends org.apache.http.entity.AbstractHttpEntity
{
    private java.io.InputStream content;
    private boolean contentObtained;
    private long length;

    public void <init>()
    {
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        r0.<org.apache.http.entity.BasicHttpEntity: long length> = -1L;

        return;
    }

    public void consumeContent() throws java.io.IOException
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.InputStream: void close()>();

     label1:
        return;
    }

    public java.io.InputStream getContent() throws java.lang.IllegalStateException
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream r1;
        java.lang.IllegalStateException $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if r1 == null goto label2;

        $z0 = r0.<org.apache.http.entity.BasicHttpEntity: boolean contentObtained>;

        if $z0 != 0 goto label1;

        r0.<org.apache.http.entity.BasicHttpEntity: boolean contentObtained> = 1;

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content has been consumed");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Content has not been provided");

        throw $r2;
    }

    public long getContentLength()
    {
        org.apache.http.entity.BasicHttpEntity r0;
        long $l0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $l0 = r0.<org.apache.http.entity.BasicHttpEntity: long length>;

        return $l0;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.BasicHttpEntity r0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        return 0;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.BasicHttpEntity r0;
        boolean $z0, z1;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        $z0 = r0.<org.apache.http.entity.BasicHttpEntity: boolean contentObtained>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content>;

        if $r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void setContent(java.io.InputStream)
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        r1 := @parameter0: java.io.InputStream;

        r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream content> = r1;

        r0.<org.apache.http.entity.BasicHttpEntity: boolean contentObtained> = 0;

        return;
    }

    public void setContentLength(long)
    {
        org.apache.http.entity.BasicHttpEntity r0;
        long l0;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        l0 := @parameter0: long;

        r0.<org.apache.http.entity.BasicHttpEntity: long length> = l0;

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.http.entity.BasicHttpEntity r0;
        java.io.OutputStream r1;
        java.io.InputStream r2;
        byte[] r3;
        int i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.entity.BasicHttpEntity;

        r1 := @parameter0: java.io.OutputStream;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>();

        r3 = newarray (byte)[2048];

     label1:
        i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r3);

        if i0 == -1 goto label2;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i0);

        goto label1;

     label2:
        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r4;
    }
}
