public class org.apache.http.entity.FileEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable
{
    protected final java.io.File file;

    public void <init>(java.io.File, java.lang.String)
    {
        org.apache.http.entity.FileEntity r0;
        java.io.File r1;
        java.lang.String r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.entity.FileEntity;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.http.entity.FileEntity: java.io.File file> = r1;

        virtualinvoke r0.<org.apache.http.entity.FileEntity: void setContentType(java.lang.String)>(r2);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File may not be null");

        throw $r3;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.entity.FileEntity r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.entity.FileEntity;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.FileEntity r0;
        java.io.FileInputStream $r1;
        java.io.File $r2;

        r0 := @this: org.apache.http.entity.FileEntity;

        $r1 = new java.io.FileInputStream;

        $r2 = r0.<org.apache.http.entity.FileEntity: java.io.File file>;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.FileEntity r0;
        java.io.File $r1;
        long $l0;

        r0 := @this: org.apache.http.entity.FileEntity;

        $r1 = r0.<org.apache.http.entity.FileEntity: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.FileEntity r0;

        r0 := @this: org.apache.http.entity.FileEntity;

        return 1;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.FileEntity r0;

        r0 := @this: org.apache.http.entity.FileEntity;

        return 0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.http.entity.FileEntity r0;
        byte[] r2;
        int i0;
        java.lang.IllegalArgumentException $r3;
        java.io.FileInputStream $r4;
        java.io.File $r5;
        java.lang.Throwable $r6;
        java.io.OutputStream r7;

        r0 := @this: org.apache.http.entity.FileEntity;

        r7 := @parameter0: java.io.OutputStream;

        if r7 == null goto label9;

        $r4 = new java.io.FileInputStream;

        $r5 = r0.<org.apache.http.entity.FileEntity: java.io.File file>;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label1:
        r2 = newarray (byte)[4096];

     label2:
        i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r2);

     label3:
        if i0 == -1 goto label6;

     label4:
        virtualinvoke r7.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

     label5:
        goto label2;

     label6:
        virtualinvoke r7.<java.io.OutputStream: void flush()>();

     label7:
        virtualinvoke $r4.<java.io.InputStream: void close()>();

        return;

     label8:
        $r6 := @caughtexception;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        throw $r6;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
}
