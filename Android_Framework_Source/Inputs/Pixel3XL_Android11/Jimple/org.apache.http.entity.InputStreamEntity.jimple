public class org.apache.http.entity.InputStreamEntity extends org.apache.http.entity.AbstractHttpEntity
{
    private static final int BUFFER_SIZE;
    private boolean consumed;
    private final java.io.InputStream content;
    private final long length;

    public void <init>(java.io.InputStream, long)
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.InputStream r1;
        long l0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        r1 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        r0.<org.apache.http.entity.InputStreamEntity: boolean consumed> = 0;

        if r1 == null goto label1;

        r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content> = r1;

        r0.<org.apache.http.entity.InputStreamEntity: long length> = l0;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source input stream may not be null");

        throw $r2;
    }

    public void consumeContent() throws java.io.IOException
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        r0.<org.apache.http.entity.InputStreamEntity: boolean consumed> = 1;

        $r1 = r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $r1 = r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

        return $r1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.InputStreamEntity r0;
        long $l0;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $l0 = r0.<org.apache.http.entity.InputStreamEntity: long length>;

        return $l0;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.InputStreamEntity r0;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        return 0;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.InputStreamEntity r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        $z0 = r0.<org.apache.http.entity.InputStreamEntity: boolean consumed>;

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.http.entity.InputStreamEntity r0;
        java.io.OutputStream r1;
        java.io.InputStream r2;
        byte[] r3;
        java.lang.IllegalArgumentException $r4;
        long $l0, $l3, $l5, l7;
        byte $b1, $b2;
        int $i4, i6, i8;

        r0 := @this: org.apache.http.entity.InputStreamEntity;

        r1 := @parameter0: java.io.OutputStream;

        if r1 == null goto label6;

        r2 = r0.<org.apache.http.entity.InputStreamEntity: java.io.InputStream content>;

        r3 = newarray (byte)[2048];

        $l0 = r0.<org.apache.http.entity.InputStreamEntity: long length>;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

     label1:
        i6 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r3);

        if i6 == -1 goto label5;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i6);

        goto label1;

     label2:
        l7 = r0.<org.apache.http.entity.InputStreamEntity: long length>;

     label3:
        $b2 = l7 cmp 0L;

        if $b2 <= 0 goto label5;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, l7);

        $i4 = (int) $l3;

        i8 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, $i4);

        if i8 != -1 goto label4;

        goto label5;

     label4:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i8);

        $l5 = (long) i8;

        l7 = l7 - $l5;

        goto label3;

     label5:
        r0.<org.apache.http.entity.InputStreamEntity: boolean consumed> = 1;

        return;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r4;
    }

    public static void <clinit>()
    {
        <org.apache.http.entity.InputStreamEntity: int BUFFER_SIZE> = 2048;

        return;
    }
}
