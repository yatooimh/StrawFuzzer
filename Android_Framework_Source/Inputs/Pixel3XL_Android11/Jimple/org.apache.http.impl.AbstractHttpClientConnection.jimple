public abstract class org.apache.http.impl.AbstractHttpClientConnection extends java.lang.Object implements org.apache.http.HttpClientConnection
{
    private final org.apache.http.impl.entity.EntityDeserializer entitydeserializer;
    private final org.apache.http.impl.entity.EntitySerializer entityserializer;
    private org.apache.http.io.SessionInputBuffer inbuffer;
    private org.apache.http.impl.HttpConnectionMetricsImpl metrics;
    private org.apache.http.io.SessionOutputBuffer outbuffer;
    private org.apache.http.io.HttpMessageWriter requestWriter;
    private org.apache.http.io.HttpMessageParser responseParser;

    public void <init>()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.impl.entity.EntitySerializer $r1;
        org.apache.http.impl.entity.EntityDeserializer $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer> = null;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionOutputBuffer outbuffer> = null;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser responseParser> = null;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter requestWriter> = null;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics> = null;

        $r1 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>();

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer entityserializer> = $r1;

        $r2 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>();

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer entitydeserializer> = $r2;

        return;
    }

    protected abstract void assertOpen() throws java.lang.IllegalStateException;

    protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.impl.entity.EntityDeserializer $r1;
        org.apache.http.impl.entity.LaxContentLengthStrategy $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $r1 = new org.apache.http.impl.entity.EntityDeserializer;

        $r2 = new org.apache.http.impl.entity.LaxContentLengthStrategy;

        specialinvoke $r2.<org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>();

        specialinvoke $r1.<org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>($r2);

        return $r1;
    }

    protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.impl.entity.EntitySerializer $r1;
        org.apache.http.impl.entity.StrictContentLengthStrategy $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $r1 = new org.apache.http.impl.entity.EntitySerializer;

        $r2 = new org.apache.http.impl.entity.StrictContentLengthStrategy;

        specialinvoke $r2.<org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>();

        specialinvoke $r1.<org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>($r2);

        return $r1;
    }

    protected org.apache.http.HttpResponseFactory createHttpResponseFactory()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.impl.DefaultHttpResponseFactory $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $r1 = new org.apache.http.impl.DefaultHttpResponseFactory;

        specialinvoke $r1.<org.apache.http.impl.DefaultHttpResponseFactory: void <init>()>();

        return $r1;
    }

    protected org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.io.SessionOutputBuffer r1;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.io.HttpRequestWriter $r3;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        $r3 = new org.apache.http.impl.io.HttpRequestWriter;

        specialinvoke $r3.<org.apache.http.impl.io.HttpRequestWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>(r1, null, r2);

        return $r3;
    }

    protected org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.HttpResponseFactory r2;
        org.apache.http.params.HttpParams r3;
        org.apache.http.impl.io.HttpResponseParser $r4;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.HttpResponseFactory;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        $r4 = new org.apache.http.impl.io.HttpResponseParser;

        specialinvoke $r4.<org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>(r1, null, r2, r3);

        return $r4;
    }

    protected void doFlush() throws java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.io.SessionOutputBuffer $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $r1 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionOutputBuffer outbuffer>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void doFlush()>();

        return;
    }

    public org.apache.http.HttpConnectionMetrics getMetrics()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.impl.HttpConnectionMetricsImpl $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $r1 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        return $r1;
    }

    protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.io.SessionOutputBuffer r2;
        org.apache.http.params.HttpParams r3;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.http.HttpResponseFactory $r6;
        org.apache.http.io.HttpMessageParser $r7;
        org.apache.http.io.HttpMessageWriter $r8;
        org.apache.http.impl.HttpConnectionMetricsImpl $r9;
        org.apache.http.io.HttpTransportMetrics $r10, $r11;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.io.SessionOutputBuffer;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        if r1 == null goto label2;

        if r2 == null goto label1;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer> = r1;

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionOutputBuffer outbuffer> = r2;

        $r6 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()>();

        $r7 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>(r1, $r6, r3);

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser responseParser> = $r7;

        $r8 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>(r2, r3);

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter requestWriter> = $r8;

        $r9 = new org.apache.http.impl.HttpConnectionMetricsImpl;

        $r10 = interfaceinvoke r1.<org.apache.http.io.SessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>();

        $r11 = interfaceinvoke r2.<org.apache.http.io.SessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>();

        specialinvoke $r9.<org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>($r10, $r11);

        r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics> = $r9;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output session buffer may not be null");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input session buffer may not be null");

        throw $r4;
    }

    public boolean isResponseAvailable(int) throws java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        int i0;
        org.apache.http.io.SessionInputBuffer $r1;
        boolean $z0;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        $r1 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        $z0 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>(i0);

        return $z0;
    }

    public boolean isStale()
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        boolean $z0, $z1, $z3;
        org.apache.http.io.SessionInputBuffer $r2, $r3, $r4;
        org.apache.http.impl.io.SocketInputBuffer $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        $z0 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: boolean isOpen()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        $z1 = $r2 instanceof org.apache.http.impl.io.SocketInputBuffer;

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        $r5 = (org.apache.http.impl.io.SocketInputBuffer) $r4;

        $z3 = virtualinvoke $r5.<org.apache.http.impl.io.SocketInputBuffer: boolean isStale()>();

        return $z3;

     label2:
        $r3 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        interfaceinvoke $r3.<org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>(1);

     label3:
        return 0;

     label4:
        $r6 := @caughtexception;

        return 1;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public void receiveResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.HttpResponse r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.io.SessionInputBuffer $r3;
        org.apache.http.impl.entity.EntityDeserializer $r4;
        org.apache.http.HttpEntity $r5;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.HttpResponse;

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        $r4 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer entitydeserializer>;

        $r3 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>($r3, r1);

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r5);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r2;
    }

    public org.apache.http.HttpResponse receiveResponseHeader() throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.io.HttpMessageParser $r2;
        org.apache.http.HttpMessage $r3;
        org.apache.http.StatusLine $r4;
        int $i0;
        org.apache.http.impl.HttpConnectionMetricsImpl $r5;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        $r2 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser responseParser>;

        $r3 = interfaceinvoke $r2.<org.apache.http.io.HttpMessageParser: org.apache.http.HttpMessage parse()>();

        r1 = (org.apache.http.HttpResponse) $r3;

        $r4 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r4.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 < 200 goto label1;

        $r5 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        virtualinvoke $r5.<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>();

     label1:
        return r1;
    }

    public void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.HttpEntityEnclosingRequest r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.HttpEntity $r3, $r6;
        org.apache.http.impl.entity.EntitySerializer $r4;
        org.apache.http.io.SessionOutputBuffer $r5;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.HttpEntityEnclosingRequest;

        if r1 == null goto label2;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        $r3 = interfaceinvoke r1.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer entityserializer>;

        $r5 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.SessionOutputBuffer outbuffer>;

        $r6 = interfaceinvoke r1.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        virtualinvoke $r4.<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>($r5, r1, $r6);

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r2;
    }

    public void sendRequestHeader(org.apache.http.HttpRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpClientConnection r0;
        org.apache.http.HttpRequest r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.io.HttpMessageWriter $r3;
        org.apache.http.impl.HttpConnectionMetricsImpl $r4;

        r0 := @this: org.apache.http.impl.AbstractHttpClientConnection;

        r1 := @parameter0: org.apache.http.HttpRequest;

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>();

        $r3 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter requestWriter>;

        interfaceinvoke $r3.<org.apache.http.io.HttpMessageWriter: void write(org.apache.http.HttpMessage)>(r1);

        $r4 = r0.<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        virtualinvoke $r4.<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>();

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r2;
    }
}
