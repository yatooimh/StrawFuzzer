public abstract class org.apache.http.impl.AbstractHttpServerConnection extends java.lang.Object implements org.apache.http.HttpServerConnection
{
    private final org.apache.http.impl.entity.EntityDeserializer entitydeserializer;
    private final org.apache.http.impl.entity.EntitySerializer entityserializer;
    private org.apache.http.io.SessionInputBuffer inbuffer;
    private org.apache.http.impl.HttpConnectionMetricsImpl metrics;
    private org.apache.http.io.SessionOutputBuffer outbuffer;
    private org.apache.http.io.HttpMessageParser requestParser;
    private org.apache.http.io.HttpMessageWriter responseWriter;

    public void <init>()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.impl.entity.EntitySerializer $r1;
        org.apache.http.impl.entity.EntityDeserializer $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionInputBuffer inbuffer> = null;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionOutputBuffer outbuffer> = null;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser requestParser> = null;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter responseWriter> = null;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics> = null;

        $r1 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>();

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer entityserializer> = $r1;

        $r2 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>();

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer entitydeserializer> = $r2;

        return;
    }

    protected abstract void assertOpen() throws java.lang.IllegalStateException;

    protected org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.impl.entity.EntityDeserializer $r1;
        org.apache.http.impl.entity.LaxContentLengthStrategy $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        $r1 = new org.apache.http.impl.entity.EntityDeserializer;

        $r2 = new org.apache.http.impl.entity.LaxContentLengthStrategy;

        specialinvoke $r2.<org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>();

        specialinvoke $r1.<org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>($r2);

        return $r1;
    }

    protected org.apache.http.impl.entity.EntitySerializer createEntitySerializer()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.impl.entity.EntitySerializer $r1;
        org.apache.http.impl.entity.StrictContentLengthStrategy $r2;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        $r1 = new org.apache.http.impl.entity.EntitySerializer;

        $r2 = new org.apache.http.impl.entity.StrictContentLengthStrategy;

        specialinvoke $r2.<org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>();

        specialinvoke $r1.<org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>($r2);

        return $r1;
    }

    protected org.apache.http.HttpRequestFactory createHttpRequestFactory()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.impl.DefaultHttpRequestFactory $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        $r1 = new org.apache.http.impl.DefaultHttpRequestFactory;

        specialinvoke $r1.<org.apache.http.impl.DefaultHttpRequestFactory: void <init>()>();

        return $r1;
    }

    protected org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.HttpRequestFactory r2;
        org.apache.http.params.HttpParams r3;
        org.apache.http.impl.io.HttpRequestParser $r4;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.HttpRequestFactory;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        $r4 = new org.apache.http.impl.io.HttpRequestParser;

        specialinvoke $r4.<org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>(r1, null, r2, r3);

        return $r4;
    }

    protected org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.io.SessionOutputBuffer r1;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.io.HttpResponseWriter $r3;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        $r3 = new org.apache.http.impl.io.HttpResponseWriter;

        specialinvoke $r3.<org.apache.http.impl.io.HttpResponseWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>(r1, null, r2);

        return $r3;
    }

    protected void doFlush() throws java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.io.SessionOutputBuffer $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionOutputBuffer outbuffer>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>();

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void doFlush()>();

        return;
    }

    public org.apache.http.HttpConnectionMetrics getMetrics()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.impl.HttpConnectionMetricsImpl $r1;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        return $r1;
    }

    protected void init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.io.SessionOutputBuffer r2;
        org.apache.http.params.HttpParams r3;
        java.lang.IllegalArgumentException $r4, $r5;
        org.apache.http.HttpRequestFactory $r6;
        org.apache.http.io.HttpMessageParser $r7;
        org.apache.http.io.HttpMessageWriter $r8;
        org.apache.http.impl.HttpConnectionMetricsImpl $r9;
        org.apache.http.io.HttpTransportMetrics $r10, $r11;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.io.SessionOutputBuffer;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        if r1 == null goto label2;

        if r2 == null goto label1;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionInputBuffer inbuffer> = r1;

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionOutputBuffer outbuffer> = r2;

        $r6 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()>();

        $r7 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>(r1, $r6, r3);

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser requestParser> = $r7;

        $r8 = virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>(r2, r3);

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter responseWriter> = $r8;

        $r9 = new org.apache.http.impl.HttpConnectionMetricsImpl;

        $r10 = interfaceinvoke r1.<org.apache.http.io.SessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>();

        $r11 = interfaceinvoke r2.<org.apache.http.io.SessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>();

        specialinvoke $r9.<org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>($r10, $r11);

        r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics> = $r9;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output session buffer may not be null");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input session buffer may not be null");

        throw $r4;
    }

    public boolean isStale()
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.io.SessionInputBuffer $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>();

     label1:
        $r2 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>(1);

     label2:
        return 0;

     label3:
        $r3 := @caughtexception;

        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.HttpEntityEnclosingRequest r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.io.SessionInputBuffer $r3;
        org.apache.http.impl.entity.EntityDeserializer $r4;
        org.apache.http.HttpEntity $r5;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.HttpEntityEnclosingRequest;

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>();

        $r4 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer entitydeserializer>;

        $r3 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionInputBuffer inbuffer>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>($r3, r1);

        interfaceinvoke r1.<org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>($r5);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r2;
    }

    public org.apache.http.HttpRequest receiveRequestHeader() throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.io.HttpMessageParser $r2;
        org.apache.http.HttpMessage $r3;
        org.apache.http.impl.HttpConnectionMetricsImpl $r4;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>();

        $r2 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser requestParser>;

        $r3 = interfaceinvoke $r2.<org.apache.http.io.HttpMessageParser: org.apache.http.HttpMessage parse()>();

        r1 = (org.apache.http.HttpRequest) $r3;

        $r4 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        virtualinvoke $r4.<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>();

        return r1;
    }

    public void sendResponseEntity(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.HttpEntity $r2, $r5;
        org.apache.http.impl.entity.EntitySerializer $r3;
        org.apache.http.io.SessionOutputBuffer $r4;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.HttpResponse;

        $r2 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer entityserializer>;

        $r4 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.SessionOutputBuffer outbuffer>;

        $r5 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        virtualinvoke $r3.<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>($r4, r1, $r5);

        return;
    }

    public void sendResponseHeader(org.apache.http.HttpResponse) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.AbstractHttpServerConnection r0;
        org.apache.http.HttpResponse r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.io.HttpMessageWriter $r3;
        org.apache.http.StatusLine $r4;
        int $i0;
        org.apache.http.impl.HttpConnectionMetricsImpl $r5;

        r0 := @this: org.apache.http.impl.AbstractHttpServerConnection;

        r1 := @parameter0: org.apache.http.HttpResponse;

        if r1 == null goto label2;

        virtualinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>();

        $r3 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter responseWriter>;

        interfaceinvoke $r3.<org.apache.http.io.HttpMessageWriter: void write(org.apache.http.HttpMessage)>(r1);

        $r4 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r4.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 < 200 goto label1;

        $r5 = r0.<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl metrics>;

        virtualinvoke $r5.<org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>();

     label1:
        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r2;
    }
}
