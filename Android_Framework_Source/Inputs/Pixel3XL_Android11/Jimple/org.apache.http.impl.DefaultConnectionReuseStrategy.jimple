public class org.apache.http.impl.DefaultConnectionReuseStrategy extends java.lang.Object implements org.apache.http.ConnectionReuseStrategy
{

    public void <init>()
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;
        org.apache.http.HeaderIterator r1;
        org.apache.http.message.BasicTokenIterator $r2;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r1 := @parameter0: org.apache.http.HeaderIterator;

        $r2 = new org.apache.http.message.BasicTokenIterator;

        specialinvoke $r2.<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>(r1);

        return $r2;
    }

    public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;
        org.apache.http.ProtocolVersion r1;
        org.apache.http.HeaderIterator r2, r16;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        java.lang.IllegalArgumentException $r3, $r4;
        java.lang.Object $r5;
        org.apache.http.StatusLine $r6;
        org.apache.http.HttpVersion $r7, $r10;
        java.lang.String $r8, $r9, r18;
        long $l0;
        byte $b1;
        org.apache.http.ParseException $r11;
        org.apache.http.HttpResponse r12;
        org.apache.http.protocol.HttpContext r13;
        org.apache.http.HttpConnection r14;
        org.apache.http.HttpEntity r15;
        org.apache.http.TokenIterator r17;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r12 := @parameter0: org.apache.http.HttpResponse;

        r13 := @parameter1: org.apache.http.protocol.HttpContext;

        if r12 == null goto label17;

        if r13 == null goto label16;

        $r5 = interfaceinvoke r13.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.connection");

        r14 = (org.apache.http.HttpConnection) $r5;

        if r14 == null goto label01;

        $z8 = interfaceinvoke r14.<org.apache.http.HttpConnection: boolean isOpen()>();

        if $z8 != 0 goto label01;

        return 0;

     label01:
        r15 = interfaceinvoke r12.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r6 = interfaceinvoke r12.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        r1 = interfaceinvoke $r6.<org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        if r15 == null goto label03;

        $l0 = interfaceinvoke r15.<org.apache.http.HttpEntity: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label03;

        $z6 = interfaceinvoke r15.<org.apache.http.HttpEntity: boolean isChunked()>();

        if $z6 == 0 goto label02;

        $r10 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z7 = virtualinvoke r1.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r10);

        if $z7 == 0 goto label03;

     label02:
        return 0;

     label03:
        r2 = interfaceinvoke r12.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Connection");

        r16 = r2;

        $z9 = interfaceinvoke r2.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z9 != 0 goto label04;

        r16 = interfaceinvoke r12.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Proxy-Connection");

     label04:
        $z1 = interfaceinvoke r16.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

     label05:
        r17 = virtualinvoke r0.<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>(r16);

     label06:
        z10 = 0;

     label07:
        $z4 = interfaceinvoke r17.<org.apache.http.TokenIterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        r18 = interfaceinvoke r17.<org.apache.http.TokenIterator: java.lang.String nextToken()>();

        $r8 = "Close";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);

        if $z5 == 0 goto label09;

     label08:
        return 0;

     label09:
        $r9 = "Keep-Alive";

        z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r18);

     label10:
        if z0 == 0 goto label11;

        z10 = 1;

     label11:
        goto label07;

     label12:
        if z10 == 0 goto label13;

        return 1;

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

        return 0;

     label15:
        $r7 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z2 = virtualinvoke r1.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r7);

        $z3 = $z2 ^ 1;

        return $z3;

     label16:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null.");

        throw $r4;

     label17:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null.");

        throw $r3;

        catch org.apache.http.ParseException from label05 to label06 with label14;
        catch org.apache.http.ParseException from label07 to label08 with label14;
        catch org.apache.http.ParseException from label09 to label10 with label14;
    }
}
