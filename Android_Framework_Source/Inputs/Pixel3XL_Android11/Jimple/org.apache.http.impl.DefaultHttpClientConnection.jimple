public class org.apache.http.impl.DefaultHttpClientConnection extends org.apache.http.impl.SocketHttpClientConnection
{

    public void <init>()
    {
        org.apache.http.impl.DefaultHttpClientConnection r0;

        r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void <init>()>();

        return;
    }

    public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.DefaultHttpClientConnection r0;
        java.net.Socket r1;
        org.apache.http.params.HttpParams r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0, z1;

        r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        if r1 == null goto label5;

        if r2 == null goto label4;

        virtualinvoke r0.<org.apache.http.impl.DefaultHttpClientConnection: void assertNotOpen()>();

        $z0 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>(r2);

        virtualinvoke r1.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r2);

        virtualinvoke r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>(r2);

        if i0 < 0 goto label3;

        if i0 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        virtualinvoke r1.<java.net.Socket: void setSoLinger(boolean,int)>(z1, i0);

     label3:
        specialinvoke r0.<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>(r1, r2);

        return;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r4;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r3;
    }

    public java.lang.String toString()
    {
        org.apache.http.impl.DefaultHttpClientConnection r0;
        java.lang.StringBuffer $r2;
        boolean $z0;
        java.lang.String $r6;
        int $i0;

        r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $z0 = virtualinvoke r0.<org.apache.http.impl.DefaultHttpClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.http.impl.DefaultHttpClientConnection: int getRemotePort()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        goto label2;

     label1:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("closed");

     label2:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
