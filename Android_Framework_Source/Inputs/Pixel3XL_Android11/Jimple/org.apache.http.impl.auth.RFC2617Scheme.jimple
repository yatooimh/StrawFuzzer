public abstract class org.apache.http.impl.auth.RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase
{
    private java.util.Map params;

    public void <init>()
    {
        org.apache.http.impl.auth.RFC2617Scheme r0;

        r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        specialinvoke r0.<org.apache.http.impl.auth.AuthSchemeBase: void <init>()>();

        return;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        org.apache.http.impl.auth.RFC2617Scheme r0;
        java.lang.String r1, $r5, $r7;
        java.util.Map r2;
        java.lang.IllegalArgumentException $r3;
        java.util.Locale $r4;
        java.lang.Object $r6;

        r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label2;

        r2 = r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.String) $r6;

        return $r7;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r3;
    }

    protected java.util.Map getParameters()
    {
        org.apache.http.impl.auth.RFC2617Scheme r0;
        java.util.Map $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r1 = r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params> = $r3;

     label1:
        $r2 = r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        return $r2;
    }

    public java.lang.String getRealm()
    {
        org.apache.http.impl.auth.RFC2617Scheme r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r1 = virtualinvoke r0.<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>("realm");

        return $r1;
    }

    protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.RFC2617Scheme r0;
        org.apache.http.HeaderElement[] r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.BasicHeaderValueParser $r3;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        org.apache.http.auth.MalformedChallengeException $r4;
        java.util.HashMap $r5;
        java.util.Map $r6;
        java.lang.String $r7, $r8;
        org.apache.http.util.CharArrayBuffer r10;
        org.apache.http.HeaderElement r11;

        r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        r10 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke r10.<org.apache.http.util.CharArrayBuffer: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(i3, $i0);

        r1 = interfaceinvoke $r3.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r10, $r2);

        $i1 = lengthof r1;

        if $i1 == 0 goto label3;

        $r5 = new java.util.HashMap;

        $i2 = lengthof r1;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>($i2);

        r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params> = $r5;

        i5 = lengthof r1;

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        r11 = r1[i6];

        $r6 = r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        $r7 = interfaceinvoke r11.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $r8 = interfaceinvoke r11.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r4 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r4.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Authentication challenge is empty");

        throw $r4;
    }
}
