public class org.apache.http.impl.client.BasicCredentialsProvider extends java.lang.Object implements org.apache.http.client.CredentialsProvider
{
    private final java.util.HashMap credMap;

    public void <init>()
    {
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap> = $r1;

        return;
    }

    private static org.apache.http.auth.Credentials matchCredentials(java.util.HashMap, org.apache.http.auth.AuthScope)
    {
        java.util.HashMap r0;
        org.apache.http.auth.AuthScope r1, r9, r10;
        org.apache.http.auth.Credentials r2, r8;
        java.util.Iterator r3;
        int i0, i1, i2;
        java.lang.Object $r4, $r6, $r7;
        java.util.Set $r5;
        boolean $z0;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: org.apache.http.auth.AuthScope;

        $r4 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.http.auth.Credentials) $r4;

        r8 = r2;

        if r2 != null goto label4;

        i1 = -1;

        r9 = null;

        $r5 = virtualinvoke r0.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.http.auth.AuthScope) $r7;

        i0 = virtualinvoke r1.<org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)>(r10);

        i2 = i1;

        if i0 <= i1 goto label2;

        i2 = i0;

        r9 = r10;

     label2:
        i1 = i2;

        goto label1;

     label3:
        r8 = r2;

        if r9 == null goto label4;

        $r6 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r8 = (org.apache.http.auth.Credentials) $r6;

     label4:
        return r8;
    }

    public void clear()
    {
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        entermonitor r0;

     label1:
        $r2 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)
    {
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;
        org.apache.http.auth.AuthScope r3;
        org.apache.http.auth.Credentials r4;
        java.lang.IllegalArgumentException r6;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        r3 := @parameter0: org.apache.http.auth.AuthScope;

        entermonitor r0;

        if r3 == null goto label4;

     label1:
        $r1 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        r4 = staticinvoke <org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials matchCredentials(java.util.HashMap,org.apache.http.auth.AuthScope)>($r1, r3);

     label2:
        exitmonitor r0;

        return r4;

     label3:
        $r2 := @caughtexception;

        goto label5;

     label4:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw r6;

     label5:
        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials)
    {
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        org.apache.http.auth.Credentials r1;
        java.util.HashMap $r2;
        java.lang.Throwable $r4;
        org.apache.http.auth.AuthScope r5;
        java.lang.IllegalArgumentException r7;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        r5 := @parameter0: org.apache.http.auth.AuthScope;

        r1 := @parameter1: org.apache.http.auth.Credentials;

        entermonitor r0;

        if r5 == null goto label4;

     label1:
        $r2 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        goto label5;

     label4:
        r7 = new java.lang.IllegalArgumentException;

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw r7;

     label5:
        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String toString()
    {
        org.apache.http.impl.client.BasicCredentialsProvider r0;
        java.util.HashMap $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r1 = r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.String toString()>();

        return $r2;
    }
}
