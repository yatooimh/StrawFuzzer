public class org.apache.http.impl.client.DefaultHttpRequestRetryHandler extends java.lang.Object implements org.apache.http.client.HttpRequestRetryHandler
{
    private final boolean requestSentRetryEnabled;
    private final int retryCount;

    public void <init>()
    {
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler r0;

        r0 := @this: org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        specialinvoke r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: void <init>(int,boolean)>(3, 0);

        return;
    }

    public void <init>(int, boolean)
    {
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler r0;
        int i0;
        boolean z0;

        r0 := @this: org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int retryCount> = i0;

        r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: boolean requestSentRetryEnabled> = z0;

        return;
    }

    public int getRetryCount()
    {
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler r0;
        int $i0;

        r0 := @this: org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        $i0 = r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int retryCount>;

        return $i0;
    }

    public boolean isRequestSentRetryEnabled()
    {
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        $z0 = r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: boolean requestSentRetryEnabled>;

        return $z0;
    }

    public boolean retryRequest(java.io.IOException, int, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultHttpRequestRetryHandler r0;
        org.apache.http.protocol.HttpContext r1;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.Object $r4;
        java.io.IOException r5;
        java.lang.Boolean r6;

        r0 := @this: org.apache.http.impl.client.DefaultHttpRequestRetryHandler;

        r5 := @parameter0: java.io.IOException;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.http.protocol.HttpContext;

        if r5 == null goto label11;

        if r1 == null goto label10;

        $i0 = r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: int retryCount>;

        if i1 <= $i0 goto label01;

        return 0;

     label01:
        $z0 = r5 instanceof org.apache.http.NoHttpResponseException;

        if $z0 == 0 goto label02;

        return 1;

     label02:
        $z1 = r5 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label03;

        return 0;

     label03:
        $z2 = r5 instanceof java.net.UnknownHostException;

        if $z2 == 0 goto label04;

        return 0;

     label04:
        $z3 = r5 instanceof javax.net.ssl.SSLHandshakeException;

        if $z3 == 0 goto label05;

        return 0;

     label05:
        $r4 = interfaceinvoke r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.request_sent");

        r6 = (java.lang.Boolean) $r4;

        if r6 == null goto label06;

        $z5 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label06;

        z6 = 1;

        goto label07;

     label06:
        z6 = 0;

     label07:
        if z6 == 0 goto label09;

        $z4 = r0.<org.apache.http.impl.client.DefaultHttpRequestRetryHandler: boolean requestSentRetryEnabled>;

        if $z4 == 0 goto label08;

        goto label09;

     label08:
        return 0;

     label09:
        return 1;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r3;

     label11:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exception parameter may not be null");

        throw $r2;
    }
}
