public class org.apache.http.impl.conn.ProxySelectorRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.HttpRoutePlanner
{
    protected java.net.ProxySelector proxySelector;
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        java.net.ProxySelector r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        r2 := @parameter1: java.net.ProxySelector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r1;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r2;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SchemeRegistry must not be null.");

        throw $r3;
    }

    protected java.net.Proxy chooseProxy(java.util.List, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.protocol.HttpContext r1;
        int i0, $i1, $i2, i3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.Object $r3;
        int[] $r4;
        java.net.Proxy$Type $r5;
        java.util.List r6;
        org.apache.http.HttpHost r7;
        org.apache.http.HttpRequest r8;
        java.net.Proxy r9, r10, r11;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r6 := @parameter0: java.util.List;

        r7 := @parameter1: org.apache.http.HttpHost;

        r8 := @parameter2: org.apache.http.HttpRequest;

        r1 := @parameter3: org.apache.http.protocol.HttpContext;

        if r6 == null goto label6;

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        r9 = null;

        i3 = 0;

     label1:
        if r9 != null goto label4;

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r3 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i3);

        r10 = (java.net.Proxy) $r3;

        $r4 = <org.apache.http.impl.conn.ProxySelectorRoutePlanner$1: int[] $SwitchMap$java$net$Proxy$Type>;

        $r5 = virtualinvoke r10.<java.net.Proxy: java.net.Proxy$Type type()>();

        $i2 = virtualinvoke $r5.<java.net.Proxy$Type: int ordinal()>();

        i0 = $r4[$i2];

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        goto label3;

     label2:
        r9 = r10;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        r11 = r9;

        if r9 != null goto label5;

        r11 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

     label5:
        return r11;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy list must not be empty.");

        throw $r2;
    }

    protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.URI $r1;
        java.lang.String $r2, $r12, $r15, $r21;
        java.util.List $r3;
        java.net.Proxy$Type $r4, $r5;
        java.net.SocketAddress $r6, $r9, $r13;
        boolean $z0;
        java.lang.StringBuilder $r7, $r17;
        org.apache.http.HttpException $r11, $r20;
        org.apache.http.HttpHost $r14, r22, r29;
        int $i0;
        java.lang.Throwable $r16;
        org.apache.http.HttpRequest r23;
        org.apache.http.protocol.HttpContext r24;
        java.net.ProxySelector r25, r26;
        java.net.Proxy r28;
        java.net.InetSocketAddress r30;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r22 := @parameter0: org.apache.http.HttpHost;

        r23 := @parameter1: org.apache.http.HttpRequest;

        r24 := @parameter2: org.apache.http.protocol.HttpContext;

        r25 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        r26 = r25;

        if r25 != null goto label1;

        r26 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

     label1:
        if r26 != null goto label2;

        return null;

     label2:
        $r1 = new java.net.URI;

        $r2 = virtualinvoke r22.<org.apache.http.HttpHost: java.lang.String toURI()>();

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>($r2);

     label3:
        $r3 = virtualinvoke r26.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r1);

        r28 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r3, r22, r23, r24);

        r29 = null;

        $r4 = virtualinvoke r28.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r5 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r4 != $r5 goto label5;

        $r6 = virtualinvoke r28.<java.net.Proxy: java.net.SocketAddress address()>();

        $z0 = $r6 instanceof java.net.InetSocketAddress;

        if $z0 == 0 goto label4;

        $r13 = virtualinvoke r28.<java.net.Proxy: java.net.SocketAddress address()>();

        r30 = (java.net.InetSocketAddress) $r13;

        $r14 = new org.apache.http.HttpHost;

        $r15 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>(r30);

        $i0 = virtualinvoke r30.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke $r14.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>($r15, $i0);

        r29 = $r14;

        goto label5;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to handle non-Inet proxy address: ");

        $r9 = virtualinvoke r28.<java.net.Proxy: java.net.SocketAddress address()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = new org.apache.http.HttpException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.HttpException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label5:
        return r29;

     label6:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert host to URI: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r20 = new org.apache.http.HttpException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r16);

        throw $r20;

        catch java.net.URISyntaxException from label2 to label3 with label6;
    }

    public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.protocol.HttpContext r1;
        java.net.InetAddress r2;
        boolean z0, $z1;
        java.lang.IllegalStateException $r3, $r5;
        org.apache.http.params.HttpParams $r4, $r6, $r7;
        java.lang.Object $r8;
        org.apache.http.HttpHost $r9, r12, r15, r16;
        org.apache.http.conn.routing.HttpRoute $r10, $r11, r14, r20;
        org.apache.http.HttpRequest r13;
        org.apache.http.conn.scheme.SchemeRegistry $r17;
        java.lang.String $r18;
        org.apache.http.conn.scheme.Scheme $r19;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r12 := @parameter0: org.apache.http.HttpHost;

        r13 := @parameter1: org.apache.http.HttpRequest;

        r1 := @parameter2: org.apache.http.protocol.HttpContext;

        if r13 == null goto label7;

        $r4 = interfaceinvoke r13.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        r14 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>($r4);

        if r14 == null goto label1;

        return r14;

     label1:
        if r12 == null goto label6;

        $r6 = interfaceinvoke r13.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        r2 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>($r6);

        $r7 = interfaceinvoke r13.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r8 = interfaceinvoke $r7.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.route.default-proxy");

        r15 = (org.apache.http.HttpHost) $r8;

        if r15 != null goto label2;

        r16 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r12, r13, r1);

        goto label3;

     label2:
        r16 = r15;

        $r9 = <org.apache.http.conn.params.ConnRouteParams: org.apache.http.HttpHost NO_HOST>;

        $z1 = virtualinvoke $r9.<org.apache.http.HttpHost: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label3;

        r16 = null;

     label3:
        $r17 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r18 = virtualinvoke r12.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r19 = virtualinvoke $r17.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r18);

        z0 = virtualinvoke $r19.<org.apache.http.conn.scheme.Scheme: boolean isLayered()>();

        if r16 != null goto label4;

        $r11 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r11.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>(r12, r2, z0);

        r20 = $r11;

        goto label5;

     label4:
        $r10 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r10.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>(r12, r2, r16, z0);

        r20 = $r10;

     label5:
        return r20;

     label6:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r5;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r3;
    }

    protected java.lang.String getHost(java.net.InetSocketAddress)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        boolean $z0;
        java.net.InetAddress $r1;
        java.net.InetSocketAddress r2;
        java.lang.String r3;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r2 := @parameter0: java.net.InetSocketAddress;

        $z0 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r3 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label2:
        return r3;
    }

    public java.net.ProxySelector getProxySelector()
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.ProxySelector $r1;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        return $r1;
    }

    public void setProxySelector(java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.ProxySelector r1;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: java.net.ProxySelector;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r1;

        return;
    }
}
