public class org.apache.http.impl.conn.SingleClientConnManager extends java.lang.Object implements org.apache.http.conn.ClientConnectionManager
{
    public static final java.lang.String MISUSE_MESSAGE;
    protected boolean alwaysShutDown;
    protected org.apache.http.conn.ClientConnectionOperator connOperator;
    protected long connectionExpiresTime;
    protected volatile boolean isShutDown;
    protected long lastReleaseTime;
    private final org.apache.commons.logging.Log log;
    protected org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn;
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    protected org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry;

    public void <init>(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.params.HttpParams r1;
        org.apache.http.conn.scheme.SchemeRegistry r2;
        java.lang.Class $r3;
        org.apache.commons.logging.Log $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.conn.ClientConnectionOperator $r6;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r7;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r2 := @parameter1: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log> = $r4;

        if r2 == null goto label1;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r2;

        $r6 = virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>(r2);

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator connOperator> = $r6;

        $r7 = new org.apache.http.impl.conn.SingleClientConnManager$PoolEntry;

        specialinvoke $r7.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void <init>(org.apache.http.impl.conn.SingleClientConnManager)>(r0);

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry> = $r7;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn> = null;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime> = -1L;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: boolean alwaysShutDown> = 0;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: boolean isShutDown> = 0;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry must not be null.");

        throw $r5;
    }

    protected final void assertStillUp() throws java.lang.IllegalStateException
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        $z0 = r0.<org.apache.http.impl.conn.SingleClientConnManager: boolean isShutDown>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Manager is shut down.");

        throw $r1;
    }

    public void closeExpiredConnections()
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        long $l0, $l1;
        byte $b2;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.apache.http.impl.conn.SingleClientConnManager: long connectionExpiresTime>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>(0L, $r1);

     label1:
        return;
    }

    public void closeIdleConnections(long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        long l0, $l1, $l2, l4, l5;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter $r2;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r3, $r5;
        org.apache.http.conn.OperatedClientConnection $r4;
        boolean $z0;
        byte $b3;
        java.lang.Throwable $r6;
        org.apache.commons.logging.Log $r7;
        java.util.concurrent.TimeUnit r8;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        l4 := @parameter0: long;

        r8 := @parameter1: java.util.concurrent.TimeUnit;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void assertStillUp()>();

        if r8 == null goto label5;

        $r2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn>;

        if $r2 != null goto label4;

        $r3 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        $r4 = $r3.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $z0 = interfaceinvoke $r4.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label4;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = virtualinvoke r8.<java.util.concurrent.TimeUnit: long toMillis(long)>(l4);

        $l2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime>;

        $l1 = l0 - l5;

        $b3 = $l2 cmp $l1;

        if $b3 > 0 goto label4;

     label1:
        $r5 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        virtualinvoke $r5.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void close()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Problem closing idle connection.", $r6);

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time unit must not be null.");

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r2;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r2 = new org.apache.http.impl.conn.DefaultClientConnectionOperator;

        specialinvoke $r2.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>(r1);

        return $r2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void shutdown()>();

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.commons.logging.Log r1, $r3, $r20, $r22;
        java.lang.IllegalArgumentException $r2;
        boolean $z1, $z2, $z3, z4, z5, z6;
        org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter $r4, $r9;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r5, $r7, $r10, $r11, $r12, $r13;
        org.apache.http.conn.OperatedClientConnection $r6, $r8;
        org.apache.http.conn.routing.HttpRoute $r14, r23;
        java.lang.StringBuilder $r15;
        java.lang.String $r18;
        java.lang.Throwable $r19, $r21;
        java.lang.Object r24;
        org.apache.http.conn.routing.RouteTracker r26;
        java.net.Socket r28;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r23 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r24 := @parameter1: java.lang.Object;

        if r23 == null goto label18;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void assertStillUp()>();

        $r3 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label01;

        r1 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Get connection for route ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label01:
        $r4 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn>;

        if $r4 == null goto label02;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void revokeConnection()>();

     label02:
        z4 = 0;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()>();

        $r5 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        $r6 = $r5.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $z2 = interfaceinvoke $r6.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z2 == 0 goto label06;

        $r13 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        r26 = $r13.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if r26 == null goto label04;

        $r14 = virtualinvoke r26.<org.apache.http.conn.routing.RouteTracker: org.apache.http.conn.routing.HttpRoute toRoute()>();

        $z3 = virtualinvoke $r14.<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>(r23);

        if $z3 != 0 goto label03;

        goto label04;

     label03:
        z5 = 0;

        goto label05;

     label04:
        z5 = 1;

     label05:
        z4 = z5;

        z6 = 0;

        goto label07;

     label06:
        z6 = 1;

     label07:
        if z4 == 0 goto label11;

        z6 = 1;

     label08:
        $r12 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        virtualinvoke $r12.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void shutdown()>();

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

        $r22 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Problem shutting down connection.", $r21);

     label11:
        if z6 == 0 goto label12;

        $r11 = new org.apache.http.impl.conn.SingleClientConnManager$PoolEntry;

        specialinvoke $r11.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void <init>(org.apache.http.impl.conn.SingleClientConnManager)>(r0);

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry> = $r11;

     label12:
        $r7 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        $r8 = $r7.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        r28 = interfaceinvoke $r8.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

     label13:
        if r28 == null goto label15;

     label14:
        staticinvoke <android.net.TrafficStats: void tagSocket(java.net.Socket)>(r28);

     label15:
        goto label17;

     label16:
        $r19 := @caughtexception;

        $r20 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Problem tagging socket.", $r19);

     label17:
        $r9 = new org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter;

        $r10 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        specialinvoke $r9.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void <init>(org.apache.http.impl.conn.SingleClientConnManager,org.apache.http.impl.conn.SingleClientConnManager$PoolEntry,org.apache.http.conn.routing.HttpRoute)>(r0, $r10, r23);

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn> = $r9;

        return $r9;

     label18:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route may not be null.");

        throw $r2;

        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label12 to label13 with label16;
        catch java.io.IOException from label14 to label15 with label16;
    }

    public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.conn.scheme.SchemeRegistry $r1;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        $r1 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        return $r1;
    }

    public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        long l0, $l1, $l2, $l3, $l4, $l6, $l7, $l8, $l9, $l11;
        java.util.concurrent.TimeUnit r1;
        org.apache.commons.logging.Log r2, $r4, $r8, $r9, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r3, $r10;
        org.apache.http.impl.conn.AbstractPoolEntry $r5;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r6;
        org.apache.http.conn.OperatedClientConnection $r7;
        java.lang.StringBuilder $r11;
        java.lang.String $r14;
        java.lang.Throwable $r15, $r16;
        byte $b5, $b10, $b12;
        org.apache.http.conn.ManagedClientConnection r19;
        org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter r21;
        org.apache.http.conn.ClientConnectionManager r22;
        java.net.Socket r23;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r19 := @parameter0: org.apache.http.conn.ManagedClientConnection;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        virtualinvoke r0.<org.apache.http.impl.conn.SingleClientConnManager: void assertStillUp()>();

        $z0 = r19 instanceof org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter;

        if $z0 == 0 goto label21;

        $r4 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label01;

        r2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing connection ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label01:
        r21 = (org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter) r19;

        $r5 = r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry poolEntry>;

        if $r5 != null goto label02;

        return;

     label02:
        r22 = virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()>();

        if r22 == null goto label04;

        if r22 != r0 goto label03;

        goto label04;

     label03:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection not obtained from this manager.");

        throw $r10;

     label04:
        $r6 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        $r7 = $r6.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        r23 = interfaceinvoke $r7.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

     label05:
        if r23 == null goto label07;

     label06:
        staticinvoke <android.net.TrafficStats: void untagSocket(java.net.Socket)>(r23);

     label07:
        $z2 = virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: boolean isOpen()>();

        if $z2 == 0 goto label10;

        $z3 = r0.<org.apache.http.impl.conn.SingleClientConnManager: boolean alwaysShutDown>;

        if $z3 != 0 goto label08;

        $z5 = virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: boolean isMarkedReusable()>();

        if $z5 != 0 goto label10;

     label08:
        $r8 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $z4 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label09;

        $r9 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Released connection open but not reusable.");

     label09:
        virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void shutdown()>();

     label10:
        virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void detach()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn> = null;

        $l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime> = $l11;

        $b12 = l0 cmp 0L;

        if $b12 <= 0 goto label16;

        goto label15;

     label11:
        $r15 := @caughtexception;

        goto label18;

     label12:
        $r16 := @caughtexception;

     label13:
        $r17 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        $z6 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label14;

        $r18 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception shutting down released connection.", $r16);

     label14:
        virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void detach()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn> = null;

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime> = $l9;

        $b10 = l0 cmp 0L;

        if $b10 <= 0 goto label16;

     label15:
        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $l2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime>;

        $l3 = $l1 + $l2;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long connectionExpiresTime> = $l3;

        goto label17;

     label16:
        r0.<org.apache.http.impl.conn.SingleClientConnManager: long connectionExpiresTime> = 9223372036854775807L;

     label17:
        return;

     label18:
        virtualinvoke r21.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void detach()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn> = null;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime> = $l4;

        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label19;

        $l6 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $l7 = r0.<org.apache.http.impl.conn.SingleClientConnManager: long lastReleaseTime>;

        $l8 = $l6 + $l7;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: long connectionExpiresTime> = $l8;

        goto label20;

     label19:
        r0.<org.apache.http.impl.conn.SingleClientConnManager: long connectionExpiresTime> = 9223372036854775807L;

     label20:
        throw $r15;

     label21:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection class mismatch, connection not obtained from this manager.");

        throw $r3;

        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    public final org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.conn.routing.HttpRoute r1;
        java.lang.Object r2;
        org.apache.http.impl.conn.SingleClientConnManager$1 $r3;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter1: java.lang.Object;

        $r3 = new org.apache.http.impl.conn.SingleClientConnManager$1;

        specialinvoke $r3.<org.apache.http.impl.conn.SingleClientConnManager$1: void <init>(org.apache.http.impl.conn.SingleClientConnManager,org.apache.http.conn.routing.HttpRoute,java.lang.Object)>(r0, r1, r2);

        return $r3;
    }

    protected void revokeConnection()
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter $r2, $r4;
        org.apache.commons.logging.Log $r3, $r7;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        $r2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Invalid use of SingleClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.");

        $r4 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn>;

        virtualinvoke $r4.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void detach()>();

     label2:
        $r5 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        virtualinvoke $r5.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void shutdown()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Problem while shutting down connection.", $r6);

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void shutdown()
    {
        org.apache.http.impl.conn.SingleClientConnManager r0;
        org.apache.http.impl.conn.SingleClientConnManager$PoolEntry $r1, $r2;
        java.lang.Throwable $r3, $r5;
        org.apache.commons.logging.Log $r4;
        org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter r6;

        r0 := @this: org.apache.http.impl.conn.SingleClientConnManager;

        r0.<org.apache.http.impl.conn.SingleClientConnManager: boolean isShutDown> = 1;

        r6 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn>;

        if r6 == null goto label1;

        virtualinvoke r6.<org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter: void detach()>();

     label1:
        $r1 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry>;

        virtualinvoke $r2.<org.apache.http.impl.conn.SingleClientConnManager$PoolEntry: void shutdown()>();

     label2:
        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry> = null;

        goto label7;

     label3:
        $r5 := @caughtexception;

        goto label8;

     label4:
        $r3 := @caughtexception;

     label5:
        $r4 = r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Problem while shutting down manager.", $r3);

     label6:
        goto label2;

     label7:
        return;

     label8:
        r0.<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry> = null;

        throw $r5;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.conn.SingleClientConnManager: java.lang.String MISUSE_MESSAGE> = "Invalid use of SingleClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.";

        return;
    }
}
