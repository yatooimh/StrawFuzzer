public class org.apache.http.impl.conn.tsccm.RouteSpecificPool extends java.lang.Object
{
    protected final java.util.LinkedList freeEntries;
    private final org.apache.commons.logging.Log log;
    protected final int maxEntries;
    protected int numEntries;
    protected final org.apache.http.conn.routing.HttpRoute route;
    protected final java.util.Queue waitingThreads;

    public void <init>(org.apache.http.conn.routing.HttpRoute, int)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.conn.routing.HttpRoute r1;
        int i0;
        java.lang.Class $r2;
        org.apache.commons.logging.Log $r3;
        java.util.LinkedList $r4, $r5;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.commons.logging.Log log> = $r3;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route> = r1;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int maxEntries> = i0;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads> = $r5;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries> = 0;

        return;
    }

    public org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        java.util.ListIterator r1;
        java.util.LinkedList $r2, $r3, $r4, r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5, $r6, $r7, r10;
        int $i0;
        java.lang.Throwable $r8;
        org.apache.commons.logging.Log $r9;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry r12, r13;
        org.apache.http.conn.OperatedClientConnection r14;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r10 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        r11 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        $i0 = virtualinvoke r11.<java.util.LinkedList: int size()>();

        r1 = virtualinvoke r11.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z2 = interfaceinvoke r1.<java.util.ListIterator: boolean hasPrevious()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object previous()>();

        r12 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r6;

        $r7 = virtualinvoke r12.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: java.lang.Object getState()>();

        $z3 = staticinvoke <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>(r10, $r7);

        if $z3 == 0 goto label2;

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

        return r12;

     label2:
        goto label1;

     label3:
        $r3 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        $z1 = virtualinvoke $r3.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r4 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.lang.Object remove()>();

        r13 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r5;

        virtualinvoke r13.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: void setState(java.lang.Object)>(null);

        r14 = virtualinvoke r13.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>();

     label4:
        interfaceinvoke r14.<org.apache.http.conn.OperatedClientConnection: void close()>();

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.commons.logging.Log log>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O error closing connection", $r8);

     label7:
        return r13;

     label8:
        return null;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry r1;
        org.apache.http.conn.routing.HttpRoute $r3, $r4, $r7, $r10;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r1 := @parameter0: org.apache.http.impl.conn.tsccm.BasicPoolEntry;

        $r3 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route>;

        $r4 = virtualinvoke r1.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>();

        $z0 = virtualinvoke $r3.<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        $i1 = $i0 + 1;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries> = $i1;

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry not planned for this pool.\npool: ");

        $r7 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nplan: ");

        $r10 = virtualinvoke r1.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.routing.HttpRoute getPlannedRoute()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    public boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry r1;
        boolean z0;
        java.util.LinkedList $r2;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r1 := @parameter0: org.apache.http.impl.conn.tsccm.BasicPoolEntry;

        $r2 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        z0 = virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        if z0 == 0 goto label1;

        $i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        $i1 = $i0 - 1;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries> = $i1;

     label1:
        return z0;
    }

    public void dropEntry()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int i0, $i1;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        if i0 < 1 goto label1;

        $i1 = i0 - 1;

        r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries> = $i1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("There is no entry that could be dropped.");

        throw $r1;
    }

    public void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int i0, $i1;
        java.lang.StringBuilder $r1, $r8;
        org.apache.http.conn.routing.HttpRoute $r3, $r10;
        java.lang.IllegalStateException $r5, $r12;
        java.lang.String $r6, $r13;
        java.util.LinkedList $r7, $r14;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry r15;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r15 := @parameter0: org.apache.http.impl.conn.tsccm.BasicPoolEntry;

        i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        if i0 < 1 goto label2;

        $r7 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        $i1 = virtualinvoke $r7.<java.util.LinkedList: int size()>();

        if i0 <= $i1 goto label1;

        $r14 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.LinkedList freeEntries>;

        virtualinvoke $r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r15);

        return;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No entry allocated from this pool. ");

        $r10 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No entry created for this pool. ");

        $r3 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public int getCapacity()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $i1 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int maxEntries>;

        $i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public final int getEntryCount()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int $i0;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        return $i0;
    }

    public final int getMaxEntries()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int $i0;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int maxEntries>;

        return $i0;
    }

    public final org.apache.http.conn.routing.HttpRoute getRoute()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.conn.routing.HttpRoute $r1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: org.apache.http.conn.routing.HttpRoute route>;

        return $r1;
    }

    public boolean hasThread()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        java.util.Queue $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean isUnused()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        int i0;
        java.util.Queue $r1;
        boolean $z0, z1;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        i0 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: int numEntries>;

        z1 = 1;

        if i0 >= 1 goto label1;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public org.apache.http.impl.conn.tsccm.WaitingThread nextThread()
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        java.util.Queue $r1;
        java.lang.Object $r2;
        org.apache.http.impl.conn.tsccm.WaitingThread $r3;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object peek()>();

        $r3 = (org.apache.http.impl.conn.tsccm.WaitingThread) $r2;

        return $r3;
    }

    public void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.impl.conn.tsccm.WaitingThread r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Queue $r3;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r1 := @parameter0: org.apache.http.impl.conn.tsccm.WaitingThread;

        if r1 == null goto label1;

        $r3 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads>;

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Waiting thread must not be null.");

        throw $r2;
    }

    public void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread)
    {
        org.apache.http.impl.conn.tsccm.RouteSpecificPool r0;
        org.apache.http.impl.conn.tsccm.WaitingThread r1;
        java.util.Queue $r2;

        r0 := @this: org.apache.http.impl.conn.tsccm.RouteSpecificPool;

        r1 := @parameter0: org.apache.http.impl.conn.tsccm.WaitingThread;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.http.impl.conn.tsccm.RouteSpecificPool: java.util.Queue waitingThreads>;

        interfaceinvoke $r2.<java.util.Queue: boolean remove(java.lang.Object)>(r1);

        return;
    }
}
