public final class org.apache.http.impl.cookie.DateUtils extends java.lang.Object
{
    private static final java.lang.String[] DEFAULT_PATTERNS;
    private static final java.util.Date DEFAULT_TWO_DIGIT_YEAR_START;
    public static final java.util.TimeZone GMT;
    public static final java.lang.String PATTERN_ASCTIME;
    public static final java.lang.String PATTERN_RFC1036;
    public static final java.lang.String PATTERN_RFC1123;

    static void <clinit>()
    {
        java.util.Calendar r0;
        java.lang.String[] $r1;
        java.util.TimeZone $r2, $r3;
        java.util.Date $r4;

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1036> = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_ASCTIME> = "EEE MMM d HH:mm:ss yyyy";

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r1[1] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1[2] = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS> = $r1;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT> = $r2;

        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r3 = <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT>;

        virtualinvoke r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int,int,int,int,int)>(2000, 0, 1, 0, 0, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START> = $r4;

        return;
    }

    private void <init>()
    {
        org.apache.http.impl.cookie.DateUtils r0;

        r0 := @this: org.apache.http.impl.cookie.DateUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String formatDate(java.util.Date)
    {
        java.util.Date r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date,java.lang.String)>(r0, "EEE, dd MMM yyyy HH:mm:ss zzz");

        return $r1;
    }

    public static java.lang.String formatDate(java.util.Date, java.lang.String)
    {
        java.util.Date r0;
        java.lang.String r1, $r5;
        java.lang.IllegalArgumentException $r2, $r3;
        java.text.SimpleDateFormat $r4;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        if r1 == null goto label1;

        $r4 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0);

        return $r5;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern is null");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("date is null");

        throw $r2;
    }

    public static java.util.Date parseDate(java.lang.String) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String r0;
        java.util.Date $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>(r0, null, null);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String r0;
        java.lang.String[] r1;
        java.util.Date $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>(r0, r1, null);

        return $r2;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[], java.util.Date) throws org.apache.http.impl.cookie.DateParseException
    {
        int i0, $i1, $i2, $i3, i4;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        org.apache.http.impl.cookie.DateParseException $r4;
        java.lang.String $r5, $r6, r8, r13;
        boolean $z0, $z1;
        java.lang.Throwable $r7;
        java.lang.String[] r9, r11;
        java.util.Date r10, r12, r15;
        java.text.SimpleDateFormat r14;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String[];

        r10 := @parameter2: java.util.Date;

        if r8 == null goto label9;

        r11 = r9;

        if r9 != null goto label1;

        r11 = <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS>;

     label1:
        r12 = r10;

        if r10 != null goto label2;

        r12 = <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START>;

     label2:
        r13 = r8;

        $i1 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i1 <= 1 goto label3;

        r13 = r8;

        $z0 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label3;

        r13 = r8;

        $z1 = virtualinvoke r8.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z1 == 0 goto label3;

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r13 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

     label3:
        i0 = lengthof r11;

        i4 = 0;

     label4:
        if i4 >= i0 goto label8;

        $r6 = r11[i4];

        r14 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>($r6);

        virtualinvoke r14.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>(r12);

     label5:
        r15 = virtualinvoke r14.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r13);

     label6:
        return r15;

     label7:
        $r7 := @caughtexception;

        i4 = i4 + 1;

        goto label4;

     label8:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse the date ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r4 = new org.apache.http.impl.cookie.DateParseException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.impl.cookie.DateParseException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label9:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r0;

        catch java.text.ParseException from label5 to label6 with label7;
    }
}
