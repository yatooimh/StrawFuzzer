public class org.apache.http.impl.entity.LaxContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{

    public void <init>()
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.params.HttpParams $r2;
        int $i1, $i3, $i4, $i5, $i6, i7, i8, i9;
        byte $b2;
        java.lang.String $r3, $r5, $r6, $r9, $r10, $r16, $r22, $r26, $r29, r34;
        org.apache.http.ProtocolException $r4, $r7, $r15, $r21, $r28;
        org.apache.http.HeaderElement $r8, $r11;
        java.lang.StringBuilder $r12, $r18, $r24;
        org.apache.http.ParseException $r17;
        java.lang.Throwable $r23;
        org.apache.http.HttpMessage r30;
        org.apache.http.Header r31, r32, r39;
        org.apache.http.HeaderElement[] r33;
        org.apache.http.Header[] r38;
        long l10;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        r30 := @parameter0: org.apache.http.HttpMessage;

        if r30 == null goto label22;

        $r2 = interfaceinvoke r30.<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>();

        z0 = interfaceinvoke $r2.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        r31 = interfaceinvoke r30.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        r32 = interfaceinvoke r30.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if r31 == null goto label11;

     label01:
        r33 = interfaceinvoke r31.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

     label02:
        if z0 == 0 goto label06;

        i7 = 0;

     label03:
        $i5 = lengthof r33;

        if i7 >= $i5 goto label06;

        $r11 = r33[i7];

        r34 = interfaceinvoke $r11.<org.apache.http.HeaderElement: java.lang.String getName()>();

        if r34 == null goto label05;

        $i6 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i6 <= 0 goto label05;

        $z3 = virtualinvoke r34.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("chunked");

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke r34.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("identity");

        if $z4 == 0 goto label04;

        goto label05;

     label04:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r15 = new org.apache.http.ProtocolException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label05:
        i7 = i7 + 1;

        goto label03;

     label06:
        i8 = lengthof r33;

        $r5 = "identity";

        $r6 = interfaceinvoke r31.<org.apache.http.Header: java.lang.String getValue()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label07;

        return -1L;

     label07:
        if i8 <= 0 goto label08;

        $r9 = "chunked";

        $i4 = i8 - 1;

        $r8 = r33[$i4];

        $r10 = interfaceinvoke $r8.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10);

        if $z2 == 0 goto label08;

        return -2L;

     label08:
        if z0 != 0 goto label09;

        return -1L;

     label09:
        $r7 = new org.apache.http.ProtocolException;

        specialinvoke $r7.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Chunk-encoding must be the last one applied");

        throw $r7;

     label10:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Transfer-Encoding header value: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r21 = new org.apache.http.ProtocolException;

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r17);

        throw $r21;

     label11:
        if r32 == null goto label21;

        r38 = interfaceinvoke r30.<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>("Content-Length");

        if z0 == 0 goto label13;

        $i3 = lengthof r38;

        if $i3 > 1 goto label12;

        goto label13;

     label12:
        $r4 = new org.apache.http.ProtocolException;

        specialinvoke $r4.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Multiple content length headers");

        throw $r4;

     label13:
        $i1 = lengthof r38;

        i9 = $i1 - 1;

     label14:
        l10 = -1L;

        if i9 < 0 goto label19;

        r39 = r38[i9];

     label15:
        $r3 = interfaceinvoke r39.<org.apache.http.Header: java.lang.String getValue()>();

        l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

     label16:
        goto label19;

     label17:
        $r23 := @caughtexception;

        if z0 != 0 goto label18;

        i9 = i9 + -1;

        goto label14;

     label18:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r26 = interfaceinvoke r39.<org.apache.http.Header: java.lang.String getValue()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = new org.apache.http.ProtocolException;

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label19:
        $b2 = l10 cmp 0L;

        if $b2 < 0 goto label20;

        return l10;

     label20:
        return -1L;

     label21:
        return -1L;

     label22:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r1;

        catch org.apache.http.ParseException from label01 to label02 with label10;
        catch java.lang.NumberFormatException from label15 to label16 with label17;
    }
}
