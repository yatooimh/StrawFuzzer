public class org.apache.http.impl.entity.StrictContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{

    public void <init>()
    {
        org.apache.http.impl.entity.StrictContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.StrictContentLengthStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.impl.entity.StrictContentLengthStrategy r0;
        org.apache.http.Header r1, r25;
        long l0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4, $r9, $r17, $r23, r26, r29;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r12, $r19;
        org.apache.http.ProtocolException $r8, $r16, $r22;
        org.apache.http.ProtocolVersion $r10, $r14;
        org.apache.http.HttpVersion $r11;
        java.lang.Throwable $r18;
        org.apache.http.HttpMessage r24;

        r0 := @this: org.apache.http.impl.entity.StrictContentLengthStrategy;

        r24 := @parameter0: org.apache.http.HttpMessage;

        if r24 == null goto label9;

        r1 = interfaceinvoke r24.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        r25 = interfaceinvoke r24.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if r1 == null goto label4;

        r26 = interfaceinvoke r1.<org.apache.http.Header: java.lang.String getValue()>();

        $r3 = "chunked";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r24.<org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z2 = virtualinvoke $r10.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r11);

        if $z2 != 0 goto label1;

        return -2L;

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunked transfer encoding not allowed for ");

        $r14 = interfaceinvoke r24.<org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = new org.apache.http.ProtocolException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        $r4 = "identity";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r26);

        if $z1 == 0 goto label3;

        return -1L;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r8 = new org.apache.http.ProtocolException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        if r25 == null goto label8;

        r29 = interfaceinvoke r25.<org.apache.http.Header: java.lang.String getValue()>();

     label5:
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r29);

     label6:
        return l0;

     label7:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r22 = new org.apache.http.ProtocolException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label8:
        return -1L;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r2;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }
}
