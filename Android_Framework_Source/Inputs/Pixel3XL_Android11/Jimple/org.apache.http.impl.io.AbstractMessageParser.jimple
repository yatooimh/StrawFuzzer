public abstract class org.apache.http.impl.io.AbstractMessageParser extends java.lang.Object implements org.apache.http.io.HttpMessageParser
{
    protected final org.apache.http.message.LineParser lineParser;
    private final int maxHeaderCount;
    private final int maxLineLen;
    private final org.apache.http.io.SessionInputBuffer sessionBuffer;

    public void <init>(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.params.HttpParams r2;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1;
        org.apache.http.message.LineParser r5;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r5 := @parameter1: org.apache.http.message.LineParser;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label4;

        if r2 == null goto label3;

        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer> = r1;

        $i0 = interfaceinvoke r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-header-count", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount> = $i0;

        $i1 = interfaceinvoke r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen> = $i1;

        if r5 == null goto label1;

        goto label2;

     label1:
        r5 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser> = r5;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r4;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r3;
    }

    public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException
    {
        int i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, i17, i18, $i19;
        char c1, $c5, $c15;
        java.lang.IllegalArgumentException $r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        org.apache.http.Header $r4;
        java.io.IOException $r5, $r6;
        org.apache.http.util.CharArrayBuffer $r7, r14, r15, r17;
        org.apache.http.ParseException $r8;
        org.apache.http.ProtocolException $r9;
        java.lang.String $r10;
        org.apache.http.io.SessionInputBuffer r11;
        org.apache.http.message.LineParser r12, r13;
        org.apache.http.Header[] r16;

        r11 := @parameter0: org.apache.http.io.SessionInputBuffer;

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        r12 := @parameter3: org.apache.http.message.LineParser;

        if r11 == null goto label22;

        r13 = r12;

        if r12 != null goto label01;

        r13 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label01:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r14 = null;

        r15 = null;

     label02:
        if r14 != null goto label03;

        $r7 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r7.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        r14 = $r7;

        goto label04;

     label03:
        virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: void clear()>();

     label04:
        $i2 = interfaceinvoke r11.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>(r14);

        if $i2 == -1 goto label16;

        $i4 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i4 >= 1 goto label05;

        goto label16;

     label05:
        $c5 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c5 == 32 goto label06;

        $c15 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c15 != 9 goto label12;

     label06:
        if r15 == null goto label12;

        i17 = 0;

     label07:
        $i7 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i17 >= $i7 goto label09;

        c1 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i17);

        if c1 == 32 goto label08;

        if c1 == 9 goto label08;

        goto label09;

     label08:
        i17 = i17 + 1;

        goto label07;

     label09:
        if i0 <= 0 goto label11;

        $i10 = virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i11 = $i10 + 1;

        $i12 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i13 = $i11 + $i12;

        $i14 = $i13 - i17;

        if $i14 > i0 goto label10;

        goto label11;

     label10:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r6;

     label11:
        virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: void append(char)>(32);

        $i8 = virtualinvoke r14.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i9 = $i8 - i17;

        virtualinvoke r15.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>(r14, i17, $i9);

        goto label13;

     label12:
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

        r15 = r14;

        r14 = null;

     label13:
        if i16 <= 0 goto label15;

        $i6 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i6 >= i16 goto label14;

        goto label15;

     label14:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Maximum header count exceeded");

        throw $r5;

     label15:
        goto label02;

     label16:
        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        r16 = newarray (org.apache.http.Header)[$i3];

        i18 = 0;

     label17:
        $i19 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i18 >= $i19 goto label21;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i18);

        r17 = (org.apache.http.util.CharArrayBuffer) $r3;

     label18:
        $r4 = interfaceinvoke r13.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r17);

        r16[i18] = $r4;

     label19:
        i18 = i18 + 1;

        goto label17;

     label20:
        $r8 := @caughtexception;

        $r9 = new org.apache.http.ProtocolException;

        $r10 = virtualinvoke $r8.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r9.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label21:
        return r16;

     label22:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r1;

        catch org.apache.http.ParseException from label18 to label19 with label20;
    }

    public org.apache.http.HttpMessage parse() throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.io.SessionInputBuffer $r1, $r3;
        org.apache.http.message.LineParser $r2;
        int $i0, $i1;
        org.apache.http.Header[] $r4;
        org.apache.http.ParseException $r5;
        org.apache.http.ProtocolException $r6;
        java.lang.String $r7;
        org.apache.http.HttpMessage r8;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

     label1:
        $r1 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        r8 = virtualinvoke r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>($r1);

     label2:
        $r3 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        $i1 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount>;

        $i0 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen>;

        $r2 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser>;

        $r4 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>($r3, $i1, $i0, $r2);

        interfaceinvoke r8.<org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>($r4);

        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = virtualinvoke $r5.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r5);

        throw $r6;

        catch org.apache.http.ParseException from label1 to label2 with label3;
    }

    protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException;
}
