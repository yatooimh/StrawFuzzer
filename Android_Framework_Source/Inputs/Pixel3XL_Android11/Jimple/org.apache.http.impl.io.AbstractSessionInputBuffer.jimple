public abstract class org.apache.http.impl.io.AbstractSessionInputBuffer extends java.lang.Object implements org.apache.http.io.SessionInputBuffer
{
    private boolean ascii;
    private byte[] buffer;
    private int bufferlen;
    private int bufferpos;
    private java.lang.String charset;
    private java.io.InputStream instream;
    private org.apache.http.util.ByteArrayBuffer linebuffer;
    private int maxLineLen;
    private org.apache.http.impl.io.HttpTransportMetricsImpl metrics;

    public void <init>()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = null;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = "US-ASCII";

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = -1;

        return;
    }

    private int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.http.util.ByteArrayBuffer $r2, $r4, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r3, $r6;
        byte[] $r5;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        i0 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int length()>();

        if i0 <= 0 goto label2;

        i6 = i0;

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i1 = i0 - 1;

        $i2 = virtualinvoke $r8.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i1);

        if $i2 != 10 goto label1;

        i6 = i0 - 1;

        $r11 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r11.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>(i6);

     label1:
        if i6 <= 0 goto label2;

        $r9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i3 = i6 - 1;

        $i4 = virtualinvoke $r9.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i3);

        if $i4 != 13 goto label2;

        $r10 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i5 = i6 - 1;

        virtualinvoke $r10.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>($i5);

     label2:
        $r12 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        i7 = virtualinvoke $r12.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>($r7, 0, i7);

        goto label4;

     label3:
        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r5 = virtualinvoke $r4.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r5, 0, i7, $r6);

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r3);

     label4:
        return i7;
    }

    private int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, $i1, $i2, i4, i5, i6;
        java.lang.String $r2, $r3;
        byte[] $r4, $r5, $r6;
        byte $b3;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i4 := @parameter1: int;

        i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i1 = i4 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

        i5 = i4;

        if i4 <= i0 goto label1;

        i5 = i4;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i2 = i4 - 1;

        $b3 = $r6[$i2];

        if $b3 != 13 goto label1;

        i5 = i4 - 1;

     label1:
        i6 = i5 - i0;

        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r5, i0, i6);

        goto label3;

     label2:
        $r2 = new java.lang.String;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r4, i0, i6, $r3);

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r2);

     label3:
        return i6;
    }

    private int locateLF()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int $i0, i2;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        i2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

     label1:
        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if i2 >= $i0 goto label3;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $b1 = $r1[i2];

        if $b1 != 10 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    protected int fillBuffer() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int $i0, $i2, i3, i4, i5, i6, $i7, i8;
        long $l1;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r1;
        byte[] r2, r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        if i3 <= 0 goto label2;

        $i2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        i4 = $i2 - i3;

        if i4 <= 0 goto label1;

        r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i3, r2, 0, i4);

     label1:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = i4;

     label2:
        i5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        i6 = lengthof r3;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream>;

        $i7 = i6 - i5;

        i8 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r3, i5, $i7);

        if i8 != -1 goto label3;

        return -1;

     label3:
        $i0 = i5 + i8;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = $i0;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l1 = (long) i8;

        virtualinvoke $r1.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l1);

        return i8;
    }

    public org.apache.http.io.HttpTransportMetrics getMetrics()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        return $r1;
    }

    protected boolean hasBufferedData()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if $i1 >= $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int i0, $i1;
        org.apache.http.params.HttpParams r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        byte[] $r5;
        org.apache.http.util.ByteArrayBuffer $r6;
        boolean $z0, $z1, z2;
        java.lang.String $r7, r9;
        java.io.InputStream r8;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r10;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r8 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: org.apache.http.params.HttpParams;

        if r8 == null goto label5;

        if i0 <= 0 goto label4;

        if r1 == null goto label3;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream> = r8;

        $r5 = newarray (byte)[i0];

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer> = $r5;

        z2 = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = 0;

        $r6 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r6.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>(i0);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = $r6;

        r9 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>(r1);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = r9;

        $z0 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("US-ASCII");

        if $z0 != 0 goto label1;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ASCII");

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = z2;

        $i1 = interfaceinvoke r1.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = $i1;

        $r10 = new org.apache.http.impl.io.HttpTransportMetricsImpl;

        specialinvoke $r10.<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics> = $r10;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r4;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size may not be negative or zero");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r2;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        byte[] r1;
        int i0, $i1, $i4;
        boolean $z0;
        byte $b2;
        short $s3;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

     label1:
        $z0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if $i4 != -1 goto label1;

        return -1;

     label2:
        r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i1 = i0 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

        $b2 = r1[i0];

        $s3 = $b2 & 255;

        return $s3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        byte[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label2;

        $i8 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if $i8 != -1 goto label1;

        return -1;

     label2:
        $i4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i2 = $i4 - $i3;

        i9 = i2;

        if i2 <= i1 goto label3;

        i9 = i1;

     label3:
        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, r1, i0, i9);

        $i6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i7 = $i6 + i9;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i7;

        return i9;
    }

    public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, $i15;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.util.ByteArrayBuffer $r3, $r4, $r5, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, z3;
        java.io.IOException $r6;
        byte[] $r7, $r10;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if r1 == null goto label10;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void clear()>();

        i10 = 0;

        z3 = 1;

     label01:
        if z3 == 0 goto label08;

        i11 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int locateLF()>();

        if i11 == -1 goto label03;

        $r9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z2 = virtualinvoke $r9.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z2 == 0 goto label02;

        $i9 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)>(r1, i11);

        return $i9;

     label02:
        z3 = 0;

        i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $r11 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r10 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i6 = i11 + 1;

        $i7 = $i6 - i0;

        virtualinvoke $r11.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r10, i0, $i7);

        $i8 = i11 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i8;

        goto label05;

     label03:
        $z1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 == 0 goto label04;

        i12 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        i13 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i4 = i12 - i13;

        virtualinvoke $r8.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r7, i13, $i4);

        $i5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i5;

     label04:
        i14 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        i10 = i14;

        if i14 != -1 goto label05;

        z3 = 0;

        i10 = i14;

     label05:
        $i15 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i15 <= 0 goto label07;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i2 = virtualinvoke $r5.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i2 >= $i3 goto label06;

        goto label07;

     label06:
        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r6;

     label07:
        goto label01;

     label08:
        if i10 != -1 goto label09;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z0 = virtualinvoke $r4.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z0 == 0 goto label09;

        return -1;

     label09:
        $i1 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)>(r1);

        return $i1;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r2;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r2 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        $i0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r2);

        if $i0 == -1 goto label1;

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;

     label1:
        return null;
    }
}
