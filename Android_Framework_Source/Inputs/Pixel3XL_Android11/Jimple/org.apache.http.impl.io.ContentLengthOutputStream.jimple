public class org.apache.http.impl.io.ContentLengthOutputStream extends java.io.OutputStream
{
    private boolean closed;
    private final long contentLength;
    private final org.apache.http.io.SessionOutputBuffer out;
    private long total;

    public void <init>(org.apache.http.io.SessionOutputBuffer, long)
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        org.apache.http.io.SessionOutputBuffer r1;
        long l0;
        java.lang.IllegalArgumentException $r2, $r3;
        byte $b1;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = 0L;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed> = 0;

        if r1 == null goto label2;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out> = r1;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength> = l0;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Content length may not be negative");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session output buffer may not be null");

        throw $r2;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        boolean $z0;
        org.apache.http.io.SessionOutputBuffer $r1;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed> = 1;

        $r1 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

     label1:
        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        org.apache.http.io.SessionOutputBuffer $r1;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $r1 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        int i0;
        boolean $z0;
        java.io.IOException $r1;
        long $l1, $l2, $l4, $l5;
        byte $b3;
        org.apache.http.io.SessionOutputBuffer $r2;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 != 0 goto label2;

        $l2 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l1 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength>;

        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label1;

        $r2 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r2.<org.apache.http.io.SessionOutputBuffer: void write(int)>(i0);

        $l4 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l5 = $l4 + 1L;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = $l5;

     label1:
        return;

     label2:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted write to closed stream.");

        throw $r1;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream r0;
        byte[] r1;
        int i0, i1, i11;
        long l2, $l4, $l6, $l7, $l8, l9, l10;
        boolean $z0;
        java.io.IOException $r2;
        byte $b3, $b5;
        org.apache.http.io.SessionOutputBuffer $r3;

        r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 != 0 goto label3;

        l9 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        l2 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength>;

        $b3 = l9 cmp l2;

        if $b3 >= 0 goto label2;

        l10 = l2 - l9;

        i11 = i1;

        $l4 = (long) i1;

        $b5 = $l4 cmp l10;

        if $b5 <= 0 goto label1;

        i11 = (int) l10;

     label1:
        $r3 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r3.<org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>(r1, i0, i11);

        $l7 = r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l6 = (long) i11;

        $l8 = $l7 + $l6;

        r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = $l8;

     label2:
        return;

     label3:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted write to closed stream.");

        throw $r2;
    }
}
