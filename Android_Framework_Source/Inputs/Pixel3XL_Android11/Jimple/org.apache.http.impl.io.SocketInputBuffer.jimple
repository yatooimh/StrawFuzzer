public class org.apache.http.impl.io.SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer
{
    private final java.net.Socket socket;

    public void <init>(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        java.net.Socket r1;
        int i0;
        org.apache.http.params.HttpParams r2;
        java.lang.IllegalArgumentException $r3;
        java.io.InputStream $r4;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket> = r1;

        $r4 = virtualinvoke r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>($r4, 8192, r2);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r3;
    }

    public boolean isDataAvailable(int) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        int i0, i1;
        java.net.Socket $r1, $r2, $r3, $r6;
        java.lang.Throwable $r4, $r5;
        boolean $z0, z1, z2, z3;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        i0 := @parameter0: int;

        z1 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

        z2 = z1;

        if z1 != 0 goto label10;

        $r1 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        i1 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

     label01:
        $r2 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(i0);

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>();

        z3 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

     label02:
        z1 = z3;

     label03:
        $r3 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(i1);

        z2 = z1;

        goto label10;

     label04:
        $r5 := @caughtexception;

        goto label09;

     label05:
        $r4 := @caughtexception;

     label06:
        $z0 = $r4 instanceof java.net.SocketTimeoutException;

        if $z0 == 0 goto label08;

     label07:
        goto label03;

     label08:
        throw $r4;

     label09:
        $r6 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r6.<java.net.Socket: void setSoTimeout(int)>(i1);

        throw $r5;

     label10:
        return z2;

        catch java.io.InterruptedIOException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
    }

    public boolean isStale() throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        boolean z0, z1;
        int i0, i1;
        java.net.Socket $r1, $r2, $r3, $r5, $r7, $r9;
        java.lang.Throwable $r4, $r6, $r8;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        z0 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

        z1 = 0;

        if z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        i0 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

     label2:
        $r2 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(1);

        i1 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>();

     label3:
        if i1 != -1 goto label4;

        z1 = 1;

     label4:
        $r3 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(i0);

        return z1;

     label5:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>(i0);

        throw $r8;

     label6:
        $r4 := @caughtexception;

        $r5 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>(i0);

        return 1;

     label7:
        $r6 := @caughtexception;

        $r7 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>(i0);

        return 0;

        catch java.net.SocketTimeoutException from label2 to label3 with label7;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.lang.Throwable from label2 to label3 with label5;
    }
}
