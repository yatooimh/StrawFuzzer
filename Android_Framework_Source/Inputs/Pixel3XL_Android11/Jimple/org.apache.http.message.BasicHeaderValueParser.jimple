public class org.apache.http.message.BasicHeaderValueParser extends java.lang.Object implements org.apache.http.message.HeaderValueParser
{
    private static final char[] ALL_DELIMITERS;
    public static final org.apache.http.message.BasicHeaderValueParser DEFAULT;
    private static final char ELEM_DELIMITER;
    private static final char PARAM_DELIMITER;

    static void <clinit>()
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        char[] $r1;

        <org.apache.http.message.BasicHeaderValueParser: char PARAM_DELIMITER> = 59;

        <org.apache.http.message.BasicHeaderValueParser: char ELEM_DELIMITER> = 44;

        $r0 = new org.apache.http.message.BasicHeaderValueParser;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: void <init>()>();

        <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 59;

        $r1[1] = 44;

        <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicHeaderValueParser r0;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isOneOf(char, char[])
    {
        char c0, $c2;
        char[] r0;
        int $i1, i3;

        c0 := @parameter0: char;

        r0 := @parameter1: char[];

        if r0 == null goto label3;

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label3;

        $c2 = r0[i3];

        if c0 != $c2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static final org.apache.http.HeaderElement[] parseElements(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.HeaderElement[] $r4;
        org.apache.http.message.HeaderValueParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r1;
    }

    public static final org.apache.http.HeaderElement parseHeaderElement(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.HeaderElement $r4;
        org.apache.http.message.HeaderValueParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r1;
    }

    public static final org.apache.http.NameValuePair parseNameValuePair(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.NameValuePair $r4;
        org.apache.http.message.HeaderValueParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r1;
    }

    public static final org.apache.http.NameValuePair[] parseParameters(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.NameValuePair[] $r4;
        org.apache.http.message.HeaderValueParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.HeaderValueParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r1;
    }

    protected org.apache.http.HeaderElement createHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[])
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        java.lang.String r1, r2;
        org.apache.http.NameValuePair[] r3;
        org.apache.http.message.BasicHeaderElement $r4;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.NameValuePair[];

        $r4 = new org.apache.http.message.BasicHeaderElement;

        specialinvoke $r4.<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>(r1, r2, r3);

        return $r4;
    }

    protected org.apache.http.NameValuePair createNameValuePair(java.lang.String, java.lang.String)
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        java.lang.String r1, r2;
        org.apache.http.message.BasicNameValuePair $r3;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.http.message.BasicNameValuePair;

        specialinvoke $r3.<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        org.apache.http.HeaderElement r4;
        java.lang.IllegalArgumentException $r5, $r6;
        java.util.ArrayList $r7;
        boolean $z0;
        int $i0, $i1;
        org.apache.http.HeaderElement[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.String $r11, $r12;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label6;

        if r2 == null goto label5;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label4;

        r4 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        $r11 = interfaceinvoke r4.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        $r12 = interfaceinvoke r4.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if $r12 == null goto label3;

     label2:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        goto label1;

     label4:
        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r8 = newarray (org.apache.http.HeaderElement)[$i0];

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.http.HeaderElement[]) $r9;

        return $r10;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r6;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r5;
    }

    public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        org.apache.http.NameValuePair r3;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0;
        int $i0, $i1;
        char $c2;
        org.apache.http.NameValuePair[] r6;
        java.lang.String $r7, $r8;
        org.apache.http.HeaderElement $r9;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label3;

        if r2 == null goto label2;

        r3 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        r6 = null;

        $z0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label1;

        r6 = null;

        $i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        if $c2 == 44 goto label1;

        r6 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

     label1:
        $r7 = interfaceinvoke r3.<org.apache.http.NameValuePair: java.lang.String getName()>();

        $r8 = interfaceinvoke r3.<org.apache.http.NameValuePair: java.lang.String getValue()>();

        $r9 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>($r7, $r8, r6);

        return $r9;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        char[] $r3;
        org.apache.http.NameValuePair $r4;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS>;

        $r4 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>(r1, r2, $r3);

        return $r4;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[])
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        org.apache.http.message.ParserCursor r1;
        char[] r2;
        int i0, $i1, $i3, $i5, i8, i9, i11, i13, i14, i15, i16, i17, i18;
        java.lang.IllegalArgumentException $r3, $r4;
        org.apache.http.NameValuePair $r5, $r6;
        char $c2, $c4, $c6, $c7, c10, c12;
        boolean $z1, $z2, $z3, $z4, z6, z7, z8, z9, z10, z11, z12;
        org.apache.http.util.CharArrayBuffer r7;
        java.lang.String r8, r9;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r7 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        r2 := @parameter2: char[];

        if r7 == null goto label22;

        if r1 == null goto label21;

        i8 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        i9 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label01:
        z6 = 0;

        if i8 >= i0 goto label04;

        c10 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i8);

        if c10 != 61 goto label02;

        z6 = 0;

        goto label04;

     label02:
        $z4 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>(c10, r2);

        if $z4 == 0 goto label03;

        z6 = 1;

        goto label04;

     label03:
        i8 = i8 + 1;

        goto label01;

     label04:
        if i8 != i0 goto label05;

        z6 = 1;

        r8 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i9, i0);

        goto label06;

     label05:
        r8 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i9, i8);

        i8 = i8 + 1;

     label06:
        if z6 == 0 goto label07;

        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i8);

        $r6 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>(r8, null);

        return $r6;

     label07:
        i11 = i8;

        z7 = 0;

        z8 = 0;

     label08:
        z9 = z6;

        if i8 >= i0 goto label15;

        c12 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i8);

        z10 = z7;

        if c12 != 34 goto label11;

        z10 = z7;

        if z8 != 0 goto label11;

        if z7 != 0 goto label09;

        z11 = 1;

        goto label10;

     label09:
        z11 = 0;

     label10:
        z10 = z11;

     label11:
        if z10 != 0 goto label12;

        if z8 != 0 goto label12;

        $z3 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>(c12, r2);

        if $z3 == 0 goto label12;

        z9 = 1;

        goto label15;

     label12:
        if z8 == 0 goto label13;

        z12 = 0;

        goto label14;

     label13:
        z12 = 0;

        if z10 == 0 goto label14;

        z12 = 0;

        if c12 != 92 goto label14;

        z12 = 1;

     label14:
        i8 = i8 + 1;

        z7 = z10;

        z8 = z12;

        goto label08;

     label15:
        i13 = i8;

        i14 = i11;

     label16:
        i15 = i13;

        if i14 >= i13 goto label17;

        i15 = i13;

        $c7 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i14);

        $z2 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c7);

        if $z2 == 0 goto label17;

        i14 = i14 + 1;

        goto label16;

     label17:
        if i15 <= i14 goto label18;

        $i5 = i15 - 1;

        $c6 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i5);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c6);

        if $z1 == 0 goto label18;

        i15 = i15 + -1;

        goto label17;

     label18:
        i16 = i14;

        i17 = i15;

        $i1 = i15 - i14;

        if $i1 < 2 goto label19;

        i16 = i14;

        i17 = i15;

        $c2 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i14);

        if $c2 != 34 goto label19;

        i16 = i14;

        i17 = i15;

        $i3 = i15 - 1;

        $c4 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i3);

        if $c4 != 34 goto label19;

        i16 = i14 + 1;

        i17 = i15 - 1;

     label19:
        r9 = virtualinvoke r7.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i16, i17);

        i18 = i8;

        if z9 == 0 goto label20;

        i18 = i8 + 1;

     label20:
        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i18);

        $r5 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>(r8, r9);

        return $r5;

     label21:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r4;

     label22:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;
    }

    public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, $i1, $i2, $i3, i6;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r6;
        org.apache.http.NameValuePair[] $r7, $r9, $r11;
        java.lang.Object[] $r8;
        org.apache.http.NameValuePair $r10;
        char $c4, $c5;

        r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label8;

        if r2 == null goto label7;

        i6 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if i6 >= i0 goto label2;

        $c5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i6);

        $z3 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c5);

        if $z3 == 0 goto label2;

        i6 = i6 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i6);

        $z0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label3;

        $r11 = newarray (org.apache.http.NameValuePair)[0];

        return $r11;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

     label4:
        $z1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z1 != 0 goto label6;

        $r10 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        $i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i3);

        if $c4 != 44 goto label5;

        goto label6;

     label5:
        goto label4;

     label6:
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = newarray (org.apache.http.NameValuePair)[$i1];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (org.apache.http.NameValuePair[]) $r8;

        return $r9;

     label7:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r5;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;
    }
}
