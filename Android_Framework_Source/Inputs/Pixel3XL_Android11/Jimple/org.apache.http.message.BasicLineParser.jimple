public class org.apache.http.message.BasicLineParser extends java.lang.Object implements org.apache.http.message.LineParser
{
    public static final org.apache.http.message.BasicLineParser DEFAULT;
    protected final org.apache.http.ProtocolVersion protocol;

    static void <clinit>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 = new org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>()>();

        <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicLineParser r0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        specialinvoke r0.<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>(null);

        return;
    }

    public void <init>(org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1, r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = r1;

        if r1 != null goto label1;

        r2 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label1:
        r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol> = r2;

        return;
    }

    public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0;
        org.apache.http.Header $r3;
        org.apache.http.message.LineParser r4, r5;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.http.message.LineParser;

        if r0 == null goto label2;

        r5 = r4;

        if r4 != null goto label1;

        r5 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = interfaceinvoke r5.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>($r2);

        return $r3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r1;
    }

    public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.ProtocolVersion $r4;
        org.apache.http.message.LineParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r1;
    }

    public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.RequestLine $r4;
        org.apache.http.message.LineParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r1;
    }

    public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r3;
        org.apache.http.StatusLine $r4;
        org.apache.http.message.LineParser r5, r6;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 == null goto label2;

        r6 = r5;

        if r5 != null goto label1;

        r6 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label1:
        $r2 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r3 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r4 = interfaceinvoke r6.<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r2, $r3);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r1;
    }

    protected org.apache.http.ProtocolVersion createProtocolVersion(int, int)
    {
        org.apache.http.message.BasicLineParser r0;
        int i0, i1;
        org.apache.http.ProtocolVersion $r1, $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r2 = virtualinvoke $r1.<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>(i0, i1);

        return $r2;
    }

    protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        java.lang.String r1, r2;
        org.apache.http.ProtocolVersion r3;
        org.apache.http.message.BasicRequestLine $r4;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.ProtocolVersion;

        $r4 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r4.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r1, r2, r3);

        return $r4;
    }

    protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;
        int i0;
        java.lang.String r2;
        org.apache.http.message.BasicStatusLine $r3;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.http.message.BasicStatusLine;

        specialinvoke $r3.<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, $i1, $i2, $i4, $i7, $i9, $i10, i11, i12, i13, $i14, $i15, $i16, i17;
        java.lang.IllegalArgumentException $r2, $r3;
        org.apache.http.ProtocolVersion $r4;
        char $c3, $c5, $c6, $c8;
        boolean $z1, z2, z4, z5;
        org.apache.http.message.ParserCursor r5;
        java.lang.String r6;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r5 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label13;

        if r5 == null goto label12;

        i11 = virtualinvoke r5.<org.apache.http.message.ParserCursor: int getPos()>();

        $r4 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r6 = virtualinvoke $r4.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i0 = virtualinvoke r6.<java.lang.String: int length()>();

        i12 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i1 = i0 + 4;

        if i12 >= $i1 goto label01;

        return 0;

     label01:
        if i11 >= 0 goto label02;

        $i9 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i10 = $i9 - 4;

        i13 = $i10 - i0;

        goto label04;

     label02:
        i13 = i11;

        if i11 != 0 goto label04;

     label03:
        i13 = i11;

        $i7 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i11 >= $i7 goto label04;

        i13 = i11;

        $c8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i11);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c8);

        if $z1 == 0 goto label04;

        i11 = i11 + 1;

        goto label03;

     label04:
        $i14 = i13 + i0;

        $i15 = $i14 + 4;

        $i16 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i15 <= $i16 goto label05;

        return 0;

     label05:
        z2 = 1;

        i17 = 0;

     label06:
        if z2 == 0 goto label09;

        if i17 >= i0 goto label09;

        $i4 = i13 + i17;

        $c5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        $c6 = virtualinvoke r6.<java.lang.String: char charAt(int)>(i17);

        if $c5 != $c6 goto label07;

        z2 = 1;

        goto label08;

     label07:
        z2 = 0;

     label08:
        i17 = i17 + 1;

        goto label06;

     label09:
        z4 = z2;

        if z2 == 0 goto label11;

        z5 = 0;

        $i2 = i13 + i0;

        $c3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i2);

        if $c3 != 47 goto label10;

        z5 = 1;

     label10:
        z4 = z5;

     label11:
        return z4;

     label12:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label13:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r2;
    }

    public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BufferedHeader $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r2.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>(r1);

        return $r2;
    }

    public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        java.lang.String r2, $r8, $r11, $r14, $r17, $r20, $r23, $r24, $r25, $r30, $r33, $r37, $r40;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, i12, i13, i14, i15, i16, i17, i18, i19;
        java.lang.IllegalArgumentException $r3, $r4;
        org.apache.http.ProtocolVersion $r5, $r26;
        java.lang.StringBuilder $r6, $r12, $r18, $r28, $r35;
        org.apache.http.ParseException $r10, $r16, $r22, $r32, $r39;
        char $c8, $c10, $c11;
        java.lang.Throwable $r27, $r34;
        org.apache.http.message.ParserCursor r41;
        boolean z0, z3, z4;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r41 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label16;

        if r41 == null goto label15;

        $r5 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r2 = virtualinvoke $r5.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = virtualinvoke r41.<org.apache.http.message.ParserCursor: int getPos()>();

        i2 = virtualinvoke r41.<org.apache.http.message.ParserCursor: int getUpperBound()>();

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r41);

        i3 = virtualinvoke r41.<org.apache.http.message.ParserCursor: int getPos()>();

        $i4 = i3 + i0;

        $i5 = $i4 + 4;

        if $i5 > i2 goto label14;

        z0 = 1;

        i12 = 0;

     label01:
        if z0 == 0 goto label03;

        if i12 >= i0 goto label03;

        z0 = 0;

        $i9 = i3 + i12;

        $c10 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i9);

        $c11 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i12);

        if $c10 != $c11 goto label02;

        z0 = 1;

     label02:
        i12 = i12 + 1;

        goto label01;

     label03:
        z3 = z0;

        if z0 == 0 goto label05;

        z4 = 0;

        $i7 = i3 + i0;

        $c8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i7);

        if $c8 != 47 goto label04;

        z4 = 1;

     label04:
        z3 = z4;

     label05:
        if z3 == 0 goto label13;

        $i6 = i0 + 1;

        i13 = i3 + $i6;

        i14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(46, i13, i2);

        if i14 == -1 goto label12;

     label06:
        $r24 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i13, i14);

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24);

     label07:
        i16 = i14 + 1;

        i17 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i16, i2);

        i18 = i17;

        if i17 != -1 goto label08;

        i18 = i2;

     label08:
        $r25 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i16, i18);

        i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r25);

     label09:
        virtualinvoke r41.<org.apache.http.message.ParserCursor: void updatePos(int)>(i18);

        $r26 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>(i15, i19);

        return $r26;

     label10:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol minor version number: ");

        $r30 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = new org.apache.http.ParseException;

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.http.ParseException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label11:
        $r34 := @caughtexception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol major version number: ");

        $r37 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = new org.apache.http.ParseException;

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.http.ParseException: void <init>(java.lang.String)>($r40);

        throw $r39;

     label12:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol version number: ");

        $r20 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = new org.apache.http.ParseException;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label13:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = new org.apache.http.ParseException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.http.ParseException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new org.apache.http.ParseException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ParseException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label15:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r4;

     label16:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

        catch java.lang.NumberFormatException from label06 to label07 with label11;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, i1, i2, i3, i4, i5;
        java.lang.String r2, $r7, $r9, $r11, $r13, $r15, $r17, $r22, $r25, r27;
        org.apache.http.ProtocolVersion r3;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0;
        org.apache.http.RequestLine $r18;
        java.lang.IndexOutOfBoundsException $r19;
        java.lang.StringBuilder $r20, r29, r31, r33;
        org.apache.http.ParseException $r24, r28, r30, r32;
        org.apache.http.message.ParserCursor r26;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r26 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label11;

        if r26 == null goto label10;

        i0 = virtualinvoke r26.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r26.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label01:
        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r26);

        i2 = virtualinvoke r26.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

     label02:
        if i3 < 0 goto label08;

     label03:
        r27 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i3);

        virtualinvoke r26.<org.apache.http.message.ParserCursor: void updatePos(int)>(i3);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r26);

        i4 = virtualinvoke r26.<org.apache.http.message.ParserCursor: int getPos()>();

        i5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i4, i1);

     label04:
        if i5 < 0 goto label07;

     label05:
        r2 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i4, i5);

        virtualinvoke r26.<org.apache.http.message.ParserCursor: void updatePos(int)>(i5);

        r3 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r26);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r26);

        $z0 = virtualinvoke r26.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label06;

        $r18 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r27, r2, r3);

        return $r18;

     label06:
        r28 = new org.apache.http.ParseException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<org.apache.http.ParseException: void <init>(java.lang.String)>($r17);

        throw r28;

     label07:
        r30 = new org.apache.http.ParseException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r11 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw r30;

     label08:
        r32 = new org.apache.http.ParseException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r7 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<org.apache.http.ParseException: void <init>(java.lang.String)>($r9);

        throw r32;

     label09:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r22 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = new org.apache.http.ParseException;

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.http.ParseException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r5;

     label11:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label09;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label09;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label09;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label09;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label09;
    }

    public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, i1, i2, i3, i4, i5;
        java.lang.IllegalArgumentException $r2, $r3;
        java.lang.String $r4, $r8, $r10, $r14, $r17, r20;
        org.apache.http.StatusLine $r5;
        java.lang.Throwable $r6;
        java.lang.IndexOutOfBoundsException $r11;
        java.lang.StringBuilder $r12, r23;
        org.apache.http.ParseException $r16, r22;
        org.apache.http.message.ParserCursor r18;
        org.apache.http.ProtocolVersion r19;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r18 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 == null goto label13;

        if r18 == null goto label12;

        i0 = virtualinvoke r18.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r18.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label01:
        r19 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r18);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r18);

        i2 = virtualinvoke r18.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

     label02:
        i4 = i3;

        if i3 >= 0 goto label03;

        i4 = i1;

     label03:
        $r4 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i4);

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label04:
        if i4 >= i1 goto label07;

     label05:
        r20 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i4, i1);

     label06:
        goto label08;

     label07:
        r20 = "";

     label08:
        $r5 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>(r19, i5, r20);

        return $r5;

     label09:
        $r6 := @caughtexception;

     label10:
        r22 = new org.apache.http.ParseException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse status code from status line: ");

        $r8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r10);

        throw r22;

     label11:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid status line: ");

        $r14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = new org.apache.http.ParseException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.http.ParseException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label12:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label13:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r2;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label11;
        catch java.lang.NumberFormatException from label03 to label04 with label09;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label11;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label11;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label11;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label11;
    }

    protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if i2 >= i0 goto label2;

        $c1 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i2);

        return;
    }
}
