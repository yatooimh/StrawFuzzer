public class org.apache.http.message.BasicTokenIterator extends java.lang.Object implements org.apache.http.TokenIterator
{
    public static final java.lang.String HTTP_SEPARATORS;
    protected java.lang.String currentHeader;
    protected java.lang.String currentToken;
    protected final org.apache.http.HeaderIterator headerIt;
    protected int searchPos;

    public void <init>(org.apache.http.HeaderIterator)
    {
        org.apache.http.message.BasicTokenIterator r0;
        org.apache.http.HeaderIterator r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        r1 := @parameter0: org.apache.http.HeaderIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt> = r1;

        $i0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>(-1);

        r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i0;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header iterator must not be null.");

        throw $r2;
    }

    protected java.lang.String createToken(java.lang.String, int, int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String r1, $r2;
        int i0, i1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r2;
    }

    protected int findNext(int) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i1, i2, i3;
        java.lang.String $r1, $r2, $r6;
        org.apache.http.HeaderIterator $r3, $r4;
        boolean $z0;
        org.apache.http.Header $r5;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i1 := @parameter0: int;

        if i1 >= 0 goto label2;

        $r3 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r3.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r4 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r5 = interfaceinvoke $r4.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r6 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getValue()>();

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r6;

        i2 = 0;

        goto label3;

     label2:
        i2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>(i1);

     label3:
        i0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>(i2);

        if i0 >= 0 goto label4;

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = null;

        return -1;

     label4:
        i3 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>(i0);

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>($r1, i0, i3);

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = $r2;

        return i3;
    }

    protected int findTokenEnd(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i2, i3;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, $r7, $r8;
        char $c1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i2 := @parameter0: int;

        if i2 < 0 goto label3;

        $r7 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        i3 = i2 + 1;

     label1:
        if i3 >= i0 goto label2;

        $r8 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c1 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(i3);

        $z0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c1);

        if $z0 == 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i3;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Token start position must not be negative: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    protected int findTokenSeparator(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i2;
        char c1;
        java.lang.StringBuilder $r1, $r8, $r16;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6, $r7, $r12, $r15, $r20, $r23;
        boolean $z0, $z1, $z2, z3;
        org.apache.http.ParseException $r14, $r22;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i2 := @parameter0: int;

        if i2 < 0 goto label7;

        z3 = 0;

        $r6 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label1:
        if z3 != 0 goto label6;

        if i2 >= i0 goto label6;

        $r7 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        c1 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i2);

        $z0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>(c1);

        if $z0 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>(c1);

        if $z1 == 0 goto label4;

        i2 = i2 + 1;

     label3:
        goto label1;

     label4:
        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>(c1);

        if $z2 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tokens without separator (pos ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r20 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = new org.apache.http.ParseException;

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character after token (pos ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r12 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new org.apache.http.ParseException;

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.http.ParseException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label6:
        return i2;

     label7:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    protected int findTokenStart(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0, $c1;
        java.lang.StringBuilder $r1, $r12;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r9, $r10, $r11, $r16, $r19, r20;
        org.apache.http.HeaderIterator $r6, $r7;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.http.Header $r8;
        org.apache.http.ParseException $r18;
        int i2, i3, i4;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i2 := @parameter0: int;

        if i2 < 0 goto label13;

        z4 = 0;

     label01:
        if z4 != 0 goto label10;

        r20 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        if r20 == null goto label10;

        i3 = virtualinvoke r20.<java.lang.String: int length()>();

     label02:
        if z4 != 0 goto label07;

        if i2 >= i3 goto label07;

        $r10 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        c0 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(i2);

        $z1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>(c0);

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>(c0);

        if $z2 == 0 goto label03;

        goto label05;

     label03:
        $r11 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c1 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i2);

        $z3 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c1);

        if $z3 == 0 goto label04;

        z4 = 1;

        goto label06;

     label04:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character before token (pos ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r16 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = new org.apache.http.ParseException;

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.ParseException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label05:
        i2 = i2 + 1;

     label06:
        goto label02;

     label07:
        i4 = i2;

        if z4 != 0 goto label09;

        $r6 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r6.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r8 = interfaceinvoke $r7.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r9 = interfaceinvoke $r8.<org.apache.http.Header: java.lang.String getValue()>();

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r9;

        i4 = 0;

        goto label09;

     label08:
        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = null;

        i4 = i2;

     label09:
        i2 = i4;

        goto label01;

     label10:
        if z4 == 0 goto label11;

        goto label12;

     label11:
        i2 = -1;

     label12:
        return i2;

     label13:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public boolean hasNext()
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isHttpSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        java.lang.String $r1;
        int $i1;
        boolean z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        $r1 = " ,;=()<>@:\\\"/[]?{}\t";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isTokenChar(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>(c0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    protected boolean isTokenSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        if c0 != 44 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isWhitespace(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean $z0, z1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        if c0 == 9 goto label2;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public final java.lang.Object next() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>();

        return $r1;
    }

    public java.lang.String nextToken() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String r1, $r2;
        java.util.NoSuchElementException $r3;
        int $i0, $i1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r2 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r2 == null goto label1;

        r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        $i0 = r0.<org.apache.http.message.BasicTokenIterator: int searchPos>;

        $i1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>($i0);

        r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i1;

        return r1;

     label1:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Iteration already finished.");

        throw $r3;
    }

    public final void remove() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing tokens is not supported.");

        throw $r1;
    }

    public static void <clinit>()
    {
        <org.apache.http.message.BasicTokenIterator: java.lang.String HTTP_SEPARATORS> = " ,;=()<>@:\\\"/[]?{}\t";

        return;
    }
}
