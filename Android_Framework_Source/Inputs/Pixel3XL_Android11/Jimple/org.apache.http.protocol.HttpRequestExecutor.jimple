public class org.apache.http.protocol.HttpRequestExecutor extends java.lang.Object
{

    public void <init>()
    {
        org.apache.http.protocol.HttpRequestExecutor r0;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected boolean canResponseHaveBody(org.apache.http.HttpRequest, org.apache.http.HttpResponse)
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpResponse r2;
        int i0;
        java.lang.String $r3, $r5;
        org.apache.http.RequestLine $r4;
        org.apache.http.StatusLine $r6;
        boolean z1, z2;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        $r3 = "HEAD";

        $r4 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r5 = interfaceinvoke $r4.<org.apache.http.RequestLine: java.lang.String getMethod()>();

        z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if z1 == 0 goto label1;

        return 0;

     label1:
        $r6 = interfaceinvoke r2.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i0 = interfaceinvoke $r6.<org.apache.http.StatusLine: int getStatusCode()>();

        z2 = 0;

        if i0 < 200 goto label2;

        z2 = 0;

        if i0 == 204 goto label2;

        z2 = 0;

        if i0 == 304 goto label2;

        z2 = 0;

        if i0 == 205 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    protected org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpClientConnection r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        boolean $z0;
        org.apache.http.StatusLine $r6;
        org.apache.http.protocol.HttpContext r7;
        org.apache.http.HttpResponse r8;
        int i0;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpClientConnection;

        r7 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 == null goto label7;

        if r2 == null goto label6;

        if r7 == null goto label5;

        r8 = null;

        i0 = 0;

     label1:
        if r8 == null goto label3;

        if i0 >= 200 goto label2;

        goto label3;

     label2:
        return r8;

     label3:
        r8 = interfaceinvoke r2.<org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        $z0 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>(r1, r8);

        if $z0 == 0 goto label4;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>(r8);

     label4:
        $r6 = interfaceinvoke r8.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i0 = interfaceinvoke $r6.<org.apache.http.StatusLine: int getStatusCode()>();

        goto label1;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP connection may not be null");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r3;
    }

    protected org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpClientConnection r1;
        org.apache.http.protocol.HttpContext r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        java.lang.Boolean $r6, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.http.RequestLine $r7;
        org.apache.http.HttpEntityEnclosingRequest $r8, $r9;
        org.apache.http.HttpVersion $r10;
        org.apache.http.params.HttpParams $r11;
        int $i0, i1;
        org.apache.http.StatusLine $r12, $r14;
        java.lang.StringBuilder $r13;
        java.net.ProtocolException $r15;
        java.lang.String $r16;
        org.apache.http.HttpRequest r17;
        org.apache.http.HttpResponse r18, r20;
        org.apache.http.ProtocolVersion r19;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r17 := @parameter0: org.apache.http.HttpRequest;

        r1 := @parameter1: org.apache.http.HttpClientConnection;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        if r17 == null goto label8;

        if r1 == null goto label7;

        if r2 == null goto label6;

        r18 = null;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request_sent", $r6);

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>(r17);

        $z0 = r17 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r17.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r19 = interfaceinvoke $r7.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        r20 = null;

        z5 = 1;

        $r8 = (org.apache.http.HttpEntityEnclosingRequest) r17;

        $z1 = interfaceinvoke $r8.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

        if $z1 == 0 goto label4;

        r20 = null;

        z5 = 1;

        $r10 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z2 = virtualinvoke r19.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r10);

        if $z2 != 0 goto label4;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void flush()>();

        r20 = null;

        z5 = 1;

        $r11 = interfaceinvoke r17.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $i0 = interfaceinvoke $r11.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.protocol.wait-for-continue", 2000);

        $z3 = interfaceinvoke r1.<org.apache.http.HttpClientConnection: boolean isResponseAvailable(int)>($i0);

        if $z3 == 0 goto label4;

        r20 = interfaceinvoke r1.<org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        $z4 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>(r17, r20);

        if $z4 == 0 goto label1;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>(r20);

     label1:
        $r12 = interfaceinvoke r20.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i1 = interfaceinvoke $r12.<org.apache.http.StatusLine: int getStatusCode()>();

        if i1 >= 200 goto label3;

        if i1 != 100 goto label2;

        r20 = null;

        z5 = 1;

        goto label4;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected response: ");

        $r14 = interfaceinvoke r20.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r15 = new java.net.ProtocolException;

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.net.ProtocolException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        z5 = 0;

     label4:
        r18 = r20;

        if z5 == 0 goto label5;

        $r9 = (org.apache.http.HttpEntityEnclosingRequest) r17;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r9);

        r18 = r20;

     label5:
        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void flush()>();

        $r22 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request_sent", $r22);

        return r18;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r5;

     label7:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP connection may not be null");

        throw $r4;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r3;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpClientConnection r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpResponse r3, r11;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        org.apache.http.HttpException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        org.apache.http.HttpRequest r10;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r10 := @parameter0: org.apache.http.HttpRequest;

        r1 := @parameter1: org.apache.http.HttpClientConnection;

        r2 := @parameter2: org.apache.http.protocol.HttpContext;

        if r10 == null goto label10;

        if r1 == null goto label09;

        if r2 == null goto label08;

     label01:
        r3 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>(r10, r1, r2);

     label02:
        r11 = r3;

        if r3 != null goto label04;

     label03:
        r11 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>(r10, r1, r2);

     label04:
        return r11;

     label05:
        $r8 := @caughtexception;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void close()>();

        throw $r8;

     label06:
        $r7 := @caughtexception;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void close()>();

        throw $r7;

     label07:
        $r9 := @caughtexception;

        interfaceinvoke r1.<org.apache.http.HttpClientConnection: void close()>();

        throw $r9;

     label08:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r6;

     label09:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client connection may not be null");

        throw $r5;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r4;

        catch java.io.IOException from label01 to label02 with label07;
        catch org.apache.http.HttpException from label01 to label02 with label06;
        catch java.lang.RuntimeException from label01 to label02 with label05;
        catch java.io.IOException from label03 to label04 with label07;
        catch org.apache.http.HttpException from label03 to label04 with label06;
        catch java.lang.RuntimeException from label03 to label04 with label05;
    }

    public void postProcess(org.apache.http.HttpResponse, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpProcessor r2;
        org.apache.http.protocol.HttpContext r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpProcessor;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 == null goto label3;

        if r2 == null goto label2;

        if r3 == null goto label1;

        interfaceinvoke r2.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r3);

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r4;
    }

    public void preProcess(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.protocol.HttpProcessor r2;
        org.apache.http.protocol.HttpContext r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpProcessor;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 == null goto label3;

        if r2 == null goto label2;

        if r3 == null goto label1;

        interfaceinvoke r2.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r3);

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r4;
    }
}
