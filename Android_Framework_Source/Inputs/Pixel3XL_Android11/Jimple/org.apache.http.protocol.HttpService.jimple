public class org.apache.http.protocol.HttpService extends java.lang.Object
{
    private org.apache.http.ConnectionReuseStrategy connStrategy;
    private org.apache.http.protocol.HttpExpectationVerifier expectationVerifier;
    private org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver;
    private org.apache.http.params.HttpParams params;
    private org.apache.http.protocol.HttpProcessor processor;
    private org.apache.http.HttpResponseFactory responseFactory;

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpProcessor r1;
        org.apache.http.ConnectionReuseStrategy r2;
        org.apache.http.HttpResponseFactory r3;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        r3 := @parameter2: org.apache.http.HttpResponseFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = null;

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>(r1);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>(r2);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>(r3);

        return;
    }

    protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpResponse r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.protocol.HttpRequestHandlerResolver $r4, $r6;
        org.apache.http.RequestLine $r5;
        org.apache.http.protocol.HttpRequestHandler r7;
        java.lang.String r8;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        r7 = null;

        $r4 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        if $r4 == null goto label1;

        $r5 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r8 = interfaceinvoke $r5.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r6 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        r7 = interfaceinvoke $r6.<org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>(r8);

     label1:
        if r7 == null goto label2;

        interfaceinvoke r7.<org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        goto label3;

     label2:
        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

     label3:
        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        $r1 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        return $r1;
    }

    protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpResponse r1;
        boolean $z0, $z1, $z2;
        org.apache.http.HttpException r2;
        org.apache.http.entity.ByteArrayEntity $r3;
        java.lang.String $r4;
        byte[] $r5;

        r0 := @this: org.apache.http.protocol.HttpService;

        r2 := @parameter0: org.apache.http.HttpException;

        r1 := @parameter1: org.apache.http.HttpResponse;

        $z0 = r2 instanceof org.apache.http.MethodNotSupportedException;

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

        goto label4;

     label1:
        $z1 = r2 instanceof org.apache.http.UnsupportedHttpVersionException;

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(505);

        goto label4;

     label2:
        $z2 = r2 instanceof org.apache.http.ProtocolException;

        if $z2 == 0 goto label3;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(400);

        goto label4;

     label3:
        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(500);

     label4:
        $r3 = new org.apache.http.entity.ByteArrayEntity;

        $r4 = virtualinvoke r2.<org.apache.http.HttpException: java.lang.String getMessage()>();

        $r5 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>($r4);

        specialinvoke $r3.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>($r5);

        virtualinvoke $r3.<org.apache.http.entity.ByteArrayEntity: void setContentType(java.lang.String)>("text/plain; charset=US-ASCII");

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r3);

        return;
    }

    public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpServerConnection r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpRequest r3;
        org.apache.http.params.HttpParams $r4, $r5, $r12, $r13, $r18, $r19, $r25, $r26, $r31, $r32;
        org.apache.http.RequestLine $r6;
        org.apache.http.HttpVersion $r7, $r23, $r28;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.http.protocol.HttpProcessor $r8, $r14;
        org.apache.http.ConnectionReuseStrategy $r9;
        org.apache.http.HttpEntityEnclosingRequest $r10, $r15, $r16, $r20;
        org.apache.http.HttpResponseFactory $r11, $r17, $r24, $r29;
        org.apache.http.protocol.HttpExpectationVerifier $r21, r39;
        org.apache.http.HttpException $r22, $r27;
        org.apache.http.params.DefaultedHttpParams $r30, r33, r38, r42, r45;
        org.apache.http.ProtocolVersion r34, r35;
        org.apache.http.HttpResponse r36, r37, r40, r44;
        org.apache.http.StatusLine $r43;
        int $i0;
        org.apache.http.HttpEntity r46;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpServerConnection;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.connection", r1);

     label01:
        r3 = interfaceinvoke r1.<org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>();

        r33 = new org.apache.http.params.DefaultedHttpParams;

        $r4 = interfaceinvoke r3.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r5 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke r33.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r4, $r5);

        interfaceinvoke r3.<org.apache.http.HttpRequest: void setParams(org.apache.http.params.HttpParams)>(r33);

     label02:
        $r6 = interfaceinvoke r3.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r34 = interfaceinvoke $r6.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

     label03:
        r35 = r34;

     label04:
        $r7 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke r34.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r7);

        if $z0 != 0 goto label05;

        r35 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label05:
        r36 = null;

     label06:
        $z1 = r3 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z1 == 0 goto label19;

        $r15 = (org.apache.http.HttpEntityEnclosingRequest) r3;

        $z4 = interfaceinvoke $r15.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

        if $z4 == 0 goto label17;

        $r17 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        r37 = interfaceinvoke $r17.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>(r35, 100, r2);

        r38 = new org.apache.http.params.DefaultedHttpParams;

        $r18 = interfaceinvoke r37.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r19 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke r38.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r18, $r19);

        interfaceinvoke r37.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>(r38);

        r39 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

     label07:
        r40 = r37;

        if r39 == null goto label12;

     label08:
        $r21 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

        interfaceinvoke $r21.<org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r3, r37, r2);

     label09:
        r40 = r37;

        goto label12;

     label10:
        $r22 := @caughtexception;

     label11:
        $r24 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r23 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        r40 = interfaceinvoke $r24.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r23, 500, r2);

        r42 = new org.apache.http.params.DefaultedHttpParams;

        $r25 = interfaceinvoke r40.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r26 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke r42.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r25, $r26);

        interfaceinvoke r40.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>(r42);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r22, r40);

     label12:
        r36 = r40;

     label13:
        $r43 = interfaceinvoke r40.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r43.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 >= 200 goto label19;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r40);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

     label14:
        r36 = null;

     label15:
        $r20 = (org.apache.http.HttpEntityEnclosingRequest) r3;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r20);

     label16:
        goto label19;

     label17:
        $r16 = (org.apache.http.HttpEntityEnclosingRequest) r3;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r16);

     label18:
        r36 = null;

     label19:
        r44 = r36;

        if r36 != null goto label21;

     label20:
        $r11 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        r44 = interfaceinvoke $r11.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>(r35, 200, r2);

        r45 = new org.apache.http.params.DefaultedHttpParams;

        $r12 = interfaceinvoke r44.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r13 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke r45.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r12, $r13);

        interfaceinvoke r44.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>(r45);

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request", r3);

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.response", r44);

        $r14 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r14.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r3, r2);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r3, r44, r2);

     label21:
        $z2 = r3 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z2 == 0 goto label24;

        $r10 = (org.apache.http.HttpEntityEnclosingRequest) r3;

        r46 = interfaceinvoke $r10.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

     label22:
        if r46 == null goto label24;

     label23:
        interfaceinvoke r46.<org.apache.http.HttpEntity: void consumeContent()>();

     label24:
        goto label26;

     label25:
        $r27 := @caughtexception;

        $r29 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r28 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        r44 = interfaceinvoke $r29.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r28, 500, r2);

        $r30 = new org.apache.http.params.DefaultedHttpParams;

        $r31 = interfaceinvoke r44.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r32 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r30.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r31, $r32);

        interfaceinvoke r44.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r30);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r27, r44);

     label26:
        $r8 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r8.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r44, r2);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r44);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>(r44);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

        $r9 = r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy>;

        $z3 = interfaceinvoke $r9.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r44, r2);

        if $z3 != 0 goto label27;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void close()>();

     label27:
        return;

        catch org.apache.http.HttpException from label01 to label02 with label25;
        catch org.apache.http.HttpException from label02 to label03 with label25;
        catch org.apache.http.HttpException from label04 to label05 with label25;
        catch org.apache.http.HttpException from label06 to label07 with label25;
        catch org.apache.http.HttpException from label08 to label09 with label10;
        catch org.apache.http.HttpException from label11 to label12 with label25;
        catch org.apache.http.HttpException from label13 to label14 with label25;
        catch org.apache.http.HttpException from label15 to label16 with label25;
        catch org.apache.http.HttpException from label17 to label18 with label25;
        catch org.apache.http.HttpException from label20 to label21 with label25;
        catch org.apache.http.HttpException from label21 to label22 with label25;
        catch org.apache.http.HttpException from label23 to label24 with label25;
    }

    public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.ConnectionReuseStrategy r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        if r1 == null goto label1;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null");

        throw $r2;
    }

    public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpExpectationVerifier r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpExpectationVerifier;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = r1;

        return;
    }

    public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpRequestHandlerResolver r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestHandlerResolver;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = r1;

        return;
    }

    public void setHttpProcessor(org.apache.http.protocol.HttpProcessor)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpProcessor r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        if r1 == null goto label1;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null.");

        throw $r2;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = r1;

        return;
    }

    public void setResponseFactory(org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpResponseFactory r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpResponseFactory;

        if r1 == null goto label1;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response factory may not be null");

        throw $r2;
    }
}
