public class org.apache.http.protocol.UriPatternMatcher extends java.lang.Object
{
    private final java.util.Map handlerMap;

    public void <init>()
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap> = $r1;

        return;
    }

    public java.lang.Object lookup(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r1;
        java.lang.String r2, r8, r9, r12, r14;
        java.lang.IllegalArgumentException $r3;
        java.util.Map $r4, $r5, $r15;
        java.util.Set $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, r10, r11, r13;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r8 := @parameter0: java.lang.String;

        if r8 == null goto label6;

        i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("?");

        r9 = r8;

        if i0 == -1 goto label1;

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r4 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        r10 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r11 = r10;

        if r10 != null goto label5;

        r12 = null;

        $r5 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        r11 = r10;

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r7;

        r13 = r10;

        r14 = r12;

        $z1 = virtualinvoke r0.<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>(r2, r9);

        if $z1 == 0 goto label4;

        if r12 == null goto label3;

        $i1 = virtualinvoke r12.<java.lang.String: int length()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 < $i2 goto label3;

        r13 = r10;

        r14 = r12;

        $i3 = virtualinvoke r12.<java.lang.String: int length()>();

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 != $i4 goto label4;

        r13 = r10;

        r14 = r12;

        $z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z2 == 0 goto label4;

     label3:
        $r15 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        r13 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r14 = r2;

     label4:
        r10 = r13;

        r12 = r14;

        goto label2;

     label5:
        return r11;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request URI may not be null");

        throw $r3;
    }

    protected boolean matchUriRequestPattern(java.lang.String, java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        z5 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z4 != 0 goto label3;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z2 == 0 goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $z3 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3);

        if $z3 == 0 goto label4;

     label3:
        goto label5;

     label4:
        z5 = 0;

     label5:
        return z5;
    }

    public void register(java.lang.String, java.lang.Object)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r3, $r4;
        java.util.Map $r5;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label2;

        if r2 == null goto label1;

        $r5 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request handelr may not be null");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI request pattern may not be null");

        throw $r3;
    }

    public void setHandlers(java.util.Map)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.util.Map r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label1;

        $r3 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of handlers may not be null");

        throw $r2;
    }

    public void unregister(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }
}
