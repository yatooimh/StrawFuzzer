public final class org.apache.http.util.ByteArrayBuffer extends java.lang.Object
{
    private byte[] buffer;
    private int len;

    public void <init>(int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        $r2 = newarray (byte)[i0];

        r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = $r2;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer capacity may not be negative");

        throw $r1;
    }

    private void expand(int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r1, $r2, $r3;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r2;

        $i2 = $i1 << 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, i0);

        r1 = newarray (byte)[$i3];

        $r3 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i4 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i4);

        r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = r1;

        return;
    }

    public void append(int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0, i1, $i2, $i3, $i6;
        byte[] $r1, $r2;
        byte $b4, $b5;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        i1 = $i2 + 1;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label1;

        specialinvoke r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i1);

     label1:
        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i6 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $b4 = (byte) i0;

        $b5 = (byte) $b4;

        $r2[$i6] = $b5;

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = i1;

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer, int, int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, i1;
        char[] $r2;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char[] buffer()>();

        virtualinvoke r0.<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>($r2, i0, i1);

        return;
    }

    public void append(byte[], int, int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        byte[] r1, $r2, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        if i0 < 0 goto label4;

        $i3 = lengthof r1;

        if i0 > $i3 goto label4;

        if i1 < 0 goto label4;

        $i4 = i0 + i1;

        if $i4 < 0 goto label4;

        $i6 = i0 + i1;

        $i5 = lengthof r1;

        if $i6 > $i5 goto label4;

        if i1 != 0 goto label2;

        return;

     label2:
        $i7 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        i2 = $i7 + i1;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i8 = lengthof $r2;

        if i2 <= $i8 goto label3;

        specialinvoke r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i2);

     label3:
        $r3 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i9 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i9, i1);

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = i2;

        return;

     label4:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;
    }

    public void append(char[], int, int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i10, i11, i12;
        byte[] $r2, $r3;
        char $c7;
        byte $b8, $b9;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r1 := @parameter0: char[];

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        if i10 < 0 goto label6;

        $i2 = lengthof r1;

        if i10 > $i2 goto label6;

        if i11 < 0 goto label6;

        $i3 = i10 + i11;

        if $i3 < 0 goto label6;

        $i5 = i10 + i11;

        $i4 = lengthof r1;

        if $i5 > $i4 goto label6;

        if i11 != 0 goto label2;

        return;

     label2:
        i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        i1 = i0 + i11;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i6 = lengthof $r2;

        if i1 <= $i6 goto label3;

        specialinvoke r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>(i1);

     label3:
        i12 = i0;

     label4:
        if i12 >= i1 goto label5;

        $r3 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $c7 = r1[i10];

        $b8 = (byte) $c7;

        $b9 = (byte) $b8;

        $r3[i12] = $b9;

        i10 = i10 + 1;

        i12 = i12 + 1;

        goto label4;

     label5:
        r0.<org.apache.http.util.ByteArrayBuffer: int len> = i1;

        return;

     label6:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;
    }

    public byte[] buffer()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        byte[] $r1;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        return $r1;
    }

    public int byteAt(int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int capacity()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void clear()
    {
        org.apache.http.util.ByteArrayBuffer r0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = 0;

        return;
    }

    public boolean isEmpty()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int $i0;
        boolean z0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isFull()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        byte[] $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i1 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $r1 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int length()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int $i0;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        return $i0;
    }

    public void setLength(int)
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        byte[] $r2;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r2;

        if i0 > $i1 goto label1;

        r0.<org.apache.http.util.ByteArrayBuffer: int len> = i0;

        return;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public byte[] toByteArray()
    {
        org.apache.http.util.ByteArrayBuffer r0;
        int i0;
        byte[] r1, $r2;

        r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 = r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        r1 = newarray (byte)[i0];

        if i0 <= 0 goto label1;

        $r2 = r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i0);

     label1:
        return r1;
    }
}
