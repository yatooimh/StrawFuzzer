public class org.junit.Assert extends java.lang.Object
{

    protected void <init>()
    {
        org.junit.Assert r0;

        r0 := @this: org.junit.Assert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertArrayEquals(java.lang.String, byte[], byte[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        byte[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, char[], char[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        char[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: char[];

        r2 := @parameter2: char[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, double[], double[], double) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        double[] r1, r2;
        double d0;
        org.junit.internal.InexactComparisonCriteria $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        d0 := @parameter3: double;

        $r3 = new org.junit.internal.InexactComparisonCriteria;

        specialinvoke $r3.<org.junit.internal.InexactComparisonCriteria: void <init>(double)>(d0);

        virtualinvoke $r3.<org.junit.internal.InexactComparisonCriteria: void arrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, float[], float[], float) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        float[] r1, r2;
        float f0;
        org.junit.internal.InexactComparisonCriteria $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        f0 := @parameter3: float;

        $r3 = new org.junit.internal.InexactComparisonCriteria;

        specialinvoke $r3.<org.junit.internal.InexactComparisonCriteria: void <init>(float)>(f0);

        virtualinvoke $r3.<org.junit.internal.InexactComparisonCriteria: void arrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, int[], int[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        int[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, long[], long[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        long[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: long[];

        r2 := @parameter2: long[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        java.lang.Object[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, short[], short[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        short[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: short[];

        r2 := @parameter2: short[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(java.lang.String, boolean[], boolean[]) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        boolean[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: boolean[];

        r2 := @parameter2: boolean[];

        staticinvoke <org.junit.Assert: void internalArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertArrayEquals(byte[], byte[])
    {
        byte[] r0, r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,byte[],byte[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(char[], char[])
    {
        char[] r0, r1;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,char[],char[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(double[], double[], double)
    {
        double[] r0, r1;
        double d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,double[],double[],double)>(null, r0, r1, d0);

        return;
    }

    public static void assertArrayEquals(float[], float[], float)
    {
        float[] r0, r1;
        float f0;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 := @parameter2: float;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,float[],float[],float)>(null, r0, r1, f0);

        return;
    }

    public static void assertArrayEquals(int[], int[])
    {
        int[] r0, r1;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,int[],int[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(long[], long[])
    {
        long[] r0, r1;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,long[],long[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(short[], short[])
    {
        short[] r0, r1;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,short[],short[])>(null, r0, r1);

        return;
    }

    public static void assertArrayEquals(boolean[], boolean[])
    {
        boolean[] r0, r1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,boolean[],boolean[])>(null, r0, r1);

        return;
    }

    public static void assertEquals(double, double)
    {
        double d0, d1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double)>(null, d0, d1);

        return;
    }

    public static void assertEquals(double, double, double)
    {
        double d0, d1, d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,double,double,double)>(null, d0, d1, d2);

        return;
    }

    public static void assertEquals(float, float, float)
    {
        float f0, f1, f2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,float,float,float)>(null, f0, f1, f2);

        return;
    }

    public static void assertEquals(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(null, l0, l1);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, double, double)
    {
        java.lang.String r0;
        double d0, d1;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Use assertEquals(expected, actual, delta) to compare floating-point numbers");

        return;
    }

    public static void assertEquals(java.lang.String, double, double, double)
    {
        java.lang.String r0;
        double d0, d1, d2;
        boolean $z0;
        java.lang.Double $r1, $r2;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $z0 = staticinvoke <org.junit.Assert: boolean doubleIsDifferent(double,double,double)>(d0, d1, d2);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        staticinvoke <org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

     label1:
        return;
    }

    public static void assertEquals(java.lang.String, float, float, float)
    {
        java.lang.String r0;
        float f0, f1, f2;
        boolean $z0;
        java.lang.Float $r1, $r2;

        r0 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $z0 = staticinvoke <org.junit.Assert: boolean floatIsDifferent(float,float,float)>(f0, f1, f2);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        staticinvoke <org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

     label1:
        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String r0;
        long l0, l1;
        byte $b2;
        java.lang.Long $r1, $r2;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $b2 = l0 cmp l1;

        if $b2 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        staticinvoke <org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

     label1:
        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;
        org.junit.ComparisonFailure $r2;
        java.lang.String $r3, $r4, r5;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.junit.Assert: boolean equalsRegardingNull(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $z2 = r1 instanceof java.lang.String;

        if $z2 == 0 goto label3;

        if r5 != null goto label2;

        r5 = "";

        goto label2;

     label2:
        $r2 = new org.junit.ComparisonFailure;

        $r4 = (java.lang.String) r0;

        $r3 = (java.lang.String) r1;

        specialinvoke $r2.<org.junit.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r5, $r4, $r3);

        throw $r2;

     label3:
        staticinvoke <org.junit.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r5, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])
    {
        java.lang.String r0;
        java.lang.Object[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>(r0, r1, r2);

        return;
    }

    public static void assertEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>(r0, r1);

        return;
    }

    public static void assertFalse(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = z0 ^ 1;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>(r0, $z1);

        return;
    }

    public static void assertFalse(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>(null, z0);

        return;
    }

    public static void assertNotEquals(double, double, double)
    {
        double d0, d1, d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.String,double,double,double)>(null, d0, d1, d2);

        return;
    }

    public static void assertNotEquals(float, float, float)
    {
        float f0, f1, f2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.String,float,float,float)>(null, f0, f1, f2);

        return;
    }

    public static void assertNotEquals(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.String,long,long)>(null, l0, l1);

        return;
    }

    public static void assertNotEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertNotEquals(java.lang.String, double, double, double)
    {
        java.lang.String r0;
        double d0, d1, d2;
        boolean $z0;
        java.lang.Double $r1;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $z0 = staticinvoke <org.junit.Assert: boolean doubleIsDifferent(double,double,double)>(d0, d1, d2);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        staticinvoke <org.junit.Assert: void failEquals(java.lang.String,java.lang.Object)>(r0, $r1);

     label1:
        return;
    }

    public static void assertNotEquals(java.lang.String, float, float, float)
    {
        java.lang.String r0;
        float f0, f1, f2;
        boolean $z0;
        java.lang.Float $r1;

        r0 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $z0 = staticinvoke <org.junit.Assert: boolean floatIsDifferent(float,float,float)>(f0, f1, f2);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        staticinvoke <org.junit.Assert: void failEquals(java.lang.String,java.lang.Object)>(r0, $r1);

     label1:
        return;
    }

    public static void assertNotEquals(java.lang.String, long, long)
    {
        java.lang.String r0;
        long l0, l1;
        byte $b2;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $b2 = l0 cmp l1;

        if $b2 != 0 goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        staticinvoke <org.junit.Assert: void failEquals(java.lang.String,java.lang.Object)>(r0, $r1);

     label1:
        return;
    }

    public static void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <org.junit.Assert: boolean equalsRegardingNull(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        staticinvoke <org.junit.Assert: void failEquals(java.lang.String,java.lang.Object)>(r0, r2);

     label1:
        return;
    }

    public static void assertNotNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>(null, r0);

        return;
    }

    public static void assertNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>(r0, z0);

        return;
    }

    public static void assertNotSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != r2 goto label1;

        staticinvoke <org.junit.Assert: void failSame(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void assertNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>(null, r0);

        return;
    }

    public static void assertNull(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        return;

     label1:
        staticinvoke <org.junit.Assert: void failNotNull(java.lang.String,java.lang.Object)>(r0, r1);

        return;
    }

    public static void assertSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != r2 goto label1;

        return;

     label1:
        staticinvoke <org.junit.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertThat(java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.hamcrest.Matcher;

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("", r0, r1);

        return;
    }

    public static void assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.String r0;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.hamcrest.Matcher;

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>(r0, r1, r2);

        return;
    }

    public static void assertTrue(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void assertTrue(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>(null, z0);

        return;
    }

    private static boolean doubleIsDifferent(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;
        int $i0;
        byte $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d1);

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $d3 = d0 - d1;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b1 = $d4 cmpg d2;

        if $b1 > 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private static boolean equalsRegardingNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label3;

        if r1 != null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        $z0 = staticinvoke <org.junit.Assert: boolean isEquals(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public static void fail()
    {
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>(null);

        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String r0;
        java.lang.AssertionError $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r1;
    }

    private static void failEquals(java.lang.String, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r5, r9, r10;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r10 = "Values should be different. ";

        if r9 == null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

        return;
    }

    private static void failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, $r3;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <org.junit.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r3);

        return;
    }

    private static void failNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r7;
        java.lang.String $r6, r10, r11;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r11 = "";

        if r10 == null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected null, but was:<");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r6);

        return;
    }

    private static void failNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.StringBuilder $r2, $r10;
        java.lang.String $r9, r13, r14;

        r13 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.lang.Object;

        r14 = "";

        if r13 == null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected same:<");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> was not:<");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

        return;
    }

    private static void failSame(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r4;
        java.lang.String $r3, r7, r8;

        r7 := @parameter0: java.lang.String;

        r8 = "";

        if r7 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected not same");

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r3);

        return;
    }

    private static boolean floatIsDifferent(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;
        int $i0;
        byte $b1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>(f0, f1);

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $f3 = f0 - f1;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b1 = $f4 cmpg f2;

        if $b1 > 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    static java.lang.String format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r23;
        java.lang.StringBuilder $r2, $r10, $r19;
        java.lang.String $r9, $r13, $r16, $r18, r22, r25, r27, r28;
        boolean $z0, $z1;

        r22 := @parameter0: java.lang.String;

        r23 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        r25 = "";

        if r22 == null goto label1;

        r25 = "";

        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r23);

        r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $z1 = virtualinvoke r27.<java.lang.String: boolean equals(java.lang.Object)>(r28);

        if $z1 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: ");

        $r13 = staticinvoke <org.junit.Assert: java.lang.String formatClassAndValue(java.lang.Object,java.lang.String)>(r23, r27);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was: ");

        $r16 = staticinvoke <org.junit.Assert: java.lang.String formatClassAndValue(java.lang.Object,java.lang.String)>(r0, r28);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected:<");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static java.lang.String formatClassAndValue(java.lang.Object, java.lang.String)
    {
        java.lang.String r0, $r8, r10;
        java.lang.Class $r2;
        java.lang.StringBuilder $r3;
        java.lang.Object r9;

        r9 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        if r9 != null goto label1;

        r10 = "null";

        goto label2;

     label1:
        $r2 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        r10 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static void internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object) throws org.junit.internal.ArrayComparisonFailure
    {
        java.lang.String r0;
        java.lang.Object r1, r2;
        org.junit.internal.ExactComparisonCriteria $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = new org.junit.internal.ExactComparisonCriteria;

        specialinvoke $r3.<org.junit.internal.ExactComparisonCriteria: void <init>()>();

        virtualinvoke $r3.<org.junit.internal.ExactComparisonCriteria: void arrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    private static boolean isEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }
}
