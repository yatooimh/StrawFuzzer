public class org.junit.experimental.categories.Categories$CategoryFilter extends org.junit.runner.manipulation.Filter
{
    private final java.util.Set excluded;
    private final boolean excludedAny;
    private final java.util.Set included;
    private final boolean includedAny;

    protected void <init>(boolean, java.util.Set, boolean, java.util.Set)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        boolean z0, z1;
        java.util.Set r1, r2, $r3, $r4;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.Set;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.util.Set;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean includedAny> = z0;

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean excludedAny> = z1;

        $r3 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set copyAndRefine(java.util.Set)>(r1);

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included> = $r3;

        $r4 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set copyAndRefine(java.util.Set)>(r2);

        r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded> = $r4;

        return;
    }

    private static java.util.Set categories(org.junit.runner.Description)
    {
        org.junit.runner.Description r0, $r4;
        java.util.HashSet $r2;
        java.lang.Class[] $r3, $r5;

        r0 := @parameter0: org.junit.runner.Description;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class[] directCategories(org.junit.runner.Description)>(r0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r3);

        $r4 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.runner.Description parentDescription(org.junit.runner.Description)>(r0);

        $r5 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: java.lang.Class[] directCategories(org.junit.runner.Description)>($r4);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r5);

        return $r2;
    }

    public static org.junit.experimental.categories.Categories$CategoryFilter categoryFilter(boolean, java.util.Set, boolean, java.util.Set)
    {
        boolean z0, z1;
        java.util.Set r0, r1;
        org.junit.experimental.categories.Categories$CategoryFilter $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.util.Set;

        z1 := @parameter2: boolean;

        r1 := @parameter3: java.util.Set;

        $r2 = new org.junit.experimental.categories.Categories$CategoryFilter;

        specialinvoke $r2.<org.junit.experimental.categories.Categories$CategoryFilter: void <init>(boolean,java.util.Set,boolean,java.util.Set)>(z0, r0, z1, r1);

        return $r2;
    }

    private static java.util.Set copyAndRefine(java.util.Set)
    {
        java.util.Set r0;
        java.util.HashSet $r2;

        r0 := @parameter0: java.util.Set;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        if r0 == null goto label1;

        virtualinvoke $r2.<java.util.HashSet: boolean addAll(java.util.Collection)>(r0);

     label1:
        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>(null);

        return $r2;
    }

    private static java.lang.Class[] directCategories(org.junit.runner.Description)
    {
        java.lang.'annotation'.Annotation $r0;
        java.lang.Class[] $r1, r4;
        org.junit.runner.Description r2;
        org.junit.experimental.categories.Category r3;

        r2 := @parameter0: org.junit.runner.Description;

        if r2 != null goto label1;

        $r1 = newarray (java.lang.Class)[0];

        return $r1;

     label1:
        $r0 = virtualinvoke r2.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Category;");

        r3 = (org.junit.experimental.categories.Category) $r0;

        if r3 != null goto label2;

        r4 = newarray (java.lang.Class)[0];

        goto label3;

     label2:
        r4 = interfaceinvoke r3.<org.junit.experimental.categories.Category: java.lang.Class[] value()>();

     label3:
        return r4;
    }

    public static org.junit.experimental.categories.Categories$CategoryFilter exclude(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;
        org.junit.experimental.categories.Categories$CategoryFilter $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r0;

        $r2 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter exclude(boolean,java.lang.Class[])>(1, $r1);

        return $r2;
    }

    public static transient org.junit.experimental.categories.Categories$CategoryFilter exclude(boolean, java.lang.Class[])
    {
        boolean z0, $z1;
        java.lang.Class[] r0;
        java.lang.NullPointerException $r1;
        java.util.Set $r2;
        org.junit.experimental.categories.Categories$CategoryFilter $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Class[];

        $z1 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: boolean hasNull(java.lang.Class[])>(r0);

        if $z1 != 0 goto label1;

        $r2 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set access$000(java.lang.Class[])>(r0);

        $r3 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter categoryFilter(boolean,java.util.Set,boolean,java.util.Set)>(1, null, z0, $r2);

        return $r3;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("has null category");

        throw $r1;
    }

    public static transient org.junit.experimental.categories.Categories$CategoryFilter exclude(java.lang.Class[])
    {
        java.lang.Class[] r0;
        org.junit.experimental.categories.Categories$CategoryFilter $r1;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter exclude(boolean,java.lang.Class[])>(1, r0);

        return $r1;
    }

    private boolean hasCorrectCategoryAnnotation(org.junit.runner.Description)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.Set $r1, $r2, $r3, $r4, $r5, $r6, r8, $r9;
        org.junit.runner.Description r7;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r7 := @parameter0: org.junit.runner.Description;

        r8 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set categories(org.junit.runner.Description)>(r7);

        $z0 = interfaceinvoke r8.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

        $z8 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        return $z8;

     label1:
        $r1 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $z5 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean excludedAny>;

        if $z5 == 0 goto label2;

        $r5 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded>;

        $z7 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean matchesAnyParentCategories(java.util.Set,java.util.Set)>(r8, $r5);

        if $z7 == 0 goto label3;

        return 0;

     label2:
        $r4 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded>;

        $z6 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean matchesAllParentCategories(java.util.Set,java.util.Set)>(r8, $r4);

        if $z6 == 0 goto label3;

        return 0;

     label3:
        $r9 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

        $z9 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();

        if $z9 == 0 goto label4;

        return 1;

     label4:
        $z2 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean includedAny>;

        if $z2 == 0 goto label5;

        $r3 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

        $z4 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean matchesAnyParentCategories(java.util.Set,java.util.Set)>(r8, $r3);

        return $z4;

     label5:
        $r2 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

        $z3 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean matchesAllParentCategories(java.util.Set,java.util.Set)>(r8, $r2);

        return $z3;
    }

    private static transient boolean hasNull(java.lang.Class[])
    {
        java.lang.Class[] r0;
        int i0, i1;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r1 = r0[i1];

        if $r1 != null goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static org.junit.experimental.categories.Categories$CategoryFilter include(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;
        org.junit.experimental.categories.Categories$CategoryFilter $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r0;

        $r2 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter include(boolean,java.lang.Class[])>(1, $r1);

        return $r2;
    }

    public static transient org.junit.experimental.categories.Categories$CategoryFilter include(boolean, java.lang.Class[])
    {
        boolean z0, $z1;
        java.lang.Class[] r0;
        java.lang.NullPointerException $r1;
        java.util.Set $r2;
        org.junit.experimental.categories.Categories$CategoryFilter $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Class[];

        $z1 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: boolean hasNull(java.lang.Class[])>(r0);

        if $z1 != 0 goto label1;

        $r2 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set access$000(java.lang.Class[])>(r0);

        $r3 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter categoryFilter(boolean,java.util.Set,boolean,java.util.Set)>(z0, $r2, 1, null);

        return $r3;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("has null category");

        throw $r1;
    }

    public static transient org.junit.experimental.categories.Categories$CategoryFilter include(java.lang.Class[])
    {
        java.lang.Class[] r0;
        org.junit.experimental.categories.Categories$CategoryFilter $r1;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter include(boolean,java.lang.Class[])>(1, r0);

        return $r1;
    }

    private boolean matchesAllParentCategories(java.util.Set, java.util.Set)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        java.util.Set r1, r4;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.util.Iterator r5;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r1 := @parameter0: java.util.Set;

        r4 := @parameter1: java.util.Set;

        r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Class) $r2;

        $z1 = staticinvoke <org.junit.experimental.categories.Categories: boolean access$100(java.util.Set,java.lang.Class)>(r1, $r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private boolean matchesAnyParentCategories(java.util.Set, java.util.Set)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        java.util.Set r1, r4;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.util.Iterator r5;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r1 := @parameter0: java.util.Set;

        r4 := @parameter1: java.util.Set;

        r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Class) $r2;

        $z1 = staticinvoke <org.junit.experimental.categories.Categories: boolean access$100(java.util.Set,java.lang.Class)>(r1, $r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private static org.junit.runner.Description parentDescription(org.junit.runner.Description)
    {
        org.junit.runner.Description r0, r2;
        java.lang.Class r1;

        r0 := @parameter0: org.junit.runner.Description;

        r1 = virtualinvoke r0.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.Class)>(r1);

     label2:
        return r2;
    }

    public java.lang.String describe()
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        java.lang.String $r1;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        $r1 = virtualinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.String toString()>();

        return $r1;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        org.junit.runner.Description $r3, r4;
        java.util.Iterator r5;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        r4 := @parameter0: org.junit.runner.Description;

        $z0 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean hasCorrectCategoryAnnotation(org.junit.runner.Description)>(r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = virtualinvoke r4.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r5 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.junit.runner.Description) $r2;

        $z2 = virtualinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: boolean shouldRun(org.junit.runner.Description)>($r3);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        org.junit.experimental.categories.Categories$CategoryFilter r0;
        java.lang.StringBuilder $r2, r10;
        java.util.Set $r3, $r4, $r7;
        boolean $z0, $z1;
        java.lang.String $r5;
        java.lang.Object r9;

        r0 := @this: org.junit.experimental.categories.Categories$CategoryFilter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("categories ");

        $r3 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r9 = "[all]";

        goto label2;

     label1:
        r9 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set included>;

     label2:
        r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r4 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r7 = r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.util.Set excluded>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label3:
        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
