public class org.junit.experimental.categories.Categories extends org.junit.runners.Suite
{

    public void <init>(java.lang.Class, org.junit.runners.model.RunnerBuilder) throws org.junit.runners.model.InitializationError
    {
        org.junit.experimental.categories.Categories r0;
        java.util.Set r1, r8;
        boolean $z0, $z1;
        org.junit.experimental.categories.Categories$CategoryFilter $r2;
        org.junit.runner.Description $r3;
        org.junit.runner.manipulation.NoTestsRemainException $r4;
        org.junit.runners.model.InitializationError $r5;
        java.lang.Class r6;
        org.junit.runners.model.RunnerBuilder r7;

        r0 := @this: org.junit.experimental.categories.Categories;

        r6 := @parameter0: java.lang.Class;

        r7 := @parameter1: org.junit.runners.model.RunnerBuilder;

        specialinvoke r0.<org.junit.runners.Suite: void <init>(java.lang.Class,org.junit.runners.model.RunnerBuilder)>(r6, r7);

     label1:
        r8 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set getIncludedCategory(java.lang.Class)>(r6);

        r1 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set getExcludedCategory(java.lang.Class)>(r6);

        $z0 = staticinvoke <org.junit.experimental.categories.Categories: boolean isAnyIncluded(java.lang.Class)>(r6);

        $z1 = staticinvoke <org.junit.experimental.categories.Categories: boolean isAnyExcluded(java.lang.Class)>(r6);

        $r2 = staticinvoke <org.junit.experimental.categories.Categories$CategoryFilter: org.junit.experimental.categories.Categories$CategoryFilter categoryFilter(boolean,java.util.Set,boolean,java.util.Set)>($z0, r8, $z1, r1);

        virtualinvoke r0.<org.junit.experimental.categories.Categories: void filter(org.junit.runner.manipulation.Filter)>($r2);

     label2:
        $r3 = virtualinvoke r0.<org.junit.experimental.categories.Categories: org.junit.runner.Description getDescription()>();

        staticinvoke <org.junit.experimental.categories.Categories: void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)>($r3);

        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.junit.runners.model.InitializationError;

        specialinvoke $r5.<org.junit.runners.model.InitializationError: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch org.junit.runner.manipulation.NoTestsRemainException from label1 to label2 with label3;
    }

    static java.util.Set access$000(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set createSet(java.lang.Class[])>(r0);

        return $r1;
    }

    static boolean access$100(java.util.Set, java.lang.Class)
    {
        java.util.Set r0;
        java.lang.Class r1;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <org.junit.experimental.categories.Categories: boolean hasAssignableTo(java.util.Set,java.lang.Class)>(r0, r1);

        return $z0;
    }

    private static void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description) throws org.junit.runners.model.InitializationError
    {
        boolean $z0, $z1;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        org.junit.runner.Description $r2, r3;
        java.util.Iterator r4;

        r3 := @parameter0: org.junit.runner.Description;

        $z0 = staticinvoke <org.junit.experimental.categories.Categories: boolean canHaveCategorizedChildren(org.junit.runner.Description)>(r3);

        if $z0 != 0 goto label1;

        staticinvoke <org.junit.experimental.categories.Categories: void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)>(r3);

     label1:
        $r0 = virtualinvoke r3.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r4 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.junit.runner.Description) $r1;

        staticinvoke <org.junit.experimental.categories.Categories: void assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)>($r2);

        goto label2;

     label3:
        return;
    }

    private static void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description) throws org.junit.runners.model.InitializationError
    {
        org.junit.runner.Description r0, r5;
        java.util.ArrayList $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.'annotation'.Annotation $r3;
        org.junit.runners.model.InitializationError $r4;
        java.util.Iterator r6;

        r5 := @parameter0: org.junit.runner.Description;

        $r1 = virtualinvoke r5.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r6 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r0 = (org.junit.runner.Description) $r2;

        $r3 = virtualinvoke r0.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Category;");

        if $r3 != null goto label2;

        staticinvoke <org.junit.experimental.categories.Categories: void assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)>(r0);

        goto label1;

     label2:
        $r4 = new org.junit.runners.model.InitializationError;

        specialinvoke $r4.<org.junit.runners.model.InitializationError: void <init>(java.lang.String)>("Category annotations on Parameterized classes are not supported on individual methods.");

        throw $r4;

     label3:
        return;
    }

    private static boolean canHaveCategorizedChildren(org.junit.runner.Description)
    {
        java.util.ArrayList $r0;
        boolean $z0;
        java.lang.Object $r1;
        org.junit.runner.Description $r2, r4;
        java.lang.Class $r3;
        java.util.Iterator r5;

        r4 := @parameter0: org.junit.runner.Description;

        $r0 = virtualinvoke r4.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.junit.runner.Description) $r1;

        $r3 = virtualinvoke $r2.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if $r3 != null goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private static transient java.util.Set createSet(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.util.HashSet $r2;

        r0 := @parameter0: java.lang.Class[];

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        if r0 == null goto label1;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, r0);

     label1:
        return $r2;
    }

    private static java.util.Set getExcludedCategory(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r0;
        java.util.Set $r1;
        java.lang.Class r2;
        org.junit.experimental.categories.Categories$ExcludeCategory r3;
        java.lang.Class[] r4;

        r2 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$ExcludeCategory;");

        r3 = (org.junit.experimental.categories.Categories$ExcludeCategory) $r0;

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = interfaceinvoke r3.<org.junit.experimental.categories.Categories$ExcludeCategory: java.lang.Class[] value()>();

     label2:
        $r1 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set createSet(java.lang.Class[])>(r4);

        return $r1;
    }

    private static java.util.Set getIncludedCategory(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r0;
        java.util.Set $r1;
        java.lang.Class r2;
        org.junit.experimental.categories.Categories$IncludeCategory r3;
        java.lang.Class[] r4;

        r2 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$IncludeCategory;");

        r3 = (org.junit.experimental.categories.Categories$IncludeCategory) $r0;

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = interfaceinvoke r3.<org.junit.experimental.categories.Categories$IncludeCategory: java.lang.Class[] value()>();

     label2:
        $r1 = staticinvoke <org.junit.experimental.categories.Categories: java.util.Set createSet(java.lang.Class[])>(r4);

        return $r1;
    }

    private static boolean hasAssignableTo(java.util.Set, java.lang.Class)
    {
        java.lang.Class r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;
        java.util.Set r3;
        java.util.Iterator r4;

        r3 := @parameter0: java.util.Set;

        r0 := @parameter1: java.lang.Class;

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Class) $r1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private static boolean isAnyExcluded(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r0;
        boolean $z0, z1;
        java.lang.Class r1;
        org.junit.experimental.categories.Categories$ExcludeCategory r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$ExcludeCategory;");

        r2 = (org.junit.experimental.categories.Categories$ExcludeCategory) $r0;

        if r2 == null goto label2;

        $z0 = interfaceinvoke r2.<org.junit.experimental.categories.Categories$ExcludeCategory: boolean matchAny()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private static boolean isAnyIncluded(java.lang.Class)
    {
        java.lang.'annotation'.Annotation $r0;
        boolean $z0, z1;
        java.lang.Class r1;
        org.junit.experimental.categories.Categories$IncludeCategory r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/categories/Categories$IncludeCategory;");

        r2 = (org.junit.experimental.categories.Categories$IncludeCategory) $r0;

        if r2 == null goto label2;

        $z0 = interfaceinvoke r2.<org.junit.experimental.categories.Categories$IncludeCategory: boolean matchAny()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }
}
