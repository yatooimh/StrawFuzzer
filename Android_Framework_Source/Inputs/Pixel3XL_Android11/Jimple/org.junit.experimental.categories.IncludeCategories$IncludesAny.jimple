class org.junit.experimental.categories.IncludeCategories$IncludesAny extends org.junit.experimental.categories.Categories$CategoryFilter
{

    public void <init>(java.util.List)
    {
        org.junit.experimental.categories.IncludeCategories$IncludesAny r0;
        java.util.List r1;
        java.util.HashSet $r2;

        r0 := @this: org.junit.experimental.categories.IncludeCategories$IncludesAny;

        r1 := @parameter0: java.util.List;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        specialinvoke r0.<org.junit.experimental.categories.IncludeCategories$IncludesAny: void <init>(java.util.Set)>($r2);

        return;
    }

    public void <init>(java.util.Set)
    {
        org.junit.experimental.categories.IncludeCategories$IncludesAny r0;
        java.util.Set r1;

        r0 := @this: org.junit.experimental.categories.IncludeCategories$IncludesAny;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: void <init>(boolean,java.util.Set,boolean,java.util.Set)>(1, r1, 1, null);

        return;
    }

    public java.lang.String describe()
    {
        org.junit.experimental.categories.IncludeCategories$IncludesAny r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @this: org.junit.experimental.categories.IncludeCategories$IncludesAny;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("includes ");

        $r4 = specialinvoke r0.<org.junit.experimental.categories.Categories$CategoryFilter: java.lang.String describe()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
