public class org.junit.experimental.max.MaxCore extends java.lang.Object
{
    private static final java.lang.String MALFORMED_JUNIT_3_TEST_CLASS_PREFIX;
    private final org.junit.experimental.max.MaxHistory history;

    private void <init>(java.io.File)
    {
        org.junit.experimental.max.MaxCore r0;
        java.io.File r1;
        org.junit.experimental.max.MaxHistory $r2;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.junit.experimental.max.MaxHistory: org.junit.experimental.max.MaxHistory forFolder(java.io.File)>(r1);

        r0.<org.junit.experimental.max.MaxCore: org.junit.experimental.max.MaxHistory history> = $r2;

        return;
    }

    private org.junit.runner.Runner buildRunner(org.junit.runner.Description)
    {
        org.junit.experimental.max.MaxCore r0;
        java.lang.String $r1, $r2, $r8, r19;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.RuntimeException $r7;
        org.junit.runner.Request $r9, $r11;
        org.junit.runner.Runner $r10, $r12, $r16;
        org.junit.internal.runners.JUnit38ClassRunner $r13;
        junit.framework.TestSuite $r14;
        java.lang.Class $r15, r18;
        org.junit.runner.Description r17;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r17 := @parameter0: org.junit.runner.Description;

        $r1 = virtualinvoke r17.<org.junit.runner.Description: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("TestSuite with 0 tests");

        if $z0 == 0 goto label1;

        $r16 = staticinvoke <org.junit.runners.Suite: org.junit.runner.Runner emptySuite()>();

        return $r16;

     label1:
        $r2 = virtualinvoke r17.<org.junit.runner.Description: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("malformed JUnit 3 test class: ");

        if $z1 == 0 goto label2;

        $r13 = new org.junit.internal.runners.JUnit38ClassRunner;

        $r14 = new junit.framework.TestSuite;

        $r15 = specialinvoke r0.<org.junit.experimental.max.MaxCore: java.lang.Class getMalformedTestClass(org.junit.runner.Description)>(r17);

        specialinvoke $r14.<junit.framework.TestSuite: void <init>(java.lang.Class)>($r15);

        specialinvoke $r13.<org.junit.internal.runners.JUnit38ClassRunner: void <init>(junit.framework.Test)>($r14);

        return $r13;

     label2:
        r18 = virtualinvoke r17.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r18 == null goto label4;

        r19 = virtualinvoke r17.<org.junit.runner.Description: java.lang.String getMethodName()>();

        if r19 != null goto label3;

        $r11 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request aClass(java.lang.Class)>(r18);

        $r12 = virtualinvoke $r11.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        return $r12;

     label3:
        $r9 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request method(java.lang.Class,java.lang.String)>(r18, r19);

        $r10 = virtualinvoke $r9.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        return $r10;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t build a runner from description [");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private org.junit.runner.Request constructLeafRequest(java.util.List)
    {
        org.junit.experimental.max.MaxCore r0;
        java.util.ArrayList $r2;
        boolean $z0;
        org.junit.experimental.max.MaxCore$1 $r3;
        java.lang.Object $r4;
        org.junit.runner.Description $r5;
        org.junit.runner.Runner $r6;
        java.util.List r7;
        java.util.Iterator r8;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r7 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.junit.runner.Description) $r4;

        $r6 = specialinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Runner buildRunner(org.junit.runner.Description)>($r5);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        $r3 = new org.junit.experimental.max.MaxCore$1;

        specialinvoke $r3.<org.junit.experimental.max.MaxCore$1: void <init>(org.junit.experimental.max.MaxCore,java.util.List)>(r0, $r2);

        return $r3;
    }

    private java.util.List findLeaves(org.junit.runner.Request)
    {
        org.junit.experimental.max.MaxCore r0;
        org.junit.runner.Request r1;
        java.util.ArrayList $r3;
        org.junit.runner.Runner $r4;
        org.junit.runner.Description $r5;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: org.junit.runner.Request;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r1.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        $r5 = virtualinvoke $r4.<org.junit.runner.Runner: org.junit.runner.Description getDescription()>();

        specialinvoke r0.<org.junit.experimental.max.MaxCore: void findLeaves(org.junit.runner.Description,org.junit.runner.Description,java.util.List)>(null, $r5, $r3);

        return $r3;
    }

    private void findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)
    {
        org.junit.experimental.max.MaxCore r0;
        java.util.List r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        org.junit.runner.Description $r5, $r12, r13, r14;
        java.lang.String $r6, $r10;
        java.lang.StringBuilder $r7;
        java.lang.'annotation'.Annotation[] $r11;
        java.util.Iterator r16;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r13 := @parameter0: org.junit.runner.Description;

        r14 := @parameter1: org.junit.runner.Description;

        r1 := @parameter2: java.util.List;

        $r2 = virtualinvoke r14.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r14.<org.junit.runner.Description: java.lang.String toString()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("warning(junit.framework.TestSuite$1)");

        if $z2 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed JUnit 3 test class: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = newarray (java.lang.'annotation'.Annotation)[0];

        $r12 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.String,java.lang.'annotation'.Annotation[])>($r10, $r11);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label4;

     label1:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label4;

     label2:
        $r3 = virtualinvoke r14.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r16 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.junit.runner.Description) $r4;

        specialinvoke r0.<org.junit.experimental.max.MaxCore: void findLeaves(org.junit.runner.Description,org.junit.runner.Description,java.util.List)>(r14, $r5, r1);

        goto label3;

     label4:
        return;
    }

    public static org.junit.experimental.max.MaxCore forFolder(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r1;
        org.junit.experimental.max.MaxCore $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        $r2 = staticinvoke <org.junit.experimental.max.MaxCore: org.junit.experimental.max.MaxCore storedLocally(java.io.File)>($r1);

        return $r2;
    }

    private java.lang.Class getMalformedTestClass(org.junit.runner.Description)
    {
        org.junit.experimental.max.MaxCore r0;
        java.lang.String $r1, $r2;
        java.lang.ClassNotFoundException $r3;
        org.junit.runner.Description r4;
        java.lang.Class r5;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r4 := @parameter0: org.junit.runner.Description;

     label1:
        $r1 = virtualinvoke r4.<org.junit.runner.Description: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("malformed JUnit 3 test class: ", "");

        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static org.junit.experimental.max.MaxCore storedLocally(java.io.File)
    {
        java.io.File r0;
        org.junit.experimental.max.MaxCore $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new org.junit.experimental.max.MaxCore;

        specialinvoke $r1.<org.junit.experimental.max.MaxCore: void <init>(java.io.File)>(r0);

        return $r1;
    }

    public org.junit.runner.Result run(java.lang.Class)
    {
        org.junit.experimental.max.MaxCore r0;
        java.lang.Class r1;
        org.junit.runner.Request $r2;
        org.junit.runner.Result $r3;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request aClass(java.lang.Class)>(r1);

        $r3 = virtualinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Result run(org.junit.runner.Request)>($r2);

        return $r3;
    }

    public org.junit.runner.Result run(org.junit.runner.Request)
    {
        org.junit.experimental.max.MaxCore r0;
        org.junit.runner.Request r1;
        org.junit.runner.JUnitCore $r2;
        org.junit.runner.Result $r3;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: org.junit.runner.Request;

        $r2 = new org.junit.runner.JUnitCore;

        specialinvoke $r2.<org.junit.runner.JUnitCore: void <init>()>();

        $r3 = virtualinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Result run(org.junit.runner.Request,org.junit.runner.JUnitCore)>(r1, $r2);

        return $r3;
    }

    public org.junit.runner.Result run(org.junit.runner.Request, org.junit.runner.JUnitCore)
    {
        org.junit.experimental.max.MaxCore r0;
        org.junit.runner.Request r1, $r5;
        org.junit.runner.JUnitCore r2;
        org.junit.experimental.max.MaxHistory $r3;
        org.junit.runner.notification.RunListener $r4;
        org.junit.runner.Runner $r6;
        org.junit.runner.Result $r7;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: org.junit.runner.Request;

        r2 := @parameter1: org.junit.runner.JUnitCore;

        $r3 = r0.<org.junit.experimental.max.MaxCore: org.junit.experimental.max.MaxHistory history>;

        $r4 = virtualinvoke $r3.<org.junit.experimental.max.MaxHistory: org.junit.runner.notification.RunListener listener()>();

        virtualinvoke r2.<org.junit.runner.JUnitCore: void addListener(org.junit.runner.notification.RunListener)>($r4);

        $r5 = virtualinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Request sortRequest(org.junit.runner.Request)>(r1);

        $r6 = virtualinvoke $r5.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        $r7 = virtualinvoke r2.<org.junit.runner.JUnitCore: org.junit.runner.Result run(org.junit.runner.Runner)>($r6);

        return $r7;
    }

    public org.junit.runner.Request sortRequest(org.junit.runner.Request)
    {
        org.junit.experimental.max.MaxCore r0;
        boolean $z0;
        org.junit.experimental.max.MaxHistory $r1;
        java.util.Comparator $r2;
        org.junit.runner.Request $r3, r4;
        java.util.List r5;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r4 := @parameter0: org.junit.runner.Request;

        $z0 = r4 instanceof org.junit.internal.requests.SortingRequest;

        if $z0 == 0 goto label1;

        return r4;

     label1:
        r5 = specialinvoke r0.<org.junit.experimental.max.MaxCore: java.util.List findLeaves(org.junit.runner.Request)>(r4);

        $r1 = r0.<org.junit.experimental.max.MaxCore: org.junit.experimental.max.MaxHistory history>;

        $r2 = virtualinvoke $r1.<org.junit.experimental.max.MaxHistory: java.util.Comparator testComparator()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r5, $r2);

        $r3 = specialinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Request constructLeafRequest(java.util.List)>(r5);

        return $r3;
    }

    public java.util.List sortedLeavesForTest(org.junit.runner.Request)
    {
        org.junit.experimental.max.MaxCore r0;
        org.junit.runner.Request r1, $r2;
        java.util.List $r3;

        r0 := @this: org.junit.experimental.max.MaxCore;

        r1 := @parameter0: org.junit.runner.Request;

        $r2 = virtualinvoke r0.<org.junit.experimental.max.MaxCore: org.junit.runner.Request sortRequest(org.junit.runner.Request)>(r1);

        $r3 = specialinvoke r0.<org.junit.experimental.max.MaxCore: java.util.List findLeaves(org.junit.runner.Request)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.junit.experimental.max.MaxCore: java.lang.String MALFORMED_JUNIT_3_TEST_CLASS_PREFIX> = "malformed JUnit 3 test class: ";

        return;
    }
}
