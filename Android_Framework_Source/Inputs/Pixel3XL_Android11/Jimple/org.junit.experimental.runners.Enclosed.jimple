public class org.junit.experimental.runners.Enclosed extends org.junit.runners.Suite
{

    public void <init>(java.lang.Class, org.junit.runners.model.RunnerBuilder) throws java.lang.Throwable
    {
        org.junit.experimental.runners.Enclosed r0;
        java.lang.Class r1;
        org.junit.runners.model.RunnerBuilder r2;
        java.lang.Class[] $r3, $r4;

        r0 := @this: org.junit.experimental.runners.Enclosed;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.junit.runners.model.RunnerBuilder;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getClasses()>();

        $r4 = staticinvoke <org.junit.experimental.runners.Enclosed: java.lang.Class[] filterAbstractClasses(java.lang.Class[])>($r3);

        specialinvoke r0.<org.junit.runners.Suite: void <init>(org.junit.runners.model.RunnerBuilder,java.lang.Class,java.lang.Class[])>(r2, r1, $r4);

        return;
    }

    private static java.lang.Class[] filterAbstractClasses(java.lang.Class[])
    {
        java.lang.Class[] r0, $r4, $r6;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Class r2;
        java.util.ArrayList $r3;
        java.lang.Object[] $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class[];

        $r3 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r2 = r0[i4];

        $i3 = virtualinvoke r2.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i3);

        if $z0 != 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (java.lang.Class)[$i2];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.Class[]) $r5;

        return $r6;
    }
}
