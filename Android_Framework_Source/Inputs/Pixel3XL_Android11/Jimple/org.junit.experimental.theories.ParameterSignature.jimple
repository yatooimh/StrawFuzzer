public class org.junit.experimental.theories.ParameterSignature extends java.lang.Object
{
    private static final java.util.Map CONVERTABLE_TYPES_MAP;
    private final java.lang.'annotation'.Annotation[] annotations;
    private final java.lang.Class type;

    static void <clinit>()
    {
        java.util.Map $r0;

        $r0 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.Map buildConvertableTypesMap()>();

        <org.junit.experimental.theories.ParameterSignature: java.util.Map CONVERTABLE_TYPES_MAP> = $r0;

        return;
    }

    private void <init>(java.lang.Class, java.lang.'annotation'.Annotation[])
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] r2;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.'annotation'.Annotation[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type> = r1;

        r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations> = r2;

        return;
    }

    private static java.util.Map buildConvertableTypesMap()
    {
        java.util.HashMap $r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.Map $r10;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r2, class "Ljava/lang/Boolean;");

        $r3 = <java.lang.Byte: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r3, class "Ljava/lang/Byte;");

        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r4, class "Ljava/lang/Short;");

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r5, class "Ljava/lang/Character;");

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r6, class "Ljava/lang/Integer;");

        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r7, class "Ljava/lang/Long;");

        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r8, class "Ljava/lang/Float;");

        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        staticinvoke <org.junit.experimental.theories.ParameterSignature: void putSymmetrically(java.util.Map,java.lang.Object,java.lang.Object)>($r1, $r9, class "Ljava/lang/Double;");

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r10;
    }

    private java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[], java.lang.Class, int)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.'annotation'.Annotation[] r1, $r4;
        java.lang.Class r2, $r3;
        int i0, i1, $i2, i3;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.lang.'annotation'.Annotation $r6, $r8, r9, r10;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.'annotation'.Annotation[];

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        i1 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        r9 = r1[i3];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r9);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r9);

        $r8 = (java.lang.'annotation'.Annotation) $r7;

        return $r8;

     label3:
        $r3 = interfaceinvoke r9.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $i2 = i0 - 1;

        r10 = specialinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class,int)>($r4, r2, $i2);

        if r10 == null goto label4;

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r10);

        $r6 = (java.lang.'annotation'.Annotation) $r5;

        return $r6;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return null;
    }

    private boolean isAssignableViaTypeConversion(java.lang.Class, java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1, r2, $r6;
        java.util.Map $r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = <org.junit.experimental.theories.ParameterSignature: java.util.Map CONVERTABLE_TYPES_MAP>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r4 = <org.junit.experimental.theories.ParameterSignature: java.util.Map CONVERTABLE_TYPES_MAP>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (java.lang.Class) $r5;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        return $z1;

     label1:
        return 0;
    }

    private static void putSymmetrically(java.util.Map, java.lang.Object, java.lang.Object)
    {
        java.util.Map r0;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public static java.util.ArrayList signatures(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] $r1;
        java.lang.'annotation'.Annotation[][] $r2;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.Class[],java.lang.'annotation'.Annotation[][])>($r1, $r2);

        return $r3;
    }

    private static java.util.ArrayList signatures(java.lang.Class[], java.lang.'annotation'.Annotation[][])
    {
        java.lang.Class[] r0;
        java.lang.'annotation'.Annotation[][] r1;
        java.util.ArrayList $r3;
        int $i0, i1;
        org.junit.experimental.theories.ParameterSignature $r4;
        java.lang.'annotation'.Annotation[] $r5;
        java.lang.Class $r6;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.'annotation'.Annotation[][];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r4 = new org.junit.experimental.theories.ParameterSignature;

        $r6 = r0[i1];

        $r5 = r1[i1];

        specialinvoke $r4.<org.junit.experimental.theories.ParameterSignature: void <init>(java.lang.Class,java.lang.'annotation'.Annotation[])>($r6, $r5);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static java.util.List signatures(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Class[] $r1;
        java.lang.'annotation'.Annotation[][] $r2;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.Class[],java.lang.'annotation'.Annotation[][])>($r1, $r2);

        return $r3;
    }

    public boolean canAcceptType(java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1, $r2, $r3;
        boolean $z0, $z1, z2;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z1 = specialinvoke r0.<org.junit.experimental.theories.ParameterSignature: boolean isAssignableViaTypeConversion(java.lang.Class,java.lang.Class)>($r3, r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean canAcceptValue(java.lang.Object)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, z1;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

        $r3 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label3;

     label1:
        z1 = 0;

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        z1 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>($r2);

     label3:
        return z1;
    }

    public boolean canPotentiallyAcceptType(java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1, $r2, $r3;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        $z1 = specialinvoke r0.<org.junit.experimental.theories.ParameterSignature: boolean isAssignableViaTypeConversion(java.lang.Class,java.lang.Class)>(r1, $r3);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>(r1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] $r2;
        java.lang.'annotation'.Annotation $r3;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations>;

        $r3 = specialinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.'annotation'.Annotation[],java.lang.Class,int)>($r2, r1, 3);

        return $r3;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1;
        java.util.Iterator r2;
        java.lang.'annotation'.Annotation r3, $r7;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r4 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.util.List getAnnotations()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.'annotation'.Annotation) $r5;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r3);

        $r7 = (java.lang.'annotation'.Annotation) $r6;

        return $r7;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List getAnnotations()
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.'annotation'.Annotation[] $r1;
        java.util.List $r2;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation[] annotations>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Class getType()
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class $r1;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.ParameterSignature: java.lang.Class type>;

        return $r1;
    }

    public boolean hasAnnotation(java.lang.Class)
    {
        org.junit.experimental.theories.ParameterSignature r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation $r2;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.ParameterSignature;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
