class org.junit.experimental.theories.Theories$TheoryAnchor$1 extends org.junit.runners.BlockJUnit4ClassRunner
{
    final org.junit.experimental.theories.Theories$TheoryAnchor this$0;
    final org.junit.experimental.theories.internal.Assignments val$complete;

    void <init>(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments) throws org.junit.runners.model.InitializationError
    {
        org.junit.experimental.theories.Theories$TheoryAnchor$1 r0;
        org.junit.experimental.theories.Theories$TheoryAnchor r1;
        java.lang.Class r2;
        org.junit.experimental.theories.internal.Assignments r3;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor$1;

        r1 := @parameter0: org.junit.experimental.theories.Theories$TheoryAnchor;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.junit.experimental.theories.internal.Assignments;

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.Theories$TheoryAnchor this$0> = r1;

        r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.internal.Assignments val$complete> = r3;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void <init>(java.lang.Class)>(r2);

        return;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.experimental.theories.Theories$TheoryAnchor$1 r0;
        java.util.List r1;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor$1;

        r1 := @parameter0: java.util.List;

        return;
    }

    public java.lang.Object createTest() throws java.lang.Exception
    {
        org.junit.experimental.theories.Theories$TheoryAnchor$1 r0;
        java.lang.Object[] r1;
        org.junit.experimental.theories.internal.Assignments $r2;
        org.junit.experimental.theories.Theories$TheoryAnchor $r3;
        boolean $z0;
        org.junit.runners.model.TestClass $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Object $r6;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor$1;

        $r2 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.internal.Assignments val$complete>;

        r1 = virtualinvoke $r2.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getConstructorArguments()>();

        $r3 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.Theories$TheoryAnchor this$0>;

        $z0 = staticinvoke <org.junit.experimental.theories.Theories$TheoryAnchor: boolean access$000(org.junit.experimental.theories.Theories$TheoryAnchor)>($r3);

        if $z0 != 0 goto label1;

        staticinvoke <org.junit.Assume: void assumeNotNull(java.lang.Object[])>(r1);

     label1:
        $r4 = virtualinvoke r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

        return $r6;
    }

    public org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.experimental.theories.Theories$TheoryAnchor$1 r0;
        org.junit.runners.model.FrameworkMethod r1;
        org.junit.experimental.theories.Theories$TheoryAnchor$1$1 $r2;
        org.junit.runners.model.Statement $r3;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor$1;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = new org.junit.experimental.theories.Theories$TheoryAnchor$1$1;

        $r3 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)>(r1);

        specialinvoke $r2.<org.junit.experimental.theories.Theories$TheoryAnchor$1$1: void <init>(org.junit.experimental.theories.Theories$TheoryAnchor$1,org.junit.runners.model.Statement)>(r0, $r3);

        return $r2;
    }

    protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)
    {
        org.junit.experimental.theories.Theories$TheoryAnchor$1 r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.experimental.theories.internal.Assignments $r3;
        org.junit.experimental.theories.Theories$TheoryAnchor $r4;
        org.junit.runners.model.Statement $r5;

        r0 := @this: org.junit.experimental.theories.Theories$TheoryAnchor$1;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.Theories$TheoryAnchor this$0>;

        $r3 = r0.<org.junit.experimental.theories.Theories$TheoryAnchor$1: org.junit.experimental.theories.internal.Assignments val$complete>;

        $r5 = staticinvoke <org.junit.experimental.theories.Theories$TheoryAnchor: org.junit.runners.model.Statement access$100(org.junit.experimental.theories.Theories$TheoryAnchor,org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.Assignments,java.lang.Object)>($r4, r1, $r3, r2);

        return $r5;
    }
}
