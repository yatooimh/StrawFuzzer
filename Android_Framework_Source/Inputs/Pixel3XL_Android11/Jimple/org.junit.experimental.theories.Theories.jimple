public class org.junit.experimental.theories.Theories extends org.junit.runners.BlockJUnit4ClassRunner
{

    public void <init>(java.lang.Class) throws org.junit.runners.model.InitializationError
    {
        org.junit.experimental.theories.Theories r0;
        java.lang.Class r1;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void <init>(java.lang.Class)>(r1);

        return;
    }

    private void validateDataPointFields(java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r1;
        java.lang.reflect.Field[] r2;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Field r3;
        org.junit.runners.model.TestClass $r4;
        java.lang.Class $r5;
        java.lang.'annotation'.Annotation $r6, $r21;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r14;
        java.lang.String $r9, $r13, $r16, $r20;
        java.lang.Error $r12, $r19;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.util.List;

        $r4 = virtualinvoke r0.<org.junit.experimental.theories.Theories: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r3 = r2[i3];

        $r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoint;");

        if $r6 != null goto label2;

        $r21 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoints;");

        if $r21 != null goto label2;

        goto label4;

     label2:
        $i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataPoint field ");

        $r16 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be static");

        $r19 = new java.lang.Error;

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.Error: void <init>(java.lang.String)>($r20);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r19);

     label3:
        $i2 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataPoint field ");

        $r9 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be public");

        $r12 = new java.lang.Error;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>($r13);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return;
    }

    private void validateDataPointMethods(java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r1;
        java.lang.reflect.Method[] r2;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Method r3;
        org.junit.runners.model.TestClass $r4;
        java.lang.Class $r5;
        java.lang.'annotation'.Annotation $r6, $r21;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r14;
        java.lang.String $r9, $r13, $r16, $r20;
        java.lang.Error $r12, $r19;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.util.List;

        $r4 = virtualinvoke r0.<org.junit.experimental.theories.Theories: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r3 = r2[i3];

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoint;");

        if $r6 != null goto label2;

        $r21 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoints;");

        if $r21 != null goto label2;

        goto label4;

     label2:
        $i1 = virtualinvoke r3.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataPoint method ");

        $r16 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be static");

        $r19 = new java.lang.Error;

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.Error: void <init>(java.lang.String)>($r20);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r19);

     label3:
        $i2 = virtualinvoke r3.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataPoint method ");

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be public");

        $r12 = new java.lang.Error;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>($r13);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return;
    }

    private void validateParameterSupplier(java.lang.Class, java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.lang.Class r1, $r4;
        java.util.List r2;
        int $i0, $i1;
        java.lang.reflect.Constructor $r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r12;
        java.lang.String $r7, $r11, $r14, $r18;
        java.lang.Error $r10, $r17;
        java.lang.reflect.Constructor[] r19;
        java.lang.Class[] r21;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        r19 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof r19;

        if $i0 == 1 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParameterSupplier ");

        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have only one constructor (either empty or taking only a TestClass)");

        $r17 = new java.lang.Error;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.String)>($r18);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label2;

     label1:
        $r3 = r19[0];

        r21 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof r21;

        if $i1 == 0 goto label2;

        $r4 = r21[0];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/runners/model/TestClass;");

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ParameterSupplier ");

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" constructor must take either nothing or a single TestClass instance");

        $r10 = new java.lang.Error;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>($r11);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        return;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r1;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void collectInitializationErrors(java.util.List)>(r1);

        specialinvoke r0.<org.junit.experimental.theories.Theories: void validateDataPointFields(java.util.List)>(r1);

        specialinvoke r0.<org.junit.experimental.theories.Theories: void validateDataPointMethods(java.util.List)>(r1);

        return;
    }

    protected java.util.List computeTestMethods()
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r2, $r4;
        java.util.ArrayList $r3;
        org.junit.runners.model.TestClass $r5;

        r0 := @this: org.junit.experimental.theories.Theories;

        $r3 = new java.util.ArrayList;

        $r4 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List computeTestMethods()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<org.junit.experimental.theories.Theories: org.junit.runners.model.TestClass getTestClass()>();

        r2 = virtualinvoke $r5.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/experimental/theories/Theory;");

        interfaceinvoke $r3.<java.util.List: boolean removeAll(java.util.Collection)>(r2);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r2);

        return $r3;
    }

    public org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.experimental.theories.Theories r0;
        org.junit.runners.model.FrameworkMethod r1;
        org.junit.experimental.theories.Theories$TheoryAnchor $r2;
        org.junit.runners.model.TestClass $r3;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = new org.junit.experimental.theories.Theories$TheoryAnchor;

        $r3 = virtualinvoke r0.<org.junit.experimental.theories.Theories: org.junit.runners.model.TestClass getTestClass()>();

        specialinvoke $r2.<org.junit.experimental.theories.Theories$TheoryAnchor: void <init>(org.junit.runners.model.FrameworkMethod,org.junit.runners.model.TestClass)>(r1, $r3);

        return $r2;
    }

    protected void validateConstructor(java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r1;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.experimental.theories.Theories: void validateOnlyOneConstructor(java.util.List)>(r1);

        return;
    }

    protected void validateTestMethods(java.util.List)
    {
        org.junit.experimental.theories.Theories r0;
        java.util.List r1, $r4;
        java.util.Iterator r2, r3;
        boolean $z0, $z1;
        java.lang.Object $r5, $r9;
        java.lang.'annotation'.Annotation $r6, $r11;
        java.lang.reflect.Method $r7;
        java.util.ArrayList $r8;
        org.junit.experimental.theories.ParameterSignature $r10;
        java.lang.Class $r12;
        org.junit.runners.model.FrameworkMethod r13;
        org.junit.experimental.theories.ParametersSuppliedBy r14;

        r0 := @this: org.junit.experimental.theories.Theories;

        r1 := @parameter0: java.util.List;

        $r4 = virtualinvoke r0.<org.junit.experimental.theories.Theories: java.util.List computeTestMethods()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.junit.runners.model.FrameworkMethod) $r5;

        $r6 = virtualinvoke r13.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/Theory;");

        if $r6 == null goto label2;

        virtualinvoke r13.<org.junit.runners.model.FrameworkMethod: void validatePublicVoid(boolean,java.util.List)>(0, r1);

        virtualinvoke r13.<org.junit.runners.model.FrameworkMethod: void validateNoTypeParametersOnArgs(java.util.List)>(r1);

        goto label3;

     label2:
        virtualinvoke r13.<org.junit.runners.model.FrameworkMethod: void validatePublicVoidNoArg(boolean,java.util.List)>(0, r1);

     label3:
        $r7 = virtualinvoke r13.<org.junit.runners.model.FrameworkMethod: java.lang.reflect.Method getMethod()>();

        $r8 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.reflect.Method)>($r7);

        r3 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.junit.experimental.theories.ParameterSignature) $r9;

        $r11 = virtualinvoke $r10.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/ParametersSuppliedBy;");

        r14 = (org.junit.experimental.theories.ParametersSuppliedBy) $r11;

        if r14 == null goto label5;

        $r12 = interfaceinvoke r14.<org.junit.experimental.theories.ParametersSuppliedBy: java.lang.Class value()>();

        specialinvoke r0.<org.junit.experimental.theories.Theories: void validateParameterSupplier(java.lang.Class,java.util.List)>($r12, r1);

     label5:
        goto label4;

     label6:
        goto label1;

     label7:
        return;
    }
}
