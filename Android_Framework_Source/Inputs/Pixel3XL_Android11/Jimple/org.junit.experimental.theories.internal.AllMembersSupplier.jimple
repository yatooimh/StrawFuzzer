public class org.junit.experimental.theories.internal.AllMembersSupplier extends org.junit.experimental.theories.ParameterSupplier
{
    private final org.junit.runners.model.TestClass clazz;

    public void <init>(org.junit.runners.model.TestClass)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.runners.model.TestClass r1;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.runners.model.TestClass;

        specialinvoke r0.<org.junit.experimental.theories.ParameterSupplier: void <init>()>();

        r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass clazz> = r1;

        return;
    }

    static boolean access$000(java.lang.Class[], java.lang.Object)
    {
        java.lang.Class[] r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.junit.experimental.theories.internal.AllMembersSupplier: boolean isAssignableToAnyOf(java.lang.Class[],java.lang.Object)>(r0, r1);

        return $z0;
    }

    private void addArrayValues(org.junit.experimental.theories.ParameterSignature, java.lang.String, java.util.List, java.lang.Object)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.lang.String r2, $r12;
        java.util.List r3;
        java.lang.Object r4, r5;
        int $i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r7;
        org.junit.experimental.theories.PotentialAssignment $r13;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        if i1 >= $i0 goto label3;

        r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r4, i1);

        $z0 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptValue(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r12, r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void addDataPointsValues(java.lang.Class, org.junit.experimental.theories.ParameterSignature, java.lang.String, java.util.List, java.lang.Object)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        java.lang.Class r1, $r6;
        org.junit.experimental.theories.ParameterSignature r2;
        java.lang.String r3;
        java.util.List r4;
        java.lang.Object r5;
        boolean $z0, $z1;
        java.lang.Iterable $r7;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.junit.experimental.theories.ParameterSignature;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.lang.Object;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addArrayValues(org.junit.experimental.theories.ParameterSignature,java.lang.String,java.util.List,java.lang.Object)>(r2, r3, r4, r5);

        goto label2;

     label1:
        $r6 = class "Ljava/lang/Iterable;";

        $z1 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

        $r7 = (java.lang.Iterable) r5;

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addIterableValues(org.junit.experimental.theories.ParameterSignature,java.lang.String,java.util.List,java.lang.Iterable)>(r2, r3, r4, $r7);

     label2:
        return;
    }

    private void addIterableValues(org.junit.experimental.theories.ParameterSignature, java.lang.String, java.util.List, java.lang.Iterable)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.lang.String r2, $r11;
        java.util.List r3;
        java.util.Iterator r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6;
        org.junit.experimental.theories.PotentialAssignment $r12;
        java.lang.Iterable r13;
        int i0;
        java.lang.Object r14;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r13 := @parameter3: java.lang.Iterable;

        r4 = interfaceinvoke r13.<java.lang.Iterable: java.util.Iterator iterator()>();

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptValue(java.lang.Object)>(r14);

        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r11, r14);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    private void addMultiPointFields(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.reflect.Field r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r5 = virtualinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.util.Collection getDataPointsFields(org.junit.experimental.theories.ParameterSignature)>(r1);

        r3 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Field) $r6;

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.lang.Object getStaticFieldValue(java.lang.reflect.Field)>(r4);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addDataPointsValues(java.lang.Class,org.junit.experimental.theories.ParameterSignature,java.lang.String,java.util.List,java.lang.Object)>($r7, r1, $r8, r2, $r9);

        goto label1;

     label2:
        return;
    }

    private void addMultiPointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List) throws java.lang.Throwable
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        java.util.Iterator r1;
        org.junit.runners.model.FrameworkMethod r2;
        java.lang.Class r3, $r6, $r10;
        java.util.Collection $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5, $r9;
        java.lang.String $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r11;
        java.lang.'annotation'.Annotation $r12;
        java.lang.Class[] $r13;
        org.junit.experimental.theories.ParameterSignature r14;
        java.util.List r15;
        org.junit.experimental.theories.DataPoints r17;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r14 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r15 := @parameter1: java.util.List;

        $r4 = virtualinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.util.Collection getDataPointsMethods(org.junit.experimental.theories.ParameterSignature)>(r14);

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.junit.runners.model.FrameworkMethod) $r5;

        r3 = virtualinvoke r2.<org.junit.runners.model.FrameworkMethod: java.lang.Class getReturnType()>();

        $z1 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $z3 = virtualinvoke r14.<org.junit.experimental.theories.ParameterSignature: boolean canPotentiallyAcceptType(java.lang.Class)>($r10);

        if $z3 != 0 goto label3;

     label2:
        $r6 = class "Ljava/lang/Iterable;";

        $z2 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z2 == 0 goto label7;

     label3:
        $r7 = virtualinvoke r2.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke r2.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>(null, $r8);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addDataPointsValues(java.lang.Class,org.junit.experimental.theories.ParameterSignature,java.lang.String,java.util.List,java.lang.Object)>(r3, r14, $r7, r15, $r9);

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        $r12 = virtualinvoke r2.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoints;");

        r17 = (org.junit.experimental.theories.DataPoints) $r12;

        if r17 == null goto label6;

        $r13 = interfaceinvoke r17.<org.junit.experimental.theories.DataPoints: java.lang.Class[] ignoredExceptions()>();

        $z4 = staticinvoke <org.junit.experimental.theories.internal.AllMembersSupplier: boolean isAssignableToAnyOf(java.lang.Class[],java.lang.Object)>($r13, $r11);

        if $z4 == 0 goto label6;

        return;

     label6:
        throw $r11;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void addSinglePointFields(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.reflect.Field r4;
        java.lang.Object r5, $r7;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.String $r8;
        org.junit.experimental.theories.PotentialAssignment $r9;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r6 = virtualinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.util.Collection getSingleDataPointFields(org.junit.experimental.theories.ParameterSignature)>(r1);

        r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Field) $r7;

        r5 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.lang.Object getStaticFieldValue(java.lang.reflect.Field)>(r4);

        $z1 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptValue(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r8, r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2;
        java.util.Iterator r3;
        org.junit.runners.model.FrameworkMethod r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.Class $r7;
        org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue $r8;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r5 = virtualinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.util.Collection getSingleDataPointMethods(org.junit.experimental.theories.ParameterSignature)>(r1);

        r3 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runners.model.FrameworkMethod) $r6;

        $r7 = virtualinvoke r4.<org.junit.runners.model.FrameworkMethod: java.lang.Class getType()>();

        $z1 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>($r7);

        if $z1 == 0 goto label2;

        $r8 = new org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue;

        specialinvoke $r8.<org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue: void <init>(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.AllMembersSupplier$1)>(r4, null);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        return;
    }

    private java.lang.Object getStaticFieldValue(java.lang.reflect.Field)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        java.lang.Throwable $r1, $r3;
        java.lang.RuntimeException $r2, $r4;
        java.lang.reflect.Field r5;
        java.lang.Object r6;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r5 := @parameter0: java.lang.reflect.Field;

     label1:
        r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        return r6;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected: getFields returned an inaccessible field");

        throw $r2;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected: field from getClass doesn\'t exist on object");

        throw $r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    private static boolean isAssignableToAnyOf(java.lang.Class[], java.lang.Object)
    {
        java.lang.Class[] r0;
        java.lang.Object r1;
        int i0, i1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0[i1];

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    protected java.util.Collection getDataPointsFields(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.runners.model.TestClass $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.junit.runners.model.FrameworkField $r4;
        java.lang.reflect.Field $r5;
        org.junit.experimental.theories.ParameterSignature r6;
        java.util.List r7;
        java.util.Iterator r9;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r6 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass clazz>;

        r7 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoints;");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r9 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.junit.runners.model.FrameworkField) $r3;

        $r5 = virtualinvoke $r4.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r2;
    }

    protected java.util.Collection getDataPointsMethods(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r2 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass clazz>;

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoints;");

        return $r3;
    }

    protected java.util.Collection getSingleDataPointFields(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.runners.model.TestClass $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.junit.runners.model.FrameworkField $r4;
        java.lang.reflect.Field $r5;
        org.junit.experimental.theories.ParameterSignature r6;
        java.util.List r7;
        java.util.Iterator r9;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r6 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r1 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass clazz>;

        r7 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoint;");

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r9 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.junit.runners.model.FrameworkField) $r3;

        $r5 = virtualinvoke $r4.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r2;
    }

    protected java.util.Collection getSingleDataPointMethods(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r2 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass clazz>;

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/experimental/theories/DataPoint;");

        return $r3;
    }

    public java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature) throws java.lang.Throwable
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.ArrayList $r3;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addSinglePointFields(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addMultiPointFields(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addSinglePointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        return $r3;
    }
}
