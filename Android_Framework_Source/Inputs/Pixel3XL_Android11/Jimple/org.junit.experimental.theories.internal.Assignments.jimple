public class org.junit.experimental.theories.internal.Assignments extends java.lang.Object
{
    private final java.util.List assigned;
    private final org.junit.runners.model.TestClass clazz;
    private final java.util.List unassigned;

    private void <init>(java.util.List, java.util.List, org.junit.runners.model.TestClass)
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.util.List r1, r2;
        org.junit.runners.model.TestClass r3;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.junit.runners.model.TestClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.experimental.theories.internal.Assignments: java.util.List unassigned> = r2;

        r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned> = r1;

        r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass clazz> = r3;

        return;
    }

    public static org.junit.experimental.theories.internal.Assignments allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)
    {
        java.lang.reflect.Method r0;
        org.junit.runners.model.TestClass r1;
        java.util.List r2;
        java.lang.reflect.Constructor $r3;
        java.util.ArrayList $r4, $r6;
        org.junit.experimental.theories.internal.Assignments $r5;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: org.junit.runners.model.TestClass;

        $r3 = virtualinvoke r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        r2 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.List signatures(java.lang.reflect.Constructor)>($r3);

        $r4 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.ArrayList signatures(java.lang.reflect.Method)>(r0);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = new org.junit.experimental.theories.internal.Assignments;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        specialinvoke $r5.<org.junit.experimental.theories.internal.Assignments: void <init>(java.util.List,java.util.List,org.junit.runners.model.TestClass)>($r6, r2, r1);

        return $r5;
    }

    private org.junit.experimental.theories.ParameterSupplier buildParameterSupplierFromClass(java.lang.Class) throws java.lang.Exception
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.lang.Class r1, $r7;
        java.lang.reflect.Constructor[] r2;
        int i0, $i1, i2;
        java.lang.reflect.Constructor r3;
        java.lang.Class[] r4;
        java.lang.Object $r5, $r10;
        org.junit.experimental.theories.ParameterSupplier $r6, $r11;
        boolean $z0;
        java.lang.Object[] $r8;
        org.junit.runners.model.TestClass $r9;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof r4;

        if $i1 != 1 goto label2;

        $r7 = r4[0];

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/runners/model/TestClass;");

        if $z0 == 0 goto label2;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass clazz>;

        $r8[0] = $r9;

        $r10 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $r11 = (org.junit.experimental.theories.ParameterSupplier) $r10;

        return $r11;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (org.junit.experimental.theories.ParameterSupplier) $r5;

        return $r6;
    }

    private java.util.List generateAssignmentsFromTypeAlone(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.lang.Class r2, $r5;
        boolean $z0, $z1, $z2;
        org.junit.experimental.theories.internal.BooleanSupplier $r3;
        java.util.List $r4, $r6, $r8;
        org.junit.experimental.theories.internal.EnumSupplier $r7;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: java.lang.Class getType()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label1;

        $r7 = new org.junit.experimental.theories.internal.EnumSupplier;

        specialinvoke $r7.<org.junit.experimental.theories.internal.EnumSupplier: void <init>(java.lang.Class)>(r2);

        $r8 = virtualinvoke $r7.<org.junit.experimental.theories.internal.EnumSupplier: java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature)>(r1);

        return $r8;

     label1:
        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Boolean;");

        if $z1 != 0 goto label3;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r6;

     label3:
        $r3 = new org.junit.experimental.theories.internal.BooleanSupplier;

        specialinvoke $r3.<org.junit.experimental.theories.internal.BooleanSupplier: void <init>()>();

        $r4 = virtualinvoke $r3.<org.junit.experimental.theories.internal.BooleanSupplier: java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature)>(r1);

        return $r4;
    }

    private int getConstructorParameterCount()
    {
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.reflect.Constructor $r2;
        java.util.List $r3;
        int $i0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass clazz>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = staticinvoke <org.junit.experimental.theories.ParameterSignature: java.util.List signatures(java.lang.reflect.Constructor)>($r2);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        return $i0;
    }

    private org.junit.experimental.theories.ParameterSupplier getSupplier(org.junit.experimental.theories.ParameterSignature) throws java.lang.Exception
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.lang.'annotation'.Annotation $r1;
        org.junit.experimental.theories.internal.AllMembersSupplier $r2;
        org.junit.runners.model.TestClass $r3;
        java.lang.Class $r4;
        org.junit.experimental.theories.ParameterSupplier $r5;
        org.junit.experimental.theories.ParameterSignature r6;
        org.junit.experimental.theories.ParametersSuppliedBy r7;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r6 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r1 = virtualinvoke r6.<org.junit.experimental.theories.ParameterSignature: java.lang.'annotation'.Annotation findDeepAnnotation(java.lang.Class)>(class "Lorg/junit/experimental/theories/ParametersSuppliedBy;");

        r7 = (org.junit.experimental.theories.ParametersSuppliedBy) $r1;

        if r7 == null goto label1;

        $r4 = interfaceinvoke r7.<org.junit.experimental.theories.ParametersSuppliedBy: java.lang.Class value()>();

        $r5 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSupplier buildParameterSupplierFromClass(java.lang.Class)>($r4);

        return $r5;

     label1:
        $r2 = new org.junit.experimental.theories.internal.AllMembersSupplier;

        $r3 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass clazz>;

        specialinvoke $r2.<org.junit.experimental.theories.internal.AllMembersSupplier: void <init>(org.junit.runners.model.TestClass)>($r3);

        return $r2;
    }

    public org.junit.experimental.theories.internal.Assignments assignNext(org.junit.experimental.theories.PotentialAssignment)
    {
        org.junit.experimental.theories.internal.Assignments r0, $r4;
        java.util.ArrayList $r2;
        java.util.List $r3, $r5, r8;
        int $i0;
        org.junit.runners.model.TestClass $r6;
        org.junit.experimental.theories.PotentialAssignment r7;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r7 := @parameter0: org.junit.experimental.theories.PotentialAssignment;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r7);

        r8 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List unassigned>;

        $r4 = new org.junit.experimental.theories.internal.Assignments;

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        $r5 = interfaceinvoke r8.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        $r6 = r0.<org.junit.experimental.theories.internal.Assignments: org.junit.runners.model.TestClass clazz>;

        specialinvoke $r4.<org.junit.experimental.theories.internal.Assignments: void <init>(java.util.List,java.util.List,org.junit.runners.model.TestClass)>($r2, $r5, $r6);

        return $r4;
    }

    public java.lang.Object[] getActualValues(int, int) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        org.junit.experimental.theories.internal.Assignments r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object[] r1;
        java.util.List $r2;
        java.lang.Object $r3, $r5;
        org.junit.experimental.theories.PotentialAssignment $r4;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - i0;

        r1 = newarray (java.lang.Object)[$i2];

        i4 = i0;

     label1:
        if i4 >= i1 goto label2;

        $i3 = i4 - i0;

        $r2 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (org.junit.experimental.theories.PotentialAssignment) $r3;

        $r5 = virtualinvoke $r4.<org.junit.experimental.theories.PotentialAssignment: java.lang.Object getValue()>();

        r1[$i3] = $r5;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object[] getAllArguments() throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.util.List $r1;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int)>(0, $i0);

        return $r2;
    }

    public java.lang.Object[] getArgumentStrings(boolean) throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        org.junit.experimental.theories.internal.Assignments r0;
        boolean z0;
        java.lang.Object[] r1;
        java.util.List $r2, $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        org.junit.experimental.theories.PotentialAssignment $r5;
        java.lang.String $r6;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (org.junit.experimental.theories.PotentialAssignment) $r4;

        $r6 = virtualinvoke $r5.<org.junit.experimental.theories.PotentialAssignment: java.lang.String getDescription()>();

        r1[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.lang.Object[] getConstructorArguments() throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0;
        java.lang.Object[] $r1;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $i0 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: int getConstructorParameterCount()>();

        $r1 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int)>(0, $i0);

        return $r1;
    }

    public java.lang.Object[] getMethodArguments() throws org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
    {
        org.junit.experimental.theories.internal.Assignments r0;
        int $i0, $i1;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $i0 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: int getConstructorParameterCount()>();

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List assigned>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int)>($i0, $i1);

        return $r2;
    }

    public boolean isComplete()
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.util.List $r1;
        int $i0;
        boolean z0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List unassigned>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public org.junit.experimental.theories.ParameterSignature nextUnassigned()
    {
        org.junit.experimental.theories.internal.Assignments r0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.junit.experimental.theories.ParameterSignature $r3;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        $r1 = r0.<org.junit.experimental.theories.internal.Assignments: java.util.List unassigned>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.junit.experimental.theories.ParameterSignature) $r2;

        return $r3;
    }

    public java.util.List potentialsForNextUnassigned() throws java.lang.Throwable
    {
        org.junit.experimental.theories.internal.Assignments r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2, r4;
        org.junit.experimental.theories.ParameterSupplier $r3;
        int $i0;

        r0 := @this: org.junit.experimental.theories.internal.Assignments;

        r1 = virtualinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSignature nextUnassigned()>();

        $r3 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: org.junit.experimental.theories.ParameterSupplier getSupplier(org.junit.experimental.theories.ParameterSignature)>(r1);

        r2 = virtualinvoke $r3.<org.junit.experimental.theories.ParameterSupplier: java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature)>(r1);

        r4 = r2;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        r4 = specialinvoke r0.<org.junit.experimental.theories.internal.Assignments: java.util.List generateAssignmentsFromTypeAlone(org.junit.experimental.theories.ParameterSignature)>(r1);

     label1:
        return r4;
    }
}
