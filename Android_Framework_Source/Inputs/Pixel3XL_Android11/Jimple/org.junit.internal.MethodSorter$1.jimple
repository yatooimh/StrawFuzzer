class org.junit.internal.MethodSorter$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.junit.internal.MethodSorter$1 r0;

        r0 := @this: org.junit.internal.MethodSorter$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.junit.internal.MethodSorter$1 r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r3, $r4;
        int $i0;

        r0 := @this: org.junit.internal.MethodSorter$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.reflect.Method) r2;

        $i0 = virtualinvoke r0.<org.junit.internal.MethodSorter$1: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r3);

        return $i0;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        org.junit.internal.MethodSorter$1 r0;
        java.lang.reflect.Method r1, r2;
        int i0, $i1, i2;
        java.lang.String $r3, $r4;
        java.util.Comparator $r5;
        byte b3;

        r0 := @this: org.junit.internal.MethodSorter$1;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        i2 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        i0 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        if i2 == i0 goto label3;

        if i2 >= i0 goto label1;

        b3 = -1;

        goto label2;

     label1:
        b3 = 1;

     label2:
        return b3;

     label3:
        $r5 = <org.junit.internal.MethodSorter: java.util.Comparator NAME_ASCENDING>;

        $i1 = interfaceinvoke $r5.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        return $i1;
    }
}
