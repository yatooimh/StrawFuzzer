public class org.junit.internal.runners.ClassRoadie extends java.lang.Object
{
    private org.junit.runner.Description description;
    private org.junit.runner.notification.RunNotifier notifier;
    private final java.lang.Runnable runnable;
    private org.junit.internal.runners.TestClass testClass;

    public void <init>(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)
    {
        org.junit.internal.runners.ClassRoadie r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.internal.runners.TestClass r2;
        org.junit.runner.Description r3;
        java.lang.Runnable r4;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        r2 := @parameter1: org.junit.internal.runners.TestClass;

        r3 := @parameter2: org.junit.runner.Description;

        r4 := @parameter3: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.internal.runners.ClassRoadie: org.junit.runner.notification.RunNotifier notifier> = r1;

        r0.<org.junit.internal.runners.ClassRoadie: org.junit.internal.runners.TestClass testClass> = r2;

        r0.<org.junit.internal.runners.ClassRoadie: org.junit.runner.Description description> = r3;

        r0.<org.junit.internal.runners.ClassRoadie: java.lang.Runnable runnable> = r4;

        return;
    }

    private void runAfters()
    {
        org.junit.internal.runners.ClassRoadie r0;
        java.util.Iterator r1;
        org.junit.internal.runners.TestClass $r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.Throwable $r7, $r8, $r9;
        java.lang.reflect.Method r10;
        java.lang.reflect.InvocationTargetException r13;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

        $r2 = r0.<org.junit.internal.runners.ClassRoadie: org.junit.internal.runners.TestClass testClass>;

        $r3 = virtualinvoke $r2.<org.junit.internal.runners.TestClass: java.util.List getAfters()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.reflect.Method) $r4;

     label2:
        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        virtualinvoke r0.<org.junit.internal.runners.ClassRoadie: void addFailure(java.lang.Throwable)>($r7);

        goto label6;

     label5:
        $r8 := @caughtexception;

        r13 = (java.lang.reflect.InvocationTargetException) $r8;

        $r9 = virtualinvoke r13.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        virtualinvoke r0.<org.junit.internal.runners.ClassRoadie: void addFailure(java.lang.Throwable)>($r9);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void runBefores() throws org.junit.internal.runners.FailedBefore
    {
        org.junit.internal.runners.ClassRoadie r0;
        org.junit.internal.runners.TestClass $r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Object[] $r4;
        java.lang.reflect.Method $r5;
        org.junit.internal.AssumptionViolatedException $r7;
        java.lang.Throwable $r9, $r11, $r12;
        java.util.Iterator r13;
        org.junit.internal.runners.FailedBefore r17, r18;
        java.lang.reflect.InvocationTargetException r19;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

     label01:
        $r1 = r0.<org.junit.internal.runners.ClassRoadie: org.junit.internal.runners.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.util.List getBefores()>();

        r13 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r3 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.reflect.Method) $r3;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label03:
        goto label02;

     label04:
        return;

     label05:
        $r9 := @caughtexception;

        goto label09;

     label06:
        $r7 := @caughtexception;

        goto label10;

     label07:
        $r11 := @caughtexception;

     label08:
        r19 = (java.lang.reflect.InvocationTargetException) $r11;

        $r12 = virtualinvoke r19.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r12;

     label09:
        virtualinvoke r0.<org.junit.internal.runners.ClassRoadie: void addFailure(java.lang.Throwable)>($r9);

        r17 = new org.junit.internal.runners.FailedBefore;

        specialinvoke r17.<org.junit.internal.runners.FailedBefore: void <init>()>();

        throw r17;

     label10:
        r18 = new org.junit.internal.runners.FailedBefore;

        specialinvoke r18.<org.junit.internal.runners.FailedBefore: void <init>()>();

        throw r18;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label07;
        catch org.junit.internal.AssumptionViolatedException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label07;
        catch org.junit.internal.AssumptionViolatedException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch org.junit.internal.AssumptionViolatedException from label08 to label09 with label06;
        catch java.lang.Throwable from label08 to label09 with label05;
    }

    protected void addFailure(java.lang.Throwable)
    {
        org.junit.internal.runners.ClassRoadie r0;
        java.lang.Throwable r1;
        org.junit.runner.notification.Failure $r2;
        org.junit.runner.Description $r3;
        org.junit.runner.notification.RunNotifier $r4;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<org.junit.internal.runners.ClassRoadie: org.junit.runner.notification.RunNotifier notifier>;

        $r2 = new org.junit.runner.notification.Failure;

        $r3 = r0.<org.junit.internal.runners.ClassRoadie: org.junit.runner.Description description>;

        specialinvoke $r2.<org.junit.runner.notification.Failure: void <init>(org.junit.runner.Description,java.lang.Throwable)>($r3, r1);

        virtualinvoke $r4.<org.junit.runner.notification.RunNotifier: void fireTestFailure(org.junit.runner.notification.Failure)>($r2);

        return;
    }

    public void runProtected()
    {
        org.junit.internal.runners.ClassRoadie r0;
        java.lang.Throwable $r1;
        org.junit.internal.runners.FailedBefore $r2;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

     label1:
        specialinvoke r0.<org.junit.internal.runners.ClassRoadie: void runBefores()>();

        virtualinvoke r0.<org.junit.internal.runners.ClassRoadie: void runUnprotected()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        specialinvoke r0.<org.junit.internal.runners.ClassRoadie: void runAfters()>();

        throw $r1;

     label4:
        $r2 := @caughtexception;

     label5:
        specialinvoke r0.<org.junit.internal.runners.ClassRoadie: void runAfters()>();

        return;

        catch org.junit.internal.runners.FailedBefore from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void runUnprotected()
    {
        org.junit.internal.runners.ClassRoadie r0;
        java.lang.Runnable $r1;

        r0 := @this: org.junit.internal.runners.ClassRoadie;

        $r1 = r0.<org.junit.internal.runners.ClassRoadie: java.lang.Runnable runnable>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;
    }
}
