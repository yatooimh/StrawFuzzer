class org.junit.internal.runners.MethodRoadie$1 extends java.lang.Object implements java.lang.Runnable
{
    final org.junit.internal.runners.MethodRoadie this$0;
    final long val$timeout;

    void <init>(org.junit.internal.runners.MethodRoadie, long)
    {
        org.junit.internal.runners.MethodRoadie$1 r0;
        org.junit.internal.runners.MethodRoadie r1;
        long l0;

        r0 := @this: org.junit.internal.runners.MethodRoadie$1;

        r1 := @parameter0: org.junit.internal.runners.MethodRoadie;

        l0 := @parameter1: long;

        r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0> = r1;

        r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout> = l0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.junit.internal.runners.MethodRoadie$1 r0;
        java.util.concurrent.ExecutorService r1;
        org.junit.internal.runners.MethodRoadie$1$1 $r2;
        java.util.concurrent.TimeUnit $r3, $r4, $r11;
        long $l0, $l1;
        boolean $z0;
        java.lang.Exception $r7;
        org.junit.internal.runners.MethodRoadie $r8, $r12;
        java.lang.Throwable $r9;
        org.junit.runners.model.TestTimedOutException $r10;
        java.util.concurrent.Future r13;

        r0 := @this: org.junit.internal.runners.MethodRoadie$1;

        r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r2 = new org.junit.internal.runners.MethodRoadie$1$1;

        specialinvoke $r2.<org.junit.internal.runners.MethodRoadie$1$1: void <init>(org.junit.internal.runners.MethodRoadie$1)>(r0);

        r13 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r2);

        interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>();

     label1:
        $l0 = r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label2:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke r13.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(0L, $r4);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        $r8 = r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        virtualinvoke $r8.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r7);

        goto label6;

     label5:
        $r9 := @caughtexception;

        $r12 = r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        $r10 = new org.junit.runners.model.TestTimedOutException;

        $l1 = r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke $r10.<org.junit.runners.model.TestTimedOutException: void <init>(long,java.util.concurrent.TimeUnit)>($l1, $r11);

        virtualinvoke $r12.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r10);

     label6:
        return;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label5;
        catch java.lang.Exception from label1 to label2 with label4;
        catch java.util.concurrent.TimeoutException from label2 to label3 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
    }
}
