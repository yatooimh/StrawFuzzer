public class org.junit.internal.runners.MethodValidator extends java.lang.Object
{
    private final java.util.List errors;
    private org.junit.internal.runners.TestClass testClass;

    public void <init>(org.junit.internal.runners.TestClass)
    {
        org.junit.internal.runners.MethodValidator r0;
        org.junit.internal.runners.TestClass r1;
        java.util.ArrayList $r2;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        r1 := @parameter0: org.junit.internal.runners.TestClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.internal.runners.MethodValidator: java.util.List errors> = $r2;

        r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass testClass> = r1;

        return;
    }

    private void validateTestMethods(java.lang.Class, boolean)
    {
        org.junit.internal.runners.MethodValidator r0;
        boolean z0, $z1, $z2, $z3, $z9;
        java.util.Iterator r1;
        java.lang.reflect.Method r2;
        org.junit.internal.runners.TestClass $r4;
        java.util.List $r5, r50, r52, r54, r56, r58;
        java.lang.Object $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r7, $r8, $r33, r48, $r51;
        java.lang.Class[] $r9;
        java.lang.StringBuilder $r10, $r17, $r24, $r31, $r39;
        java.lang.String $r12, $r16, $r19, $r23, $r26, $r30, $r34, $r38, $r41, $r47, r49;
        java.lang.Exception $r15, $r22, $r29, $r37, $r46;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        r48 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r4 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass testClass>;

        $r5 = virtualinvoke $r4.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(r48);

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.reflect.Method) $r6;

        $i0 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z2 == z0 goto label4;

        if z0 == 0 goto label2;

        r49 = "should";

        goto label3;

     label2:
        r49 = "should not";

     label3:
        r50 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r41 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" be static");

        $r46 = new java.lang.Exception;

        $r47 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.Exception: void <init>(java.lang.String)>($r47);

        interfaceinvoke r50.<java.util.List: boolean add(java.lang.Object)>($r46);

     label4:
        $r51 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i3 = virtualinvoke $r51.<java.lang.Class: int getModifiers()>();

        $z9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z9 != 0 goto label5;

        r52 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r33 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be public");

        $r37 = new java.lang.Exception;

        $r38 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.Exception: void <init>(java.lang.String)>($r38);

        interfaceinvoke r52.<java.util.List: boolean add(java.lang.Object)>($r37);

     label5:
        $i1 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 != 0 goto label6;

        r54 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r26 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be public");

        $r29 = new java.lang.Exception;

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.Exception: void <init>(java.lang.String)>($r30);

        interfaceinvoke r54.<java.util.List: boolean add(java.lang.Object)>($r29);

     label6:
        $r7 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r8 = <java.lang.Void: java.lang.Class TYPE>;

        if $r7 == $r8 goto label7;

        r56 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r19 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be void");

        $r22 = new java.lang.Exception;

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.Exception: void <init>(java.lang.String)>($r23);

        interfaceinvoke r56.<java.util.List: boolean add(java.lang.Object)>($r22);

     label7:
        $r9 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r9;

        if $i2 == 0 goto label8;

        r58 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r12 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should have no parameters");

        $r15 = new java.lang.Exception;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r15);

     label8:
        goto label1;

     label9:
        return;
    }

    public void assertValid() throws org.junit.internal.runners.InitializationError
    {
        org.junit.internal.runners.MethodValidator r0;
        java.util.List $r1, $r3;
        boolean $z0;
        org.junit.internal.runners.InitializationError $r2;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        $r1 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new org.junit.internal.runners.InitializationError;

        $r3 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        specialinvoke $r2.<org.junit.internal.runners.InitializationError: void <init>(java.util.List)>($r3);

        throw $r2;
    }

    public void validateInstanceMethods()
    {
        org.junit.internal.runners.MethodValidator r0;
        org.junit.internal.runners.TestClass $r1;
        java.util.List $r2, $r4;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/After;", 0);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/Before;", 0);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/Test;", 0);

        $r1 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Test;");

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r4 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("No runnable methods");

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    public java.util.List validateMethodsForDefaultRunner()
    {
        org.junit.internal.runners.MethodValidator r0;
        java.util.List $r1;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateNoArgConstructor()>();

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateStaticMethods()>();

        virtualinvoke r0.<org.junit.internal.runners.MethodValidator: void validateInstanceMethods()>();

        $r1 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        return $r1;
    }

    public void validateNoArgConstructor()
    {
        org.junit.internal.runners.MethodValidator r0;
        org.junit.internal.runners.TestClass $r2;
        java.lang.Exception $r4, $r5;
        java.util.List $r6;

        r0 := @this: org.junit.internal.runners.MethodValidator;

     label1:
        $r2 = r0.<org.junit.internal.runners.MethodValidator: org.junit.internal.runners.TestClass testClass>;

        virtualinvoke $r2.<org.junit.internal.runners.TestClass: java.lang.reflect.Constructor getConstructor()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = r0.<org.junit.internal.runners.MethodValidator: java.util.List errors>;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Test class should have public zero-argument constructor", $r4);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void validateStaticMethods()
    {
        org.junit.internal.runners.MethodValidator r0;

        r0 := @this: org.junit.internal.runners.MethodValidator;

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/BeforeClass;", 1);

        specialinvoke r0.<org.junit.internal.runners.MethodValidator: void validateTestMethods(java.lang.Class,boolean)>(class "Lorg/junit/AfterClass;", 1);

        return;
    }
}
