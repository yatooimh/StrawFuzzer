public class org.junit.internal.runners.TestMethod extends java.lang.Object
{
    private final java.lang.reflect.Method method;
    private org.junit.internal.runners.TestClass testClass;

    public void <init>(java.lang.reflect.Method, org.junit.internal.runners.TestClass)
    {
        org.junit.internal.runners.TestMethod r0;
        java.lang.reflect.Method r1;
        org.junit.internal.runners.TestClass r2;

        r0 := @this: org.junit.internal.runners.TestMethod;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.junit.internal.runners.TestClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.internal.runners.TestMethod: java.lang.reflect.Method method> = r1;

        r0.<org.junit.internal.runners.TestMethod: org.junit.internal.runners.TestClass testClass> = r2;

        return;
    }

    boolean expectsException()
    {
        org.junit.internal.runners.TestMethod r0;
        java.lang.Class $r1;
        boolean z0;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r1 = virtualinvoke r0.<org.junit.internal.runners.TestMethod: java.lang.Class getExpectedException()>();

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    java.util.List getAfters()
    {
        org.junit.internal.runners.TestMethod r0;
        org.junit.internal.runners.TestClass $r1;
        java.util.List $r2;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r1 = r0.<org.junit.internal.runners.TestMethod: org.junit.internal.runners.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/After;");

        return $r2;
    }

    java.util.List getBefores()
    {
        org.junit.internal.runners.TestMethod r0;
        org.junit.internal.runners.TestClass $r1;
        java.util.List $r2;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r1 = r0.<org.junit.internal.runners.TestMethod: org.junit.internal.runners.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.internal.runners.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/Before;");

        return $r2;
    }

    protected java.lang.Class getExpectedException()
    {
        org.junit.internal.runners.TestMethod r0;
        org.junit.Test r1;
        java.lang.reflect.Method $r2;
        java.lang.'annotation'.Annotation $r3;
        java.lang.Class $r4, $r5;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r2 = r0.<org.junit.internal.runners.TestMethod: java.lang.reflect.Method method>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        r1 = (org.junit.Test) $r3;

        if r1 == null goto label2;

        $r4 = interfaceinvoke r1.<org.junit.Test: java.lang.Class expected()>();

        if $r4 != class "Lorg/junit/Test$None;" goto label1;

        goto label2;

     label1:
        $r5 = interfaceinvoke r1.<org.junit.Test: java.lang.Class expected()>();

        return $r5;

     label2:
        return null;
    }

    public long getTimeout()
    {
        org.junit.internal.runners.TestMethod r0;
        org.junit.Test r1;
        java.lang.reflect.Method $r2;
        java.lang.'annotation'.Annotation $r3;
        long $l0;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r2 = r0.<org.junit.internal.runners.TestMethod: java.lang.reflect.Method method>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        r1 = (org.junit.Test) $r3;

        if r1 != null goto label1;

        return 0L;

     label1:
        $l0 = interfaceinvoke r1.<org.junit.Test: long timeout()>();

        return $l0;
    }

    public void invoke(java.lang.Object) throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        org.junit.internal.runners.TestMethod r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        java.lang.reflect.Method $r3;

        r0 := @this: org.junit.internal.runners.TestMethod;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.junit.internal.runners.TestMethod: java.lang.reflect.Method method>;

        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2);

        return;
    }

    public boolean isIgnored()
    {
        org.junit.internal.runners.TestMethod r0;
        java.lang.reflect.Method $r1;
        java.lang.'annotation'.Annotation $r2;
        boolean z0;

        r0 := @this: org.junit.internal.runners.TestMethod;

        $r1 = r0.<org.junit.internal.runners.TestMethod: java.lang.reflect.Method method>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Ignore;");

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isUnexpected(java.lang.Throwable)
    {
        org.junit.internal.runners.TestMethod r0;
        java.lang.Throwable r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.junit.internal.runners.TestMethod;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = virtualinvoke r0.<org.junit.internal.runners.TestMethod: java.lang.Class getExpectedException()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        $z1 = $z0 ^ 1;

        return $z1;
    }
}
