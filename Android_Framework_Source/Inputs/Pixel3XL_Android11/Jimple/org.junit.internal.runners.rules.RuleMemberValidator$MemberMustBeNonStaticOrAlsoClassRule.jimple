final class org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule extends java.lang.Object implements org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
{

    private void <init>()
    {
        org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule r0;

        r0 := @this: org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(org.junit.internal.runners.rules.RuleMemberValidator$1)
    {
        org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule r0;
        org.junit.internal.runners.rules.RuleMemberValidator$1 r1;

        r0 := @this: org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule;

        r1 := @parameter0: org.junit.internal.runners.rules.RuleMemberValidator$1;

        specialinvoke r0.<org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule: void <init>()>();

        return;
    }

    public void validate(org.junit.runners.model.FrameworkMember, java.lang.Class, java.util.List)
    {
        org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule r0;
        org.junit.runners.model.FrameworkMember r1;
        java.lang.Class r2;
        java.util.List r3;
        boolean z0, $z1, $z2, z4;
        java.lang.'annotation'.Annotation $r4;
        org.junit.internal.runners.rules.ValidationError $r5;
        java.lang.String r6;

        r0 := @this: org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule;

        r1 := @parameter0: org.junit.runners.model.FrameworkMember;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.List;

        z0 = staticinvoke <org.junit.internal.runners.rules.RuleMemberValidator: boolean access$1200(org.junit.runners.model.FrameworkMember)>(r1);

        $r4 = virtualinvoke r1.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/ClassRule;");

        if $r4 == null goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        $z1 = virtualinvoke r1.<org.junit.runners.model.FrameworkMember: boolean isStatic()>();

        if $z1 == 0 goto label6;

        if z0 != 0 goto label3;

        if z4 != 0 goto label6;

     label3:
        $z2 = staticinvoke <org.junit.internal.runners.rules.RuleMemberValidator: boolean access$1200(org.junit.runners.model.FrameworkMember)>(r1);

        if $z2 == 0 goto label4;

        r6 = "must not be static.";

        goto label5;

     label4:
        r6 = "must not be static or it must be annotated with @ClassRule.";

     label5:
        $r5 = new org.junit.internal.runners.rules.ValidationError;

        specialinvoke $r5.<org.junit.internal.runners.rules.ValidationError: void <init>(org.junit.runners.model.FrameworkMember,java.lang.Class,java.lang.String)>(r1, r2, r6);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label6:
        return;
    }
}
