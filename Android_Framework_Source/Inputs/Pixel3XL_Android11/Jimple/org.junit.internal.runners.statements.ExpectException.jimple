public class org.junit.internal.runners.statements.ExpectException extends org.junit.runners.model.Statement
{
    private final java.lang.Class expected;
    private final org.junit.runners.model.Statement next;

    public void <init>(org.junit.runners.model.Statement, java.lang.Class)
    {
        org.junit.internal.runners.statements.ExpectException r0;
        org.junit.runners.model.Statement r1;
        java.lang.Class r2;

        r0 := @this: org.junit.internal.runners.statements.ExpectException;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<org.junit.internal.runners.statements.ExpectException: org.junit.runners.model.Statement next> = r1;

        r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected> = r2;

        return;
    }

    public void evaluate() throws java.lang.Exception
    {
        org.junit.internal.runners.statements.ExpectException r0;
        org.junit.runners.model.Statement $r2;
        java.lang.StringBuilder $r3, $r13;
        java.lang.Class $r5, $r11, $r12, $r15, $r19;
        java.lang.String $r6, $r9, $r16, $r20, $r24;
        java.lang.AssertionError $r8;
        java.lang.Throwable $r10;
        boolean $z0, z1;
        java.lang.Exception $r23;
        org.junit.internal.AssumptionViolatedException $r25;

        r0 := @this: org.junit.internal.runners.statements.ExpectException;

        z1 = 0;

     label1:
        $r2 = r0.<org.junit.internal.runners.statements.ExpectException: org.junit.runners.model.Statement next>;

        virtualinvoke $r2.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        z1 = 1;

        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z0 == 0 goto label6;

     label4:
        if z1 != 0 goto label5;

        return;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected exception: ");

        $r5 = r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = new java.lang.AssertionError;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r8;

     label6:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception, expected<");

        $r15 = r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was<");

        $r19 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r23 = new java.lang.Exception;

        $r24 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r10);

        throw $r23;

     label7:
        $r25 := @caughtexception;

        throw $r25;

        catch org.junit.internal.AssumptionViolatedException from label1 to label2 with label7;
        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
