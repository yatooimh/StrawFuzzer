public class org.junit.internal.runners.statements.FailOnTimeout extends org.junit.runners.model.Statement
{
    private final org.junit.runners.model.Statement originalStatement;
    private final java.util.concurrent.TimeUnit timeUnit;
    private final long timeout;

    private void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder, org.junit.runners.model.Statement)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$Builder r1;
        org.junit.runners.model.Statement r2;
        long $l0;
        java.util.concurrent.TimeUnit $r3;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$Builder;

        r2 := @parameter1: org.junit.runners.model.Statement;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement originalStatement> = r2;

        $l0 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$Builder: long access$100(org.junit.internal.runners.statements.FailOnTimeout$Builder)>(r1);

        r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout> = $l0;

        $r3 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$Builder: java.util.concurrent.TimeUnit access$200(org.junit.internal.runners.statements.FailOnTimeout$Builder)>(r1);

        r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit> = $r3;

        return;
    }

    void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder, org.junit.runners.model.Statement, org.junit.internal.runners.statements.FailOnTimeout$1)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$Builder r1;
        org.junit.runners.model.Statement r2;
        org.junit.internal.runners.statements.FailOnTimeout$1 r3;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$Builder;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r3 := @parameter2: org.junit.internal.runners.statements.FailOnTimeout$1;

        specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder,org.junit.runners.model.Statement)>(r1, r2);

        return;
    }

    public void <init>(org.junit.runners.model.Statement, long)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.runners.model.Statement r1;
        long l0;
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r2, $r4;
        java.util.concurrent.TimeUnit $r3;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.runners.model.Statement;

        l0 := @parameter1: long;

        $r2 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout: org.junit.internal.runners.statements.FailOnTimeout$Builder builder()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r4 = virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$Builder: org.junit.internal.runners.statements.FailOnTimeout$Builder withTimeout(long,java.util.concurrent.TimeUnit)>(l0, $r3);

        specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: void <init>(org.junit.internal.runners.statements.FailOnTimeout$Builder,org.junit.runners.model.Statement)>($r4, r1);

        return;
    }

    static org.junit.runners.model.Statement access$500(org.junit.internal.runners.statements.FailOnTimeout)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.runners.model.Statement $r1;

        r0 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout;

        $r1 = r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement originalStatement>;

        return $r1;
    }

    public static org.junit.internal.runners.statements.FailOnTimeout$Builder builder()
    {
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r0;

        $r0 = new org.junit.internal.runners.statements.FailOnTimeout$Builder;

        specialinvoke $r0.<org.junit.internal.runners.statements.FailOnTimeout$Builder: void <init>(org.junit.internal.runners.statements.FailOnTimeout$1)>(null);

        return $r0;
    }

    private java.lang.Exception createTimeoutException(java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        java.lang.Thread r1;
        java.lang.StackTraceElement[] r2;
        org.junit.runners.model.TestTimedOutException $r4;
        java.util.concurrent.TimeUnit $r5;
        long $l0;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: java.lang.Thread;

        r2 = virtualinvoke r1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r4 = new org.junit.runners.model.TestTimedOutException;

        $l0 = r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $r5 = r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit>;

        specialinvoke $r4.<org.junit.runners.model.TestTimedOutException: void <init>(long,java.util.concurrent.TimeUnit)>($l0, $r5);

        if r2 == null goto label1;

        virtualinvoke $r4.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>(r2);

        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

     label1:
        return $r4;
    }

    private java.lang.Throwable getResult(java.util.concurrent.FutureTask, java.lang.Thread)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        java.lang.Thread r1;
        long $l0, $l2;
        byte $b1;
        java.lang.Object $r2, $r4;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Throwable $r5, $r6, $r7, $r9, $r10, r12;
        java.lang.Exception $r8;
        java.util.concurrent.FutureTask r11;
        java.util.concurrent.ExecutionException r16;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r11 := @parameter0: java.util.concurrent.FutureTask;

        r1 := @parameter1: java.lang.Thread;

     label1:
        $l0 = r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $l2 = r0.<org.junit.internal.runners.statements.FailOnTimeout: long timeout>;

        $r3 = r0.<org.junit.internal.runners.statements.FailOnTimeout: java.util.concurrent.TimeUnit timeUnit>;

        $r4 = virtualinvoke r11.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l2, $r3);

        $r5 = (java.lang.Throwable) $r4;

        return $r5;

     label2:
        $r2 = virtualinvoke r11.<java.util.concurrent.FutureTask: java.lang.Object get()>();

        r12 = (java.lang.Throwable) $r2;

     label3:
        return r12;

     label4:
        $r7 := @caughtexception;

        $r8 = specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Exception createTimeoutException(java.lang.Thread)>(r1);

        return $r8;

     label5:
        $r9 := @caughtexception;

        r16 = (java.util.concurrent.ExecutionException) $r9;

        $r10 = virtualinvoke r16.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        return $r10;

     label6:
        $r6 := @caughtexception;

        return $r6;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label5;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label2 to label3 with label6;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$CallableStatement $r3;
        java.util.concurrent.FutureTask $r4;
        java.lang.Thread $r5;
        java.lang.Throwable r7;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r3 = new org.junit.internal.runners.statements.FailOnTimeout$CallableStatement;

        specialinvoke $r3.<org.junit.internal.runners.statements.FailOnTimeout$CallableStatement: void <init>(org.junit.internal.runners.statements.FailOnTimeout,org.junit.internal.runners.statements.FailOnTimeout$1)>(r0, null);

        $r4 = new java.util.concurrent.FutureTask;

        specialinvoke $r4.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>($r3);

        $r5 = new java.lang.Thread;

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r4, "Time-limited test");

        virtualinvoke $r5.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        virtualinvoke $r3.<org.junit.internal.runners.statements.FailOnTimeout$CallableStatement: void awaitStarted()>();

        r7 = specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: java.lang.Throwable getResult(java.util.concurrent.FutureTask,java.lang.Thread)>($r4, $r5);

        if r7 != null goto label1;

        return;

     label1:
        throw r7;
    }
}
