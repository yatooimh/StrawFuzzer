class org.junit.rules.ErrorCollector$1 extends java.lang.Object implements java.util.concurrent.Callable
{
    final org.junit.rules.ErrorCollector this$0;
    final org.hamcrest.Matcher val$matcher;
    final java.lang.String val$reason;
    final java.lang.Object val$value;

    void <init>(org.junit.rules.ErrorCollector, java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        org.junit.rules.ErrorCollector$1 r0;
        org.junit.rules.ErrorCollector r1;
        java.lang.String r2;
        java.lang.Object r3;
        org.hamcrest.Matcher r4;

        r0 := @this: org.junit.rules.ErrorCollector$1;

        r1 := @parameter0: org.junit.rules.ErrorCollector;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: org.hamcrest.Matcher;

        r0.<org.junit.rules.ErrorCollector$1: org.junit.rules.ErrorCollector this$0> = r1;

        r0.<org.junit.rules.ErrorCollector$1: java.lang.String val$reason> = r2;

        r0.<org.junit.rules.ErrorCollector$1: java.lang.Object val$value> = r3;

        r0.<org.junit.rules.ErrorCollector$1: org.hamcrest.Matcher val$matcher> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        org.junit.rules.ErrorCollector$1 r0;
        org.hamcrest.Matcher $r1;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.junit.rules.ErrorCollector$1;

        $r3 = r0.<org.junit.rules.ErrorCollector$1: java.lang.String val$reason>;

        $r2 = r0.<org.junit.rules.ErrorCollector$1: java.lang.Object val$value>;

        $r1 = r0.<org.junit.rules.ErrorCollector$1: org.hamcrest.Matcher val$matcher>;

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>($r3, $r2, $r1);

        $r4 = r0.<org.junit.rules.ErrorCollector$1: java.lang.Object val$value>;

        return $r4;
    }
}
