public class org.junit.rules.ErrorCollector extends org.junit.rules.Verifier
{
    private java.util.List errors;

    public void <init>()
    {
        org.junit.rules.ErrorCollector r0;
        java.util.ArrayList $r1;

        r0 := @this: org.junit.rules.ErrorCollector;

        specialinvoke r0.<org.junit.rules.Verifier: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.rules.ErrorCollector: java.util.List errors> = $r1;

        return;
    }

    public void addError(java.lang.Throwable)
    {
        org.junit.rules.ErrorCollector r0;
        java.lang.Throwable r1;
        java.util.List $r2;

        r0 := @this: org.junit.rules.ErrorCollector;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<org.junit.rules.ErrorCollector: java.util.List errors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object checkSucceeds(java.util.concurrent.Callable)
    {
        org.junit.rules.ErrorCollector r0;
        java.lang.Throwable $r1;
        java.util.concurrent.Callable r2;
        java.lang.Object r3;

        r0 := @this: org.junit.rules.ErrorCollector;

        r2 := @parameter0: java.util.concurrent.Callable;

     label1:
        r3 = interfaceinvoke r2.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<org.junit.rules.ErrorCollector: void addError(java.lang.Throwable)>($r1);

        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void checkThat(java.lang.Object, org.hamcrest.Matcher)
    {
        org.junit.rules.ErrorCollector r0;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;

        r0 := @this: org.junit.rules.ErrorCollector;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Matcher;

        virtualinvoke r0.<org.junit.rules.ErrorCollector: void checkThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("", r1, r2);

        return;
    }

    public void checkThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        org.junit.rules.ErrorCollector r0;
        java.lang.String r1;
        java.lang.Object r2;
        org.hamcrest.Matcher r3;
        org.junit.rules.ErrorCollector$1 $r4;

        r0 := @this: org.junit.rules.ErrorCollector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.hamcrest.Matcher;

        $r4 = new org.junit.rules.ErrorCollector$1;

        specialinvoke $r4.<org.junit.rules.ErrorCollector$1: void <init>(org.junit.rules.ErrorCollector,java.lang.String,java.lang.Object,org.hamcrest.Matcher)>(r0, r1, r2, r3);

        virtualinvoke r0.<org.junit.rules.ErrorCollector: java.lang.Object checkSucceeds(java.util.concurrent.Callable)>($r4);

        return;
    }

    protected void verify() throws java.lang.Throwable
    {
        org.junit.rules.ErrorCollector r0;
        java.util.List $r1;

        r0 := @this: org.junit.rules.ErrorCollector;

        $r1 = r0.<org.junit.rules.ErrorCollector: java.util.List errors>;

        staticinvoke <org.junit.runners.model.MultipleFailureException: void assertEmpty(java.util.List)>($r1);

        return;
    }
}
