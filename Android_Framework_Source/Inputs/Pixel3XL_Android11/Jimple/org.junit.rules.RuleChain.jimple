public class org.junit.rules.RuleChain extends java.lang.Object implements org.junit.rules.TestRule
{
    private static final org.junit.rules.RuleChain EMPTY_CHAIN;
    private java.util.List rulesStartingWithInnerMost;

    static void <clinit>()
    {
        org.junit.rules.RuleChain $r0;
        java.util.List $r1;

        $r0 = new org.junit.rules.RuleChain;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r0.<org.junit.rules.RuleChain: void <init>(java.util.List)>($r1);

        <org.junit.rules.RuleChain: org.junit.rules.RuleChain EMPTY_CHAIN> = $r0;

        return;
    }

    private void <init>(java.util.List)
    {
        org.junit.rules.RuleChain r0;
        java.util.List r1;

        r0 := @this: org.junit.rules.RuleChain;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.rules.RuleChain: java.util.List rulesStartingWithInnerMost> = r1;

        return;
    }

    public static org.junit.rules.RuleChain emptyRuleChain()
    {
        org.junit.rules.RuleChain $r0;

        $r0 = <org.junit.rules.RuleChain: org.junit.rules.RuleChain EMPTY_CHAIN>;

        return $r0;
    }

    public static org.junit.rules.RuleChain outerRule(org.junit.rules.TestRule)
    {
        org.junit.rules.TestRule r0;
        org.junit.rules.RuleChain $r1, $r2;

        r0 := @parameter0: org.junit.rules.TestRule;

        $r1 = staticinvoke <org.junit.rules.RuleChain: org.junit.rules.RuleChain emptyRuleChain()>();

        $r2 = virtualinvoke $r1.<org.junit.rules.RuleChain: org.junit.rules.RuleChain around(org.junit.rules.TestRule)>(r0);

        return $r2;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.rules.RuleChain r0;
        org.junit.runner.Description r1;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.junit.rules.TestRule $r5;
        org.junit.runners.model.Statement r6;

        r0 := @this: org.junit.rules.RuleChain;

        r6 := @parameter0: org.junit.runners.model.Statement;

        r1 := @parameter1: org.junit.runner.Description;

        $r3 = r0.<org.junit.rules.RuleChain: java.util.List rulesStartingWithInnerMost>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.junit.rules.TestRule) $r4;

        r6 = interfaceinvoke $r5.<org.junit.rules.TestRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>(r6, r1);

        goto label1;

     label2:
        return r6;
    }

    public org.junit.rules.RuleChain around(org.junit.rules.TestRule)
    {
        org.junit.rules.RuleChain r0, $r5;
        org.junit.rules.TestRule r1;
        java.util.ArrayList $r3;
        java.util.List $r4;

        r0 := @this: org.junit.rules.RuleChain;

        r1 := @parameter0: org.junit.rules.TestRule;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.junit.rules.RuleChain: java.util.List rulesStartingWithInnerMost>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = new org.junit.rules.RuleChain;

        specialinvoke $r5.<org.junit.rules.RuleChain: void <init>(java.util.List)>($r3);

        return $r5;
    }
}
