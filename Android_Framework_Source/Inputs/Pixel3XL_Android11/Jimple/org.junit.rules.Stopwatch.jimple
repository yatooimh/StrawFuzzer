public abstract class org.junit.rules.Stopwatch extends java.lang.Object implements org.junit.rules.TestRule
{
    private final org.junit.rules.Stopwatch$Clock clock;
    private volatile long endNanos;
    private volatile long startNanos;

    public void <init>()
    {
        org.junit.rules.Stopwatch r0;
        org.junit.rules.Stopwatch$Clock $r1;

        r0 := @this: org.junit.rules.Stopwatch;

        $r1 = new org.junit.rules.Stopwatch$Clock;

        specialinvoke $r1.<org.junit.rules.Stopwatch$Clock: void <init>()>();

        specialinvoke r0.<org.junit.rules.Stopwatch: void <init>(org.junit.rules.Stopwatch$Clock)>($r1);

        return;
    }

    void <init>(org.junit.rules.Stopwatch$Clock)
    {
        org.junit.rules.Stopwatch r0;
        org.junit.rules.Stopwatch$Clock r1;

        r0 := @this: org.junit.rules.Stopwatch;

        r1 := @parameter0: org.junit.rules.Stopwatch$Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.rules.Stopwatch: org.junit.rules.Stopwatch$Clock clock> = r1;

        return;
    }

    static void access$100(org.junit.rules.Stopwatch)
    {
        org.junit.rules.Stopwatch r0;

        r0 := @parameter0: org.junit.rules.Stopwatch;

        specialinvoke r0.<org.junit.rules.Stopwatch: void starting()>();

        return;
    }

    static long access$200(org.junit.rules.Stopwatch)
    {
        org.junit.rules.Stopwatch r0;
        long $l0;

        r0 := @parameter0: org.junit.rules.Stopwatch;

        $l0 = specialinvoke r0.<org.junit.rules.Stopwatch: long getNanos()>();

        return $l0;
    }

    static void access$300(org.junit.rules.Stopwatch)
    {
        org.junit.rules.Stopwatch r0;

        r0 := @parameter0: org.junit.rules.Stopwatch;

        specialinvoke r0.<org.junit.rules.Stopwatch: void stopping()>();

        return;
    }

    private long getNanos()
    {
        org.junit.rules.Stopwatch r0;
        long l0, $l1, $l4, $l5, l6;
        byte $b2, $b3;
        java.lang.IllegalStateException $r1;
        org.junit.rules.Stopwatch$Clock $r2;

        r0 := @this: org.junit.rules.Stopwatch;

        $l1 = r0.<org.junit.rules.Stopwatch: long startNanos>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        l0 = r0.<org.junit.rules.Stopwatch: long endNanos>;

        l6 = l0;

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label1;

        $r2 = r0.<org.junit.rules.Stopwatch: org.junit.rules.Stopwatch$Clock clock>;

        l6 = virtualinvoke $r2.<org.junit.rules.Stopwatch$Clock: long nanoTime()>();

     label1:
        $l4 = r0.<org.junit.rules.Stopwatch: long startNanos>;

        $l5 = l6 - $l4;

        return $l5;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Test has not started");

        throw $r1;
    }

    private void starting()
    {
        org.junit.rules.Stopwatch r0;
        org.junit.rules.Stopwatch$Clock $r1;
        long $l0;

        r0 := @this: org.junit.rules.Stopwatch;

        $r1 = r0.<org.junit.rules.Stopwatch: org.junit.rules.Stopwatch$Clock clock>;

        $l0 = virtualinvoke $r1.<org.junit.rules.Stopwatch$Clock: long nanoTime()>();

        r0.<org.junit.rules.Stopwatch: long startNanos> = $l0;

        r0.<org.junit.rules.Stopwatch: long endNanos> = 0L;

        return;
    }

    private void stopping()
    {
        org.junit.rules.Stopwatch r0;
        org.junit.rules.Stopwatch$Clock $r1;
        long $l0;

        r0 := @this: org.junit.rules.Stopwatch;

        $r1 = r0.<org.junit.rules.Stopwatch: org.junit.rules.Stopwatch$Clock clock>;

        $l0 = virtualinvoke $r1.<org.junit.rules.Stopwatch$Clock: long nanoTime()>();

        r0.<org.junit.rules.Stopwatch: long endNanos> = $l0;

        return;
    }

    public final org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.rules.Stopwatch r0;
        org.junit.runners.model.Statement r1, $r4;
        org.junit.runner.Description r2;
        org.junit.rules.Stopwatch$InternalWatcher $r3;

        r0 := @this: org.junit.rules.Stopwatch;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new org.junit.rules.Stopwatch$InternalWatcher;

        specialinvoke $r3.<org.junit.rules.Stopwatch$InternalWatcher: void <init>(org.junit.rules.Stopwatch,org.junit.rules.Stopwatch$1)>(r0, null);

        $r4 = virtualinvoke $r3.<org.junit.rules.Stopwatch$InternalWatcher: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runner.Description)>(r1, r2);

        return $r4;
    }

    protected void failed(long, java.lang.Throwable, org.junit.runner.Description)
    {
        org.junit.rules.Stopwatch r0;
        long l0;
        java.lang.Throwable r1;
        org.junit.runner.Description r2;

        r0 := @this: org.junit.rules.Stopwatch;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Throwable;

        r2 := @parameter2: org.junit.runner.Description;

        return;
    }

    protected void finished(long, org.junit.runner.Description)
    {
        org.junit.rules.Stopwatch r0;
        long l0;
        org.junit.runner.Description r1;

        r0 := @this: org.junit.rules.Stopwatch;

        l0 := @parameter0: long;

        r1 := @parameter1: org.junit.runner.Description;

        return;
    }

    public long runtime(java.util.concurrent.TimeUnit)
    {
        org.junit.rules.Stopwatch r0;
        java.util.concurrent.TimeUnit r1, $r2;
        long $l0, $l1;

        r0 := @this: org.junit.rules.Stopwatch;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = specialinvoke r0.<org.junit.rules.Stopwatch: long getNanos()>();

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l1;
    }

    protected void skipped(long, org.junit.AssumptionViolatedException, org.junit.runner.Description)
    {
        org.junit.rules.Stopwatch r0;
        long l0;
        org.junit.AssumptionViolatedException r1;
        org.junit.runner.Description r2;

        r0 := @this: org.junit.rules.Stopwatch;

        l0 := @parameter0: long;

        r1 := @parameter1: org.junit.AssumptionViolatedException;

        r2 := @parameter2: org.junit.runner.Description;

        return;
    }

    protected void succeeded(long, org.junit.runner.Description)
    {
        org.junit.rules.Stopwatch r0;
        long l0;
        org.junit.runner.Description r1;

        r0 := @this: org.junit.rules.Stopwatch;

        l0 := @parameter0: long;

        r1 := @parameter1: org.junit.runner.Description;

        return;
    }
}
