public class org.junit.rules.Timeout extends java.lang.Object implements org.junit.rules.TestRule
{
    private final java.util.concurrent.TimeUnit timeUnit;
    private final long timeout;

    public void <init>(int)
    {
        org.junit.rules.Timeout r0;
        int i0;
        java.util.concurrent.TimeUnit $r1;
        long $l1;

        r0 := @this: org.junit.rules.Timeout;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<org.junit.rules.Timeout: void <init>(long,java.util.concurrent.TimeUnit)>($l1, $r1);

        return;
    }

    public void <init>(long, java.util.concurrent.TimeUnit)
    {
        org.junit.rules.Timeout r0;
        long l0;
        java.util.concurrent.TimeUnit r1;

        r0 := @this: org.junit.rules.Timeout;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.rules.Timeout: long timeout> = l0;

        r0.<org.junit.rules.Timeout: java.util.concurrent.TimeUnit timeUnit> = r1;

        return;
    }

    protected void <init>(org.junit.rules.Timeout$Builder)
    {
        org.junit.rules.Timeout r0;
        org.junit.rules.Timeout$Builder r1;
        long $l0;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: org.junit.rules.Timeout;

        r1 := @parameter0: org.junit.rules.Timeout$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = virtualinvoke r1.<org.junit.rules.Timeout$Builder: long getTimeout()>();

        r0.<org.junit.rules.Timeout: long timeout> = $l0;

        $r2 = virtualinvoke r1.<org.junit.rules.Timeout$Builder: java.util.concurrent.TimeUnit getTimeUnit()>();

        r0.<org.junit.rules.Timeout: java.util.concurrent.TimeUnit timeUnit> = $r2;

        return;
    }

    public static org.junit.rules.Timeout$Builder builder()
    {
        org.junit.rules.Timeout$Builder $r0;

        $r0 = new org.junit.rules.Timeout$Builder;

        specialinvoke $r0.<org.junit.rules.Timeout$Builder: void <init>()>();

        return $r0;
    }

    public static org.junit.rules.Timeout millis(long)
    {
        long l0;
        org.junit.rules.Timeout $r0;
        java.util.concurrent.TimeUnit $r1;

        l0 := @parameter0: long;

        $r0 = new org.junit.rules.Timeout;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke $r0.<org.junit.rules.Timeout: void <init>(long,java.util.concurrent.TimeUnit)>(l0, $r1);

        return $r0;
    }

    public static org.junit.rules.Timeout seconds(long)
    {
        long l0;
        org.junit.rules.Timeout $r0;
        java.util.concurrent.TimeUnit $r1;

        l0 := @parameter0: long;

        $r0 = new org.junit.rules.Timeout;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke $r0.<org.junit.rules.Timeout: void <init>(long,java.util.concurrent.TimeUnit)>(l0, $r1);

        return $r0;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        org.junit.rules.Timeout r0;
        org.junit.runner.Description r1;
        java.lang.Exception $r2;
        org.junit.rules.Timeout$1 $r3;
        org.junit.runners.model.Statement r4, r5;

        r0 := @this: org.junit.rules.Timeout;

        r4 := @parameter0: org.junit.runners.model.Statement;

        r1 := @parameter1: org.junit.runner.Description;

     label1:
        r5 = virtualinvoke r0.<org.junit.rules.Timeout: org.junit.runners.model.Statement createFailOnTimeoutStatement(org.junit.runners.model.Statement)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.junit.rules.Timeout$1;

        specialinvoke $r3.<org.junit.rules.Timeout$1: void <init>(org.junit.rules.Timeout,java.lang.Exception)>(r0, $r2);

        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected org.junit.runners.model.Statement createFailOnTimeoutStatement(org.junit.runners.model.Statement) throws java.lang.Exception
    {
        org.junit.rules.Timeout r0;
        org.junit.runners.model.Statement r1;
        org.junit.internal.runners.statements.FailOnTimeout$Builder $r2, $r4;
        java.util.concurrent.TimeUnit $r3;
        long $l0;
        org.junit.internal.runners.statements.FailOnTimeout $r5;

        r0 := @this: org.junit.rules.Timeout;

        r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout: org.junit.internal.runners.statements.FailOnTimeout$Builder builder()>();

        $l0 = r0.<org.junit.rules.Timeout: long timeout>;

        $r3 = r0.<org.junit.rules.Timeout: java.util.concurrent.TimeUnit timeUnit>;

        $r4 = virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$Builder: org.junit.internal.runners.statements.FailOnTimeout$Builder withTimeout(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        $r5 = virtualinvoke $r4.<org.junit.internal.runners.statements.FailOnTimeout$Builder: org.junit.internal.runners.statements.FailOnTimeout build(org.junit.runners.model.Statement)>(r1);

        return $r5;
    }

    protected final long getTimeout(java.util.concurrent.TimeUnit)
    {
        org.junit.rules.Timeout r0;
        java.util.concurrent.TimeUnit r1, $r2;
        long $l0, $l1;

        r0 := @this: org.junit.rules.Timeout;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = r0.<org.junit.rules.Timeout: long timeout>;

        $r2 = r0.<org.junit.rules.Timeout: java.util.concurrent.TimeUnit timeUnit>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l1;
    }
}
