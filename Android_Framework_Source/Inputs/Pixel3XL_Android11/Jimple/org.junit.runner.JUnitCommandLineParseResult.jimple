class org.junit.runner.JUnitCommandLineParseResult extends java.lang.Object
{
    private final java.util.List classes;
    private final java.util.List filterSpecs;
    private final java.util.List parserErrors;

    void <init>()
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List filterSpecs> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List classes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors> = $r3;

        return;
    }

    private org.junit.runner.Request applyFilterSpecs(org.junit.runner.Request)
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;
        org.junit.runner.manipulation.Filter $r5;
        org.junit.runner.FilterFactory$FilterNotCreatedException $r6;
        org.junit.runner.Request $r7, r8;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r8 := @parameter0: org.junit.runner.Request;

     label1:
        $r2 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List filterSpecs>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <org.junit.runner.FilterFactories: org.junit.runner.manipulation.Filter createFilterFromFilterSpec(org.junit.runner.Request,java.lang.String)>(r8, $r4);

        r8 = virtualinvoke r8.<org.junit.runner.Request: org.junit.runner.Request filterWith(org.junit.runner.manipulation.Filter)>($r5);

     label3:
        goto label2;

     label4:
        return r8;

     label5:
        $r6 := @caughtexception;

        $r7 = specialinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: org.junit.runner.Request errorReport(java.lang.Throwable)>($r6);

        return $r7;

        catch org.junit.runner.FilterFactory$FilterNotCreatedException from label1 to label2 with label5;
        catch org.junit.runner.FilterFactory$FilterNotCreatedException from label2 to label3 with label5;
    }

    private java.lang.String[] copyArray(java.lang.String[], int, int)
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.lang.String[] r1, $r4, $r6;
        int i0, $i1, i2;
        java.util.ArrayList $r3;
        java.lang.Object[] $r5;
        java.lang.String $r7;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r1 := @parameter0: java.lang.String[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        if i2 == i0 goto label2;

        $r7 = r1[i2];

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r4 = newarray (java.lang.String)[$i1];

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    private org.junit.runner.Request errorReport(java.lang.Throwable)
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.lang.Throwable r1;
        org.junit.runner.Request $r2;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request errorReport(java.lang.Class,java.lang.Throwable)>(class "Lorg/junit/runner/JUnitCommandLineParseResult;", r1);

        return $r2;
    }

    public static org.junit.runner.JUnitCommandLineParseResult parse(java.lang.String[])
    {
        java.lang.String[] r0;
        org.junit.runner.JUnitCommandLineParseResult $r2;

        r0 := @parameter0: java.lang.String[];

        $r2 = new org.junit.runner.JUnitCommandLineParseResult;

        specialinvoke $r2.<org.junit.runner.JUnitCommandLineParseResult: void <init>()>();

        specialinvoke $r2.<org.junit.runner.JUnitCommandLineParseResult: void parseArgs(java.lang.String[])>(r0);

        return $r2;
    }

    private void parseArgs(java.lang.String[])
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.lang.String[] r1, $r2;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r1 := @parameter0: java.lang.String[];

        $r2 = virtualinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: java.lang.String[] parseOptions(java.lang.String[])>(r1);

        virtualinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: void parseParameters(java.lang.String[])>($r2);

        return;
    }

    public org.junit.runner.Request createRequest(org.junit.runner.Computer)
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        org.junit.runner.Computer r1;
        java.util.List r2, $r3, $r5;
        boolean $z0;
        org.junit.runners.model.InitializationError $r4;
        org.junit.runner.Request $r6, $r10, $r11;
        int $i0;
        java.lang.Class[] $r7, $r9;
        java.lang.Object[] $r8;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r1 := @parameter0: org.junit.runner.Computer;

        $r3 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r2 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List classes>;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        $r7 = newarray (java.lang.Class)[$i0];

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.Class[]) $r8;

        $r10 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request classes(org.junit.runner.Computer,java.lang.Class[])>(r1, $r9);

        $r11 = specialinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: org.junit.runner.Request applyFilterSpecs(org.junit.runner.Request)>($r10);

        return $r11;

     label1:
        $r4 = new org.junit.runners.model.InitializationError;

        $r5 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors>;

        specialinvoke $r4.<org.junit.runners.model.InitializationError: void <init>(java.util.List)>($r5);

        $r6 = specialinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: org.junit.runner.Request errorReport(java.lang.Throwable)>($r4);

        return $r6;
    }

    public java.util.List getClasses()
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.util.List $r1, $r2;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        $r1 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List classes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List getFilterSpecs()
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.util.List $r1, $r2;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        $r1 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List filterSpecs>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    transient java.lang.String[] parseOptions(java.lang.String[])
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String[] $r2, $r3, $r16, r17;
        boolean $z0, $z1, $z2, $z3, $z6;
        java.util.List $r4, r19, r21;
        java.lang.StringBuilder $r5, $r10;
        org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError $r8, $r14;
        java.lang.String $r9, $r15, r18, r20;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r17 := @parameter0: java.lang.String[];

        i7 = 0;

     label01:
        $i0 = lengthof r17;

        if i7 == $i0 goto label10;

        r18 = r17[i7];

        $z0 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("--");

        if $z0 == 0 goto label02;

        $i6 = i7 + 1;

        $i5 = lengthof r17;

        $r16 = specialinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: java.lang.String[] copyArray(java.lang.String[],int,int)>(r17, $i6, $i5);

        return $r16;

     label02:
        $z1 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z1 == 0 goto label09;

        $z2 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("--filter=");

        if $z2 != 0 goto label04;

        $z6 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("--filter");

        if $z6 == 0 goto label03;

        goto label04;

     label03:
        r19 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JUnit knows nothing about the ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" option");

        $r14 = new org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError: void <init>(java.lang.String)>($r15);

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label08;

     label04:
        $z3 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("--filter");

        if $z3 == 0 goto label06;

        i7 = i7 + 1;

        $i4 = lengthof r17;

        if i7 >= $i4 goto label05;

        r20 = r17[i7];

        goto label07;

     label05:
        r21 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value not specified");

        $r8 = new org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError: void <init>(java.lang.String)>($r9);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label10;

     label06:
        $i2 = virtualinvoke r18.<java.lang.String: int indexOf(int)>(61);

        $i3 = $i2 + 1;

        r20 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int)>($i3);

     label07:
        $r4 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List filterSpecs>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r20);

     label08:
        i7 = i7 + 1;

        goto label01;

     label09:
        $i1 = lengthof r17;

        $r3 = specialinvoke r0.<org.junit.runner.JUnitCommandLineParseResult: java.lang.String[] copyArray(java.lang.String[],int,int)>(r17, i7, $i1);

        return $r3;

     label10:
        $r2 = newarray (java.lang.String)[0];

        return $r2;
    }

    void parseParameters(java.lang.String[])
    {
        org.junit.runner.JUnitCommandLineParseResult r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2, $r14;
        java.util.List r4, $r6;
        java.lang.Class $r7;
        java.lang.ClassNotFoundException $r8;
        java.lang.StringBuilder $r9;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.junit.runner.JUnitCommandLineParseResult;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r2 = r1[i1];

     label2:
        $r6 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List classes>;

        $r7 = staticinvoke <org.junit.internal.Classes: java.lang.Class getClass(java.lang.String)>(r2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r4 = r0.<org.junit.runner.JUnitCommandLineParseResult: java.util.List parserErrors>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find class [");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r8);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r13);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }
}
