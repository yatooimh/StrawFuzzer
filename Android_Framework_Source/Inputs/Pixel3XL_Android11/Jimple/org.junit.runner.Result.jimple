public class org.junit.runner.Result extends java.lang.Object implements java.io.Serializable
{
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private final java.util.concurrent.atomic.AtomicInteger count;
    private final java.util.concurrent.CopyOnWriteArrayList failures;
    private final java.util.concurrent.atomic.AtomicInteger ignoreCount;
    private final java.util.concurrent.atomic.AtomicLong runTime;
    private org.junit.runner.Result$SerializedForm serializedForm;
    private final java.util.concurrent.atomic.AtomicLong startTime;

    static void <clinit>()
    {
        java.io.ObjectStreamClass $r0;
        java.io.ObjectStreamField[] $r1;

        <org.junit.runner.Result: long serialVersionUID> = 1L;

        $r0 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(class "Lorg/junit/runner/Result$SerializedForm;");

        $r1 = virtualinvoke $r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>();

        <org.junit.runner.Result: java.io.ObjectStreamField[] serialPersistentFields> = $r1;

        return;
    }

    public void <init>()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        java.util.concurrent.CopyOnWriteArrayList $r3;
        java.util.concurrent.atomic.AtomicLong $r4, $r5;

        r0 := @this: org.junit.runner.Result;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger count> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger ignoreCount> = $r2;

        $r3 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.junit.runner.Result: java.util.concurrent.CopyOnWriteArrayList failures> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong runTime> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong startTime> = $r5;

        return;
    }

    private void <init>(org.junit.runner.Result$SerializedForm)
    {
        org.junit.runner.Result r0;
        org.junit.runner.Result$SerializedForm r1;
        java.util.concurrent.atomic.AtomicInteger $r2, $r3;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.util.List $r5;
        java.util.concurrent.atomic.AtomicLong $r6, $r7;
        long $l0, $l1;

        r0 := @this: org.junit.runner.Result;

        r1 := @parameter0: org.junit.runner.Result$SerializedForm;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.junit.runner.Result$SerializedForm: java.util.concurrent.atomic.AtomicInteger access$000(org.junit.runner.Result$SerializedForm)>(r1);

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger count> = $r2;

        $r3 = staticinvoke <org.junit.runner.Result$SerializedForm: java.util.concurrent.atomic.AtomicInteger access$100(org.junit.runner.Result$SerializedForm)>(r1);

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger ignoreCount> = $r3;

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        $r5 = staticinvoke <org.junit.runner.Result$SerializedForm: java.util.List access$200(org.junit.runner.Result$SerializedForm)>(r1);

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>($r5);

        r0.<org.junit.runner.Result: java.util.concurrent.CopyOnWriteArrayList failures> = $r4;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        $l0 = staticinvoke <org.junit.runner.Result$SerializedForm: long access$300(org.junit.runner.Result$SerializedForm)>(r1);

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong runTime> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicLong;

        $l1 = staticinvoke <org.junit.runner.Result$SerializedForm: long access$400(org.junit.runner.Result$SerializedForm)>(r1);

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l1);

        r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong startTime> = $r7;

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$500(org.junit.runner.Result)
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong startTime>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicLong access$600(org.junit.runner.Result)
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong runTime>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$700(org.junit.runner.Result)
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger count>;

        return $r1;
    }

    static java.util.concurrent.CopyOnWriteArrayList access$800(org.junit.runner.Result)
    {
        org.junit.runner.Result r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @parameter0: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.CopyOnWriteArrayList failures>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$900(org.junit.runner.Result)
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger ignoreCount>;

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.junit.runner.Result r0;
        java.io.ObjectInputStream r1;
        org.junit.runner.Result$SerializedForm $r2;

        r0 := @this: org.junit.runner.Result;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = staticinvoke <org.junit.runner.Result$SerializedForm: org.junit.runner.Result$SerializedForm deserialize(java.io.ObjectInputStream)>(r1);

        r0.<org.junit.runner.Result: org.junit.runner.Result$SerializedForm serializedForm> = $r2;

        return;
    }

    private java.lang.Object readResolve()
    {
        org.junit.runner.Result r0, $r1;
        org.junit.runner.Result$SerializedForm $r2;

        r0 := @this: org.junit.runner.Result;

        $r1 = new org.junit.runner.Result;

        $r2 = r0.<org.junit.runner.Result: org.junit.runner.Result$SerializedForm serializedForm>;

        specialinvoke $r1.<org.junit.runner.Result: void <init>(org.junit.runner.Result$SerializedForm)>($r2);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.junit.runner.Result r0;
        java.io.ObjectOutputStream r1;
        org.junit.runner.Result$SerializedForm $r2;

        r0 := @this: org.junit.runner.Result;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = new org.junit.runner.Result$SerializedForm;

        specialinvoke $r2.<org.junit.runner.Result$SerializedForm: void <init>(org.junit.runner.Result)>(r0);

        virtualinvoke $r2.<org.junit.runner.Result$SerializedForm: void serialize(java.io.ObjectOutputStream)>(r1);

        return;
    }

    public org.junit.runner.notification.RunListener createListener()
    {
        org.junit.runner.Result r0;
        org.junit.runner.Result$Listener $r1;

        r0 := @this: org.junit.runner.Result;

        $r1 = new org.junit.runner.Result$Listener;

        specialinvoke $r1.<org.junit.runner.Result$Listener: void <init>(org.junit.runner.Result,org.junit.runner.Result$1)>(r0, null);

        return $r1;
    }

    public int getFailureCount()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        int $i0;

        r0 := @this: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.CopyOnWriteArrayList failures>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        return $i0;
    }

    public java.util.List getFailures()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.CopyOnWriteArrayList failures>;

        return $r1;
    }

    public int getIgnoreCount()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger ignoreCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public int getRunCount()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public long getRunTime()
    {
        org.junit.runner.Result r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.junit.runner.Result;

        $r1 = r0.<org.junit.runner.Result: java.util.concurrent.atomic.AtomicLong runTime>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public boolean wasSuccessful()
    {
        org.junit.runner.Result r0;
        int $i0;
        boolean z0;

        r0 := @this: org.junit.runner.Result;

        $i0 = virtualinvoke r0.<org.junit.runner.Result: int getFailureCount()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
