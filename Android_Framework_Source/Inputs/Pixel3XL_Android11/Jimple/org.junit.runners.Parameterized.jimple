public class org.junit.runners.Parameterized extends org.junit.runners.Suite
{
    private static final org.junit.runners.parameterized.ParametersRunnerFactory DEFAULT_FACTORY;
    private static final java.util.List NO_RUNNERS;
    private final java.util.List runners;

    static void <clinit>()
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory $r0;
        java.util.List $r1;

        $r0 = new org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory;

        specialinvoke $r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory: void <init>()>();

        <org.junit.runners.Parameterized: org.junit.runners.parameterized.ParametersRunnerFactory DEFAULT_FACTORY> = $r0;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.junit.runners.Parameterized: java.util.List NO_RUNNERS> = $r1;

        return;
    }

    public void <init>(java.lang.Class) throws java.lang.Throwable
    {
        org.junit.runners.Parameterized r0;
        org.junit.runners.Parameterized$Parameters r1;
        java.util.List $r2, $r7, $r8;
        org.junit.runners.model.FrameworkMethod $r3;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Iterable $r5;
        java.lang.String $r6;
        java.lang.Class r9;
        org.junit.runners.parameterized.ParametersRunnerFactory r10;

        r0 := @this: org.junit.runners.Parameterized;

        r9 := @parameter0: java.lang.Class;

        $r2 = <org.junit.runners.Parameterized: java.util.List NO_RUNNERS>;

        specialinvoke r0.<org.junit.runners.Suite: void <init>(java.lang.Class,java.util.List)>(r9, $r2);

        r10 = specialinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.parameterized.ParametersRunnerFactory getParametersRunnerFactory(java.lang.Class)>(r9);

        $r3 = specialinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.FrameworkMethod getParametersMethod()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$Parameters;");

        r1 = (org.junit.runners.Parameterized$Parameters) $r4;

        $r5 = specialinvoke r0.<org.junit.runners.Parameterized: java.lang.Iterable allParameters()>();

        $r6 = interfaceinvoke r1.<org.junit.runners.Parameterized$Parameters: java.lang.String name()>();

        $r7 = specialinvoke r0.<org.junit.runners.Parameterized: java.util.List createRunnersForParameters(java.lang.Iterable,java.lang.String,org.junit.runners.parameterized.ParametersRunnerFactory)>($r5, $r6, r10);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        r0.<org.junit.runners.Parameterized: java.util.List runners> = $r8;

        return;
    }

    private java.lang.Iterable allParameters() throws java.lang.Throwable
    {
        org.junit.runners.Parameterized r0;
        java.lang.Object r1;
        org.junit.runners.model.FrameworkMethod $r2;
        java.lang.Object[] $r3, $r5;
        boolean $z0, $z1;
        java.lang.Exception $r4;
        java.util.List $r6;
        java.lang.Iterable $r7;

        r0 := @this: org.junit.runners.Parameterized;

        $r2 = specialinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.FrameworkMethod getParametersMethod()>();

        $r3 = newarray (java.lang.Object)[0];

        r1 = virtualinvoke $r2.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>(null, $r3);

        $z0 = r1 instanceof java.lang.Iterable;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.Iterable) r1;

        return $r7;

     label1:
        $z1 = r1 instanceof java.lang.Object[];

        if $z1 == 0 goto label2;

        $r5 = (java.lang.Object[]) r1;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        return $r6;

     label2:
        $r4 = specialinvoke r0.<org.junit.runners.Parameterized: java.lang.Exception parametersMethodReturnedWrongType()>();

        throw $r4;
    }

    private java.util.List createRunnersForParameters(java.lang.Iterable, java.lang.String, org.junit.runners.parameterized.ParametersRunnerFactory) throws org.junit.runners.model.InitializationError, java.lang.Exception
    {
        org.junit.runners.Parameterized r0;
        org.junit.runners.parameterized.ParametersRunnerFactory r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        org.junit.runner.Runner $r4;
        java.lang.ClassCastException $r5;
        java.lang.Exception $r6;
        java.lang.Iterable r7;
        java.lang.String r8;
        java.util.List r9;
        java.util.ArrayList r10;
        org.junit.runners.parameterized.TestWithParameters r11;

        r0 := @this: org.junit.runners.Parameterized;

        r7 := @parameter0: java.lang.Iterable;

        r8 := @parameter1: java.lang.String;

        r1 := @parameter2: org.junit.runners.parameterized.ParametersRunnerFactory;

     label1:
        r9 = specialinvoke r0.<org.junit.runners.Parameterized: java.util.List createTestsForParameters(java.lang.Iterable,java.lang.String)>(r7, r8);

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.junit.runners.parameterized.TestWithParameters) $r3;

     label3:
        $r4 = interfaceinvoke r1.<org.junit.runners.parameterized.ParametersRunnerFactory: org.junit.runner.Runner createRunnerForTestWithParameters(org.junit.runners.parameterized.TestWithParameters)>(r11);

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r4);

     label4:
        goto label2;

     label5:
        return r10;

     label6:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.junit.runners.Parameterized: java.lang.Exception parametersMethodReturnedWrongType()>();

        throw $r6;

        catch java.lang.ClassCastException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.ClassCastException from label3 to label4 with label6;
    }

    private org.junit.runners.parameterized.TestWithParameters createTestWithNotNormalizedParameters(java.lang.String, int, java.lang.Object)
    {
        org.junit.runners.Parameterized r0;
        java.lang.String r1;
        int i0;
        java.lang.Object[] r2, r6;
        boolean $z0;
        org.junit.runners.model.TestClass $r3;
        org.junit.runners.parameterized.TestWithParameters $r4;
        java.lang.Object r5;

        r0 := @this: org.junit.runners.Parameterized;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 := @parameter2: java.lang.Object;

        $z0 = r5 instanceof java.lang.Object[];

        if $z0 == 0 goto label1;

        r6 = (java.lang.Object[]) r5;

        goto label2;

     label1:
        r2 = newarray (java.lang.Object)[1];

        r2[0] = r5;

        r6 = r2;

     label2:
        $r3 = virtualinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = staticinvoke <org.junit.runners.Parameterized: org.junit.runners.parameterized.TestWithParameters createTestWithParameters(org.junit.runners.model.TestClass,java.lang.String,int,java.lang.Object[])>($r3, r1, i0, r6);

        return $r4;
    }

    private static org.junit.runners.parameterized.TestWithParameters createTestWithParameters(org.junit.runners.model.TestClass, java.lang.String, int, java.lang.Object[])
    {
        org.junit.runners.model.TestClass r0;
        int i0;
        java.lang.Object[] r1;
        java.lang.String $r3, $r4, $r10, r12, r13;
        java.lang.StringBuilder $r5;
        org.junit.runners.parameterized.TestWithParameters $r9;
        java.util.List $r11;

        r0 := @parameter0: org.junit.runners.model.TestClass;

        r12 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object[];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r4 = virtualinvoke r12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\{index\\}", $r3);

        r13 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r4, r1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = new org.junit.runners.parameterized.TestWithParameters;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r9.<org.junit.runners.parameterized.TestWithParameters: void <init>(java.lang.String,org.junit.runners.model.TestClass,java.util.List)>($r10, r0, $r11);

        return $r9;
    }

    private java.util.List createTestsForParameters(java.lang.Iterable, java.lang.String) throws java.lang.Exception
    {
        org.junit.runners.Parameterized r0;
        java.lang.String r1;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.junit.runners.parameterized.TestWithParameters $r5;
        java.lang.Iterable r6;
        int i0;
        java.util.Iterator r7;

        r0 := @this: org.junit.runners.Parameterized;

        r6 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r7 = interfaceinvoke r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = specialinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.parameterized.TestWithParameters createTestWithNotNormalizedParameters(java.lang.String,int,java.lang.Object)>(r1, i0, $r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private org.junit.runners.model.FrameworkMethod getParametersMethod() throws java.lang.Exception
    {
        org.junit.runners.Parameterized r0;
        java.util.Iterator r1;
        org.junit.runners.model.TestClass $r2, $r6;
        java.util.List $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, $r10;
        java.lang.Exception $r9;
        java.lang.Object $r11;
        org.junit.runners.model.FrameworkMethod r12;

        r0 := @this: org.junit.runners.Parameterized;

        $r2 = virtualinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$Parameters;");

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.junit.runners.model.FrameworkMethod) $r11;

        $z1 = virtualinvoke r12.<org.junit.runners.model.FrameworkMethod: boolean isStatic()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r12.<org.junit.runners.model.FrameworkMethod: boolean isPublic()>();

        if $z2 == 0 goto label2;

        return r12;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No public static parameters method on class ");

        $r6 = virtualinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.TestClass getTestClass()>();

        $r7 = virtualinvoke $r6.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = new java.lang.Exception;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private org.junit.runners.parameterized.ParametersRunnerFactory getParametersRunnerFactory(java.lang.Class) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        org.junit.runners.Parameterized r0;
        java.lang.'annotation'.Annotation $r1;
        java.lang.Class $r2, r6;
        java.lang.Object $r3;
        org.junit.runners.parameterized.ParametersRunnerFactory $r4, $r5;
        org.junit.runners.Parameterized$UseParametersRunnerFactory r7;

        r0 := @this: org.junit.runners.Parameterized;

        r6 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$UseParametersRunnerFactory;");

        r7 = (org.junit.runners.Parameterized$UseParametersRunnerFactory) $r1;

        if r7 != null goto label1;

        $r5 = <org.junit.runners.Parameterized: org.junit.runners.parameterized.ParametersRunnerFactory DEFAULT_FACTORY>;

        return $r5;

     label1:
        $r2 = interfaceinvoke r7.<org.junit.runners.Parameterized$UseParametersRunnerFactory: java.lang.Class value()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (org.junit.runners.parameterized.ParametersRunnerFactory) $r3;

        return $r4;
    }

    private java.lang.Exception parametersMethodReturnedWrongType() throws java.lang.Exception
    {
        org.junit.runners.Parameterized r0;
        java.lang.Exception $r1;
        java.lang.Object[] $r2;
        org.junit.runners.model.TestClass $r3;
        java.lang.String $r4, $r6, $r7;
        org.junit.runners.model.FrameworkMethod $r5;

        r0 := @this: org.junit.runners.Parameterized;

        $r1 = new java.lang.Exception;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = specialinvoke r0.<org.junit.runners.Parameterized: org.junit.runners.model.FrameworkMethod getParametersMethod()>();

        $r6 = virtualinvoke $r5.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r2[1] = $r6;

        $r7 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0}.{1}() must return an Iterable of arrays.", $r2);

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        return $r1;
    }

    protected java.util.List getChildren()
    {
        org.junit.runners.Parameterized r0;
        java.util.List $r1;

        r0 := @this: org.junit.runners.Parameterized;

        $r1 = r0.<org.junit.runners.Parameterized: java.util.List runners>;

        return $r1;
    }
}
