public abstract class org.junit.runners.ParentRunner extends org.junit.runner.Runner implements org.junit.runner.manipulation.Filterable, org.junit.runner.manipulation.Sortable
{
    private static final java.util.List VALIDATORS;
    private final java.lang.Object childrenLock;
    private volatile java.util.Collection filteredChildren;
    private volatile org.junit.runners.model.RunnerScheduler scheduler;
    private final org.junit.runners.model.TestClass testClass;

    static void <clinit>()
    {
        org.junit.validator.TestClassValidator[] $r0;
        org.junit.validator.AnnotationsValidator $r1;
        org.junit.validator.PublicClassValidator $r2;
        java.util.List $r3;

        $r0 = newarray (org.junit.validator.TestClassValidator)[2];

        $r1 = new org.junit.validator.AnnotationsValidator;

        specialinvoke $r1.<org.junit.validator.AnnotationsValidator: void <init>()>();

        $r0[0] = $r1;

        $r2 = new org.junit.validator.PublicClassValidator;

        specialinvoke $r2.<org.junit.validator.PublicClassValidator: void <init>()>();

        $r0[1] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.junit.runners.ParentRunner: java.util.List VALIDATORS> = $r3;

        return;
    }

    protected void <init>(java.lang.Class) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        org.junit.runners.ParentRunner$1 $r3;
        org.junit.runners.model.TestClass $r4;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.junit.runner.Runner: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock> = $r2;

        r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = null;

        $r3 = new org.junit.runners.ParentRunner$1;

        specialinvoke $r3.<org.junit.runners.ParentRunner$1: void <init>(org.junit.runners.ParentRunner)>(r0);

        r0.<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler> = $r3;

        $r4 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass createTestClass(java.lang.Class)>(r1);

        r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass> = $r4;

        specialinvoke r0.<org.junit.runners.ParentRunner: void validate()>();

        return;
    }

    static void access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.notification.RunNotifier r1;

        r0 := @parameter0: org.junit.runners.ParentRunner;

        r1 := @parameter1: org.junit.runner.notification.RunNotifier;

        specialinvoke r0.<org.junit.runners.ParentRunner: void runChildren(org.junit.runner.notification.RunNotifier)>(r1);

        return;
    }

    private void applyValidators(java.util.List)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1, $r5, $r9;
        java.util.Iterator r2;
        org.junit.runners.model.TestClass $r3, $r8;
        java.lang.Class $r4;
        boolean $z0;
        java.lang.Object $r6;
        org.junit.validator.TestClassValidator $r7;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        if $r4 == null goto label2;

        $r5 = <org.junit.runners.ParentRunner: java.util.List VALIDATORS>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.junit.validator.TestClassValidator) $r6;

        $r8 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r9 = interfaceinvoke $r7.<org.junit.validator.TestClassValidator: java.util.List validateTestClass(org.junit.runners.model.TestClass)>($r8);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        goto label1;

     label2:
        return;
    }

    private boolean areAllChildrenIgnored()
    {
        org.junit.runners.ParentRunner r0;
        java.util.Iterator r1;
        java.util.Collection $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;

        r0 := @this: org.junit.runners.ParentRunner;

        $r2 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        r1 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r0.<org.junit.runners.ParentRunner: boolean isIgnored(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private java.util.Comparator comparator(org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.manipulation.Sorter r1;
        org.junit.runners.ParentRunner$4 $r2;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: org.junit.runner.manipulation.Sorter;

        $r2 = new org.junit.runners.ParentRunner$4;

        specialinvoke $r2.<org.junit.runners.ParentRunner$4: void <init>(org.junit.runners.ParentRunner,org.junit.runner.manipulation.Sorter)>(r0, r1);

        return $r2;
    }

    private java.util.Collection getFilteredChildren()
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Object r1;
        java.util.Collection $r3, $r4, $r5, $r7;
        java.util.List $r6;
        java.lang.Throwable $r8;

        r0 := @this: org.junit.runners.ParentRunner;

        $r3 = r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        if $r3 != null goto label7;

        r1 = r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        if $r5 != null goto label2;

        $r6 = virtualinvoke r0.<org.junit.runners.ParentRunner: java.util.List getChildren()>();

        $r7 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r6);

        r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r7;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

     label7:
        $r4 = r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void runChildren(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.RunnerScheduler r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        org.junit.runners.ParentRunner$3 r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Throwable $r6;
        org.junit.runner.notification.RunNotifier r7;

        r0 := @this: org.junit.runners.ParentRunner;

        r7 := @parameter0: org.junit.runner.notification.RunNotifier;

        r1 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler>;

     label1:
        $r5 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = new org.junit.runners.ParentRunner$3;

        specialinvoke r4.<org.junit.runners.ParentRunner$3: void <init>(org.junit.runners.ParentRunner,java.lang.Object,org.junit.runner.notification.RunNotifier)>(r0, r3, r7);

        interfaceinvoke r1.<org.junit.runners.model.RunnerScheduler: void schedule(java.lang.Runnable)>(r4);

     label3:
        goto label2;

     label4:
        interfaceinvoke r1.<org.junit.runners.model.RunnerScheduler: void finished()>();

        return;

     label5:
        $r6 := @caughtexception;

        interfaceinvoke r1.<org.junit.runners.model.RunnerScheduler: void finished()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private boolean shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.manipulation.Filter r1;
        java.lang.Object r2;
        org.junit.runner.Description $r3;
        boolean $z0;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: org.junit.runner.manipulation.Filter;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>(r2);

        $z0 = virtualinvoke r1.<org.junit.runner.manipulation.Filter: boolean shouldRun(org.junit.runner.Description)>($r3);

        return $z0;
    }

    private void validate() throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.ParentRunner r0;
        java.util.ArrayList $r2;
        boolean $z0;
        org.junit.runners.model.InitializationError $r3;

        r0 := @this: org.junit.runners.ParentRunner;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.junit.runners.ParentRunner: void collectInitializationErrors(java.util.List)>($r2);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new org.junit.runners.model.InitializationError;

        specialinvoke $r3.<org.junit.runners.model.InitializationError: void <init>(java.util.List)>($r2);

        throw $r3;
    }

    private void validateClassRules(java.util.List)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1;
        org.junit.internal.runners.rules.RuleMemberValidator $r2, $r4;
        org.junit.runners.model.TestClass $r3, $r5;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator CLASS_RULE_VALIDATOR>;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, r1);

        $r4 = <org.junit.internal.runners.rules.RuleMemberValidator: org.junit.internal.runners.rules.RuleMemberValidator CLASS_RULE_METHOD_VALIDATOR>;

        $r5 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r4.<org.junit.internal.runners.rules.RuleMemberValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r5, r1);

        return;
    }

    private org.junit.runners.model.Statement withClassRules(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1;
        boolean $z0;
        org.junit.rules.RunRules $r2;
        org.junit.runner.Description $r3;
        org.junit.runners.model.Statement r4;

        r0 := @this: org.junit.runners.ParentRunner;

        r4 := @parameter0: org.junit.runners.model.Statement;

        r1 = virtualinvoke r0.<org.junit.runners.ParentRunner: java.util.List classRules()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new org.junit.rules.RunRules;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runner.Description getDescription()>();

        specialinvoke $r2.<org.junit.rules.RunRules: void <init>(org.junit.runners.model.Statement,java.lang.Iterable,org.junit.runner.Description)>(r4, r1, $r3);

        r4 = $r2;

     label2:
        return r4;
    }

    protected org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.runners.ParentRunner$2 $r2;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = new org.junit.runners.ParentRunner$2;

        specialinvoke $r2.<org.junit.runners.ParentRunner$2: void <init>(org.junit.runners.ParentRunner,org.junit.runner.notification.RunNotifier)>(r0, r1);

        return $r2;
    }

    protected org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.Statement r1, $r2, $r3, r5;
        boolean $z0;
        org.junit.runner.notification.RunNotifier r4;

        r0 := @this: org.junit.runners.ParentRunner;

        r4 := @parameter0: org.junit.runner.notification.RunNotifier;

        r1 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)>(r4);

        r5 = r1;

        $z0 = specialinvoke r0.<org.junit.runners.ParentRunner: boolean areAllChildrenIgnored()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withBeforeClasses(org.junit.runners.model.Statement)>(r1);

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withAfterClasses(org.junit.runners.model.Statement)>($r2);

        r5 = specialinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement withClassRules(org.junit.runners.model.Statement)>($r3);

     label1:
        return r5;
    }

    protected java.util.List classRules()
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1, $r4;
        org.junit.runners.model.TestClass $r2, $r3;

        r0 := @this: org.junit.runners.ParentRunner;

        $r2 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        r1 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethodValues(java.lang.Object,java.lang.Class,java.lang.Class)>(null, class "Lorg/junit/ClassRule;", class "Lorg/junit/rules/TestRule;");

        $r3 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r4 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>(null, class "Lorg/junit/ClassRule;", class "Lorg/junit/rules/TestRule;");

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        return r1;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.ParentRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/BeforeClass;", 1, r1);

        virtualinvoke r0.<org.junit.runners.ParentRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "Lorg/junit/AfterClass;", 1, r1);

        specialinvoke r0.<org.junit.runners.ParentRunner: void validateClassRules(java.util.List)>(r1);

        specialinvoke r0.<org.junit.runners.ParentRunner: void applyValidators(java.util.List)>(r1);

        return;
    }

    protected org.junit.runners.model.TestClass createTestClass(java.lang.Class)
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Class r1;
        org.junit.runners.model.TestClass $r2;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.lang.Class;

        $r2 = new org.junit.runners.model.TestClass;

        specialinvoke $r2.<org.junit.runners.model.TestClass: void <init>(java.lang.Class)>(r1);

        return $r2;
    }

    protected abstract org.junit.runner.Description describeChild(java.lang.Object);

    public void filter(org.junit.runner.manipulation.Filter) throws org.junit.runner.manipulation.NoTestsRemainException
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Object r1, r10;
        java.util.ArrayList r2;
        java.util.Iterator r3;
        boolean z0, $z1, $z2;
        java.util.Collection $r4, $r5, $r6;
        org.junit.runner.manipulation.NoTestsRemainException $r7, r12;
        java.lang.Throwable $r8;
        org.junit.runner.manipulation.Filter r9;

        r0 := @this: org.junit.runners.ParentRunner;

        r9 := @parameter0: org.junit.runner.manipulation.Filter;

        r1 = r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor r1;

     label01:
        r2 = new java.util.ArrayList;

        $r4 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        z0 = specialinvoke r0.<org.junit.runners.ParentRunner: boolean shouldRun(org.junit.runner.manipulation.Filter,java.lang.Object)>(r9, r10);

     label03:
        if z0 == 0 goto label09;

     label04:
        virtualinvoke r9.<org.junit.runner.manipulation.Filter: void apply(java.lang.Object)>(r10);

     label05:
        goto label10;

     label06:
        $r7 := @caughtexception;

     label07:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();

     label08:
        goto label05;

     label09:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();

     label10:
        goto label02;

     label11:
        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r2);

        r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r5;

        $r6 = r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren>;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label13;

        exitmonitor r1;

     label12:
        return;

     label13:
        r12 = new org.junit.runner.manipulation.NoTestsRemainException;

        specialinvoke r12.<org.junit.runner.manipulation.NoTestsRemainException: void <init>()>();

        throw r12;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch org.junit.runner.manipulation.NoTestsRemainException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected abstract java.util.List getChildren();

    public org.junit.runner.Description getDescription()
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.Description r1, $r7;
        java.util.Iterator r2;
        java.lang.String $r3;
        java.lang.'annotation'.Annotation[] $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.junit.runners.ParentRunner;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<org.junit.runners.ParentRunner: java.lang.'annotation'.Annotation[] getRunnerAnnotations()>();

        r1 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.String,java.lang.'annotation'.Annotation[])>($r3, $r4);

        $r5 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runner.Description describeChild(java.lang.Object)>($r6);

        virtualinvoke r1.<org.junit.runner.Description: void addChild(org.junit.runner.Description)>($r7);

        goto label1;

     label2:
        return r1;
    }

    protected java.lang.String getName()
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.String $r2;

        r0 := @this: org.junit.runners.ParentRunner;

        $r1 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        return $r2;
    }

    protected java.lang.'annotation'.Annotation[] getRunnerAnnotations()
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.'annotation'.Annotation[] $r2;

        r0 := @this: org.junit.runners.ParentRunner;

        $r1 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r2;
    }

    public final org.junit.runners.model.TestClass getTestClass()
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.TestClass $r1;

        r0 := @this: org.junit.runners.ParentRunner;

        $r1 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        return $r1;
    }

    protected boolean isIgnored(java.lang.Object)
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Object r1;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: java.lang.Object;

        return 0;
    }

    public void run(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.internal.runners.model.EachTestNotifier $r2;
        org.junit.runner.Description $r3;
        org.junit.runners.model.Statement $r4;
        org.junit.runner.notification.StoppedByUserException $r5;
        org.junit.internal.AssumptionViolatedException $r6;
        java.lang.Throwable $r7;
        org.junit.runner.notification.RunNotifier r8;

        r0 := @this: org.junit.runners.ParentRunner;

        r8 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = new org.junit.internal.runners.model.EachTestNotifier;

        $r3 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runner.Description getDescription()>();

        specialinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void <init>(org.junit.runner.notification.RunNotifier,org.junit.runner.Description)>(r8, $r3);

     label1:
        $r4 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)>(r8);

        virtualinvoke $r4.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        goto label6;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void addFailure(java.lang.Throwable)>($r7);

        goto label6;

     label4:
        $r5 := @caughtexception;

        throw $r5;

     label5:
        $r6 := @caughtexception;

        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void addFailedAssumption(org.junit.internal.AssumptionViolatedException)>($r6);

     label6:
        return;

        catch org.junit.internal.AssumptionViolatedException from label1 to label2 with label5;
        catch org.junit.runner.notification.StoppedByUserException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected abstract void runChild(java.lang.Object, org.junit.runner.notification.RunNotifier);

    protected final void runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.internal.runners.model.EachTestNotifier $r2;
        java.lang.Throwable $r3, $r5;
        org.junit.internal.AssumptionViolatedException $r4;
        org.junit.runners.model.Statement r6;
        org.junit.runner.Description r7;

        r0 := @this: org.junit.runners.ParentRunner;

        r6 := @parameter0: org.junit.runners.model.Statement;

        r7 := @parameter1: org.junit.runner.Description;

        r1 := @parameter2: org.junit.runner.notification.RunNotifier;

        $r2 = new org.junit.internal.runners.model.EachTestNotifier;

        specialinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void <init>(org.junit.runner.notification.RunNotifier,org.junit.runner.Description)>(r1, r7);

        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void fireTestStarted()>();

     label01:
        virtualinvoke r6.<org.junit.runners.model.Statement: void evaluate()>();

     label02:
        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void fireTestFinished()>();

        goto label09;

     label03:
        $r5 := @caughtexception;

     label04:
        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void addFailure(java.lang.Throwable)>($r5);

     label05:
        goto label02;

     label06:
        $r4 := @caughtexception;

     label07:
        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void addFailedAssumption(org.junit.internal.AssumptionViolatedException)>($r4);

     label08:
        goto label02;

     label09:
        return;

     label10:
        $r3 := @caughtexception;

        virtualinvoke $r2.<org.junit.internal.runners.model.EachTestNotifier: void fireTestFinished()>();

        throw $r3;

        catch org.junit.internal.AssumptionViolatedException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public void setScheduler(org.junit.runners.model.RunnerScheduler)
    {
        org.junit.runners.ParentRunner r0;
        org.junit.runners.model.RunnerScheduler r1;

        r0 := @this: org.junit.runners.ParentRunner;

        r1 := @parameter0: org.junit.runners.model.RunnerScheduler;

        r0.<org.junit.runners.ParentRunner: org.junit.runners.model.RunnerScheduler scheduler> = r1;

        return;
    }

    public void sort(org.junit.runner.manipulation.Sorter)
    {
        org.junit.runners.ParentRunner r0;
        java.lang.Object r1, $r6;
        java.util.Collection $r2, $r3, $r5;
        boolean $z0;
        java.util.Comparator $r4;
        java.lang.Throwable $r7;
        org.junit.runner.manipulation.Sorter r8;
        java.util.Iterator r9;
        java.util.ArrayList r10;

        r0 := @this: org.junit.runners.ParentRunner;

        r8 := @parameter0: org.junit.runner.manipulation.Sorter;

        r1 = r0.<org.junit.runners.ParentRunner: java.lang.Object childrenLock>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        r9 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r8.<org.junit.runner.manipulation.Sorter: void apply(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        r10 = new java.util.ArrayList;

        $r3 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Collection getFilteredChildren()>();

        specialinvoke r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = specialinvoke r0.<org.junit.runners.ParentRunner: java.util.Comparator comparator(org.junit.runner.manipulation.Sorter)>(r8);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r10, $r4);

        $r5 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r10);

        r0.<org.junit.runners.ParentRunner: java.util.Collection filteredChildren> = $r5;

        exitmonitor r1;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)
    {
        org.junit.runners.ParentRunner r0;
        boolean z0, $z1;
        java.util.List r1, $r3;
        org.junit.runners.model.TestClass $r2;
        java.lang.Object $r4;
        org.junit.runners.model.FrameworkMethod $r5;
        java.lang.Class r6;
        java.util.Iterator r7;

        r0 := @this: org.junit.runners.ParentRunner;

        r6 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.List;

        $r2 = virtualinvoke r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(r6);

        r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.junit.runners.model.FrameworkMethod) $r4;

        virtualinvoke $r5.<org.junit.runners.model.FrameworkMethod: void validatePublicVoidNoArg(boolean,java.util.List)>(z0, r1);

        goto label1;

     label2:
        return;
    }

    protected org.junit.runners.model.Statement withAfterClasses(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1;
        org.junit.runners.model.TestClass $r2;
        boolean $z0;
        org.junit.internal.runners.statements.RunAfters $r3;
        org.junit.runners.model.Statement r4;

        r0 := @this: org.junit.runners.ParentRunner;

        r4 := @parameter0: org.junit.runners.model.Statement;

        $r2 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        r1 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/AfterClass;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new org.junit.internal.runners.statements.RunAfters;

        specialinvoke $r3.<org.junit.internal.runners.statements.RunAfters: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>(r4, r1, null);

        r4 = $r3;

     label2:
        return r4;
    }

    protected org.junit.runners.model.Statement withBeforeClasses(org.junit.runners.model.Statement)
    {
        org.junit.runners.ParentRunner r0;
        java.util.List r1;
        org.junit.runners.model.TestClass $r2;
        boolean $z0;
        org.junit.internal.runners.statements.RunBefores $r3;
        org.junit.runners.model.Statement r4;

        r0 := @this: org.junit.runners.ParentRunner;

        r4 := @parameter0: org.junit.runners.model.Statement;

        $r2 = r0.<org.junit.runners.ParentRunner: org.junit.runners.model.TestClass testClass>;

        r1 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "Lorg/junit/BeforeClass;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new org.junit.internal.runners.statements.RunBefores;

        specialinvoke $r3.<org.junit.internal.runners.statements.RunBefores: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>(r4, r1, null);

        r4 = $r3;

     label2:
        return r4;
    }
}
