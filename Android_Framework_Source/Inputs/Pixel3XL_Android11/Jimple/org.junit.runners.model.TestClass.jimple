public class org.junit.runners.model.TestClass extends java.lang.Object implements org.junit.runners.model.Annotatable
{
    private static final org.junit.runners.model.TestClass$FieldComparator FIELD_COMPARATOR;
    private static final org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR;
    private final java.lang.Class clazz;
    private final java.util.Map fieldsForAnnotations;
    private final java.util.Map methodsForAnnotations;

    static void <clinit>()
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        org.junit.runners.model.TestClass$MethodComparator $r1;

        $r0 = new org.junit.runners.model.TestClass$FieldComparator;

        specialinvoke $r0.<org.junit.runners.model.TestClass$FieldComparator: void <init>(org.junit.runners.model.TestClass$1)>(null);

        <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$FieldComparator FIELD_COMPARATOR> = $r0;

        $r1 = new org.junit.runners.model.TestClass$MethodComparator;

        specialinvoke $r1.<org.junit.runners.model.TestClass$MethodComparator: void <init>(org.junit.runners.model.TestClass$1)>(null);

        <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.util.LinkedHashMap $r2, $r3;
        java.util.Map $r4, $r5;
        java.lang.reflect.Constructor[] $r6;
        int $i0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class r8;

        r0 := @this: org.junit.runners.model.TestClass;

        r8 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.runners.model.TestClass: java.lang.Class clazz> = r8;

        if r8 == null goto label2;

        $r6 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r6;

        if $i0 > 1 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Test class can only have one constructor");

        throw $r7;

     label2:
        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        virtualinvoke r0.<org.junit.runners.model.TestClass: void scanAnnotatedMembers(java.util.Map,java.util.Map)>($r2, $r3);

        $r4 = staticinvoke <org.junit.runners.model.TestClass: java.util.Map makeDeeplyUnmodifiable(java.util.Map)>($r2);

        r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations> = $r4;

        $r5 = staticinvoke <org.junit.runners.model.TestClass: java.util.Map makeDeeplyUnmodifiable(java.util.Map)>($r3);

        r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations> = $r5;

        return;
    }

    protected static void addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)
    {
        org.junit.runners.model.FrameworkMember r0;
        java.util.Map r1;
        java.lang.'annotation'.Annotation[] r2;
        int i0, i1;
        java.lang.Class r3;
        java.util.List r4;
        java.lang.'annotation'.Annotation $r5;
        boolean $z0, $z1;

        r0 := @parameter0: org.junit.runners.model.FrameworkMember;

        r1 := @parameter1: java.util.Map;

        r2 = virtualinvoke r0.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = r2[i1];

        r3 = interfaceinvoke $r5.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        r4 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>(r1, r3, 1);

        $z0 = virtualinvoke r0.<org.junit.runners.model.FrameworkMember: boolean isShadowedBy(java.util.List)>(r4);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = staticinvoke <org.junit.runners.model.TestClass: boolean runsTopToBottom(java.lang.Class)>(r3);

        if $z1 == 0 goto label3;

        interfaceinvoke r4.<java.util.List: void add(int,java.lang.Object)>(0, r0);

        goto label4;

     label3:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r0);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    private java.util.List collectValues(java.util.Map)
    {
        org.junit.runners.model.TestClass r0;
        java.util.LinkedHashSet $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        java.util.List $r6;
        java.util.Map r7;
        java.util.Iterator r8;

        r0 := @this: org.junit.runners.model.TestClass;

        r7 := @parameter0: java.util.Map;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = interfaceinvoke r7.<java.util.Map: java.util.Collection values()>();

        r8 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.List) $r5;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        goto label1;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r4;
    }

    private static java.util.List getAnnotatedMembers(java.util.Map, java.lang.Class, boolean)
    {
        java.lang.Class r0;
        boolean z0, $z1;
        java.util.ArrayList $r1;
        java.util.Map r3;
        java.lang.Object $r4;
        java.util.List r5;

        r3 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        if z0 == 0 goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r1);

     label1:
        $r4 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (java.util.List) $r4;

        if r5 != null goto label2;

        r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label2;

     label2:
        return r5;
    }

    private static java.lang.reflect.Field[] getSortedDeclaredFields(java.lang.Class)
    {
        org.junit.runners.model.TestClass$FieldComparator $r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r0 = <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$FieldComparator FIELD_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r0);

        return r2;
    }

    private static java.util.List getSuperClasses(java.lang.Class)
    {
        java.util.ArrayList $r1;
        java.lang.Class r2;

        r2 := @parameter0: java.lang.Class;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label1:
        if r2 == null goto label2;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r1;
    }

    private static java.util.Map makeDeeplyUnmodifiable(java.util.Map)
    {
        java.util.Iterator r1;
        java.util.LinkedHashMap $r2;
        java.util.Set $r3;
        boolean $z0;
        java.util.Map $r4, r12;
        java.lang.Object $r5, $r6, $r8;
        java.lang.Class $r7;
        java.util.List $r9, $r10;
        java.util.Map$Entry r13;

        r12 := @parameter0: java.util.Map;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r3 = interfaceinvoke r12.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.Class) $r6;

        $r8 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.util.List) $r8;

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r10);

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        return $r4;
    }

    private static boolean runsTopToBottom(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/Before;");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/BeforeClass;");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean equals(java.lang.Object)
    {
        org.junit.runners.model.TestClass r0, r6;
        java.lang.Class $r1, $r2, $r3, $r4;
        java.lang.Object r5;
        boolean z0;

        r0 := @this: org.junit.runners.model.TestClass;

        r5 := @parameter0: java.lang.Object;

        z0 = 1;

        if r0 != r5 goto label1;

        return 1;

     label1:
        if r5 != null goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label3;

        return 0;

     label3:
        r6 = (org.junit.runners.model.TestClass) r5;

        $r4 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r3 = r6.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if $r4 != $r3 goto label4;

        goto label5;

     label4:
        z0 = 0;

     label5:
        return z0;
    }

    public java.util.List getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1, r10;
        java.util.ArrayList $r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6, r9, r13;
        java.lang.Throwable $r7;
        java.lang.RuntimeException $r8;
        java.util.Iterator r11;
        org.junit.runners.model.FrameworkField r12;

        r0 := @this: org.junit.runners.model.TestClass;

        r9 := @parameter0: java.lang.Object;

        r10 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.Class;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>(r10);

        r11 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.junit.runners.model.FrameworkField) $r5;

     label2:
        r13 = virtualinvoke r12.<org.junit.runners.model.FrameworkField: java.lang.Object get(java.lang.Object)>(r9);

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r13);

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r13);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("How did getFields return a field we couldn\'t access?", $r7);

        throw $r8;

     label5:
        return $r3;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }

    public java.util.List getAnnotatedFields()
    {
        org.junit.runners.model.TestClass r0;
        java.util.Map $r1;
        java.util.List $r2;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations>;

        $r2 = specialinvoke r0.<org.junit.runners.model.TestClass: java.util.List collectValues(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.List getAnnotatedFields(java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.util.List $r3, $r4;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.runners.model.TestClass: java.util.Map fieldsForAnnotations>;

        $r3 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>($r2, r1, 0);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public java.util.List getAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r8, $r9, r17;
        java.lang.Class $r6, r18, r19;
        java.lang.Object[] $r7;
        java.lang.Throwable $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r13, $r16;
        java.lang.RuntimeException $r15;
        org.junit.runners.model.FrameworkMethod r20;

        r0 := @this: org.junit.runners.model.TestClass;

        r17 := @parameter0: java.lang.Object;

        r18 := @parameter1: java.lang.Class;

        r19 := @parameter2: java.lang.Class;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(r18);

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.junit.runners.model.FrameworkMethod) $r5;

     label2:
        $r6 = virtualinvoke r20.<org.junit.runners.model.FrameworkMethod: java.lang.Class getReturnType()>();

        $z1 = virtualinvoke r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z1 == 0 goto label3;

        $r7 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke r20.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>(r17, $r7);

        $r9 = virtualinvoke r19.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label1;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in ");

        $r13 = virtualinvoke r20.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new java.lang.RuntimeException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r15;

     label5:
        return $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.util.List getAnnotatedMethods()
    {
        org.junit.runners.model.TestClass r0;
        java.util.List r1;
        java.util.Map $r2;
        org.junit.runners.model.TestClass$MethodComparator $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        $r2 = r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations>;

        r1 = specialinvoke r0.<org.junit.runners.model.TestClass: java.util.List collectValues(java.util.Map)>($r2);

        $r3 = <org.junit.runners.model.TestClass: org.junit.runners.model.TestClass$MethodComparator METHOD_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r3);

        return r1;
    }

    public java.util.List getAnnotatedMethods(java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.util.List $r3, $r4;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.runners.model.TestClass: java.util.Map methodsForAnnotations>;

        $r3 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class,boolean)>($r2, r1, 0);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1, r2;
        java.lang.'annotation'.Annotation $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        return $r3;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] $r2, $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if r1 != null goto label1;

        $r3 = newarray (java.lang.'annotation'.Annotation)[0];

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r2;
    }

    public java.lang.Class getJavaClass()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class $r1;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if r1 != null goto label1;

        return "null";

     label1:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.reflect.Constructor getOnlyConstructor()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.reflect.Constructor[] r1;
        java.lang.Class $r2;
        int $i0;
        long $l1;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        $r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r3 = r1[0];

        return $r3;
    }

    public int hashCode()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class r1;
        int i0;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label2:
        return i0;
    }

    public boolean isANonStaticInnerClass()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class $r1, $r2;
        boolean $z0, $z1, z2;
        int $i0;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isPublic()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        return $z0;
    }

    protected void scanAnnotatedMembers(java.util.Map, java.util.Map)
    {
        org.junit.runners.model.TestClass r0;
        java.util.Map r1, r2;
        java.util.Iterator r3;
        java.lang.reflect.Method[] r4;
        java.lang.Class $r5, r12;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.junit.runners.model.FrameworkField $r8;
        java.lang.reflect.Field $r9;
        org.junit.runners.model.FrameworkMethod $r10;
        java.lang.reflect.Method $r11;
        int i1, i2, i3, i4;
        java.lang.reflect.Field[] r13;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $r5 = r0.<org.junit.runners.model.TestClass: java.lang.Class clazz>;

        $r6 = staticinvoke <org.junit.runners.model.TestClass: java.util.List getSuperClasses(java.lang.Class)>($r5);

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.Class) $r7;

        r4 = staticinvoke <org.junit.internal.MethodSorter: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>(r12);

        i1 = lengthof r4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r10 = new org.junit.runners.model.FrameworkMethod;

        $r11 = r4[i2];

        specialinvoke $r10.<org.junit.runners.model.FrameworkMethod: void <init>(java.lang.reflect.Method)>($r11);

        staticinvoke <org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r10, r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        r13 = staticinvoke <org.junit.runners.model.TestClass: java.lang.reflect.Field[] getSortedDeclaredFields(java.lang.Class)>(r12);

        i3 = lengthof r13;

        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $r8 = new org.junit.runners.model.FrameworkField;

        $r9 = r13[i4];

        specialinvoke $r8.<org.junit.runners.model.FrameworkField: void <init>(java.lang.reflect.Field)>($r9);

        staticinvoke <org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r8, r2);

        i4 = i4 + 1;

        goto label4;

     label5:
        goto label1;

     label6:
        return;
    }
}
