public class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters extends org.junit.runners.BlockJUnit4ClassRunner
{
    private final java.lang.String name;
    private final java.lang.Object[] parameters;

    public void <init>(org.junit.runners.parameterized.TestWithParameters) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        org.junit.runners.parameterized.TestWithParameters r1;
        org.junit.runners.model.TestClass $r2;
        java.lang.Class $r3;
        java.util.List $r4, $r5;
        int $i0;
        java.lang.Object[] $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r1 := @parameter0: org.junit.runners.parameterized.TestWithParameters;

        $r2 = virtualinvoke r1.<org.junit.runners.parameterized.TestWithParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void <init>(java.lang.Class)>($r3);

        $r4 = virtualinvoke r1.<org.junit.runners.parameterized.TestWithParameters: java.util.List getParameters()>();

        $r5 = virtualinvoke r1.<org.junit.runners.parameterized.TestWithParameters: java.util.List getParameters()>();

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = newarray (java.lang.Object)[$i0];

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters> = $r7;

        $r8 = virtualinvoke r1.<org.junit.runners.parameterized.TestWithParameters: java.lang.String getName()>();

        r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.String name> = $r8;

        return;
    }

    private java.lang.Object createTestUsingConstructorInjection() throws java.lang.Exception
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $r1 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        return $r4;
    }

    private java.lang.Object createTestUsingFieldInjection() throws java.lang.Exception
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r1, $r6, $r17, $r28, $r32;
        java.lang.StringBuilder $r2, $r20;
        java.lang.Exception $r9, $r42;
        java.lang.String $r10, $r22, $r25, $r35, $r39, $r43;
        org.junit.runners.model.TestClass $r11, $r21;
        java.lang.Class $r12, $r34, $r38;
        boolean $z0;
        java.lang.Object $r13, $r18, $r29, $r33, r45;
        org.junit.runners.model.FrameworkField $r14;
        java.lang.'annotation'.Annotation $r15;
        org.junit.runners.Parameterized$Parameter $r16;
        java.lang.Throwable $r19;
        java.util.List r44;
        java.util.Iterator r46;
        java.lang.reflect.Field r47;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r44 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.util.List getAnnotatedFieldsByParameter()>();

        $i1 = interfaceinvoke r44.<java.util.List: int size()>();

        $r1 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $i2 = lengthof $r1;

        if $i1 != $i2 goto label6;

        $r11 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r12 = virtualinvoke $r11.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        r45 = virtualinvoke $r12.<java.lang.Class: java.lang.Object newInstance()>();

        r46 = interfaceinvoke r44.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (org.junit.runners.model.FrameworkField) $r13;

        r47 = virtualinvoke $r14.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        $r15 = virtualinvoke r47.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$Parameter;");

        $r16 = (org.junit.runners.Parameterized$Parameter) $r15;

        i0 = interfaceinvoke $r16.<org.junit.runners.Parameterized$Parameter: int value()>();

     label2:
        $r17 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $r18 = $r17[i0];

        virtualinvoke r47.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r45, $r18);

     label3:
        goto label1;

     label4:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r22 = virtualinvoke $r21.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Trying to set ");

        $r25 = virtualinvoke r47.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with the value ");

        $r28 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $r29 = $r28[i0];

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is not the right type (");

        $r32 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $r33 = $r32[i0];

        $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.Class getClass()>();

        $r35 = virtualinvoke $r34.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r38 = virtualinvoke r47.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r39 = virtualinvoke $r38.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r42 = new java.lang.Exception;

        $r43 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r43, $r19);

        throw $r42;

     label5:
        return r45;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of parameters and @Parameter fields. @Parameter fields counted: ");

        $i3 = interfaceinvoke r44.<java.util.List: int size()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available parameters: ");

        $r6 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object[] parameters>;

        $i4 = lengthof $r6;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = new java.lang.Exception;

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    private boolean fieldsAreAnnotated()
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $r1 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.util.List getAnnotatedFieldsByParameter()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private java.util.List getAnnotatedFieldsByParameter()
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        org.junit.runners.model.TestClass $r1;
        java.util.List $r2;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $r1 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$Parameter;");

        return $r2;
    }

    protected org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.runners.model.Statement $r2;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)>(r1);

        return $r2;
    }

    public java.lang.Object createTest() throws java.lang.Exception
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $z0 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: boolean fieldsAreAnnotated()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object createTestUsingFieldInjection()>();

        return $r2;

     label1:
        $r1 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.Object createTestUsingConstructorInjection()>();

        return $r1;
    }

    protected java.lang.String getName()
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        java.lang.String $r1;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $r1 = r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.String name>;

        return $r1;
    }

    protected java.lang.'annotation'.Annotation[] getRunnerAnnotations()
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        java.lang.'annotation'.Annotation[] $r1;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        return $r1;
    }

    protected java.lang.String testName(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r6, $r8;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected void validateConstructor(java.util.List)
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        java.util.List r1;
        boolean $z0;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: void validateOnlyOneConstructor(java.util.List)>(r1);

        $z0 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: boolean fieldsAreAnnotated()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: void validateZeroArgConstructor(java.util.List)>(r1);

     label1:
        return;
    }

    protected void validateFields(java.util.List)
    {
        org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters r0;
        java.util.List r1, r2;
        int[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r13, $r24;
        java.lang.Exception $r11, $r17, $r32;
        java.lang.String $r12, $r18, $r33;
        java.lang.Object $r19;
        org.junit.runners.model.FrameworkField $r20;
        java.lang.reflect.Field $r21;
        java.lang.'annotation'.Annotation $r22;
        org.junit.runners.Parameterized$Parameter $r23;
        java.util.Iterator r34;

        r0 := @this: org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateFields(java.util.List)>(r1);

        $z0 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: boolean fieldsAreAnnotated()>();

        if $z0 == 0 goto label9;

        r2 = specialinvoke r0.<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: java.util.List getAnnotatedFieldsByParameter()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (int)[$i1];

        r34 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r19 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (org.junit.runners.model.FrameworkField) $r19;

        $r21 = virtualinvoke $r20.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        $r22 = virtualinvoke $r21.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/runners/Parameterized$Parameter;");

        $r23 = (org.junit.runners.Parameterized$Parameter) $r22;

        i10 = interfaceinvoke $r23.<org.junit.runners.Parameterized$Parameter: int value()>();

        if i10 < 0 goto label3;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        if i10 <= $i7 goto label2;

        goto label3;

     label2:
        $i8 = r3[i10];

        $i9 = $i8 + 1;

        r3[i10] = $i9;

        goto label4;

     label3:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid @Parameter value: ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". @Parameter fields counted: ");

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please use an index between 0 and ");

        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r32 = new java.lang.Exception;

        $r33 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>($r33);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r32);

     label4:
        goto label1;

     label5:
        i11 = 0;

     label6:
        $i2 = lengthof r3;

        if i11 >= $i2 goto label9;

        i0 = r3[i11];

        if i0 != 0 goto label7;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Parameter(");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is never used.");

        $r17 = new java.lang.Exception;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r18);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label8;

     label7:
        if i0 <= 1 goto label8;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Parameter(");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is used more than once (");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r11 = new java.lang.Exception;

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

     label8:
        i11 = i11 + 1;

        goto label6;

     label9:
        return;
    }
}
