public class org.junit.validator.AnnotationValidatorFactory extends java.lang.Object
{
    private static final java.util.concurrent.ConcurrentHashMap VALIDATORS_FOR_ANNOTATION_TYPES;

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.junit.validator.AnnotationValidatorFactory: java.util.concurrent.ConcurrentHashMap VALIDATORS_FOR_ANNOTATION_TYPES> = $r0;

        return;
    }

    public void <init>()
    {
        org.junit.validator.AnnotationValidatorFactory r0;

        r0 := @this: org.junit.validator.AnnotationValidatorFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.junit.validator.AnnotationValidator createAnnotationValidator(org.junit.validator.ValidateWith)
    {
        org.junit.validator.AnnotationValidatorFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r11, $r13;
        java.lang.Object $r2, $r10, $r14;
        java.lang.StringBuilder $r3, $r16;
        java.lang.Class $r5, r24;
        java.lang.String $r6, $r9, $r18, $r21;
        java.lang.IllegalArgumentException $r8;
        java.lang.Exception $r15;
        java.lang.RuntimeException $r20;
        org.junit.validator.ValidateWith r22;
        org.junit.validator.AnnotationValidator r23, r25, r26;

        r0 := @this: org.junit.validator.AnnotationValidatorFactory;

        r22 := @parameter0: org.junit.validator.ValidateWith;

        $r1 = <org.junit.validator.AnnotationValidatorFactory: java.util.concurrent.ConcurrentHashMap VALIDATORS_FOR_ANNOTATION_TYPES>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r22);

        r23 = (org.junit.validator.AnnotationValidator) $r2;

        if r23 == null goto label1;

        return r23;

     label1:
        r24 = interfaceinvoke r22.<org.junit.validator.ValidateWith: java.lang.Class value()>();

        if r24 == null goto label5;

     label2:
        $r10 = virtualinvoke r24.<java.lang.Class: java.lang.Object newInstance()>();

        r25 = (org.junit.validator.AnnotationValidator) $r10;

        $r11 = <org.junit.validator.AnnotationValidatorFactory: java.util.concurrent.ConcurrentHashMap VALIDATORS_FOR_ANNOTATION_TYPES>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r22, r25);

        $r13 = <org.junit.validator.AnnotationValidatorFactory: java.util.concurrent.ConcurrentHashMap VALIDATORS_FOR_ANNOTATION_TYPES>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r22);

        r26 = (org.junit.validator.AnnotationValidator) $r14;

     label3:
        return r26;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception received when creating AnnotationValidator class ");

        $r18 = virtualinvoke r24.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = new java.lang.RuntimeException;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r20;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t create validator, value is null in annotation ");

        $r5 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
