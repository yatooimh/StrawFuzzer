public class org.junit.validator.PublicClassValidator extends java.lang.Object implements org.junit.validator.TestClassValidator
{
    private static final java.util.List NO_VALIDATION_ERRORS;

    static void <clinit>()
    {
        java.util.List $r0;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <org.junit.validator.PublicClassValidator: java.util.List NO_VALIDATION_ERRORS> = $r0;

        return;
    }

    public void <init>()
    {
        org.junit.validator.PublicClassValidator r0;

        r0 := @this: org.junit.validator.PublicClassValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List validateTestClass(org.junit.runners.model.TestClass)
    {
        org.junit.validator.PublicClassValidator r0;
        org.junit.runners.model.TestClass r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        java.lang.Exception $r8;
        java.util.List $r10, $r11;

        r0 := @this: org.junit.validator.PublicClassValidator;

        r1 := @parameter0: org.junit.runners.model.TestClass;

        $z0 = virtualinvoke r1.<org.junit.runners.model.TestClass: boolean isPublic()>();

        if $z0 == 0 goto label1;

        $r11 = <org.junit.validator.PublicClassValidator: java.util.List NO_VALIDATION_ERRORS>;

        return $r11;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The class ");

        $r5 = virtualinvoke r1.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not public.");

        $r8 = new java.lang.Exception;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r9);

        $r10 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8);

        return $r10;
    }
}
