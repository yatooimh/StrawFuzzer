========================== UnReachableRiskyMethods(123) ==============================
<com.android.server.notification.ManagedServices: com.android.server.notification.ManagedServices$ManagedServiceInfo registerServiceImpl(com.android.server.notification.ManagedServices$ManagedServiceInfo)>
<com.android.server.AlarmManagerService: void setImpl(int,long,long,long,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,int,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo,int,java.lang.String)>
<android.os.IncidentManager: android.os.IIncidentManager getIIncidentManagerLocked()>
<com.android.server.dreams.DreamController: void attach(android.service.dreams.IDreamService)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int startStreaming(int,java.lang.String,android.telephony.mbms.IStreamingServiceCallback)>
<com.android.server.tv.TvInputHardwareManager: android.media.tv.ITvInputHardware acquireHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int,int,java.lang.String,int)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addProgressListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadProgressListener)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int initialize(android.telephony.mbms.IMbmsGroupCallSessionCallback,int)>
<android.security.KeyStore: int attestDeviceIds(android.security.keymaster.KeymasterArguments,android.security.keymaster.KeymasterCertificateChain)>
<com.android.ims.FeatureConnection: void setBinder(android.os.IBinder)>
<android.telephony.mbms.vendor.MbmsGroupCallServiceBase$1: int startGroupCall(int,long,java.util.List,java.util.List,android.telephony.mbms.IGroupCallCallback)>
<android.security.KeyStore: int attestKey(java.lang.String,android.security.keymaster.KeymasterArguments,android.security.keymaster.KeymasterCertificateChain)>
<com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: void <init>(com.android.internal.telephony.NetworkScanRequestTracker,android.telephony.NetworkScanRequest,android.os.Messenger,android.os.IBinder,int,com.android.internal.telephony.Phone,int,int,java.lang.String)>
<com.android.server.wm.WindowState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.Session,android.view.IWindow,com.android.server.wm.WindowToken,com.android.server.wm.WindowState,int,int,android.view.WindowManager$LayoutParams,int,int,int,boolean,com.android.server.wm.WindowState$PowerManagerWrapper)>
<com.android.server.wm.DragAndDropPermissionsHandler: void takeTransient(android.os.IBinder)>
<android.security.KeyStore: int generateKeyInternal(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int,android.security.keymaster.KeyCharacteristics)>
<com.android.server.ConnectivityService$NetworkProviderInfo: void connect(android.content.Context,android.os.Handler)>
<com.android.server.wm.AssistDataReceiverProxy: void linkToDeath()>
<android.security.KeyStore: int abort(android.os.IBinder)>
<com.android.server.print.UserState$PrintJobForAppCache: boolean onPrintJobCreated(android.os.IBinder,int,android.print.PrintJobInfo)>
<com.android.server.os.BugreportManagerServiceImpl$DumpstateListener: void <init>(com.android.server.os.BugreportManagerServiceImpl,android.os.IDumpstateListener,android.os.IDumpstate)>
<com.android.server.slice.PinnedSliceState: void pin(java.lang.String,android.app.slice.SliceSpec[],android.os.IBinder)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int addStatusListener(android.telephony.mbms.DownloadRequest,android.telephony.mbms.IDownloadStatusListener)>
<com.android.server.tv.TvRemoteServiceInput: void openGamepadBridge(android.os.IBinder,java.lang.String)>
<com.android.server.stats.pull.StatsPullAtomService: android.os.IStoraged getIStoragedService()>
<android.security.KeyStore: android.security.keymaster.OperationResult begin(java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>
<android.security.KeyStore: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>
<android.security.KeyStore: int importKeyInternal(java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int,android.security.keymaster.KeyCharacteristics)>
<com.android.server.StorageManagerService: void connectVold()>
<android.security.KeyStore: android.security.keymaster.OperationResult finish(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[],byte[],byte[])>
<android.security.KeyStore: int importWrappedKeyInternal(java.lang.String,byte[],java.lang.String,byte[],android.security.keymaster.KeymasterArguments,long,long,android.security.keymaster.KeyCharacteristics)>
<android.view.contentcapture.MainContentCaptureSession: void onSessionStarted(int,android.os.IBinder)>
<com.android.server.pm.Installer: void connect()>
<com.android.server.hdmi.HdmiControlService: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>
<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>
<com.android.server.hdmi.HdmiControlService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>
<com.android.server.broadcastradio.hal1.Tuner: void <init>(android.hardware.radio.ITunerCallback,int,int,boolean,int)>
<android.hardware.soundtrigger.SoundTriggerModule: void <init>(android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService,int,android.hardware.soundtrigger.SoundTrigger$StatusListener,android.os.Looper)>
<com.android.server.stats.pull.StatsPullAtomService: android.os.IThermalService getIThermalService()>
<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>
<android.hardware.camera2.impl.CameraDeviceImpl: void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)>
<com.android.server.pm.InstantAppResolverConnection$MyServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.wm.DisplayContent: void setRemoteInsetsController(android.view.IDisplayWindowInsetsController)>
<com.android.server.StorageManagerService: void connectStoraged()>
<android.service.media.MediaBrowserService$ServiceBinder$1: void run()>
<com.android.server.wm.WindowManagerService: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
<android.telecom.ConnectionServiceAdapter: void addAdapter(com.android.internal.telecom.IConnectionServiceAdapter)>
<android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()>
<android.telecom.VideoCallImpl: void <init>(com.android.internal.telecom.IVideoProvider,java.lang.String,int)>
<com.android.internal.telephony.dataconnection.DataServiceManager$CellularDataServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.os.ExternalVibration: void linkToDeath(android.os.IBinder$DeathRecipient)>
<android.net.wifi.nl80211.WifiNl80211Manager: boolean retrieveWificondAndRegisterForDeath()>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>
<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworksServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.stats.pull.StatsPullAtomService: android.app.INotificationManager getINotificationManagerService()>
<com.android.server.hdmi.HdmiControlService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>
<com.android.server.wm.PinnedStackController: void registerPinnedStackListener(android.view.IPinnedStackListener)>
<com.android.server.inputmethod.MultiClientInputMethodManagerService$PerUserData: void addClientLocked(int,int,com.android.internal.view.IInputMethodClient,int)>
<com.android.server.print.RemotePrintService$RemoteServiceConneciton: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.ims.internal.ImsVideoCallProviderWrapper: void <init>(com.android.ims.internal.IImsVideoCallProvider)>
<com.android.server.biometrics.BiometricServiceBase$LockoutResetMonitor: void <init>(com.android.server.biometrics.BiometricServiceBase,android.hardware.biometrics.IBiometricServiceLockoutResetCallback)>
<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void start(android.media.projection.IMediaProjectionCallback)>
<com.android.server.telecom.TelecomLoaderService$TelecomServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.media.midi.MidiDeviceServer$PortClient: void <init>(android.media.midi.MidiDeviceServer,android.os.IBinder)>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void addResourcesReclaimListener(int,android.media.tv.tunerresourcemanager.IResourcesReclaimListener)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
<com.android.server.incident.PendingReports: void authorizeReportImpl(int,java.lang.String,java.lang.String,java.lang.String,int,android.os.IIncidentAuthListener)>
<android.net.lowpan.LowpanManager: android.net.lowpan.LowpanInterface getInterface(android.net.lowpan.ILowpanInterface)>
<com.android.server.broadcastradio.hal2.AnnouncementAggregator: void <init>(android.hardware.radio.IAnnouncementListener)>
<android.telephony.mbms.vendor.MbmsStreamingServiceBase: int initialize(android.telephony.mbms.IMbmsStreamingSessionCallback,int)>
<com.android.server.wm.EmbeddedWindowController: void add(android.os.IBinder,com.android.server.wm.EmbeddedWindowController$EmbeddedWindow)>
<android.security.KeyStore: android.security.keymaster.ExportResult exportKey(java.lang.String,int,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int)>
<android.service.voice.VoiceInteractionService: void onReady()>
<com.android.server.notification.ManagedServices$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.tv.TvInputManagerService$SessionCallback: boolean addSessionTokenToClientStateLocked(android.media.tv.ITvInputSession)>
<android.telephony.MbmsStreamingSession$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.media.RemoteDisplayProviderProxy$Connection: boolean register()>
<com.android.server.accessibility.UiAutomationManager$UiAutomationService: void lambda$connectServiceUnknownThread$0$UiAutomationManager$UiAutomationService()>
<com.android.server.biometrics.BiometricService$AuthSession: void <init>(com.android.server.biometrics.BiometricService,java.util.HashMap,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int,int,boolean)>
<com.android.server.wm.RemoteAnimationController: void linkToDeathOfRunner()>
<com.android.server.hdmi.HdmiControlService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>
<android.hardware.camera2.impl.CameraOfflineSessionImpl: void setRemoteSession(android.hardware.camera2.ICameraOfflineSession)>
<com.android.server.ConnectivityService: void handleRegisterConnectivityDiagnosticsCallback(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>
<com.android.server.content.SyncManager$SyncHandler: void runBoundToAdapterH(com.android.server.content.SyncManager$ActiveSyncContext,android.os.IBinder)>
<android.security.KeyStore: android.security.keymaster.OperationResult update(android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[])>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
<android.hardware.location.GeofenceHardwareImpl$3: void handleMessage(android.os.Message)>
<com.android.ims.internal.uce.uceservice.ImsUceManager: void createUceService(boolean)>
<android.telephony.MbmsGroupCallSession$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.os.SchedulingPolicyService: int enableCpusetBoost(int,android.os.IBinder)>
<com.android.server.accessibility.AccessibilityServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.stats.pull.StatsPullAtomService: com.android.internal.app.procstats.IProcessStats getIProcessStatsService()>
<com.android.server.BluetoothManagerService$ProfileServiceConnections: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.telephony.MbmsDownloadSession$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.appop.AppOpsService$ClientRestrictionState: void <init>(com.android.server.appop.AppOpsService,android.os.IBinder)>
<com.android.server.camera.CameraServiceProxy: boolean notifyCameraserverLocked(int,java.util.Set)>
<android.speech.RecognitionService: void dispatchStartListening(android.content.Intent,android.speech.IRecognitionListener,int)>
<com.android.internal.telephony.AsyncChannel: boolean linkToDeathMonitor()>
<com.android.server.tv.tunerresourcemanager.TunerResourceManagerService: void onStart(boolean)>
<com.android.internal.infra.ServiceConnector$Impl: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
<com.android.internal.infra.AbstractRemoteService$RemoteServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.security.KeyStore: boolean addRngEntropy(byte[],int)>
<android.view.SurfaceView$RemoteAccessibilityEmbeddedConnection: void linkToDeath()>
<com.android.server.TestNetworkService$TestNetworkAgent: void <init>(com.android.server.TestNetworkService,android.os.Looper,android.content.Context,android.net.NetworkInfo,android.net.NetworkCapabilities,android.net.LinkProperties,int,android.os.IBinder)>
<android.service.appprediction.AppPredictionService$CallbackWrapper: void <init>(android.app.prediction.IPredictionCallback,java.util.function.Consumer)>
<com.android.server.wm.DisplayAreaOrganizerController: void registerOrganizer(android.window.IDisplayAreaOrganizer,int)>
<com.android.server.wm.TaskOrganizerController$TaskOrganizerState: void <init>(com.android.server.wm.TaskOrganizerController,android.window.ITaskOrganizer,int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation$ModuleService: void <init>(com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareValidation,int,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<com.android.server.tv.TvRemoteServiceInput: void openInputBridge(android.os.IBinder,java.lang.String,int,int,int)>
<android.database.CursorToBulkCursorAdaptor$ContentObserverProxy: void <init>(android.database.IContentObserver,android.os.IBinder$DeathRecipient)>
<com.android.server.hdmi.HdmiControlService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>
<com.android.server.wm.TaskPositioner: void register(com.android.server.wm.DisplayContent,com.android.server.wm.WindowState)>
<com.android.server.hdmi.HdmiControlService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>
<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)>
<android.telephony.mbms.vendor.MbmsDownloadServiceBase: int initialize(int,android.telephony.mbms.IMbmsDownloadSessionCallback)>
<android.telecom.RemoteConnectionService: void <init>(com.android.internal.telecom.IConnectionService,android.telecom.ConnectionService)>
<com.android.server.lights.LightsService$VintfHalCache: android.hardware.light.ILights get()>
<com.android.server.location.LocationManagerServiceUtils$LinkedListenerBase: boolean linkToListenerDeathNotificationLocked(android.os.IBinder)>
<com.android.server.hdmi.HdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>
<com.android.server.media.MediaRoute2ProviderServiceProxy$Connection: boolean register()>
<com.android.server.hdmi.HdmiControlService: void addSystemAudioModeChangeListner(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>



========================== ReachableRiskyMethods(87) ==============================
<com.android.server.am.ContentProviderRecord$ExternalProcessHandle: void <init>(com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String)>
<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void reinit(long,long,android.os.IBinder,java.lang.Runnable,int)>
<com.android.server.StorageManagerService$ObbState: void link()>
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>
<com.android.server.pm.PackageManagerService$PackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<com.android.server.wm.RecentsAnimationController: void linkToDeathOfRunner()>
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
<com.android.server.appop.AppOpsService$StartedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsStartedCallback,int,int,int)>
<android.media.AudioPlaybackConfiguration$IPlayerShell: void monitorDeath()>
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<com.android.server.appop.AppOpsService$ActiveCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsActiveCallback,int,int,int)>
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>
<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
<com.android.server.biometrics.ClientMonitor: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase$DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase$ServiceListener,int,int,boolean,java.lang.String,int)>
<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>
<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>
<com.android.server.appop.AppOpsService$ModeCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsCallback,int,int,int,int,int)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
<com.android.server.net.NetworkStatsObservers$RequestInfo: void <init>(com.android.server.net.NetworkStatsObservers,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder,int,int)>
<com.android.server.om.IdmapDaemon: android.os.IBinder getIdmapService()>
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>
<com.android.server.wm.WindowToken$DeathRecipient: void linkToDeath()>
<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: void <init>(java.lang.String,android.net.netstats.provider.INetworkStatsProvider,java.util.concurrent.Semaphore,android.net.INetworkManagementEventObserver,java.util.concurrent.CopyOnWriteArrayList)>
<com.android.server.wm.ShellRoot: void <init>(android.view.IWindow,com.android.server.wm.DisplayContent,int)>
<com.android.server.accounts.AccountManagerService$Session: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean)>
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
<com.android.server.media.MediaSessionRecord: void <init>(int,int,int,java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,com.android.server.media.MediaSessionService,android.os.Looper,int)>
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>
<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>
<com.android.server.autofill.Session: void setClientLocked(android.os.IBinder)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.audio.BtHelper$ScoClient: void registerDeathRecipient()>
<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>
<android.graphics.GraphicsStatsService$ActiveBuffer: void <init>(android.graphics.GraphicsStatsService,android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>
<com.android.server.appop.AppOpsService$NotedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsNotedCallback,int,int,int)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>
<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventDispatchedListenerLocked(android.media.session.IOnMediaKeyEventDispatchedListener,int)>
<com.android.server.connectivity.KeepaliveTracker$KeepaliveInfo: void <init>(com.android.server.connectivity.KeepaliveTracker,android.net.ISocketKeepaliveCallback,com.android.server.connectivity.NetworkAgentInfo,android.net.KeepalivePacketData,int,int,java.io.FileDescriptor)>
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>
<com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper: void linkToDeath(android.os.IBinder$DeathRecipient)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<com.android.server.biometrics.BiometricService$EnabledOnKeyguardCallback: void <init>(com.android.server.biometrics.BiometricService,android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
<com.android.server.wm.ShellRoot: void setAccessibilityWindow(android.view.IWindow)>
<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>
<com.android.server.location.ContextHubClientBroker: void attachDeathRecipient()>
<com.android.server.SensorPrivacyService$DeathRecipient: void <init>(com.android.server.SensorPrivacyService,android.hardware.ISensorPrivacyListener)>
<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>
<com.android.server.wm.InputConsumerImpl: void linkToDeathRecipient()>
<com.android.server.media.projection.MediaProjectionManagerService: void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback,android.os.IBinder$DeathRecipient)>
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>
<android.telephony.TelephonyManager: com.android.internal.telephony.ISub getSubscriptionService()>
<android.hardware.soundtrigger.SoundTrigger: android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService getService()>
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>
<com.android.server.contentcapture.ContentCaptureServerSession: void <init>(java.lang.Object,android.os.IBinder,com.android.server.contentcapture.ContentCapturePerUserService,android.content.ComponentName,com.android.internal.os.IResultReceiver,int,int,int,int,int)>
<com.android.server.statusbar.StatusBarManagerService$DisableRecord: void <init>(com.android.server.statusbar.StatusBarManagerService,int,android.os.IBinder)>
<com.android.server.accessibility.UiAutomationManager: void registerUiTestAutomationServiceLocked(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.content.Context,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,int)>
<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>
<com.android.server.audio.AudioDeviceBroker$SpeakerphoneClient: boolean registerDeathRecipient()>
<android.view.RemoteAnimationDefinition: void linkToDeath(android.os.IBinder$DeathRecipient)>
<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>
<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>
<com.android.server.print.UserState$ListenerRecord: void <init>(com.android.server.print.UserState,android.os.IInterface)>
<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventSessionChangedListenerLocked(android.media.session.IOnMediaKeyEventSessionChangedListener,int)>
<com.android.server.print.UserState$PrintJobStateChangeListenerRecord: void <init>(com.android.server.print.UserState,android.print.IPrintJobStateChangeListener,int)>
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void <init>(long,long,android.os.IBinder,java.lang.Runnable,int)>
<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>
<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>
<com.android.server.textclassifier.TextClassificationManagerService$PendingRequest: void <init>(java.lang.String,com.android.internal.util.FunctionalUtils$ThrowingRunnable,com.android.internal.util.FunctionalUtils$ThrowingRunnable,android.os.IBinder,com.android.server.textclassifier.TextClassificationManagerService,com.android.server.textclassifier.TextClassificationManagerService$ServiceState,int)>
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int,int,long)>
<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder,boolean)>
<com.android.internal.util.AsyncChannel: boolean linkToDeathMonitor()>
<com.android.server.statusbar.StatusBarManagerService$DeathRecipient: void linkToDeath()>
<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: boolean init()>



========================== AllEntryPointNumForMSPair ==================================
<<com.android.server.statusbar.StatusBarManagerService$DisableRecord: void <init>(com.android.server.statusbar.StatusBarManagerService,int,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 13
<<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r22, 0)>: 1
<<com.android.server.wm.WindowToken$DeathRecipient: void linkToDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 574
<<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.print.UserState$PrintJobStateChangeListenerRecord: void <init>(com.android.server.print.UserState,android.print.IPrintJobStateChangeListener,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r18, 0)>: 1
<<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)>: 1
<<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)>: 1
<<com.android.server.textclassifier.TextClassificationManagerService$PendingRequest: void <init>(java.lang.String,com.android.internal.util.FunctionalUtils$ThrowingRunnable,com.android.internal.util.FunctionalUtils$ThrowingRunnable,android.os.IBinder,com.android.server.textclassifier.TextClassificationManagerService,com.android.server.textclassifier.TextClassificationManagerService$ServiceState,int)>--interfaceinvoke r14.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 9
<<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void reinit(long,long,android.os.IBinder,java.lang.Runnable,int)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 6
<<com.android.server.connectivity.KeepaliveTracker$KeepaliveInfo: void <init>(com.android.server.connectivity.KeepaliveTracker,android.net.ISocketKeepaliveCallback,com.android.server.connectivity.NetworkAgentInfo,android.net.KeepalivePacketData,int,int,java.io.FileDescriptor)>--interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 3
<<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r12, 0)>: 1
<<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>--interfaceinvoke $r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)>: 1
<<android.telephony.TelephonyManager: com.android.internal.telephony.ISub getSubscriptionService()>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)>: 574
<<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: void <init>(java.lang.String,android.net.netstats.provider.INetworkStatsProvider,java.util.concurrent.Semaphore,android.net.INetworkManagementEventObserver,java.util.concurrent.CopyOnWriteArrayList)>--interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>--interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)>: 1
<<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>--interfaceinvoke r26.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r28, 0)>: 2
<<com.android.server.statusbar.StatusBarManagerService$DeathRecipient: void linkToDeath()>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)>: 1
<<com.android.server.accounts.AccountManagerService$Session: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean)>--interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 16
<<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0)>: 1
<<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder,boolean)>--interfaceinvoke r23.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r14, 0)>: 21
<<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)>: 1
<<android.media.AudioPlaybackConfiguration$IPlayerShell: void monitorDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<android.graphics.GraphicsStatsService$ActiveBuffer: void <init>(android.graphics.GraphicsStatsService,android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>--interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.am.ContentProviderRecord$ExternalProcessHandle: void <init>(com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>--interfaceinvoke r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)>: 1
<<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r31, 0)>: 1
<<android.hardware.soundtrigger.SoundTrigger: android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService getService()>--interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)>: 574
<<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)>: 5
<<com.android.server.wm.ShellRoot: void <init>(android.view.IWindow,com.android.server.wm.DisplayContent,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r4, 0)>: 1
<<com.android.server.biometrics.BiometricService$EnabledOnKeyguardCallback: void <init>(com.android.server.biometrics.BiometricService,android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.media.MediaSessionRecord: void <init>(int,int,int,java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,com.android.server.media.MediaSessionService,android.os.Looper,int)>--interfaceinvoke $r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.print.UserState$ListenerRecord: void <init>(com.android.server.print.UserState,android.os.IInterface)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper: void linkToDeath(android.os.IBinder$DeathRecipient)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)>: 1
<<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r41, 0)>: 1
<<com.android.server.pm.PackageManagerService$PackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r16, 0)>: 1
<<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>--interfaceinvoke r75.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r40, 0)>: 1
<<com.android.server.appop.AppOpsService$NotedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsNotedCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>--interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)>: 1
<<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>--interfaceinvoke r19.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r26, 0)>: 5
<<com.android.server.media.projection.MediaProjectionManagerService: void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback,android.os.IBinder$DeathRecipient)>--interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: boolean init()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.StorageManagerService$ObbState: void link()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>--interfaceinvoke $r13.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r83, 0)>: 2
<<com.android.server.appop.AppOpsService$ActiveCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsActiveCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>--interfaceinvoke r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)>: 1
<<com.android.server.accessibility.UiAutomationManager: void registerUiTestAutomationServiceLocked(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.content.Context,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,int)>--interfaceinvoke $r17.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r18, 0)>: 1
<<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>--interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)>: 1
<<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)>: 1
<<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>--interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)>: 1
<<com.android.server.audio.AudioDeviceBroker$SpeakerphoneClient: boolean registerDeathRecipient()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.audio.BtHelper$ScoClient: void registerDeathRecipient()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 3
<<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>--interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r25, 0)>: 1
<<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)>: 1
<<com.android.server.location.ContextHubClientBroker: void attachDeathRecipient()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.wm.InputConsumerImpl: void linkToDeathRecipient()>--interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 575
<<com.android.server.biometrics.ClientMonitor: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase$DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase$ServiceListener,int,int,boolean,java.lang.String,int)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 6
<<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventDispatchedListenerLocked(android.media.session.IOnMediaKeyEventDispatchedListener,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)>: 1
<<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int,int,long)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r166, 0)>: 1
<<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 4
<<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>--interfaceinvoke r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)>: 2
<<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventSessionChangedListenerLocked(android.media.session.IOnMediaKeyEventSessionChangedListener,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)>: 1
<<com.android.server.net.NetworkStatsObservers$RequestInfo: void <init>(com.android.server.net.NetworkStatsObservers,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder,int,int)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.internal.util.AsyncChannel: boolean linkToDeathMonitor()>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0)>: 574
<<com.android.server.contentcapture.ContentCaptureServerSession: void <init>(java.lang.Object,android.os.IBinder,com.android.server.contentcapture.ContentCapturePerUserService,android.content.ComponentName,com.android.internal.os.IResultReceiver,int,int,int,int,int)>--interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)>: 1
<<com.android.server.SensorPrivacyService$DeathRecipient: void <init>(com.android.server.SensorPrivacyService,android.hardware.ISensorPrivacyListener)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback)>--interfaceinvoke $r24.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>--interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)>: 44
<<com.android.server.om.IdmapDaemon: android.os.IBinder getIdmapService()>--interfaceinvoke r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r10, 0)>: 574
<<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0)>: 1
<<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r14, 0)>: 1
<<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)>: 574
<<android.view.RemoteAnimationDefinition: void linkToDeath(android.os.IBinder$DeathRecipient)>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)>: 1
<<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>--interfaceinvoke r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)>: 574
<<com.android.server.autofill.Session: void setClientLocked(android.os.IBinder)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)>: 2
<<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void <init>(long,long,android.os.IBinder,java.lang.Runnable,int)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 6
<<com.android.server.appop.AppOpsService$StartedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsStartedCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 1
<<com.android.server.appop.AppOpsService$ModeCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsCallback,int,int,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>--interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r11, 0)>: 1
<<com.android.server.wm.RecentsAnimationController: void linkToDeathOfRunner()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)>: 2
<<com.android.server.wm.ShellRoot: void setAccessibilityWindow(android.view.IWindow)>--interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r9, 0)>: 1
<<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)>: 1
Pair Sum: 4812
Interface Num: 601



========================== AllEntryPoints ====================================
<com.android.server.statusbar.StatusBarManagerService$DisableRecord: void <init>(com.android.server.statusbar.StatusBarManagerService,int,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r22, 0)
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
<com.android.server.wm.WindowToken$DeathRecipient: void linkToDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
<com.android.server.print.UserState$PrintJobStateChangeListenerRecord: void <init>(com.android.server.print.UserState,android.print.IPrintJobStateChangeListener,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r18, 0)
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<com.android.server.textclassifier.TextClassificationManagerService$PendingRequest: void <init>(java.lang.String,com.android.internal.util.FunctionalUtils$ThrowingRunnable,com.android.internal.util.FunctionalUtils$ThrowingRunnable,android.os.IBinder,com.android.server.textclassifier.TextClassificationManagerService,com.android.server.textclassifier.TextClassificationManagerService$ServiceState,int)>--interfaceinvoke r14.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void reinit(long,long,android.os.IBinder,java.lang.Runnable,int)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
<com.android.server.connectivity.KeepaliveTracker$KeepaliveInfo: void <init>(com.android.server.connectivity.KeepaliveTracker,android.net.ISocketKeepaliveCallback,com.android.server.connectivity.NetworkAgentInfo,android.net.KeepalivePacketData,int,int,java.io.FileDescriptor)>--interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r12, 0)
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>--interfaceinvoke $r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<android.telephony.TelephonyManager: com.android.internal.telephony.ISub getSubscriptionService()>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: void <init>(java.lang.String,android.net.netstats.provider.INetworkStatsProvider,java.util.concurrent.Semaphore,android.net.INetworkManagementEventObserver,java.util.concurrent.CopyOnWriteArrayList)>--interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>--interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>--interfaceinvoke r26.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r28, 0)
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
<com.android.server.statusbar.StatusBarManagerService$DeathRecipient: void linkToDeath()>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
<com.android.server.accounts.AccountManagerService$Session: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean)>--interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0)
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder,boolean)>--interfaceinvoke r23.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r14, 0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
<android.media.AudioPlaybackConfiguration$IPlayerShell: void monitorDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
<android.graphics.GraphicsStatsService$ActiveBuffer: void <init>(android.graphics.GraphicsStatsService,android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>--interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
<com.android.server.am.ContentProviderRecord$ExternalProcessHandle: void <init>(com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>--interfaceinvoke r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r31, 0)
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
<android.hardware.soundtrigger.SoundTrigger: android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService getService()>--interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.server.wm.ShellRoot: void <init>(android.view.IWindow,com.android.server.wm.DisplayContent,int)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r4, 0)
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
<com.android.server.biometrics.BiometricService$EnabledOnKeyguardCallback: void <init>(com.android.server.biometrics.BiometricService,android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
<com.android.server.media.MediaSessionRecord: void <init>(int,int,int,java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,com.android.server.media.MediaSessionService,android.os.Looper,int)>--interfaceinvoke $r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
<com.android.server.print.UserState$ListenerRecord: void <init>(com.android.server.print.UserState,android.os.IInterface)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
<com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper: void linkToDeath(android.os.IBinder$DeathRecipient)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r41, 0)
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<com.android.server.pm.PackageManagerService$PackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r16, 0)
        <android.content.pm.IPackageManagerNative$Stub$Proxy: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>--interfaceinvoke r75.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r40, 0)
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.appop.AppOpsService$NotedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsNotedCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>--interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
        <android.hardware.input.IInputManager$Stub$Proxy: void vibrate(int,long[],int,android.os.IBinder)>
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>--interfaceinvoke r19.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r26, 0)
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<com.android.server.media.projection.MediaProjectionManagerService: void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback,android.os.IBinder$DeathRecipient)>--interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: boolean init()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: int trackRecorder(android.os.IBinder)>
<com.android.server.StorageManagerService$ObbState: void link()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>--interfaceinvoke $r13.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r83, 0)
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.appop.AppOpsService$ActiveCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsActiveCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>--interfaceinvoke r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
<com.android.server.accessibility.UiAutomationManager: void registerUiTestAutomationServiceLocked(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.content.Context,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,int)>--interfaceinvoke $r17.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r18, 0)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>--interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
        <android.hardware.display.IDisplayManager$Stub$Proxy: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>--interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
        <android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher,int)>
<com.android.server.audio.AudioDeviceBroker$SpeakerphoneClient: boolean registerDeathRecipient()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
<com.android.server.audio.BtHelper$ScoClient: void registerDeathRecipient()>--interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>--interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r25, 0)
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
        <android.hardware.input.IInputManager$Stub$Proxy: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<com.android.server.location.ContextHubClientBroker: void attachDeathRecipient()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
<com.android.server.wm.InputConsumerImpl: void linkToDeathRecipient()>--interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.biometrics.ClientMonitor: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase$DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase$ServiceListener,int,int,boolean,java.lang.String,int)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void enumerate(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventDispatchedListenerLocked(android.media.session.IOnMediaKeyEventDispatchedListener,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int,int,long)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r166, 0)
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>--interfaceinvoke r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventSessionChangedListenerLocked(android.media.session.IOnMediaKeyEventSessionChangedListener,int)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
<com.android.server.net.NetworkStatsObservers$RequestInfo: void <init>(com.android.server.net.NetworkStatsObservers,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder,int,int)>--interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
<com.android.internal.util.AsyncChannel: boolean linkToDeathMonitor()>--interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.contentcapture.ContentCaptureServerSession: void <init>(java.lang.Object,android.os.IBinder,com.android.server.contentcapture.ContentCapturePerUserService,android.content.ComponentName,com.android.internal.os.IResultReceiver,int,int,int,int,int)>--interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
<com.android.server.SensorPrivacyService$DeathRecipient: void <init>(com.android.server.SensorPrivacyService,android.hardware.ISensorPrivacyListener)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.hardware.ISensorPrivacyManager$Stub$Proxy: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>
<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback)>--interfaceinvoke $r24.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>--interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void registerListener(android.os.storage.IStorageEventListener)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.view.IWindowManager$Stub$Proxy: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalStatusListener(android.os.IThermalStatusListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.hardware.ISensorPrivacyManager$Stub$Proxy: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
<com.android.server.om.IdmapDaemon: android.os.IBinder getIdmapService()>--interfaceinvoke r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r10, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>--interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0)
        <android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)>
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>--interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r14, 0)
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<android.view.RemoteAnimationDefinition: void linkToDeath(android.os.IBinder$DeathRecipient)>--interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>--interfaceinvoke r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
        <android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
        <android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
        <android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)>
        <android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)>
        <android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
        <android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
        <android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
        <android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
        <android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        <android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        <android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
        <android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
        <android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
        <android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
        <android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)>
        <android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
        <android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
        <android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
        <android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
        <android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)>
        <android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)>
        <android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)>
        <android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
        <android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)>
        <android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)>
        <android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
        <android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)>
        <android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
        <android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)>
        <android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
        <android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
        <android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
        <android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)>
        <android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)>
        <android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
        <android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
        <android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
        <android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
        <android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
        <android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.server.autofill.Session: void setClientLocked(android.os.IBinder)>--interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void restoreSession(int,android.os.IBinder,android.os.IBinder,com.android.internal.os.IResultReceiver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void <init>(long,long,android.os.IBinder,java.lang.Runnable,int)>--interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
<com.android.server.appop.AppOpsService$StartedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsStartedCallback,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
<com.android.server.appop.AppOpsService$ModeCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsCallback,int,int,int,int,int)>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>--interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r11, 0)
        <android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
<com.android.server.wm.RecentsAnimationController: void linkToDeathOfRunner()>--interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
<com.android.server.wm.ShellRoot: void setAccessibilityWindow(android.view.IWindow)>--interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r9, 0)
        <android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>--interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
        <android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)>



========================== RiskyMethodAndUnits ====================================
<com.android.server.statusbar.StatusBarManagerService$DisableRecord: void <init>(com.android.server.statusbar.StatusBarManagerService,int,android.os.IBinder)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r22, 0)
<com.android.server.wm.WindowToken$DeathRecipient: void linkToDeath()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.PlaybackActivityMonitor$PlayMonitorClient: boolean init()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.print.UserState$PrintJobStateChangeListenerRecord: void <init>(com.android.server.print.UserState,android.print.IPrintJobStateChangeListener,int)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r18, 0)
<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
<com.android.server.textclassifier.TextClassificationManagerService$PendingRequest: void <init>(java.lang.String,com.android.internal.util.FunctionalUtils$ThrowingRunnable,com.android.internal.util.FunctionalUtils$ThrowingRunnable,android.os.IBinder,com.android.server.textclassifier.TextClassificationManagerService,com.android.server.textclassifier.TextClassificationManagerService$ServiceState,int)>
        interfaceinvoke r14.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void reinit(long,long,android.os.IBinder,java.lang.Runnable,int)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.connectivity.KeepaliveTracker$KeepaliveInfo: void <init>(com.android.server.connectivity.KeepaliveTracker,android.net.ISocketKeepaliveCallback,com.android.server.connectivity.NetworkAgentInfo,android.net.KeepalivePacketData,int,int,java.io.FileDescriptor)>
        interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.AudioService$ForceControlStreamClient: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>
        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r12, 0)
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        interfaceinvoke $r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
<android.telephony.TelephonyManager: com.android.internal.telephony.ISub getSubscriptionService()>
        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
<com.android.server.audio.AudioService$RmtSbmxFullVolDeathHandler: void <init>(com.android.server.audio.AudioService,android.os.IBinder)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: void <init>(java.lang.String,android.net.netstats.provider.INetworkStatsProvider,java.util.concurrent.Semaphore,android.net.INetworkManagementEventObserver,java.util.concurrent.CopyOnWriteArrayList)>
        interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>
        interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>
        interfaceinvoke r26.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r28, 0)
<com.android.server.statusbar.StatusBarManagerService$DeathRecipient: void linkToDeath()>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)
<com.android.server.accounts.AccountManagerService$Session: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,boolean,boolean)>
        interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0)
<android.app.LoadedApk$ServiceDispatcher: void doConnected(android.content.ComponentName,android.os.IBinder,boolean)>
        interfaceinvoke r23.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r14, 0)
<com.android.server.VibratorService: void linkVibration(com.android.server.VibratorService$Vibration)>
        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
<android.media.AudioPlaybackConfiguration$IPlayerShell: void monitorDeath()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>
        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<android.graphics.GraphicsStatsService$ActiveBuffer: void <init>(android.graphics.GraphicsStatsService,android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>
        interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.am.ContentProviderRecord$ExternalProcessHandle: void <init>(com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String)>
        interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.accessibility.AccessibilityWindowManager$RemoteAccessibilityConnection: void linkToDeath()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
        interfaceinvoke r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0)
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r31, 0)
<android.hardware.soundtrigger.SoundTrigger: android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService getService()>
        interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>
        interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
<com.android.server.wm.ShellRoot: void <init>(android.view.IWindow,com.android.server.wm.DisplayContent,int)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r4, 0)
<com.android.server.biometrics.BiometricService$EnabledOnKeyguardCallback: void <init>(com.android.server.biometrics.BiometricService,android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.media.MediaSessionRecord: void <init>(int,int,int,java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,com.android.server.media.MediaSessionService,android.os.Looper,int)>
        interfaceinvoke $r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.print.UserState$ListenerRecord: void <init>(com.android.server.print.UserState,android.os.IInterface)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.accessibility.magnification.WindowMagnificationConnectionWrapper: void linkToDeath(android.os.IBinder$DeathRecipient)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)
<com.android.server.audio.RecordingActivityMonitor$RecMonitorClient: boolean init()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r41, 0)
<com.android.server.pm.PackageManagerService$PackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
        interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r16, 0)
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>
        interfaceinvoke r75.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r40, 0)
<com.android.server.appop.AppOpsService$NotedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsNotedCallback,int,int,int)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
        interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>
        interfaceinvoke r19.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r26, 0)
<com.android.server.media.projection.MediaProjectionManagerService: void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback,android.os.IBinder$DeathRecipient)>
        interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.RecordingActivityMonitor$RecorderDeathHandler: boolean init()>
        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.StorageManagerService$ObbState: void link()>
        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        interfaceinvoke $r13.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r83, 0)
<com.android.server.appop.AppOpsService$ActiveCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsActiveCallback,int,int,int)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>
        interfaceinvoke r25.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r26, 0)
<com.android.server.accessibility.UiAutomationManager: void registerUiTestAutomationServiceLocked(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.content.Context,android.accessibilityservice.AccessibilityServiceInfo,int,android.os.Handler,com.android.server.accessibility.AccessibilitySecurityPolicy,com.android.server.accessibility.AbstractAccessibilityServiceConnection$SystemSupport,com.android.server.wm.WindowManagerInternal,com.android.server.accessibility.SystemActionPerformer,com.android.server.accessibility.AccessibilityWindowManager,int)>
        interfaceinvoke $r17.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r18, 0)
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)
<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>
        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>
        interfaceinvoke $r11.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
<com.android.server.audio.AudioDeviceBroker$SpeakerphoneClient: boolean registerDeathRecipient()>
        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.BtHelper$ScoClient: void registerDeathRecipient()>
        interfaceinvoke $r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>
        interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r25, 0)
<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
<com.android.server.location.ContextHubClientBroker: void attachDeathRecipient()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.wm.InputConsumerImpl: void linkToDeathRecipient()>
        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.biometrics.ClientMonitor: void <init>(android.content.Context,com.android.server.biometrics.Constants,com.android.server.biometrics.BiometricServiceBase$DaemonWrapper,long,android.os.IBinder,com.android.server.biometrics.BiometricServiceBase$ServiceListener,int,int,boolean,java.lang.String,int)>
        interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventDispatchedListenerLocked(android.media.session.IOnMediaKeyEventDispatchedListener,int)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int,int,long)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r166, 0)
<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>
        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>
        interfaceinvoke r15.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r19, 0)
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventSessionChangedListenerLocked(android.media.session.IOnMediaKeyEventSessionChangedListener,int)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
<com.android.server.net.NetworkStatsObservers$RequestInfo: void <init>(com.android.server.net.NetworkStatsObservers,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder,int,int)>
        interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.internal.util.AsyncChannel: boolean linkToDeathMonitor()>
        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r6, 0)
<com.android.server.contentcapture.ContentCaptureServerSession: void <init>(java.lang.Object,android.os.IBinder,com.android.server.contentcapture.ContentCapturePerUserService,android.content.ComponentName,com.android.internal.os.IResultReceiver,int,int,int,int,int)>
        interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0)
<com.android.server.SensorPrivacyService$DeathRecipient: void <init>(com.android.server.SensorPrivacyService,android.hardware.ISensorPrivacyListener)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback)>
        interfaceinvoke $r24.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0)
<com.android.server.om.IdmapDaemon: android.os.IBinder getIdmapService()>
        interfaceinvoke r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r10, 0)
<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>
        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0)
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>
        interfaceinvoke r0.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r14, 0)
<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>
        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0)
<android.view.RemoteAnimationDefinition: void linkToDeath(android.os.IBinder$DeathRecipient)>
        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0)
<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>
        interfaceinvoke r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0)
<com.android.server.autofill.Session: void setClientLocked(android.os.IBinder)>
        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0)
<com.android.server.appop.AppOpsService$InProgressStartOpEvent: void <init>(long,long,android.os.IBinder,java.lang.Runnable,int)>
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.appop.AppOpsService$StartedCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsStartedCallback,int,int,int)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.appop.AppOpsService$ModeCallback: void <init>(com.android.server.appop.AppOpsService,com.android.internal.app.IAppOpsCallback,int,int,int,int,int)>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
        interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r11, 0)
<com.android.server.wm.RecentsAnimationController: void linkToDeathOfRunner()>
        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r0, 0)
<com.android.server.wm.ShellRoot: void setAccessibilityWindow(android.view.IWindow)>
        interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r9, 0)
<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>
        interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0)
