========================== AllRiskyMethods ==================================
<android.os.Parcel: java.lang.String[] createString8Array()>
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseIntArray readSparseIntArray()>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>
<android.os.Parcel: java.io.FileDescriptor[] createRawFileDescriptorArray()>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.os.Parcel: android.util.ArraySet readArraySet(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.os.Parcel: java.util.ArrayList readCharSequenceList()>
<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>
<android.os.Parcel: java.lang.String[] createString16Array()>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: void readStringList(java.util.List)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: android.hardware.soundtrigger.SoundTrigger$Keyphrase readFromParcel(android.os.Parcel)>
<android.net.nsd.NsdServiceInfo$1: android.net.nsd.NsdServiceInfo createFromParcel(android.os.Parcel)>
<android.telephony.TelephonyHistogram: void <init>(android.os.Parcel)>
<android.nfc.TransceiveResult$1: android.nfc.TransceiveResult createFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.location.Address$1: android.location.Address createFromParcel(android.os.Parcel)>
<android.hardware.location.NanoAppMessage: void <init>(android.os.Parcel)>
<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup$1: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup createFromParcel(android.os.Parcel)>
<android.printservice.recommendation.RecommendationInfo: java.util.ArrayList readDiscoveredPrinters(android.os.Parcel)>
<android.service.gatekeeper.GateKeeperResponse$1: android.service.gatekeeper.GateKeeperResponse createFromParcel(android.os.Parcel)>
<android.os.health.HealthStats: void <init>(android.os.Parcel)>
<android.content.ContentValues: void <init>(android.os.Parcel)>
<android.nfc.ApduList: void <init>(android.os.Parcel)>
<android.content.pm.BaseParceledListSlice: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>
<android.security.KeystoreArguments: void readFromParcel(android.os.Parcel)>
<android.hardware.radio.RadioManager$ModuleProperties: void <init>(android.os.Parcel)>
<android.media.AudioRecordingConfiguration: void <init>(android.os.Parcel)>
<android.service.notification.ZenModeConfig: void <init>(android.os.Parcel)>
<android.location.GnssNavigationMessage$1: android.location.GnssNavigationMessage createFromParcel(android.os.Parcel)>
<android.media.MediaDrm: java.util.List keyStatusListFromParcel(android.os.Parcel)>
<android.content.pm.ShortcutInfo: void <init>(android.os.Parcel)>
<android.os.WorkSource: void <init>(android.os.Parcel)>
<android.content.UndoManager: void restoreInstanceState(android.os.Parcel,java.lang.ClassLoader)>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>
<android.view.Display$HdrCapabilities: void readFromParcel(android.os.Parcel)>
<android.telephony.ims.feature.CapabilityChangeRequest: void <init>(android.os.Parcel)>
<android.media.VolumeShaper$Configuration$1: android.media.VolumeShaper$Configuration createFromParcel(android.os.Parcel)>
<android.telephony.ims.stub.ImsFeatureConfiguration: void <init>(android.os.Parcel)>
<android.app.ActivityManager$StackInfo: void readFromParcel(android.os.Parcel)>
<android.content.pm.PackageParser$Component: java.util.ArrayList createIntentsList(android.os.Parcel)>
<android.os.BatterySaverPolicyConfig: void <init>(android.os.Parcel)>
<com.android.internal.telephony.SmsRawData$1: com.android.internal.telephony.SmsRawData createFromParcel(android.os.Parcel)>
<android.location.GpsMeasurementsEvent$1: android.location.GpsMeasurementsEvent createFromParcel(android.os.Parcel)>
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase,int,android.os.Parcel)>
<android.view.DisplayInfo: void readFromParcel(android.os.Parcel)>
<android.location.GnssMeasurementsEvent$1: android.location.GnssMeasurementsEvent createFromParcel(android.os.Parcel)>
<android.content.pm.PackageParser$Package: android.util.ArrayMap readKeySetMapping(android.os.Parcel)>
<android.net.RssiCurve: void <init>(android.os.Parcel)>
<com.android.internal.app.procstats.SparseMappingTable$Table: boolean readFromParcel(android.os.Parcel)>
<android.hardware.location.NanoApp: void <init>(android.os.Parcel)>
<android.security.keymaster.KeymasterCertificateChain: void readFromParcel(android.os.Parcel)>
<android.hardware.location.ContextHubMessage: void <init>(android.os.Parcel)>
<android.nfc.NdefRecord$1: android.nfc.NdefRecord createFromParcel(android.os.Parcel)>
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: void <init>(android.os.Parcel)>
<com.android.internal.os.BatteryStatsImpl$Uid: void readFromParcelLocked(com.android.internal.os.BatteryStatsImpl$TimeBase,com.android.internal.os.BatteryStatsImpl$TimeBase,android.os.Parcel)>
<android.nfc.BeamShareData$1: android.nfc.BeamShareData createFromParcel(android.os.Parcel)>
<android.hardware.location.ActivityChangedEvent$1: android.hardware.location.ActivityChangedEvent createFromParcel(android.os.Parcel)>
<android.telephony.ImsiEncryptionInfo: void <init>(android.os.Parcel)>
<android.location.GpsNavigationMessage$1: android.location.GpsNavigationMessage createFromParcel(android.os.Parcel)>
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.hardware.radio.Utils: java.util.Map readStringIntMap(android.os.Parcel)>
<android.media.SubtitleData: boolean parseParcel(android.os.Parcel)>
<android.hardware.radio.Utils: java.util.Map readStringMap(android.os.Parcel)>
<android.telephony.IccOpenLogicalChannelResponse: void <init>(android.os.Parcel)>
<android.app.slice.Slice: void <init>(android.os.Parcel)>
<android.content.pm.parsing.component.ParsedIntentInfo$ListParceler: java.util.List unparcel(android.os.Parcel)>
<android.telephony.euicc.EuiccRulesAuthTable: void <init>(android.os.Parcel)>
<android.bluetooth.SdpOppOpsRecord: void <init>(android.os.Parcel)>
<android.bluetooth.le.ScanFilter$1: android.bluetooth.le.ScanFilter createFromParcel(android.os.Parcel)>
<android.os.BaseBundle: void initializeFromParcelLocked(android.os.Parcel,boolean,boolean)>
<android.media.audiopolicy.AudioVolumeGroup$1: android.media.audiopolicy.AudioVolumeGroup createFromParcel(android.os.Parcel)>
<android.hardware.radio.Utils: java.util.Set createSet(android.os.Parcel,android.os.Parcelable$Creator)>
<android.content.RestrictionEntry: void <init>(android.os.Parcel)>
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.telephony.NetworkScanRequest: void <init>(android.os.Parcel)>
<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>
<com.android.internal.os.BatteryStatsImpl: void readSummaryFromParcel(android.os.Parcel)>
<android.os.IProcessInfoService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.net.IDnsResolver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>
<android.content.pm.PackageParser$Package: void <init>(android.os.Parcel)>
<android.service.autofill.FieldClassification: android.service.autofill.FieldClassification[] readArrayFromParcel(android.os.Parcel)>
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.telephony.mbms.ServiceInfo: void <init>(android.os.Parcel)>
<com.android.internal.app.procstats.SparseMappingTable: void readFromParcel(android.os.Parcel)>
<android.accessibilityservice.GestureDescription$GestureStep: void <init>(android.os.Parcel)>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>
<android.net.NetworkStatsHistory$ParcelUtils: long[] readLongArray(android.os.Parcel)>
<android.view.textclassifier.TextClassifierEvent: void <init>(android.os.Parcel)>
<com.qualcomm.qcrilmsgtunnel.IQcrilMsgTunnel$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.content.ContentProviderOperation: void <init>(android.os.Parcel)>
<android.content.pm.parsing.component.ParsedIntentInfo$StringPairListParceler: java.util.List unparcel(android.os.Parcel)>
<android.media.MediaPlayer$DrmInfo: void <init>(android.os.Parcel)>
<android.hardware.location.NanoAppInstanceInfo: void <init>(android.os.Parcel)>
<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>
<android.os.health.HealthStats: android.util.ArrayMap createHealthStatsMap(android.os.Parcel)>
<com.android.internal.widget.VerifyCredentialResponse$1: com.android.internal.widget.VerifyCredentialResponse createFromParcel(android.os.Parcel)>
<android.os.health.HealthStats: android.util.ArrayMap createLongsMap(android.os.Parcel)>
<com.qualcomm.qti.telephonyservice.KsNafResponse: void <init>(android.os.Parcel)>
<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>
<android.print.PrintJobInfo: void <init>(android.os.Parcel)>
<android.media.audiopolicy.AudioProductStrategy$1: android.media.audiopolicy.AudioProductStrategy createFromParcel(android.os.Parcel)>
<android.media.TimedMetaData: boolean parseParcel(android.os.Parcel)>
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.service.carrier.MessagePdu$1: android.service.carrier.MessagePdu createFromParcel(android.os.Parcel)>
<android.hardware.input.IInputManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.nfc.Tag$1: android.nfc.Tag createFromParcel(android.os.Parcel)>
<android.content.integrity.CompoundFormula: void <init>(android.os.Parcel)>
<android.content.IntentFilter: void <init>(android.os.Parcel)>
<android.os.health.HealthStats: android.util.ArrayMap createParcelableMap(android.os.Parcel,android.os.Parcelable$Creator)>
<android.content.pm.parsing.ParsingPackageImpl: void <init>(android.os.Parcel)>
<com.android.internal.telephony.cat.CatCmdMessage: void <init>(android.os.Parcel)>
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>
<android.bluetooth.SdpRecord: void <init>(android.os.Parcel)>
<android.view.contentcapture.DataRemovalRequest: void <init>(android.os.Parcel)>
<android.os.PooledStringReader: void <init>(android.os.Parcel)>
<android.service.quickaccesswallet.GetWalletCardsResponse: android.service.quickaccesswallet.GetWalletCardsResponse readFromParcel(android.os.Parcel)>
<android.nfc.NdefMessage$1: android.nfc.NdefMessage createFromParcel(android.os.Parcel)>
<android.content.pm.PackageInfoLite: void <init>(android.os.Parcel)>
<android.hardware.location.ContextHubInfo: void <init>(android.os.Parcel)>
<android.hardware.radio.Utils: java.util.Set createIntSet(android.os.Parcel)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo$1: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo createFromParcel(android.os.Parcel)>
<android.view.RemoteAnimationDefinition: void <init>(android.os.Parcel)>
