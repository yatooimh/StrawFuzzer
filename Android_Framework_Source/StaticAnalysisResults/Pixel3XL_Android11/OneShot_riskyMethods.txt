========================== UnReachableRiskyMethods(1286) ==============================
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createDouble(double[],java.nio.ByteOrder)>
<org.junit.experimental.theories.internal.Assignments: java.lang.Object[] getActualValues(int,int)>
<com.android.internal.telephony.CarrierAppUtils: java.util.List getDefaultCarrierAppCandidatesHelper(int,java.util.Set,android.content.Context)>
<com.android.server.display.whitebalance.DisplayWhiteBalanceFactory: float[] getFloatArray(android.content.res.Resources,int)>
<com.android.server.textclassifier.TextClassificationManagerService$CallbackWrapper: void rewriteConversationActionsIcons(android.os.Bundle)>
<android.service.textservice.SpellCheckerService$SentenceLevelAdapter: android.view.textservice.SentenceSuggestionsInfo reconstructSuggestions(android.service.textservice.SpellCheckerService$SentenceLevelAdapter$SentenceTextInfoParams,android.view.textservice.SuggestionsInfo[])>
<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSessionInternal(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,java.util.concurrent.Executor,int,android.hardware.camera2.CaptureRequest)>
<com.android.server.pm.AppsFilter: void addPackageInternal(com.android.server.pm.PackageSetting,android.util.ArrayMap)>
<com.qualcomm.qcrilhook.QcRilHook: byte[] qcRilGetQcVersionOfID(java.lang.String)>
<com.qualcomm.qcrilhook.EmbmsOemHook$SaiIndication: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,java.nio.ByteBuffer)>
<com.qualcomm.qcrilhook.EmbmsOemHook$ContentDescPerObjectControlIndication: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,java.nio.ByteBuffer)>
<android.widget.TextView: void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray)>
<com.android.server.connectivity.IpConnectivityEventBuilder: byte[] serialize(int,java.util.List)>
<com.qualcomm.qcrilhook.TunerOemHook$ProvisionTable: void <init>(java.nio.ByteBuffer)>
<com.android.server.backup.KeyValueAdbRestoreEngine: void copyKeysInLexicalOrder(android.app.backup.BackupDataInput,android.app.backup.BackupDataOutput)>
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>
<com.android.server.usb.descriptors.UsbDescriptor: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.net.NetworkStats: void <init>(long,int)>
<android.net.NetworkTemplate: int[] toIntArray(java.util.Collection)>
<com.android.server.pm.AppsFilter: void updateShouldFilterCacheForPackage(java.lang.String,com.android.server.pm.PackageSetting,android.util.ArrayMap,android.content.pm.UserInfo[],int)>
<com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl: void <init>(com.android.server.soundtrigger_middleware.HalFactory[],com.android.server.soundtrigger_middleware.SoundTriggerMiddlewareImpl$AudioSessionProvider)>
<com.android.server.display.color.ColorDisplayService: void setUpDisplayCompositionColorSpaces(android.content.res.Resources)>
<android.hardware.soundtrigger.SoundTrigger$Keyphrase: android.hardware.soundtrigger.SoundTrigger$Keyphrase readFromParcel(android.os.Parcel)>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int,boolean)>
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: boolean checkDuplicatePortOmadmWapPush(byte[],int)>
<com.android.internal.telephony.protobuf.nano.MessageNano: boolean messageNanoEquals(com.android.internal.telephony.protobuf.nano.MessageNano,com.android.internal.telephony.protobuf.nano.MessageNano)>
<org.apache.http.util.ByteArrayBuffer: void <init>(int)>
<android.security.keystore.AndroidKeyStoreCipherSpiBase: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>
<com.android.server.am.ActiveServices: void stopAllForegroundServicesLocked(int,java.lang.String)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyServiceState: com.android.internal.telephony.nano.TelephonyProto$TelephonyServiceState mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.broadcastradio.hal2.ProgramInfoCache: java.util.List buildChunks(boolean,boolean,java.util.Collection,int,java.util.Collection,int)>
<android.service.notification.ZenModeConfig: int[] tryParseDayList(java.lang.String,java.lang.String)>
<com.android.internal.telephony.nano.TelephonyProto$SmsSession: com.android.internal.telephony.nano.TelephonyProto$SmsSession mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.textclassifier.FixedSizeQueue: void <init>(int,com.android.server.textclassifier.FixedSizeQueue$OnEntryEvictedListener)>
<com.android.internal.telephony.uicc.PlmnActRecord: com.android.internal.telephony.uicc.PlmnActRecord[] getRecords(byte[])>
<com.android.internal.telephony.BitwiseInputStream: byte[] readByteArray(int)>
<com.android.internal.telephony.uicc.IccUtils: byte[] bcdToBytes(java.lang.String)>
<com.android.server.pm.ShortcutLauncher: void addPinnedShortcut(java.lang.String,int,java.lang.String,boolean)>
<android.hardware.camera2.utils.ArrayUtils: int[] convertStringListToIntArray(java.util.List,java.lang.String[],int[])>
<com.android.server.hdmi.HdmiCecKeycode$KeycodeEntry: void <init>(int,int,boolean,byte[])>
<android.os.LocaleList: void <init>(java.util.Locale,android.os.LocaleList)>
<com.android.framework.protobuf.CodedInputStream$StreamDecoder: byte[] readRawBytesSlowPath(int,boolean)>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcRilSetCdmaSubSrcWithSpc(int,java.lang.String)>
<android.app.Notification$MessagingStyle$Message: android.os.Bundle[] getBundleArrayForMessages(java.util.List)>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>
<android.net.nsd.NsdServiceInfo$1: android.net.nsd.NsdServiceInfo createFromParcel(android.os.Parcel)>
<com.android.server.location.ContextHubServiceUtil: int[] createPrimitiveIntArray(java.util.Collection)>
<android.hardware.camera2.impl.CameraMetadataNative: boolean setTonemapCurve(android.hardware.camera2.params.TonemapCurve)>
<com.android.internal.telephony.WapPushOverSms: void writeInboxMessage(int,com.google.android.mms.pdu.GenericPdu)>
<android.hardware.hdmi.HdmiTvClient: void clearTimerRecording(int,int,android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource)>
<com.android.internal.os.WrapperInit: void main(java.lang.String[])>
<com.android.net.module.util.DnsPacket$DnsRecord: void <init>(com.android.net.module.util.DnsPacket,int,java.nio.ByteBuffer)>
<org.apache.commons.codec.binary.BinaryCodec: byte[] toAsciiBytes(byte[])>
<com.android.internal.midi.MidiEventScheduler$MidiEvent: void <init>(byte[],int,int,long)>
<android.os.health.HealthKeys$SortedIntArray: void <init>(int)>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcRilSetConfig(java.lang.String,java.lang.String,int,int)>
<com.android.internal.telephony.CarrierAppUtils: java.util.Map getDefaultCarrierAssociatedAppsHelper(int,java.util.Map,android.content.Context)>
<android.security.identity.CredstoreWritableIdentityCredential: byte[] personalize(android.security.identity.PersonalizationData)>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$3(int)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event: com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>
<com.android.server.camera.CameraServiceProxy: java.util.Set getEnabledUserHandles(int)>
<com.android.commands.bmgr.Bmgr: void doRestoreAll(int,long,java.util.HashSet)>
<android.service.autofill.SaveInfo: void <init>(android.service.autofill.SaveInfo$Builder)>
<android.widget.TextView: void setFilters(android.text.Editable,android.text.InputFilter[])>
<android.database.CursorJoiner: int[] buildColumnIndiciesArray(android.database.Cursor,java.lang.String[])>
<android.hardware.camera2.DngCreator: java.nio.ByteBuffer convertToRGB(android.graphics.Bitmap)>
<org.ccil.cowan.tagsoup.Parser: java.lang.String expandEntities(java.lang.String)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler: android.view.MotionEvent$PointerProperties[] getTempPointerPropertiesWithMinSize(int)>
<android.widget.TextView: int[] onCreateDrawableState(int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void finishCallSession(com.android.internal.telephony.metrics.InProgressCallSession)>
<com.android.framework.protobuf.ByteString$Output: void <init>(int)>
<com.android.internal.telephony.RadioIndication: void onSupplementaryServiceIndication(int,android.hardware.radio.V1_0.StkCcUnsolSsResult)>
<com.android.internal.os.KernelCpuThreadReaderDiff: int[] cpuTimeDiff(int[],int[])>
<com.android.internal.telephony.phonenumbers.prefixmapper.FlyweightMapStorage: void readExternal(java.io.ObjectInput)>
<com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimPcscfLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.timezone.CountryTimeZones: java.util.List getEffectiveTimeZoneMappingsAt(long)>
<android.media.audiofx.DynamicsProcessing$Config: void <init>(int,float,int,boolean,int,boolean,int,boolean,int,boolean,android.media.audiofx.DynamicsProcessing$Channel[])>
<android.hardware.camera2.marshal.impl.MarshalQueryableReprocessFormatsMap$MarshalerReprocessFormatsMap: android.hardware.camera2.params.ReprocessFormatsMap unmarshal(java.nio.ByteBuffer)>
<android.media.audiofx.AudioEffect: int getParameter(int[],int[])>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCache(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String,boolean)>
<com.android.internal.os.ZygoteArguments: void parseArgs(java.lang.String[])>
<android.telephony.TelephonyHistogram: void <init>(android.os.Parcel)>
<android.app.timedetector.TelephonyTimeSuggestion: void addDebugInfo(java.util.List)>
<android.accounts.AccountManager: void postToHandler(android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>
<com.android.internal.app.ChooserActivity: java.util.List convertToChooserTarget(java.util.List,java.util.List,java.util.List,int)>
<android.gesture.GestureUtils: float[] temporalSampling(android.gesture.GestureStroke,int)>
<android.hardware.camera2.legacy.ParameterUtils: android.util.Size[] convertSizeListToArray(java.util.List)>
<com.android.internal.os.ClassLoaderFactory: java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String,java.util.List)>
<com.android.internal.location.nano.GnssLogsProto$PowerMetrics: com.android.internal.location.nano.GnssLogsProto$PowerMetrics mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.app.AppOpsManager$AttributedHistoricalOps: void <init>(android.app.AppOpsManager$AttributedHistoricalOps)>
<com.android.server.am.ActivityManagerService: java.util.ArrayList sortProcessOomList(java.util.List,java.lang.String)>
<android.content.pm.PackageParser: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,android.apex.ApexInfo,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event$RilCall[] convertConnectionsToRilCalls(java.util.ArrayList,java.lang.String)>
<com.android.server.pm.UserDataPreparer: void reconcileUsers(java.lang.String,java.util.List,java.util.List)>
<com.android.server.locksettings.SyntheticPasswordManager$PasswordData: com.android.server.locksettings.SyntheticPasswordManager$PasswordData fromBytes(byte[])>
<com.android.server.pm.SharedUserSetting: com.android.server.pm.SharedUserSetting updateFrom(com.android.server.pm.SharedUserSetting)>
<com.android.internal.app.SimpleIconFactory: void convertToConvexArray(float[],int,int,int)>
<android.telephony.euicc.EuiccRulesAuthTable$Builder: android.telephony.euicc.EuiccRulesAuthTable$Builder add(int,java.util.List,int)>
<android.content.res.AssetManager: java.lang.CharSequence[] getResourceTextArray(int)>
<android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayersExcluding(android.view.SurfaceControl,android.graphics.Rect,float,int,android.view.SurfaceControl[])>
<com.android.server.location.LocationProviderProxy$1: void onSetAdditionalProviderPackages(java.util.List)>
<com.android.internal.os.BatteryStatsHelper: void refreshStats(int,java.util.List)>
<android.graphics.Typeface: android.graphics.Typeface createFromFamilies(android.graphics.FontFamily[])>
<android.media.audiofx.AudioEffect: int getParameter(int,int[])>
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
<android.os.UserManager: android.os.UserHandle createProfile(java.lang.String,java.lang.String,java.util.Set)>
<android.content.pm.InstantAppResolveInfo: void <init>(android.content.pm.InstantAppResolveInfo$InstantAppDigest,java.lang.String,java.util.List,long,android.os.Bundle,boolean)>
<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypesInternal(int)>
<android.nfc.TransceiveResult$1: android.nfc.TransceiveResult createFromParcel(android.os.Parcel)>
<com.android.internal.os.WrapperInit: java.lang.Runnable wrapperInit(int,java.lang.String[])>
<com.android.internal.telephony.uicc.IsimUiccRecords$EfIsimImpuLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.location.Address$1: android.location.Address createFromParcel(android.os.Parcel)>
<android.hardware.location.NanoAppMessage: void <init>(android.os.Parcel)>
<android.database.CharArrayBuffer: void <init>(int)>
<android.telephony.CellIdentityGsm: void <init>(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Collection)>
<android.view.contentcapture.DataRemovalRequest: void <init>(android.view.contentcapture.DataRemovalRequest$Builder)>
<android.media.audiofx.DynamicsProcessing$Config$Builder: void <init>(int,int,boolean,int,boolean,int,boolean,int,boolean)>
<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>
<android.util.StateSet: int[] trimStateSet(int[],int)>
<com.qualcomm.qcrilhook.QcRilHook: android.os.AsyncResult sendRilOemHookMsgWithRspLen(int,byte[],int,int)>
<android.hardware.input.InputManager: boolean[] deviceHasKeys(int,int[])>
<android.net.NetworkStatsHistory$DataStreamUtils: long[] readVarLongArray(java.io.DataInputStream)>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcrilSetBuiltInPLMNList(byte[],int)>
<com.android.framework.protobuf.CodedOutputStream$AbstractBufferedEncoder: void <init>(int)>
<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup$1: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup createFromParcel(android.os.Parcel)>
<android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CameraCharacteristics$Key[])>
<com.android.server.backup.keyvalue.KeyValueBackupTask: com.android.server.backup.fullbackup.PerformFullTransportBackupTask createFullBackupTask(java.util.List)>
<android.security.keystore.KeyProperties$EncryptionPadding: int[] allToKeymaster(java.lang.String[])>
<com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(java.util.List)>
<com.qualcomm.qcrilhook.QcRilHook: byte[] qcRilGetQcVersionOfFile(java.lang.String)>
<android.printservice.recommendation.RecommendationInfo: java.util.ArrayList readDiscoveredPrinters(android.os.Parcel)>
<android.view.autofill.AutofillManager: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>
<android.hardware.GeomagneticField: float[][] computeSchmidtQuasiNormFactors(int)>
<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int,java.lang.String)>
<android.app.Activity: boolean[] autofillClientGetViewVisibility(android.view.autofill.AutofillId[])>
<android.os.HwParcel: void writeFloatVector(java.util.ArrayList)>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData,boolean)>
<com.android.server.notification.ValidateNotificationPeople: java.lang.String[] combineLists(java.lang.String[],java.lang.String[])>
<com.android.server.NetworkManagementService: void closeSocketsForFirewallChainLocked(int,java.lang.String)>
<android.service.gatekeeper.GateKeeperResponse$1: android.service.gatekeeper.GateKeeperResponse createFromParcel(android.os.Parcel)>
<android.view.PointerIcon: void loadResource(android.content.Context,android.content.res.Resources,int)>
<com.android.ims.internal.ContactNumberUtils: java.lang.String[] format(java.lang.String[])>
<android.view.MotionEvent$PointerProperties: android.view.MotionEvent$PointerProperties[] createArray(int)>
<android.os.health.HealthStats: void <init>(android.os.Parcel)>
<android.view.inputmethod.SparseRectFArray: void <init>(android.view.inputmethod.SparseRectFArray$SparseRectFArrayBuilder)>
<android.media.MediaMetrics$Item: java.lang.String getStringFromBuffer(java.nio.ByteBuffer,int)>
<com.android.internal.telephony.RadioResponse: void responseCurrentCalls_1_2(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<android.media.MediaCodecInfo$AudioCapabilities: void parseFromInfo(android.media.MediaFormat)>
<com.android.server.pm.permission.PermissionManagerService: java.lang.String[] getAppOpPermissionPackagesInternal(java.lang.String,int)>
<com.android.framework.protobuf.LazyStringArrayList: void <init>(int)>
<android.media.MediaExtractor: void setDataSource(java.lang.String,java.util.Map)>
<android.app.assist.AssistStructure$ViewNode: void <init>(android.app.assist.AssistStructure$ParcelTransferReader,int)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.framework.protobuf.CodedInputStream$StreamDecoder: com.android.framework.protobuf.ByteString readBytesSlowPath(int)>
<com.android.server.pm.PackageManagerService: java.util.List matchVerifiers(android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>
<android.text.DynamicLayout: void setBlocksDataForTest(int[],int[],int,int)>
<android.nfc.ApduList: void <init>(android.os.Parcel)>
<android.graphics.ColorSpace: float[] inverse3x3(float[])>
<com.android.server.notification.ConditionProviders: android.service.notification.Condition[] removeDuplicateConditions(java.lang.String,android.service.notification.Condition[])>
<android.content.pm.BaseParceledListSlice: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: byte[] parseToDtmf(java.lang.String)>
<com.android.framework.protobuf.ByteString$Output: void flushFullBuffer(int)>
<com.android.server.textclassifier.TextClassificationManagerService$CallbackWrapper: void rewriteTextClassificationIcons(android.os.Bundle)>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord,android.nfc.NdefRecord[])>
<android.app.Activity: void restoreManagedDialogs(android.os.Bundle)>
<android.security.KeystoreArguments: void readFromParcel(android.os.Parcel)>
<android.graphics.Typeface: android.graphics.Typeface createFromFamilies(android.graphics.fonts.FontFamily[])>
<com.android.server.accounts.AccountManagerService$19: void onResult(android.os.Bundle)>
<org.apache.http.impl.cookie.CookieSpecBase: java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin)>
<android.content.pm.ShortcutInfo: android.util.ArraySet cloneCategories(java.util.Set)>
<com.android.server.pm.PackageManagerService: void installPackagesLI(java.util.List)>
<android.preference.MultiCheckPreference: void setEntryValuesCS(java.lang.CharSequence[])>
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])>
<android.hardware.radio.RadioManager$ModuleProperties: void <init>(android.os.Parcel)>
<android.service.notification.NotificationListenerService: void maybePopulatePeople(android.app.Notification)>
<com.qualcomm.qcrilhook.EmbmsOemHook: int contentDescription(int,byte,byte[],int,int[],int[],android.os.Message,int)>
<com.android.server.usage.UsageStatsDatabase: byte[] getIntervalStatsBytes(java.io.DataInputStream)>
<android.hardware.soundtrigger.ConversionUtil: android.media.soundtrigger_middleware.RecognitionConfig api2aidlRecognitionConfig(android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>
<com.android.server.backup.PackageManagerBackupAgent$AncestralVersion1RestoreDataConsumer: void consumeRestoreData(android.app.backup.BackupDataInput)>
<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay[] applyWifiDisplayAliases(android.hardware.display.WifiDisplay[])>
<com.android.framework.protobuf.CodedInputStream$IterableDirectByteBufferDecoder: byte[] readRawBytes(int)>
<android.content.integrity.IntegrityUtils: byte[] getBytesFromHexDigest(java.lang.String)>
<org.apache.http.util.ByteArrayBuffer: void expand(int)>
<android.os.HwParcel: void writeBoolVector(java.util.ArrayList)>
<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parseBaseApkCommon(android.content.pm.PackageParser$Package,java.util.Set,android.content.res.Resources,android.content.res.XmlResourceParser,int,java.lang.String[])>
<android.media.ExifInterface: void getWebpAttributes(android.media.ExifInterface$ByteOrderedDataInputStream)>
<android.media.AudioRecordingConfiguration: void <init>(android.os.Parcel)>
<com.android.server.backup.utils.TarBackupReader: android.content.pm.Signature[] readAppManifestAndReturnSignatures(com.android.server.backup.FileMetadata)>
<android.app.ActivityTransitionCoordinator: java.util.ArrayList createSnapshots(android.os.Bundle,java.util.Collection)>
<android.service.notification.ZenModeConfig: void <init>(android.os.Parcel)>
<android.util.SparseLongArray: void <init>(int)>
<android.location.GnssNavigationMessage$1: android.location.GnssNavigationMessage createFromParcel(android.os.Parcel)>
<com.android.server.usb.descriptors.UsbACMixerUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.text.method.ReplacementTransformationMethod$ReplacementCharSequence: java.lang.CharSequence subSequence(int,int)>
<android.os.HwParcel: void writeInt32Vector(java.util.ArrayList)>
<android.app.Activity: android.view.View[] autofillClientFindViewsByAutofillIdTraversal(android.view.autofill.AutofillId[])>
<com.android.server.net.watchlist.PrivacyUtils: java.util.Map createDpEncodedReportMap(boolean,byte[],java.util.List,com.android.server.net.watchlist.WatchlistReportDbHelper$AggregatedResult)>
<com.android.internal.util.BitUtils: int[] unpackBits(long)>
<com.android.framework.protobuf.StructuralMessageInfo$Builder: void <init>(int)>
<com.qualcomm.qcrilhook.QcRilHook: java.lang.String qcRilGetMetaInfoForConfig(java.lang.String,int)>
<android.media.ExifInterface: void handleThumbnailFromJfif(android.media.ExifInterface$ByteOrderedDataInputStream,java.util.HashMap)>
<android.app.ContextImpl: java.io.File[] ensureExternalDirsExistOrFilter(java.io.File[],boolean)>
<com.android.server.backup.UsageStatsBackupHelper: void applyRestoredPayload(java.lang.String,byte[])>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$IpConnectivityLog mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.autofill.ui.InlineFillUi: void <init>(android.view.autofill.AutofillId,android.util.SparseArray,java.lang.String)>
<com.android.internal.app.ChooserActivity$DirectShareViewHolder: void <init>(com.android.internal.app.ChooserActivity,android.view.ViewGroup,java.util.List,int,int)>
<com.android.server.notification.RankingHelper: void <init>(android.content.Context,com.android.server.notification.RankingHandler,com.android.server.notification.RankingConfig,com.android.server.notification.ZenModeHelper,com.android.server.notification.NotificationUsageStats,java.lang.String[])>
<android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verifyAdditionalAttributes(java.nio.ByteBuffer,java.util.List,java.security.cert.CertificateFactory)>
<com.android.server.display.BrightnessMappingStrategy$PhysicalMappingStrategy: void <init>(android.hardware.display.BrightnessConfiguration,float[],int[],float)>
<com.android.ims.internal.uce.presence.PresResInstanceInfo: void setTupleInfo(com.android.ims.internal.uce.presence.PresTupleInfo[])>
<android.text.Layout: boolean[] primaryIsTrailingPreviousAllLineOffsets(int)>
<android.media.MediaDrm: java.util.List keyStatusListFromParcel(android.os.Parcel)>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader)>
<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>
<com.qualcomm.qcrilhook.PresenceMsgParser: java.lang.String parseNotifyUpdateXML(java.nio.ByteBuffer)>
<com.android.server.accessibility.gestures.MultiFingerSwipe: void <init>(android.content.Context,int,int,int,com.android.server.accessibility.gestures.GestureMatcher$StateChangeListener)>
<android.security.keystore.KeyStoreCryptoOperationUtils: byte[] getRandomBytesToMixIntoKeystoreRng(java.security.SecureRandom,int)>
<android.content.UndoManager: void restoreInstanceState(android.os.Parcel,java.lang.ClassLoader)>
<com.android.server.hdmi.HdmiCecController$NativeWrapperImpl: int nativeSendCecCommand(int,int,byte[])>
<com.android.internal.util.LineBreakBufferedWriter: void <init>(java.io.Writer,int,int)>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.cdma.SmsMessage createFromEfRecord(int,byte[])>
<android.hardware.camera2.impl.CameraDeviceImpl: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>
<android.net.metrics.ApfProgramEvent: java.lang.String namesOf(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getIntentFilterActions(android.content.IntentFilter)>
<com.android.framework.protobuf.RopeByteString: com.android.framework.protobuf.ByteString concatenateBytes(com.android.framework.protobuf.ByteString,com.android.framework.protobuf.ByteString)>
<com.android.framework.protobuf.CodedInputStream$StreamDecoder: byte[] readRawBytesSlowPathOneChunk(int)>
<android.view.Display$HdrCapabilities: void readFromParcel(android.os.Parcel)>
<com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.util.List,boolean,boolean,boolean)>
<android.accessibilityservice.GestureDescription$MotionEventGenerator: android.accessibilityservice.GestureDescription$TouchPoint[] getCurrentTouchPoints(int)>
<com.android.commands.bmgr.Bmgr: void backupNowPackages(int,java.util.List,boolean,int)>
<com.android.server.display.DisplayDeviceConfig: void loadBrightnessMap(com.android.server.display.config.DisplayConfiguration)>
<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void parseSsData(android.telephony.ims.ImsSsData)>
<android.os.HwBlob: java.lang.Double[] wrapArray(double[])>
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encodeDtmfSmsAddress(java.lang.String)>
<com.android.server.usb.descriptors.UsbACMidiEndpoint: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.internal.os.BatteryStatsImpl$LongSamplingCounterArray: void addCountLocked(long[],boolean)>
<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>
<android.hardware.camera2.impl.CameraDeviceImpl: int[] getRequestTypes(android.hardware.camera2.CaptureRequest[])>
<com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] readEncryptedPayload(java.nio.ByteBuffer,int)>
<android.filterfw.core.MutableFrameFormat: void setDimensionCount(int)>
<android.content.pm.parsing.component.ParsedAttribution: boolean isCombinationValid(java.util.List)>
<android.telephony.ims.feature.CapabilityChangeRequest: void <init>(android.os.Parcel)>
<android.net.metrics.DnsEvent: void <init>(int,long,int)>
<com.android.internal.util.XmlUtils: java.lang.String[] readThisStringArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])>
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>
<com.android.server.display.color.ColorDisplayService$TintValueAnimator: com.android.server.display.color.ColorDisplayService$TintValueAnimator ofMatrix(com.android.server.display.color.ColorDisplayService$ColorMatrixEvaluator,java.lang.Object[])>
<com.android.internal.telephony.SmsNumberUtils: int[] getAllCountryCodes(android.content.Context)>
<org.apache.http.impl.client.AbstractAuthenticationHandler: java.util.Map parseChallenges(org.apache.http.Header[])>
<com.android.server.people.prediction.SharesheetModelScorer: void computeScore(java.util.List,int,long)>
<com.android.server.wm.ActivityStartController: int startActivities(android.app.IApplicationThread,int,int,int,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,com.android.server.wm.SafeActivityOptions,int,java.lang.String,com.android.server.am.PendingIntentRecord,boolean)>
<android.media.VolumeShaper$Configuration$1: android.media.VolumeShaper$Configuration createFromParcel(android.os.Parcel)>
<android.widget.TableLayout: void findLargestCells(int,int)>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$1(int)>
<android.service.voice.VoiceInteractionSession: boolean[] onGetSupportedCommands(java.lang.String[])>
<com.android.internal.telephony.uicc.AdnRecordLoader: void handleMessage(android.os.Message)>
<android.telephony.ims.stub.ImsFeatureConfiguration: void <init>(android.os.Parcel)>
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidClusterTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator)>
<android.app.ActivityManager$StackInfo: void readFromParcel(android.os.Parcel)>
<android.content.pm.PackageParser$Component: java.util.ArrayList createIntentsList(android.os.Parcel)>
<com.android.server.om.OverlayManagerServiceImpl: void updateAndRefreshOverlaysForTarget(java.lang.String,int,int)>
<com.android.internal.util.XmlUtils: double[] readThisDoubleArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])>
<com.android.internal.util.ExponentiallyBucketedHistogram: void <init>(int)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>
<com.android.server.wm.RootWindowContainer: android.app.ActivityManager$StackInfo getStackInfo(com.android.server.wm.ActivityStack)>
<com.android.internal.telephony.RadioResponse: void responseCallForwardInfo(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult encode7bitGsm(java.lang.String,int,boolean)>
<com.android.internal.util.ArrayUtils: java.lang.String[] removeString(java.lang.String[],java.lang.String)>
<android.widget.RemoteViewsAdapter: int[] getVisibleWindow(int)>
<com.android.server.usage.AppIdleHistory: java.util.ArrayList getAppStandbyBuckets(int,boolean)>
<android.hardware.hdmi.HdmiTvClient: void startOneTouchRecord(int,android.hardware.hdmi.HdmiRecordSources$RecordSource)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] filterAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account[],int,java.lang.String,boolean)>
<android.security.keystore.KeyProperties$Digest: java.lang.String[] allFromKeymaster(java.util.Collection)>
<android.app.AppOpsManager: void startWatchingActive(int[],android.app.AppOpsManager$OnOpActiveChangedListener)>
<com.android.internal.os.BatteryStatsImpl: java.lang.String[] includeInStringArray(java.lang.String[],java.lang.String)>
<android.app.Notification$CarExtender$UnreadConversation: android.app.Notification$CarExtender$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle)>
<android.util.Spline$MonotoneCubicSpline: void <init>(float[],float[])>
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,int)>
<org.apache.commons.codec.binary.BinaryCodec: char[] toAsciiChars(byte[])>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(android.util.ArrayMap,boolean)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ApfStatistics mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<com.android.internal.os.BatteryStatsImpl: void lambda$readKernelUidCpuFreqTimesLocked$1$BatteryStatsImpl(boolean,boolean,boolean,int,int,int,long[])>
<com.android.internal.telephony.ims.MmTelFeatureCompatAdapter: android.telephony.ims.feature.MmTelFeature$MmTelCapabilities convertCapabilities(int[])>
<com.android.internal.telephony.SmsRawData$1: com.android.internal.telephony.SmsRawData createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.nano.TelephonyProto$SmsSession finishSmsSession(com.android.internal.telephony.metrics.InProgressSmsSession)>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] transformUnderWeaverSecret(byte[],byte[])>
<com.android.server.pm.PackageSettingBase: void setOverlayPaths(java.util.List,int)>
<android.hardware.camera2.legacy.LegacyMetadataMapper: void mapControlAe(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>
<android.renderscript.FieldPacker: void <init>(int)>
<android.widget.SimpleCursorAdapter: void findColumns(android.database.Cursor,java.lang.String[])>
<com.android.internal.os.MemoryPowerCalculator: void <init>(com.android.internal.os.PowerProfile)>
<com.android.server.wm.utils.RotationAnimationUtils: float getMedianBorderLuma(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>
<com.android.server.slice.SliceClientPermissions$SliceAuthority: void removePath(java.util.List)>
<android.text.Layout$Ellipsizer: java.lang.CharSequence subSequence(int,int)>
<com.android.internal.telephony.uicc.euicc.EuiccCard: android.telephony.UiccAccessRule[] buildUiccAccessRule(java.util.List)>
<com.android.internal.colorextraction.types.Tonal: float[] fit(float[],float,int,float,float)>
<android.view.ViewDebug: java.lang.String[] getStyleAttributesDump(android.content.res.Resources,android.content.res.Resources$Theme)>
<com.android.internal.widget.LockscreenCredential: byte[] charSequenceToByteArray(java.lang.CharSequence)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>
<android.os.BaseBundle: void <init>(java.lang.ClassLoader,int)>
<android.content.RestrictionsManager: android.os.Bundle addRestrictionToBundle(android.os.Bundle,android.content.RestrictionEntry)>
<com.android.server.backup.UserBackupManagerService: byte[] randomBytes(int)>
<android.location.GpsMeasurementsEvent$1: android.location.GpsMeasurementsEvent createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallForwardInfo[] handleCfQueryResult(android.telephony.ims.ImsCallForwardInfo[])>
<com.android.internal.colorextraction.types.Tonal: int[] getColorPalette(float[],float[],float[])>
<com.android.server.biometrics.AuthenticationClient: boolean onAuthenticated(android.hardware.biometrics.BiometricAuthenticator$Identifier,boolean,java.util.ArrayList)>
<android.app.AppOpsManager: java.util.List getOpsForPackage(int,java.lang.String,java.lang.String[])>
<android.telephony.CellIdentityLte: void <init>(int,int,int,int,int[],int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Collection,android.telephony.ClosedSubscriberGroupInfo)>
<com.android.ims.internal.ContactNumberUtils: java.lang.String[] format(java.util.List)>
<com.android.framework.protobuf.Utf8$UnsafeProcessor: java.lang.String decodeUtf8Direct(java.nio.ByteBuffer,int,int)>
<android.renderscript.ScriptGroup: void <init>(android.renderscript.RenderScript,java.lang.String,java.util.List,java.util.List,android.renderscript.ScriptGroup$Future[])>
<android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>
<com.android.server.backup.PackageManagerBackupAgent: java.util.ArrayList readSignatureHashArray(java.io.DataInputStream)>
<com.android.timezone.distro.FileUtils: byte[] readBytes(java.io.File,int)>
<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,android.content.IIntentReceiver)>
<android.media.ExifInterface: void handleThumbnailFromStrips(android.media.ExifInterface$ByteOrderedDataInputStream,java.util.HashMap)>
<com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>
<com.android.internal.util.ArrayUtils: long[] convertToLongArray(int[])>
<com.android.server.pm.PackageManagerShellCommand: void printSessionList(com.android.internal.util.IndentingPrintWriter,java.util.List,com.android.server.pm.PackageManagerShellCommand$SessionDump)>
<com.android.server.pm.dex.DexoptUtils: java.lang.String[] getClassLoaderContexts(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,boolean[])>
<android.media.MediaExtractor: android.media.MediaExtractor$CasInfo getCasInfo(int)>
<com.android.server.job.JobServiceContext: boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)>
<android.service.autofill.FillContext: android.app.assist.AssistStructure$ViewNode[] findViewNodesByAutofillIds(android.view.autofill.AutofillId[])>
<android.renderscript.ScriptGroup$Closure: void <init>(android.renderscript.RenderScript,android.renderscript.Script$KernelID,android.renderscript.Type,java.lang.Object[],java.util.Map)>
<com.android.server.connectivity.IpConnectivityEventBuilder: int[] bytesToInts(byte[])>
<android.media.midi.MidiDeviceStatus: void <init>(android.media.midi.MidiDeviceInfo)>
<com.android.server.display.HysteresisLevels: float[] setArrayFormat(int[],float)>
<android.text.SpannableStringInternal: void copySpansFromInternal(android.text.SpannableStringInternal,int,int,boolean)>
<android.content.pm.PackageParser$ApkLite: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int,int,int,java.util.List,android.content.pm.PackageParser$SigningDetails,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String,boolean,int,int,int)>
<android.content.integrity.IntegrityUtils: java.lang.String getHexDigest(byte[])>
<com.android.server.slice.SliceClientPermissions$SliceAuthority: java.lang.String encodeSegments(java.lang.String[])>
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase,int,android.os.Parcel)>
<com.qualcomm.qcrilhook.EmbmsOemHook$ActDeactResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<android.media.audiofx.DynamicsProcessing$Mbc: void <init>(android.media.audiofx.DynamicsProcessing$Mbc)>
<com.qualcomm.qcrilhook.EmbmsOemHook: com.qualcomm.qcrilhook.QmiPrimitiveTypes$QmiArray byteArrayToQmiArray(short,byte[])>
<com.android.server.voiceinteraction.DatabaseHelper: int[] getArrayForCommaSeparatedString(java.lang.String)>
<com.android.server.pm.SharedUserSetting: void addProcesses(java.util.Map)>
<com.qualcomm.qcrilhook.QcRilHook$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession: com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.internal.telephony.uicc.IccFileHandler: void handleMessage(android.os.Message)>
<android.graphics.drawable.StateListDrawable: int[] extractStateSet(android.util.AttributeSet)>
<com.android.server.pm.ComponentResolver$ProviderIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.List,int)>
<com.android.internal.telephony.uicc.AdnRecord: byte[] buildAdnString(int)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getSupportedShortAudioDescriptors(android.media.AudioDeviceInfo,int[])>
<android.content.IntentFilter: java.lang.String[] addStringToSet(java.lang.String[],java.lang.String,int[],int)>
<com.android.server.usb.UsbMidiDevice: void <init>(int,int,int)>
<com.android.phone.ecc.nano.ProtobufEccData$AllInfo: com.android.phone.ecc.nano.ProtobufEccData$AllInfo mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano)>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcRilValidateConfig(java.lang.String,int)>
<android.widget.SpellChecker: void createMisspelledSuggestionSpan(android.text.Editable,android.view.textservice.SuggestionsInfo,android.text.style.SpellCheckSpan,int,int)>
<android.media.MediaCas: byte[] toBytes(java.util.ArrayList)>
<com.android.internal.telephony.WapPushOverSms: com.android.internal.telephony.WapPushOverSms$DecodedResult decodeWapPdu(byte[],com.android.internal.telephony.InboundSmsHandler)>
<android.security.identity.Util: int[] integerCollectionToArray(java.util.Collection)>
<android.gesture.GestureStore: void readFormatV1(java.io.DataInputStream)>
<com.android.framework.protobuf.MessageSchema: com.android.framework.protobuf.MessageSchema newSchemaForMessageInfo(com.android.framework.protobuf.StructuralMessageInfo,com.android.framework.protobuf.NewInstanceSchema,com.android.framework.protobuf.ListFieldSchema,com.android.framework.protobuf.UnknownFieldSchema,com.android.framework.protobuf.ExtensionSchema,com.android.framework.protobuf.MapFieldSchema)>
<android.gesture.GestureStroke: android.gesture.GestureStroke deserialize(java.io.DataInputStream)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setActionIndices(int[])>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setScores(float[])>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcRilSetRadioNodeStrValue(int,java.lang.String)>
<com.android.server.accounts.AccountManagerService: android.accounts.Account insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofObject(java.lang.Object[])>
<com.qualcomm.qcrilhook.QcRilHook: boolean qcRilSelectConfig(java.lang.String,int,int)>
<com.android.internal.telephony.gsm.GsmSmsAddress: void <init>(byte[],int,int)>
<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.ItemsIconId retrieveItemsIconId(com.android.internal.telephony.cat.ComprehensionTlv)>
<com.android.phone.ecc.nano.ProtobufEccData$EccInfo: com.android.phone.ecc.nano.ProtobufEccData$EccInfo mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano)>
<com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes: com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes parseHistoricalBytes(byte[],int,int)>
<com.android.server.display.BrightnessMappingStrategy: float[] getFloatArray(android.content.res.TypedArray)>
<android.os.UserManager: java.util.List getUserHandles(boolean)>
<android.security.keystore.AndroidKeyStoreCipherSpiBase: void engineUpdateAAD(java.nio.ByteBuffer)>
<android.view.DisplayInfo: void readFromParcel(android.os.Parcel)>
<android.telephony.CellIdentityTdscdma: void <init>(java.lang.String,java.lang.String,int,int,int,int,java.lang.String,java.lang.String,java.util.Collection,android.telephony.ClosedSubscriberGroupInfo)>
<android.text.method.DigitsKeyListener: void <init>(java.lang.String)>
<android.os.WorkSource: java.util.ArrayList[] diffChains(android.os.WorkSource,android.os.WorkSource)>
<android.view.animation.PathInterpolator: void initPath(android.graphics.Path)>
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createULong(long[],java.nio.ByteOrder)>
<android.content.pm.PackageParser: android.util.ArraySet toSigningKeys(android.content.pm.Signature[])>
<com.android.server.NetworkManagementService: android.net.UidRangeParcel[] toStableParcels(android.net.UidRange[])>
<android.net.NetworkStats: void migrateTun(int,java.lang.String,java.lang.String[])>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$0(int)>
<com.android.server.usage.UsageStatsProto: java.util.List readStringPool(android.util.proto.ProtoInputStream)>
<android.os.Parcel: android.util.SparseIntArray readSparseIntArray()>
<android.accounts.ChooseTypeAndAccountActivity: java.util.Set getAllowableAccountSet(android.content.Intent)>
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>
<android.hardware.camera2.params.StreamConfigurationMap: int[] getPublicFormats(boolean)>
<android.location.GnssMeasurementsEvent$1: android.location.GnssMeasurementsEvent createFromParcel(android.os.Parcel)>
<com.android.server.devicepolicy.DevicePolicyManagerService: int[] translateIdAttestationFlags(int)>
<com.android.server.slice.PinnedSliceState: android.app.slice.SliceSpec[] lambda$mergeSpecs$2(int)>
<android.content.pm.PackageParser$Package: android.util.ArrayMap readKeySetMapping(android.os.Parcel)>
<android.opengl.GLLogWrapper: char[] toCharIndices(int,int,java.nio.Buffer)>
<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream,boolean,int)>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)>
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>
<android.net.RssiCurve: void <init>(android.os.Parcel)>
<com.android.framework.protobuf.CodedOutputStream$OutputStreamEncoder: void writeStringNoTag(java.lang.String)>
<com.android.internal.telephony.RIL: byte[] arrayListToPrimitiveArray(java.util.ArrayList)>
<org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])>
<com.android.internal.telephony.nano.PersistAtomsProto$PersistAtoms: com.android.internal.telephony.nano.PersistAtomsProto$PersistAtoms mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.service.autofill.SaveInfo$Builder: android.service.autofill.SaveInfo$Builder addSanitizer(android.service.autofill.Sanitizer,android.view.autofill.AutofillId[])>
<android.hardware.hdmi.HdmiTvClient$3: byte[] getOneTouchRecordSource(int)>
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void sendSmsAckForEnvelopeResponse(com.android.internal.telephony.uicc.IccIoResult,int,int)>
<com.android.server.accessibility.FullScreenMagnificationGestureHandler: android.view.MotionEvent$PointerCoords[] getTempPointerCoordsWithMinSize(int)>
<com.android.internal.os.BatteryStatsImpl: void setPowerProfileLocked(com.android.internal.os.PowerProfile)>
<com.qualcomm.qcrilhook.PresenceMsgParser$PresenceRichNotifyParser: java.lang.String parseString(int)>
<com.qualcomm.qcrilhook.EmbmsOemHook: com.qualcomm.qcrilhook.QmiPrimitiveTypes$QmiArray intArrayToQmiArray(short,int[])>
<android.os.HwParcel: void writeStringVector(java.util.ArrayList)>
<com.android.server.broadcastradio.hal2.Convert: android.hardware.radio.ProgramSelector$Identifier[] lambda$programSelectorFromHal$2(int)>
<com.android.internal.app.procstats.SparseMappingTable$Table: boolean readFromParcel(android.os.Parcel)>
<android.graphics.drawable.AnimatedVectorDrawable$VectorDrawableAnimatorRT: float[] createFloatDataPoints(android.animation.PropertyValuesHolder$PropertyValues$DataSource,long)>
<org.apache.commons.codec.net.QCodec: byte[] doDecoding(byte[])>
<android.opengl.GLSurfaceView$BaseConfigChooser: int[] filterConfigSpec(int[])>
<com.android.server.search.Searchables: java.util.ArrayList createFilterdResolveInfoList(java.util.List)>
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void handleDataDownload(com.android.internal.telephony.gsm.SmsMessage)>
<android.content.pm.ShortcutInfo: android.app.Person[] clonePersons(android.app.Person[])>
<android.hardware.radio.ProgramSelector: android.hardware.radio.ProgramSelector$Identifier[] lambda$withSecondaryPreferred$2(int)>
<android.filterfw.core.ShaderProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>
<android.telephony.CellIdentityWcdma: void <init>(int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Collection,android.telephony.ClosedSubscriberGroupInfo)>
<android.graphics.drawable.AnimatedStateListDrawable$FrameInterpolator: int updateFrames(android.graphics.drawable.AnimationDrawable,boolean)>
<com.android.server.devicepolicy.AbUpdateInstaller: java.lang.String[] lambda$applyPayload$0(int)>
<android.mtp.MtpPropertyGroup: void <init>(int[])>
<com.android.server.soundtrigger_middleware.ConversionUtil: android.media.soundtrigger_middleware.RecognitionEvent hidl2aidlRecognitionEvent(android.hardware.soundtrigger.V2_0.ISoundTriggerHwCallback$RecognitionEvent)>
<org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>
<android.security.identity.CredstoreIdentityCredential: android.security.identity.ResultData getEntries(byte[],java.util.Map,byte[],byte[])>
<android.os.BatteryStats$LevelStepTracker: void <init>(int,long[])>
<com.android.server.pm.dex.DexoptUtils: java.lang.String[] getSplitRelativeCodePaths(com.android.server.pm.parsing.pkg.AndroidPackage)>
<com.android.server.content.ContentService$ObserverCollector: void lambda$dispatch$0(com.android.server.content.ContentService$ObserverCollector$Key,java.util.List)>
<org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(byte[])>
<android.security.keystore.KeyProperties$SignaturePadding: int[] allToKeymaster(java.lang.String[])>
<android.util.Spline$LinearSpline: void <init>(float[],float[])>
<android.renderscript.ScriptGroup$Closure: void <init>(android.renderscript.RenderScript,android.renderscript.Script$InvokeID,java.lang.Object[],java.util.Map)>
<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>
<com.android.internal.util.FastPrintWriter: void <init>(android.util.Printer,int)>
<android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureResult$Key[])>
<com.android.server.oemlock.VendorLock: java.util.ArrayList toByteArrayList(byte[])>
<android.graphics.drawable.LevelListDrawable$LevelListState: void growArray(int,int)>
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getFeaturesForLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofInt(int[])>
<android.app.DownloadManager: void onMediaStoreDownloadsDeleted(android.util.LongSparseArray)>
<com.android.server.pm.PackageInstallerSession: java.util.ArrayList filterFiles(java.io.File,java.lang.String[],java.io.FileFilter)>
<com.android.internal.os.KernelCpuThreadReaderDiff: void applyThresholding(com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)>
<android.telephony.CarrierRestrictionRules: java.util.List areCarrierIdentifiersAllowed(java.util.List)>
<android.security.keymaster.KeymasterCertificateChain: void readFromParcel(android.os.Parcel)>
<com.android.server.usb.descriptors.Usb10ASFormatI: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.server.backup.utils.TarBackupReader: boolean readPaxExtendedHeader(com.android.server.backup.FileMetadata)>
<android.hardware.camera2.impl.CameraMetadataNative: void setBase(android.hardware.camera2.impl.CameraMetadataNative$Key,java.lang.Object)>
<android.media.audiopolicy.AudioPolicy: int attachMixes(java.util.List)>
<com.qualcomm.qcrilhook.TunerOemHook: com.qualcomm.qcrilhook.QmiPrimitiveTypes$QmiArray intArrayToQmiArray(int[])>
<com.android.server.VibratorService: long[] getLongIntArray(android.content.res.Resources,int)>
<android.os.HwBlob: java.lang.Long[] wrapArray(long[])>
<com.android.server.VibratorService: java.util.List asList(int[])>
<android.content.Intent: android.content.Intent parseCommandArgs(android.os.ShellCommand,android.content.Intent$CommandOptionHandler)>
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>
<android.util.EventLog$Event: android.util.EventLog$Event withNewData(java.lang.Object)>
<com.android.server.backup.PackageManagerBackupAgent$LegacyRestoreDataConsumer: void consumeRestoreData(android.app.backup.BackupDataInput)>
<android.os.HwParcel: void writeInt16Vector(java.util.ArrayList)>
<com.android.internal.util.IndentingPrintWriter: void write(java.lang.String,int,int)>
<com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PackageInfo generateWithComponents(com.android.server.pm.parsing.pkg.AndroidPackage,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo,com.android.server.pm.PackageSetting)>
<android.nfc.NdefRecord$1: android.nfc.NdefRecord createFromParcel(android.os.Parcel)>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void <init>(android.filterfw.core.SerializedFrame,int)>
<com.android.server.pm.dex.DexoptUtils: java.lang.String[] processContextForDexLoad(java.util.List,java.util.List)>
<com.android.internal.widget.LockPatternUtils: byte[] patternToByteArray(java.util.List)>
<android.util.KeyValueListParser: int[] getIntArray(java.lang.String,int[])>
<com.android.server.backup.UserBackupManagerService: java.util.List filterUserFacingPackages(java.util.List)>
<android.webkit.WebViewProviderInfo: void <init>(java.lang.String,java.lang.String,boolean,boolean,java.lang.String[])>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>
<com.android.framework.protobuf.MessageSchema: com.android.framework.protobuf.MessageSchema newSchemaForRawMessageInfo(com.android.framework.protobuf.RawMessageInfo,com.android.framework.protobuf.NewInstanceSchema,com.android.framework.protobuf.ListFieldSchema,com.android.framework.protobuf.UnknownFieldSchema,com.android.framework.protobuf.ExtensionSchema,com.android.framework.protobuf.MapFieldSchema)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofKeyframe(android.animation.Keyframe[])>
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: void <init>(android.os.Parcel)>
<com.android.server.accounts.AccountManagerService: android.util.SparseBooleanArray getUidsOfInstalledOrUpdatedPackagesAsUser(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: void readFromParcelLocked(com.android.internal.os.BatteryStatsImpl$TimeBase,com.android.internal.os.BatteryStatsImpl$TimeBase,android.os.Parcel)>
<android.media.tv.TvContentRating: android.media.tv.TvContentRating unflattenFromString(java.lang.String)>
<com.android.framework.protobuf.CodedOutputStreamWriter: void writeDeterministicStringMap(int,com.android.framework.protobuf.MapEntryLite$Metadata,java.util.Map)>
<com.android.internal.telephony.euicc.EuiccController$GetDefaultListCommandCallback: void onGetDefaultListComplete(int,android.service.euicc.GetDefaultDownloadableSubscriptionListResult)>
<com.android.internal.util.ArrayUtils: int[] appendInt(int[],int,boolean)>
<com.android.internal.telephony.cdma.sms.BearerData: void encode7bitAsciiEms(com.android.internal.telephony.cdma.sms.UserData,byte[],boolean)>
<com.android.i18n.phonenumbers.ShortNumberInfo: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<android.app.AppOpsManager$HistoricalPackageOps: void <init>(android.app.AppOpsManager$HistoricalPackageOps)>
<android.hardware.location.ActivityChangedEvent$1: android.hardware.location.ActivityChangedEvent createFromParcel(android.os.Parcel)>
<com.android.uiautomator.core.UiObject: boolean performTwoPointerGesture(android.graphics.Point,android.graphics.Point,android.graphics.Point,android.graphics.Point,int)>
<android.content.res.AssetManager: void setApkAssets(android.content.res.ApkAssets[],boolean)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<com.android.internal.os.BatteryStatsImpl$ControllerActivityCounterImpl: void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase,int)>
<android.location.GpsNavigationMessage$1: android.location.GpsNavigationMessage createFromParcel(android.os.Parcel)>
<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void engineUpdate(java.nio.ByteBuffer)>
<com.android.server.usb.descriptors.Usb10ACHeader: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<com.android.internal.util.ProcFileReader: void <init>(java.io.InputStream,int)>
<android.text.PackedIntVector: void <init>(int)>
<com.android.framework.protobuf.FieldSet: java.lang.Object cloneIfMutable(java.lang.Object)>
<android.content.ContentProviderNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.telephony.nano.TelephonyProto$ModemPowerStats: com.android.internal.telephony.nano.TelephonyProto$ModemPowerStats mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.telecom.Call: void internalUpdate(android.telecom.ParcelableCall,java.util.Map)>
<android.text.TextUtils$Reverser: java.lang.CharSequence subSequence(int,int)>
<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float[] getWeights(long,com.android.server.display.utils.RollingBuffer)>
<android.media.audiofx.DynamicsProcessing$Mbc: void <init>(boolean,boolean,int)>
<android.hardware.camera2.impl.CameraDeviceImpl: void createConstrainedHighSpeedCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<com.android.server.inputmethod.LocaleUtils$ScoreEntry: void <init>(byte[],int)>
<android.hardware.radio.Utils: java.util.Map readStringIntMap(android.os.Parcel)>
<android.view.View: int[] getAttributeResolutionStack(int)>
<android.os.WorkSource: boolean add(android.os.WorkSource)>
<com.android.internal.telephony.SubscriptionController: int updateDatabase(android.content.ContentValues,int,boolean)>
<com.android.framework.protobuf.CodedOutputStreamWriter: void writeDeterministicIntegerMap(int,com.android.framework.protobuf.MapEntryLite$Metadata,java.util.Map)>
<com.android.internal.telephony.util.DnsPacket$DnsRecord: void <init>(com.android.internal.telephony.util.DnsPacket,int,java.nio.ByteBuffer)>
<com.android.internal.widget.LockPatternUtils: java.lang.String legacyPasswordToHash(byte[],int)>
<com.qualcomm.qcrilhook.EmbmsOemHook: com.qualcomm.qcrilhook.QmiPrimitiveTypes$QmiArray tmgiListArrayToQmiArray(short,byte[])>
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)>
<android.os.DropBoxManager$Entry: java.lang.String getText(int)>
<com.android.internal.os.BatteryStatsImpl: java.lang.String[] excludeFromStringArray(java.lang.String[],java.lang.String)>
<com.android.server.pm.PackageManagerService: void executeSharedLibrariesUpdateLPr(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.ArrayList,int[])>
<com.android.internal.telephony.uicc.IccUtils: byte[] signedIntToBytes(int)>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void logSetCrossProfilePackages(android.content.ComponentName,java.util.List)>
<android.net.NetworkIdentity: java.lang.String[] scrubSubscriberId(java.lang.String[])>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>
<com.android.server.rollback.RollbackStore: android.util.IntArray convertToIntArray(org.json.JSONArray)>
<com.android.internal.telephony.uicc.SIMRecords: java.lang.String[] parseBcdPlmnList(byte[],java.lang.String)>
<com.android.internal.telephony.cdma.SmsMessageConverter: com.android.internal.telephony.cdma.SmsMessage newCdmaSmsMessageFromRil(android.hardware.radio.V1_0.CdmaSmsMessage)>
<com.android.server.notification.ManagedServices: android.util.ArraySet loadComponentNamesFromValues(android.util.ArraySet,int)>
<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])>
<android.media.SubtitleData: boolean parseParcel(android.os.Parcel)>
<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void <init>(long,int)>
<android.media.ExifInterface: long[] convertToLongArray(java.lang.Object)>
<android.net.util.nsd.DnsSdTxtRecord: void insert(byte[],byte[],int)>
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<com.qualcomm.qcrilhook.QcRilHookExt: boolean qcRilSetRadioNodeStrValue(int,java.lang.String,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void <init>(android.graphics.drawable.DrawableContainer$DrawableContainerState,android.graphics.drawable.DrawableContainer,android.content.res.Resources)>
<android.graphics.animation.FallbackLUTInterpolator: float[] createLUT(android.animation.TimeInterpolator,long)>
<android.hardware.radio.Utils: java.util.Map readStringMap(android.os.Parcel)>
<org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>
<com.android.server.notification.NotificationManagerService: long[] getLongArray(android.content.res.Resources,int,int,long[])>
<com.android.server.wm.ActivityTaskManagerService: boolean dumpActivity(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean,boolean,boolean)>
<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray)>
<com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData fromBytes(byte[])>
<com.android.internal.ml.clustering.KMeans$Mean: void <init>(int)>
<android.telephony.IccOpenLogicalChannelResponse: void <init>(android.os.Parcel)>
<android.media.ResampleInputStream: int read(byte[],int,int)>
<android.widget.TextView: int[] parseDimensionArray(android.content.res.TypedArray)>
<org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])>
<com.android.framework.protobuf.nano.FieldArray: void <init>(int)>
<com.android.server.autofill.Session: void autoFillApp(android.service.autofill.Dataset)>
<com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>
<android.hardware.camera2.utils.ArrayUtils: java.util.List convertStringListToIntList(java.util.List,java.lang.String[],int[])>
<com.android.server.wm.DisplayAreaPolicyBuilder$Feature$Builder: void <init>(com.android.server.policy.WindowManagerPolicy,java.lang.String,int)>
<com.android.internal.telephony.RadioIndication: void physicalChannelConfigsIndication(java.util.List)>
<com.android.internal.util.BitwiseOutputStream: void <init>(int)>
<com.qualcomm.qcrilhook.PresenceMsgParser: java.util.ArrayList parseNotifyUpdate(java.nio.ByteBuffer,int,int)>
<com.android.internal.telephony.HexDump: java.lang.String toHexString(byte[],int,int,boolean)>
<com.android.server.NetworkScoreService$ScanResultsScoreCacheFilter: void <init>(java.util.function.Supplier)>
<android.util.jar.StrictJarFile: java.security.cert.Certificate[] getCertificates(java.util.zip.ZipEntry)>
<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int,java.util.List)>
<com.android.server.stats.pull.StatsPullAtomService: byte[] readFully(java.io.InputStream,int[])>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters: void <init>(org.junit.runners.parameterized.TestWithParameters)>
<com.android.framework.protobuf.Utf8$UnsafeProcessor: java.lang.String decodeUtf8(byte[],int,int)>
<android.view.View: void saveAttributeData(android.util.AttributeSet,android.content.res.TypedArray)>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] bytesToHex(byte[])>
<com.android.net.module.util.DnsPacket$DnsRecord: java.lang.String parseName(java.nio.ByteBuffer,int)>
<com.android.internal.telephony.protobuf.nano.MessageNano: byte[] toByteArray(com.android.internal.telephony.protobuf.nano.MessageNano)>
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<com.android.internal.telephony.phonenumbers.prefixmapper.FlyweightMapStorage: void createDescriptionPool(java.util.SortedSet,java.util.SortedMap)>
<android.widget.AbsListView$RecycleBin: void setViewTypeCount(int)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyLog: com.android.internal.telephony.nano.TelephonyProto$TelephonyLog mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSetUpEventList(com.android.internal.telephony.cat.CommandDetails,java.util.List)>
<com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode: void <init>(com.android.server.pm.dex.PackageDynamicCodeLoading$PackageDynamicCode)>
<android.security.net.config.KeyStoreCertificateSource: java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)>
<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(android.app.RemoteInputHistoryItem[])>
<android.hardware.soundtrigger.ConversionUtil: android.media.soundtrigger_middleware.PhraseSoundModel api2aidlPhraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<android.content.pm.parsing.ParsingPackageUtils: android.content.pm.parsing.result.ParseResult parseRestrictUpdateHash(int,android.content.pm.parsing.result.ParseInput,android.content.pm.parsing.ParsingPackage,android.content.res.Resources,android.content.res.XmlResourceParser)>
<android.security.keystore.ArrayUtils: byte[] concat(byte[],int,int,byte[],int,int)>
<com.android.internal.telephony.HexDump: byte[] hexStringToByteArray(java.lang.String)>
<android.app.slice.Slice: void <init>(android.os.Parcel)>
<android.text.method.QwertyKeyListener: void markAsReplaced(android.text.Spannable,int,int,java.lang.String)>
<com.android.server.am.ProcessList: int[] computeGidsForProcess(int,int,int[])>
<android.media.AudioMetadata$3$5: java.lang.String unpack(java.nio.ByteBuffer)>
<android.graphics.drawable.LayerDrawable$LayerState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.LayerDrawable,android.content.res.Resources)>
<com.qualcomm.qcrilhook.EmbmsOemHook$TmgiResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<com.android.server.backup.restore.PerformUnifiedRestoreTask: void filterExcludedKeys(java.lang.String,android.app.backup.BackupDataInput,android.app.backup.BackupDataOutput)>
<com.qualcomm.qcrilhook.QcRilHook: byte[] qcRilGetOemVersionOfFile(java.lang.String)>
<com.android.server.backup.utils.PasswordUtils: byte[] makeKeyChecksum(java.lang.String,byte[],byte[],int)>
<android.os.FileObserver$ObserverThread: int[] startWatching(java.util.List,int,android.os.FileObserver)>
<android.security.net.config.ResourceCertificateSource: java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)>
<com.android.internal.telephony.MultiSimSettingController: void <init>(android.content.Context,com.android.internal.telephony.SubscriptionController)>
<com.android.internal.telephony.RIL: java.util.ArrayList convertDataCallResultList(java.util.List)>
<android.media.audiofx.Virtualizer: boolean getAnglesInt(int,int,int[])>
<android.os.Environment: java.io.File[] buildPaths(java.io.File[],java.lang.String[])>
<android.text.Layout: float[] getLineHorizontals(int,boolean,boolean)>
<com.android.server.wm.ActivityStartController: android.content.Intent[] lambda$startActivities$0(int)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addSubSlice(android.app.slice.Slice,java.lang.String)>
<com.android.framework.protobuf.ListFieldSchema$ListFieldSchemaFull: java.util.List mutableListAt(java.lang.Object,long,int)>
<com.android.server.net.watchlist.WatchlistLoggingHandler: java.util.List getAllDigestsForReport(com.android.server.net.watchlist.WatchlistReportDbHelper$AggregatedResult)>
<com.android.server.locksettings.SyntheticPasswordManager: void createSyntheticPasswordBlob(long,byte,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,byte[],long,int)>
<android.content.pm.parsing.component.ParsedIntentInfo$ListParceler: java.util.List unparcel(android.os.Parcel)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyHistogram: com.android.internal.telephony.nano.TelephonyProto$TelephonyHistogram mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>
<com.android.framework.protobuf.nano.MessageNano: boolean messageNanoEquals(com.android.framework.protobuf.nano.MessageNano,com.android.framework.protobuf.nano.MessageNano)>
<android.widget.GridLayout$PackedMap: int[] createIndex(java.lang.Object[])>
<android.hardware.soundtrigger.ConversionUtil: android.hardware.soundtrigger.SoundTrigger$RecognitionEvent aidl2apiPhraseRecognitionEvent(int,android.media.soundtrigger_middleware.PhraseRecognitionEvent)>
<com.qualcomm.qcrilhook.QcRilHook: void sendQcRilHookMsgAsync(int,byte[],com.qualcomm.qcrilhook.OemHookCallback,int)>
<com.android.server.search.Searchables: java.util.ArrayList createFilterdSearchableInfoList(java.util.List)>
<android.telephony.euicc.EuiccRulesAuthTable: void <init>(android.os.Parcel)>
<com.android.framework.protobuf.nano.CodedInputByteBufferNano: byte[] getData(int,int)>
<android.os.health.SystemHealthManager: android.os.health.HealthStats[] takeUidSnapshots(int[])>
<android.service.autofill.UserData: void <init>(android.service.autofill.UserData$Builder)>
<com.android.server.display.OverlayDisplayAdapter$OverlayDisplayDevice: void <init>(com.android.server.display.OverlayDisplayAdapter,android.os.IBinder,java.lang.String,java.util.List,int,int,float,long,com.android.server.display.OverlayDisplayAdapter$OverlayFlags,int,android.graphics.SurfaceTexture,int)>
<com.android.server.pm.AppsFilter$1: void currentState(android.util.ArrayMap,android.content.pm.UserInfo[])>
<com.android.framework.protobuf.Internal: int hashCodeByteBuffer(java.nio.ByteBuffer)>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.accessibilityservice.GestureDescription$GestureStep: void <init>(long,int,android.accessibilityservice.GestureDescription$TouchPoint[])>
<android.media.ExifInterface: void getPngAttributes(android.media.ExifInterface$ByteOrderedDataInputStream)>
<com.android.framework.protobuf.ByteString: com.android.framework.protobuf.ByteString copyFrom(java.nio.ByteBuffer,int)>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$6(int)>
<com.android.framework.protobuf.ProtobufArrayList: com.android.framework.protobuf.ProtobufArrayList mutableCopyWithCapacity(int)>
<android.provider.Settings$Config: boolean setStrings(android.content.ContentResolver,java.lang.String,java.util.Map)>
<android.content.IntentFilter: java.lang.String[] removeStringFromSet(java.lang.String[],java.lang.String,int[],int)>
<android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithoutComponentsUnchecked(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo,android.content.pm.ApplicationInfo)>
<com.qualcomm.qcrilhook.QcRilHookExt: android.os.AsyncResult sendRilOemHookMsg(int,byte[],int)>
<com.android.server.pm.parsing.PackageInfoUtils: android.util.ArrayMap generateProcessInfo(java.util.Map,int)>
<com.android.phone.ecc.nano.FieldArray: void <init>(int)>
<com.android.internal.telephony.metrics.VoiceCallRatTracker: com.android.internal.telephony.nano.PersistAtomsProto$RawVoiceCallRatUsage[] lambda$toProto$1(int)>
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)>
<com.android.server.connectivity.Vpn: boolean setAllowOnlyVpnForUids(boolean,java.util.Collection)>
<com.android.server.hdmi.HdmiCecController$HdmiCecCallback: void onCecMessage(android.hardware.tv.cec.V1_0.CecMessage)>
<android.filterfw.core.SimpleFrame: void initWithFormat(android.filterfw.core.FrameFormat)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int)>
<com.android.server.pm.UserSystemPackageInstaller: java.lang.String[] getAndSortKeysFromMap(android.util.ArrayMap)>
<android.bluetooth.SdpOppOpsRecord: void <init>(android.os.Parcel)>
<com.android.internal.telephony.cdma.sms.BearerData: void encode16bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[])>
<android.view.View: int[] onCreateDrawableState(int)>
<android.renderscript.FieldPacker: boolean resize(int)>
<android.hardware.location.ActivityRecognitionHardware: void onActivityChanged(android.hardware.location.ActivityRecognitionHardware$Event[])>
<com.android.server.wm.InsetsStateController: android.view.InsetsSourceControl[] getControlsForDispatch(com.android.server.wm.InsetsControlTarget)>
<android.os.Parcel: java.io.FileDescriptor[] createRawFileDescriptorArray()>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addLong(long,java.lang.String,java.util.List)>
<com.android.server.inputmethod.InputMethodSubtypeSwitchingController$DynamicRotationList: void <init>(java.util.List)>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] fromByteArrayList(java.util.ArrayList)>
<android.renderscript.Allocation: android.renderscript.Allocation[] createAllocations(android.renderscript.RenderScript,android.renderscript.Type,int,int)>
<com.android.server.pm.UserManagerService: java.util.List getProfilesLU(int,java.lang.String,boolean,boolean)>
<android.bluetooth.le.ScanFilter$1: android.bluetooth.le.ScanFilter createFromParcel(android.os.Parcel)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>
<android.os.BaseBundle: void initializeFromParcelLocked(android.os.Parcel,boolean,boolean)>
<com.qualcomm.qcrilhook.QcRilHook: android.os.AsyncResult sendQcRilHookMsg(int,byte[],int)>
<android.util.proto.ProtoInputStream: byte[] readRawBytes(int)>
<android.telephony.mbms.MbmsDownloadReceiver: java.util.ArrayList generateUrisForPausedFiles(android.content.Context,java.lang.String,java.util.List)>
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqs(java.lang.String)>
<android.service.autofill.CompositeUserData: void <init>(android.service.autofill.UserData,android.service.autofill.UserData)>
<com.android.service.nano.StringListParamProto: com.android.service.nano.StringListParamProto mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.net.NetworkStatsHistory: void <init>(long,int,int)>
<android.nfc.Tag: int[] getTechCodesFromStrings(java.lang.String[])>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>
<android.renderscript.Script: void forEach(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>
<com.android.server.am.ActivityManagerService: void cleanupDisabledPackageComponentsLocked(java.lang.String,int,java.lang.String[])>
<android.media.audiopolicy.AudioVolumeGroup$1: android.media.audiopolicy.AudioVolumeGroup createFromParcel(android.os.Parcel)>
<android.net.http.RequestQueue$ActivePool: void <init>(android.net.http.RequestQueue,int)>
<android.app.Notification$Builder: java.lang.CharSequence ensureColorSpanContrast(java.lang.CharSequence,int,android.content.res.ColorStateList[])>
<android.hardware.radio.Utils: java.util.Set createSet(android.os.Parcel,android.os.Parcelable$Creator)>
<android.net.netlink.StructNlAttr: android.net.netlink.StructNlAttr parse(java.nio.ByteBuffer)>
<com.android.internal.widget.LockPatternUtils: java.util.List getEnabledTrustAgents(int)>
<android.widget.SmartSelectSprite: void startAnimation(android.graphics.PointF,java.util.List,java.lang.Runnable)>
<com.android.internal.util.BitwiseOutputStream: void possExpand(int)>
<com.android.i18n.phonenumbers.prefixmapper.FlyweightMapStorage: void readExternal(java.io.ObjectInput)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>
<android.media.midi.MidiDeviceServer: void <init>(android.media.midi.IMidiManager,android.media.midi.MidiReceiver[],int,android.media.midi.MidiDeviceServer$Callback)>
<android.content.ContentProvider$Transport: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList)>
<com.android.internal.telephony.metrics.TelephonyMetrics: java.lang.String[] lambda$writeCarrierIdMatchingEvent$2(int)>
<com.qualcomm.qcrilhook.EmbmsOemHook: byte[] parseActiveTmgi(java.nio.ByteBuffer)>
<android.content.RestrictionEntry: void <init>(android.os.Parcel)>
<com.android.internal.telephony.dataconnection.DataConnection: java.lang.String[] lambda$onSetupConnectionCompleted$0(int)>
<android.app.slice.Slice$Builder: android.app.slice.Slice$Builder addAction(android.app.PendingIntent,android.app.slice.Slice,java.lang.String)>
<android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generateWithComponents(android.content.pm.parsing.ParsingPackageRead,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,android.apex.ApexInfo)>
<com.android.internal.telephony.RadioResponse: void responseCurrentCalls(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<com.android.server.soundtrigger_middleware.ConversionUtil: android.media.soundtrigger_middleware.PhraseRecognitionExtra hidl2aidlPhraseRecognitionExtra(android.hardware.soundtrigger.V2_0.PhraseRecognitionExtra)>
<com.android.server.utils.PriorityDump: void dump(com.android.server.utils.PriorityDump$PriorityDumper,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.LoadedApk$SplitDependencyLoaderImpl: void <init>(android.app.LoadedApk,android.util.SparseArray)>
<com.android.framework.protobuf.Utf8$Processor: java.lang.String decodeUtf8Default(java.nio.ByteBuffer,int,int)>
<android.app.slice.Slice: void <init>(java.util.ArrayList,java.lang.String[],android.net.Uri,android.app.slice.SliceSpec)>
<com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes: int parseLtvNode(int,android.util.ArrayMap,byte[],int)>
<android.text.method.NumberKeyListener: char[] collectionToArray(java.util.Collection)>
<android.hardware.camera2.marshal.impl.MarshalQueryableParcelable$MarshalerParcelable: android.os.Parcelable unmarshal(java.nio.ByteBuffer)>
<com.android.internal.util.HexDump: java.lang.String toHexString(byte[],int,int,boolean)>
<android.media.tv.tunerresourcemanager.ITunerResourceManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.hardware.lights.LightsRequest: void <init>(android.util.SparseArray)>
<android.app.slice.SliceItem: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.util.List)>
<com.android.internal.app.SuggestedLocaleAdapter: void <init>(java.util.Set,boolean)>
<android.os.health.HealthStatsWriter: void <init>(android.os.health.HealthKeys$Constants)>
<android.hardware.camera2.impl.CameraDeviceImpl: void configureOutputs(java.util.List)>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.hardware.camera2.legacy.ParameterUtils: java.util.List convertSizeList(java.util.List)>
<com.android.server.am.ActivityManagerService: void dumpApplicationMemoryUsage(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],boolean,java.io.PrintWriter,boolean)>
<com.android.internal.app.ChooserActivity: boolean onTargetSelected(com.android.internal.app.chooser.TargetInfo,boolean)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: java.lang.String[] lambda$grantRuntimePermissions$0(int)>
<com.android.server.pm.Settings: void applyDefaultPreferredActivityLPw(android.content.pm.PackageManagerInternal,android.content.Intent,int,android.content.ComponentName,java.lang.String,android.os.PatternMatcher,android.content.IntentFilter$AuthorityEntry,android.os.PatternMatcher,int)>
<android.hardware.camera2.DngCreator: java.nio.ByteBuffer convertToRGB(android.media.Image)>
<android.security.keystore.recovery.RecoverySession: java.util.Map getKeysFromGrants(java.util.Map)>
<android.hardware.soundtrigger.ConversionUtil: android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionExtra aidl2apiPhraseRecognitionExtra(android.media.soundtrigger_middleware.PhraseRecognitionExtra)>
<com.android.internal.util.ArrayUtils: int[] convertToIntArray(java.util.List)>
<android.content.pm.Signature: boolean areEffectiveMatch(android.content.pm.Signature[],android.content.pm.Signature[])>
<android.security.keystore.AndroidKeyStoreSpi: void setPrivateKeyEntry(java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.security.KeyStore$ProtectionParameter)>
<android.service.carrier.ApnService$1: android.content.ContentValues[] getApns(int)>
<android.preference.MultiCheckPreference: void setEntries(java.lang.CharSequence[])>
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttributes(org.xml.sax.Attributes)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DefaultNetworkEvent mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.telephony.NetworkScanRequest: void <init>(android.os.Parcel)>
<com.android.server.pm.permission.DefaultPermissionGrantPolicy: void grantRuntimePermissions(com.android.server.pm.permission.DefaultPermissionGrantPolicy$PackageManagerWrapper,android.content.pm.PackageInfo,java.util.Set,boolean,boolean,boolean,int)>
<com.android.internal.util.ArrayUtils: long[] appendLong(long[],long,boolean)>
<com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano: byte[] getData(int,int)>
<com.android.server.pm.PackageManagerService: java.util.Map reconcilePackagesLocked(com.android.server.pm.PackageManagerService$ReconcileRequest,com.android.server.pm.KeySetManagerService)>
<android.accounts.ChooseTypeAndAccountActivity: java.lang.String[] getListOfDisplayableOptions(java.util.ArrayList)>
<com.android.internal.os.BatteryStatsImpl: void readSummaryFromParcel(android.os.Parcel)>
<com.android.internal.telephony.uicc.IccUtils: android.graphics.Bitmap parseToBnW(byte[],int)>
<android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>
<android.os.IProcessInfoService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.backup.AccountSyncSettingsBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] componentsFromString(java.lang.String)>
<com.android.internal.os.KernelSingleUidTimeReader: long[] getDeltaLocked(long[],long[])>
<android.animation.FloatArrayEvaluator: float[] evaluate(float,float[],float[])>
<com.android.server.pm.dex.DexoptUtils: java.lang.String encodeSharedLibrary(android.content.pm.SharedLibraryInfo)>
<android.net.NetworkStatsHistory$DataStreamUtils: long[] readFullLongArray(java.io.DataInputStream)>
<android.net.IDnsResolver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.internal.util.ArrayUtils: long[] removeLong(long[],long)>
<com.android.internal.widget.GridLayoutManager: int[] calculateItemBorders(int[],int,int)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: boolean isConcurrentSessionConfigurationSupported(java.util.Map)>
<android.app.timezonedetector.TelephonyTimeZoneSuggestion: void addDebugInfo(java.util.List)>
<com.android.internal.telephony.TimeUtils: int formatDurationLocked(long,int)>
<android.text.Layout$SpannedEllipsizer: java.lang.CharSequence subSequence(int,int)>
<android.text.StaticLayout: void generate(android.text.StaticLayout$Builder,boolean,boolean)>
<android.os.HwBlob: java.lang.Integer[] wrapArray(int[])>
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createURational(android.media.ExifInterface$Rational[],java.nio.ByteOrder)>
<com.android.server.slice.SliceClientPermissions$SliceAuthority: void addPath(java.util.List)>
<android.os.HwBlob: java.lang.Boolean[] wrapArray(boolean[])>
<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>
<com.android.server.pm.ShortcutPackage: android.content.pm.ShortcutInfo parseShortcut(org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean)>
<com.android.server.camera.CameraServiceProxy: int[] toArray(java.util.Collection)>
<com.android.server.pm.PackageManagerService$PackageManagerInternalImpl: boolean setEnabledOverlayPackages(int,java.lang.String,java.util.List,java.util.Collection)>
<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost[])>
<com.android.server.soundtrigger_middleware.ConversionUtil: android.media.soundtrigger_middleware.PhraseRecognitionEvent hidl2aidlPhraseRecognitionEvent(android.hardware.soundtrigger.V2_1.ISoundTriggerHwCallback$PhraseRecognitionEvent)>
<android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>
<com.android.internal.telephony.nano.CarrierIdProto$CarrierList: com.android.internal.telephony.nano.CarrierIdProto$CarrierList mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.framework.protobuf.CodedOutputStream$ByteOutputEncoder: void writeStringNoTag(java.lang.String)>
<com.android.internal.ml.clustering.KMeans: boolean step(java.util.ArrayList,float[][])>
<com.android.server.usb.descriptors.UsbACSelectorUnit: int parseRawDescriptors(com.android.server.usb.descriptors.ByteStream)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>
<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map importKeyMaterials(int,int,java.util.Map)>
<android.content.pm.PackageParser$Package: void <init>(android.os.Parcel)>
<android.service.autofill.FieldClassification: android.service.autofill.FieldClassification[] readArrayFromParcel(android.os.Parcel)>
<android.widget.GridLayout$Axis: boolean solve(android.widget.GridLayout$Arc[],int[],boolean)>
<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>
<android.util.SparseBooleanArray: void <init>(int)>
<android.content.pm.parsing.ParsingPackageUtils: android.content.pm.parsing.result.ParseResult parseUsesStaticLibrary(android.content.pm.parsing.result.ParseInput,android.content.pm.parsing.ParsingPackage,android.content.res.Resources,android.content.res.XmlResourceParser)>
<com.android.server.signedconfig.GlobalSettingsConfigApplicator: java.util.Map makeMap(java.lang.Object[])>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(org.hamcrest.Matcher[])>
<com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>
<android.telephony.TelephonyHistogram: int[] getDeepCopyOfArray(int[])>
<com.android.server.connectivity.Vpn: boolean setUnderlyingNetworks(android.net.Network[])>
<android.media.Cea608CCParser$CCData: android.media.Cea608CCParser$CCData[] fromByteArray(byte[])>
<com.android.server.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes(int)>
<android.gesture.GestureStroke: void <init>(java.util.ArrayList)>
<com.android.framework.protobuf.LazyStringArrayList: com.android.framework.protobuf.LazyStringArrayList mutableCopyWithCapacity(int)>
<com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRequestShortAudioDescriptor(int,int,int[])>
<com.android.server.IntentResolver: android.util.FastImmutableArraySet getFastIntentCategories(android.content.Intent)>
<com.android.server.appop.HistoricalRegistry$Persistence: java.util.Set getHistoricalFileNames(java.io.File)>
<android.media.audiopolicy.AudioPolicy: int detachMixes(java.util.List)>
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofFloat(float[])>
<android.nfc.NdefRecord: android.nfc.NdefRecord[] parse(java.nio.ByteBuffer,boolean)>
<android.security.keystore.ArrayUtils: byte[] subarray(byte[],int,int)>
<org.hamcrest.internal.NullSafety: java.util.List nullSafe(org.hamcrest.Matcher[])>
<android.view.MotionEvent$PointerCoords: android.view.MotionEvent$PointerCoords[] createArray(int)>
<android.test.MoreAsserts: void assertContentsInAnyOrder(java.lang.String,java.lang.Iterable,java.lang.Object[])>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage createFromEfRecord(int,byte[])>
<com.qualcomm.qcrilhook.EmbmsOemHook$EnableResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<android.util.EventLog$Event: byte[] encodeObject(java.lang.Object)>
<com.android.internal.telephony.nano.TelephonyProto$SmsSession$Event: com.android.internal.telephony.nano.TelephonyProto$SmsSession$Event mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.widget.SmartSelectSprite: int[] generateDirections(android.widget.SmartSelectSprite$RectangleWithTextSelectionLayout,java.util.List)>
<android.telephony.mbms.ServiceInfo: void <init>(android.os.Parcel)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])>
<com.android.server.pm.ShortcutPackage: void saveShortcut(org.xmlpull.v1.XmlSerializer,android.content.pm.ShortcutInfo,boolean,boolean)>
<com.android.internal.telephony.util.nsd.DnsSdTxtRecord: void insert(byte[],byte[],int)>
<com.android.internal.util.StatLogger: void <init>(java.lang.String[])>
<android.content.pm.split.SplitAssetDependencyLoader: void <init>(android.content.pm.PackageParser$PackageLite,android.util.SparseArray,int)>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>
<android.util.Base64OutputStream: byte[] embiggen(byte[],int)>
<com.android.internal.app.procstats.SparseMappingTable: void readFromParcel(android.os.Parcel)>
<android.text.SpanSet: void init(android.text.Spanned,int,int)>
<android.bluetooth.BluetoothGattCharacteristic: java.lang.String getStringValue(int)>
<android.os.IncidentManager: java.util.List getIncidentReportList(java.lang.String)>
<com.qualcomm.qcrilhook.EmbmsOemHook: byte[] parseTmgi(java.nio.ByteBuffer)>
<com.android.framework.protobuf.CodedInputStream$StreamDecoder: java.util.List readRawBytesSlowPathRemainingChunks(int)>
<android.os.Vibrator: int[] areEffectsSupported(int[])>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int[] parseAudioFormatCodes(byte[])>
<org.apache.http.impl.cookie.RFC2965Spec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)>
<com.android.internal.telephony.RadioConfig: java.util.ArrayList convertHalSlotStatus(java.util.ArrayList)>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageOnlyLI(com.android.server.pm.PackageManagerService$ScanRequest,com.android.server.pm.PackageManagerService$Injector,boolean,long)>
<android.accessibilityservice.GestureDescription$GestureStep: void <init>(android.os.Parcel)>
<com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] lambda$listUIChanges$1(int)>
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int,int)>
<android.bluetooth.le.ScanRecord: byte[] extractBytes(byte[],int,int)>
<com.android.server.pm.PackageSetting: void updateMimeGroups(java.util.Set)>
<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>
<com.android.internal.telephony.uicc.IccUtils: int[] getCLUT(byte[],int,int)>
<android.net.shared.ParcelableUtil: java.util.ArrayList fromParcelableArray(java.lang.Object[],java.util.function.Function)>
<android.media.CameraProfile: int[] getImageEncodingQualityLevels(int)>
<android.text.SpannableStringBuilder: java.lang.String substring(int,int)>
<com.android.server.backup.utils.TarBackupReader: void skipTarPadding(long)>
<android.nfc.cardemulation.AidGroup: void <init>(java.util.List,java.lang.String)>
<android.hardware.camera2.legacy.LegacyRequestMapper: java.util.List convertMeteringRegionsToLegacy(android.graphics.Rect,android.hardware.camera2.legacy.ParameterUtils$ZoomData,android.hardware.camera2.params.MeteringRectangle[],int,java.lang.String)>
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>
<com.android.internal.app.procstats.ProcessStats: byte[] readFully(java.io.InputStream,int[])>
<com.android.server.om.OverlayManagerServiceImpl: java.util.List getEnabledOverlayPackageNames(java.lang.String,int)>
<com.android.server.pm.ComponentResolver$ActivityIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.List,int)>
<android.app.slice.SliceQuery: android.app.slice.SliceItem find(android.app.slice.Slice,java.lang.String,java.lang.String[],java.lang.String[])>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void ensureFit(int)>
<android.view.autofill.ParcelableMap: void <init>(int)>
<com.android.internal.telephony.FastXmlSerializer: void <init>(int)>
<com.android.internal.os.ZygoteInit: java.lang.Runnable handleSystemServerProcess(com.android.internal.os.ZygoteArguments)>
<android.app.usage.UsageStatsManager: void setAppStandbyBuckets(java.util.Map)>
<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String,java.lang.String,java.lang.String[])>
<android.hardware.camera2.legacy.LegacyMetadataMapper: int[] getTagsForKeys(android.hardware.camera2.CaptureRequest$Key[])>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[])>
<com.android.server.am.ProcessList: java.util.Map getPackageAppDataInfoMap(android.content.pm.PackageManagerInternal,java.lang.String[],int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void growArray(int,int)>
<android.widget.TextView: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>
<android.content.DefaultDataHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
<android.service.textservice.SpellCheckerService$Session: android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLatencies: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLatencies mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.security.keystore.ArrayUtils: int[] concat(int[],int[])>
<com.qualcomm.qcrilhook.EmbmsOemHook$StateChangeInfo: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,java.nio.ByteBuffer)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$ConnectStatistics mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.util.Pools$SimplePool: void <init>(int)>
<android.hardware.GeomagneticField$LegendreTable: void <init>(int,float)>
<android.util.jar.StrictJarVerifier: java.security.cert.Certificate[] verifyBytes(byte[],byte[])>
<android.app.AppOpsManager$HistoricalOps: void <init>(android.app.AppOpsManager$HistoricalOps)>
<com.android.server.DeviceIdleController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.security.keystore.KeyProperties$BlockMode: int[] allToKeymaster(java.lang.String[])>
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>
<com.android.server.display.BrightnessMappingStrategy: float[] getLuxLevels(int[])>
<com.android.server.inputmethod.LocaleUtils: void filterByLanguage(java.util.List,com.android.server.inputmethod.LocaleUtils$LocaleExtractor,android.os.LocaleList,java.util.ArrayList)>
<com.android.server.autofill.AutofillManagerServiceImpl: void logContextCommittedLocked(int,android.os.Bundle,java.util.ArrayList,android.util.ArraySet,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.content.ComponentName,boolean)>
<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>
<com.android.server.locksettings.SyntheticPasswordManager: byte[] transformUnderSecdiscardable(byte[],byte[])>
<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>
<org.apache.commons.codec.binary.BinaryCodec: byte[] fromAscii(char[])>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$WakeupStats mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] cleanUpNotificationList(android.content.pm.ParceledListSlice)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void updateLockTaskPackagesLocked(java.util.List,int)>
<android.hardware.SensorEvent: void <init>(int)>
<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidActiveTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator)>
<android.hardware.soundtrigger.ConversionUtil: android.media.soundtrigger_middleware.PhraseRecognitionExtra api2aidlPhraseRecognitionExtra(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionExtra)>
<com.qualcomm.qcrilhook.EmbmsOemHook$SigStrengthResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<com.qualcomm.qcrilhook.QcRilHook: byte[] qcRilGetOemVersionOfID(java.lang.String)>
<android.permission.PermissionManager: java.util.List splitPermissionInfoListToParcelableList(java.util.List)>
<android.widget.Editor: void replaceWithSuggestion(android.widget.Editor$SuggestionInfo)>
<android.net.NetworkStatsHistory$ParcelUtils: long[] readLongArray(android.os.Parcel)>
<android.util.TimingsTraceLog: void <init>(java.lang.String,long,int)>
<com.android.framework.protobuf.CodedInputStream: com.android.framework.protobuf.CodedInputStream newInstance(java.nio.ByteBuffer,boolean)>
<android.app.BackStackState: void <init>(android.app.FragmentManagerImpl,android.app.BackStackRecord)>
<com.android.server.autofill.Helper: android.view.autofill.AutofillId[] toArray(android.util.ArraySet)>
<com.android.phone.ecc.nano.MessageNano: boolean messageNanoEquals(com.android.phone.ecc.nano.MessageNano,com.android.phone.ecc.nano.MessageNano)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent: com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.hardware.camera2.impl.CameraMetadataNative: boolean setAvailableFormats(int[])>
<com.android.internal.telephony.gsm.SmsMessage: byte[] encodeUCS2(java.lang.String,byte[])>
<android.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<android.media.MediaInserter: void flush(android.net.Uri,java.util.List)>
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createUShort(int[],java.nio.ByteOrder)>
<android.hardware.hdmi.HdmiTvClient: void startTimerRecording(int,int,android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource)>
<com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$CarrierIdMatchingResult: com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$CarrierIdMatchingResult mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.hardware.camera2.impl.CameraMetadataNative: void initializeStreamConfigurationData(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.hardware.camera2.impl.CameraMetadataNative$StreamConfigurationData)>
<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>
<com.android.internal.app.ChooserActivity$ItemGroupViewHolder: void <init>(com.android.internal.app.ChooserActivity,int,android.view.View,int)>
<android.animation.AnimatorInflater: android.animation.StateListAnimator createStateListAnimatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>
<com.android.server.display.DisplayModeDirector$DeviceConfigDisplaySettings: int[] parseIntArray(java.lang.String)>
<android.content.pm.parsing.ParsingPackageUtils: android.util.SparseIntArray exactSizedCopyOfSparseArray(android.util.SparseIntArray)>
<com.android.phone.ecc.nano.MessageNano: byte[] toByteArray(com.android.phone.ecc.nano.MessageNano)>
<com.android.server.testharness.TestHarnessModeService$TestHarnessModeShellCommand: byte[] getBytesFromFile(java.io.File)>
<android.security.keystore.KeyProperties: int[] getSetFlags(int)>
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>
<com.android.framework.protobuf.RopeByteString$PieceIterator: void <init>(com.android.framework.protobuf.ByteString)>
<com.qualcomm.qcrilmsgtunnel.IQcrilMsgTunnel$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.om.OverlayManagerServiceImpl: java.util.ArrayList updateOverlaysForUser(int)>
<android.app.WallpaperColors: int calculateDarkHints(android.graphics.Bitmap)>
<android.media.ExifInterface: void getStandaloneAttributes(android.media.ExifInterface$ByteOrderedDataInputStream)>
<android.net.NetworkAgent$NetworkAgentHandler: void handleMessage(android.os.Message)>
<com.android.server.trust.TrustManagerService: java.util.List resolveAllowedTrustAgents(android.content.pm.PackageManager,int)>
<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>
<android.telecom.Logging.EventManager: void changeEventCacheSize(int)>
<org.apache.http.impl.cookie.RFC2109Spec: java.util.List doFormatManyHeaders(java.util.List)>
<android.content.ContentProviderOperation: void <init>(android.os.Parcel)>
<com.android.server.pm.PackageSetting: void copyMimeGroups(java.util.Map)>
<android.util.apk.ApkSigningBlockUtils: void verifyIntegrityFor1MbChunkBasedAlgorithm(java.util.Map,java.io.FileDescriptor,android.util.apk.SignatureInfo)>
<android.media.audiofx.DynamicsProcessing$Eq: void <init>(android.media.audiofx.DynamicsProcessing$Eq)>
<com.android.internal.telephony.InboundSmsHandler: byte[] decodeHexString(java.lang.String)>
<android.provider.Settings$Config: java.util.Map getStrings(android.content.ContentResolver,java.lang.String,java.util.List)>
<android.renderscript.Allocation: void copyFrom(android.renderscript.BaseObj[])>
<android.view.accessibility.AccessibilityEvent: void init(android.view.accessibility.AccessibilityEvent)>
<com.android.server.pm.InstantAppRegistry: android.content.pm.InstantAppInfo createInstantAppInfoForPackage(com.android.server.pm.parsing.pkg.AndroidPackage,int,boolean)>
<android.view.inputmethod.InputMethodSubtypeArray: void <init>(java.util.List)>
<com.android.server.hdmi.HdmiCecController: byte[] buildBody(int,byte[])>
<com.android.server.broadcastradio.hal2.Convert: android.hardware.radio.RadioManager$BandDescriptor[] amfmConfigToBands(android.hardware.broadcastradio.V2_0.AmFmRegionConfig)>
<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)>
<com.android.server.am.ActivityManagerService: void reportMemUsage(java.util.ArrayList)>
<android.filterfw.core.NativeProgram: void process(android.filterfw.core.Frame[],android.filterfw.core.Frame)>
<android.content.pm.parsing.component.ParsedIntentInfo$StringPairListParceler: java.util.List unparcel(android.os.Parcel)>
<com.android.server.wm.DisplayAreaPolicyBuilder$Result: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent,com.android.server.wm.DisplayArea$Root,com.android.server.wm.DisplayArea,java.util.List,java.util.ArrayList)>
<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk invokeViewMethod(android.view.View,android.view.View,java.nio.ByteBuffer)>
<com.android.server.pm.PackageManagerService$MultiPackageInstallParams: void <init>(com.android.server.pm.PackageManagerService,android.os.UserHandle,java.util.List)>
<com.android.framework.protobuf.nano.MessageNano: byte[] toByteArray(com.android.framework.protobuf.nano.MessageNano)>
<com.android.server.hdmi.HdmiUtils: java.util.List asImmutableList(int[])>
<android.text.method.PasswordTransformationMethod$PasswordCharSequence: java.lang.CharSequence subSequence(int,int)>
<android.content.SearchRecentSuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.service.euicc.EuiccProfileInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,android.service.carrier.CarrierIdentifier,int,java.util.List)>
<com.android.internal.telephony.phonenumbers.prefixmapper.MappingFileProvider: void readFileConfigs(java.util.SortedMap)>
<android.media.FaceDetector: void <init>(int,int,int)>
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(java.util.List)>
<com.android.internal.telephony.uicc.UiccProfile: java.util.Map parseToCertificateToPackageMap(java.lang.String)>
<android.media.MediaPlayer$DrmInfo: void <init>(android.os.Parcel)>
<com.android.internal.app.ChooserUtil: java.lang.String convertBytesToHexString(byte[])>
<com.android.server.backup.restore.PerformUnifiedRestoreTask: java.lang.String[] packagesToNames(java.util.List)>
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>
<com.android.server.pm.PackageManagerService: java.lang.String[] lambda$ensureSystemPackageNames$36(int)>
<com.android.server.job.JobSchedulerService: java.util.List getPendingJobs(int)>
<android.database.sqlite.SQLiteQueryBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.hardware.camera2.utils.ArrayUtils: int[] toIntArray(java.util.List)>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$7(int)>
<com.android.server.slice.SliceClientPermissions$SliceAuthority: boolean hasPermission(java.util.List)>
<com.android.framework.protobuf.CodedInputStream$StreamDecoder: void <init>(java.io.InputStream,int)>
<android.hardware.location.NanoAppInstanceInfo: void <init>(android.os.Parcel)>
<android.content.pm.ShortcutInfo: android.os.PersistableBundle[] clonePersistableBundle(android.os.PersistableBundle[])>
<com.android.server.pm.ModuleInfoProvider: java.util.List getInstalledModules(int)>
<android.os.ZygoteProcess: int getZygotePid(java.lang.String)>
<com.android.internal.telephony.uicc.euicc.EuiccCard: android.telephony.euicc.EuiccRulesAuthTable lambda$getRulesAuthTable$25(byte[])>
<com.android.internal.telephony.uicc.IccUtils: int[] mapTo2OrderBitColor(byte[],int,int,int[],int)>
<android.view.inputmethod.InputMethodSubtypeArray: byte[] decompress(byte[],int)>
<com.android.internal.telephony.RIL: java.util.ArrayList convertHalCellInfoList_1_5(java.util.ArrayList)>
<com.android.server.display.DisplayManagerService: float[] getFloatArray(android.content.res.TypedArray)>
<com.android.framework.protobuf.ByteString: com.android.framework.protobuf.ByteString readChunk(java.io.InputStream,int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUidInternal(int,int)>
<android.graphics.drawable.AnimationDrawable$AnimationState: void growArray(int,int)>
<android.app.Notification$Action$Builder: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,android.app.RemoteInput[],boolean,int)>
<com.android.server.autofill.ui.InlineSuggestionFactory: android.util.SparseArray createInlineSuggestionsInternal(boolean,android.view.inputmethod.InlineSuggestionsRequest,java.util.List,android.view.autofill.AutofillId,java.lang.Runnable,java.util.function.BiConsumer,java.util.function.Consumer,com.android.server.autofill.RemoteInlineSuggestionRenderService,int,int)>
<android.os.health.HealthStats: android.util.ArrayMap createHealthStatsMap(android.os.Parcel)>
<com.android.internal.widget.VerifyCredentialResponse$1: com.android.internal.widget.VerifyCredentialResponse createFromParcel(android.os.Parcel)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getShortAudioDescriptorBytes(java.util.ArrayList)>
<com.android.server.rollback.RollbackStore: android.util.SparseIntArray extensionVersionsFromJson(org.json.JSONArray)>
<android.os.health.HealthStats: android.util.ArrayMap createLongsMap(android.os.Parcel)>
<com.qualcomm.qti.telephonyservice.KsNafResponse: void <init>(android.os.Parcel)>
<com.android.server.pm.PreferredComponent: void <init>(com.android.server.pm.PreferredComponent$Callbacks,org.xmlpull.v1.XmlPullParser)>
<com.android.internal.telephony.SubscriptionInfoUpdater: void updateSubscriptionByCarrierConfig(int,java.lang.String,android.os.PersistableBundle)>
<com.android.internal.telephony.phonenumbers.ShortNumberInfo: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>
<com.android.internal.telephony.uicc.IccUtils: byte[] encodeFplmns(java.util.List,int)>
<com.android.internal.telephony.IndentingPrintWriter: void write(java.lang.String,int,int)>
<android.media.audiofx.AudioEffect: byte[] concatArrays(byte[][])>
<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>
<com.android.internal.telephony.RIL: java.util.ArrayList convertHalHwConfigList(java.util.ArrayList,com.android.internal.telephony.RIL)>
<android.util.LongSparseLongArray: void <init>(int)>
<android.animation.IntArrayEvaluator: int[] evaluate(float,int[],int[])>
<android.media.audiopolicy.AudioPolicy: boolean setUidDeviceAffinity(int,java.util.List)>
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String readMultipleBytes(byte[],int,int)>
<android.print.PrintJobInfo: void <init>(android.os.Parcel)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>
<com.android.internal.telephony.nano.TelephonyProto$EmergencyNumberInfo: com.android.internal.telephony.nano.TelephonyProto$EmergencyNumberInfo mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.pm.ComponentResolver$ServiceIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.List,int)>
<android.net.shared.PrivateDnsConfig: android.net.shared.PrivateDnsConfig fromParcel(android.net.PrivateDnsConfigParcel)>
<com.android.server.pm.ShortcutService: java.util.List removeNonKeyFields(java.util.List)>
<android.os.UserManager: java.util.List getProfiles(boolean)>
<com.android.internal.telephony.RadioIndication: void currentEmergencyNumberList(int,java.util.ArrayList)>
<com.qualcomm.qcrilhook.EmbmsOemHook: com.qualcomm.qcrilhook.QmiPrimitiveTypes$QmiArray intArrayToQmiArray(short,int[],short)>
<com.android.server.display.BrightnessMappingStrategy$SimpleMappingStrategy: void <init>(float[],int[],float,long)>
<com.android.internal.util.XmlUtils: int[] readThisIntArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])>
<com.android.server.soundtrigger_middleware.ConversionUtil: android.media.soundtrigger_middleware.PhraseRecognitionEvent hidl2aidlPhraseRecognitionEvent(android.hardware.soundtrigger.V2_0.ISoundTriggerHwCallback$PhraseRecognitionEvent)>
<com.android.internal.telephony.protobuf.nano.FieldArray: void <init>(int)>
<android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] lambda$convertToPropertyInfos$9(int)>
<com.android.internal.telephony.Sms7BitEncodingTranslator: java.lang.String translate(java.lang.CharSequence,boolean)>
<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle addKeySetLPw(android.util.ArraySet)>
<com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>
<android.util.apk.ApkSignatureVerifier: android.content.pm.Signature[] convertToSignatures(java.security.cert.Certificate[][])>
<com.android.internal.telephony.RIL: java.util.ArrayList convertHalCellInfoList(java.util.ArrayList)>
<org.apache.commons.codec.language.SoundexUtils: java.lang.String clean(java.lang.String)>
<android.media.audiopolicy.AudioProductStrategy$1: android.media.audiopolicy.AudioProductStrategy createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider: void setDataProfile(java.util.List,boolean,android.telephony.data.DataServiceCallback)>
<android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>
<android.app.assist.AssistStructure$ViewNodeBuilder: void setChildCount(int)>
<com.android.server.power.WakeLockLog$TagDatabase: void <init>(com.android.server.power.WakeLockLog$Injector)>
<com.android.internal.telephony.RadioResponse: void responseIntArrayList(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<com.android.server.notification.NotificationHistoryProtoHelper: java.util.List readStringPool(android.util.proto.ProtoInputStream)>
<com.android.internal.telephony.RadioResponse: void responseStringArrayList(com.android.internal.telephony.RIL,android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<com.android.server.location.LocationManagerService: void applyRequirementsLocked(com.android.server.location.LocationManagerService$LocationProviderManager)>
<org.junit.experimental.runners.Enclosed: java.lang.Class[] filterAbstractClasses(java.lang.Class[])>
<com.android.server.IpSecService$RefcountedResource: void <init>(com.android.server.IpSecService,com.android.server.IpSecService$IResource,android.os.IBinder,com.android.server.IpSecService$RefcountedResource[])>
<com.android.server.notification.ValidateNotificationPeople: java.lang.String[] getExtraPeopleForKey(android.os.Bundle,java.lang.String)>
<android.os.Parcel: void readBinderList(java.util.List)>
<android.util.SparseIntArray: void <init>(int)>
<com.qualcomm.qcrilhook.QcRilHook: int qcRilVerifyMsl(java.lang.String)>
<com.android.internal.telephony.RIL: java.util.ArrayList primitiveArrayToArrayList(byte[])>
<android.net.ipmemorystore.NetworkAttributes: java.util.List blobArrayToInetAddressList(android.net.ipmemorystore.Blob[])>
<com.android.server.vr.EnabledComponentsObserver: android.util.ArraySet loadComponentNamesFromSetting(java.lang.String,int)>
<android.media.MediaCas: java.util.ArrayList toByteArray(byte[],int,int)>
<com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(android.content.pm.Signature[])>
<android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>
<android.widget.AlphabetIndexer: void <init>(android.database.Cursor,int,java.lang.CharSequence)>
<android.os.NativeHandle: java.io.FileDescriptor[] createFileDescriptorArray(int[])>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$5(int)>
<com.android.internal.telephony.uicc.IccUtils: byte[] hexStringToBytes(java.lang.String)>
<android.telephony.mbms.MbmsDownloadReceiver: java.util.ArrayList generateFreshTempFiles(android.content.Context,java.lang.String,int)>
<android.media.TimedMetaData: boolean parseParcel(android.os.Parcel)>
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<android.media.MediaExtractor: android.media.DrmInitData$SchemeInitData[] lambda$getDrmInitData$1(int)>
<com.android.internal.telephony.SubscriptionController: java.util.List getSubscriptionInfoListFromCacheHelper(java.lang.String,java.lang.String,java.util.List)>
<android.os.HwParcel: void writeInt64Vector(java.util.ArrayList)>
<android.app.backup.BlobBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<com.android.service.ims.presence.PresenceSubscriber: int requestCapability(java.util.List,com.android.service.ims.presence.ContactCapabilityResponse)>
<com.qualcomm.qcrilhook.QcRilHookExt: int qcRilVerifyMsl(java.lang.String,int)>
<com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildVendorCommandWithId(int,int,int,byte[])>
<com.android.framework.protobuf.ByteString$Output: byte[] copyArray(byte[],int)>
<android.drm.DrmOutputStream: void write(byte[],int,int)>
<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEntityTypes(java.lang.String[])>
<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,android.os.IHwBinder,int)>
<com.android.internal.telephony.uicc.euicc.apdu.OpenLogicalChannelInvocation: android.telephony.IccOpenLogicalChannelResponse parseResult(android.os.AsyncResult)>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<com.android.internal.telephony.uicc.RuimRecords: java.lang.String[] getAssetLanguages(android.content.Context)>
<android.content.pm.parsing.ParsingPackageImpl: android.content.pm.parsing.ParsingPackageImpl asSplit(java.lang.String[],java.lang.String[],int[],android.util.SparseArray)>
<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: void readFileConfigs(java.util.SortedMap)>
<com.android.internal.midi.MidiEventScheduler$MidiEvent: void <init>(int)>
<android.hardware.camera2.impl.CameraDeviceImpl: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>
<com.android.internal.util.FastXmlSerializer: void <init>(int)>
<com.android.server.pm.PackageManagerService: boolean[] canSuspendPackageForUserInternal(java.lang.String[],int)>
<com.android.internal.telephony.uicc.IccUtils: int[] mapToNon2OrderBitColor(byte[],int,int,int[],int)>
<com.android.internal.util.XmlUtils: long[] readThisLongArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])>
<com.android.internal.location.GpsNetInitiatedHandler: byte[] stringToByteArray(java.lang.String,boolean)>
<android.service.carrier.MessagePdu$1: android.service.carrier.MessagePdu createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.RadioResponse: void responseCdmaBroadcastConfig(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList)>
<android.app.assist.AssistStructure$HtmlInfoNode: void <init>(android.app.assist.AssistStructure$HtmlInfoNodeBuilder)>
<android.os.WorkSource: void <init>(android.os.WorkSource)>
<android.app.ActivityOptions: void <init>(android.os.Bundle)>
<com.android.server.NetworkManagementService: java.util.List excludeLinkLocal(java.util.List)>
<android.hardware.camera2.impl.CameraMetadataNative: boolean setFaces(android.hardware.camera2.params.Face[])>
<com.android.server.display.utils.History: void <init>(int,java.time.Clock)>
<android.hardware.input.IInputManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: int[] getWidgetIds(java.util.ArrayList)>
<android.os.Parcel: java.util.ArrayList readCharSequenceList()>
<com.android.internal.util.XmlUtils: boolean[] readThisBooleanArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])>
<android.graphics.drawable.AnimatedVectorDrawable$VectorDrawableAnimatorRT: int[] createIntDataPoints(android.animation.PropertyValuesHolder$PropertyValues$DataSource,long)>
<com.android.framework.protobuf.Utf8$SafeProcessor: java.lang.String decodeUtf8(byte[],int,int)>
<com.android.commands.bmgr.Bmgr: java.lang.String[] lambda$backupNowAllPackages$1(int)>
<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>
<com.android.internal.telephony.ServiceStateTracker: void parseSidNid(java.lang.String,java.lang.String)>
<com.qualcomm.qcrilhook.EmbmsOemHook$GetPLMNListResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<android.database.DatabaseUtils: char[] encodeHex(byte[])>
<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>
<com.android.server.backup.TransportManager: void onPackageChanged(java.lang.String,java.lang.String[])>
<com.android.server.audio.AudioService$VolumeStreamState$1: void <init>(com.android.server.audio.AudioService$VolumeStreamState,int)>
<android.service.autofill.Validators: android.service.autofill.InternalValidator[] getInternalValidators(android.service.autofill.Validator[])>
<com.android.server.pm.InstantAppResolver: android.content.Intent buildEphemeralInstallerIntent(android.content.Intent,android.content.Intent,android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle,java.lang.String,int,android.content.ComponentName,java.lang.String,boolean,java.util.List)>
<com.qualcomm.qcrilhook.EmbmsOemHook$CellIdIndication: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,java.nio.ByteBuffer)>
<com.android.server.pm.UserSystemPackageInstaller: android.util.ArrayMap determineWhitelistedPackagesForUserTypes(com.android.server.SystemConfig)>
<android.content.integrity.CompoundFormula: void <init>(android.os.Parcel)>
<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>
<android.app.AppOpsManager: java.util.List getPackagesForOps(java.lang.String[])>
<android.content.pm.Signature: void <init>(java.lang.String)>
<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.Display$Mode[] getDisplayModes(android.util.SparseArray)>
<android.service.voice.VoiceInteractionSession$1: boolean[] supportsCommands(java.lang.String,java.lang.String[])>
<android.security.identity.Util: byte[] computeHkdf(java.lang.String,byte[],byte[],byte[],int)>
<com.android.internal.telephony.sip.SipPhone$SipCall: void merge(com.android.internal.telephony.sip.SipPhone$SipCall)>
<com.android.server.om.OverlayManagerService: java.util.ArrayList updateOverlayPaths(int,java.util.List)>
<com.android.server.locksettings.SyntheticPasswordManager: java.util.ArrayList toByteArrayList(byte[])>
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String,boolean,int,boolean,int,long)>
<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String,java.lang.String[])>
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createSRational(android.media.ExifInterface$Rational[],java.nio.ByteOrder)>
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.webkit.UserPackage: java.util.List getPackageInfosAllUsers(android.content.Context,java.lang.String,int)>
<com.android.framework.protobuf.ByteString$SystemByteArrayCopier: byte[] copyFrom(byte[],int,int)>
<com.android.internal.telephony.IccSmsInterfaceManager: void markMessagesAsRead(java.util.ArrayList)>
<android.app.assist.AssistStructure$ViewNodeBuilder: int addChildCount(int)>
<com.android.server.pm.PreferredComponent: void <init>(com.android.server.pm.PreferredComponent$Callbacks,int,android.content.ComponentName[],android.content.ComponentName,boolean)>
<com.android.server.pm.PackageManagerService: java.lang.String[] lambda$dropNonSystemPackages$34(int)>
<org.apache.http.impl.auth.RFC2617Scheme: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>
<com.android.internal.telephony.IntRangeManager$IntRange: void <init>(com.android.internal.telephony.IntRangeManager,com.android.internal.telephony.IntRangeManager$IntRange,int)>
<android.view.autofill.AutofillManager$TrackedViews: void <init>(android.view.autofill.AutofillManager,android.view.autofill.AutofillId[])>
<android.telephony.mbms.ServiceInfo: void <init>(java.util.Map,java.lang.String,java.util.List,java.lang.String,java.util.Date,java.util.Date)>
<android.os.health.HealthStats: android.util.ArrayMap createParcelableMap(android.os.Parcel,android.os.Parcelable$Creator)>
<com.android.internal.accessibility.dialog.AccessibilityTargetHelper: java.util.List getAccessibilityServiceTargets(android.content.Context,int)>
<android.database.DatabaseUtils: java.lang.Object[] deepCopyOf(java.lang.Object[])>
<com.android.internal.telephony.metrics.TelephonyMetrics: java.lang.String[] lambda$convertEmergencyNumberToEmergencyNumberInfo$1(int)>
<android.os.HidlMemoryUtil: java.util.ArrayList hidlMemoryToByteList(android.os.HidlMemory)>
<android.hardware.display.AmbientBrightnessDayStats: void <init>(java.time.LocalDate,float[],float[])>
<com.qualcomm.qcrilhook.EmbmsOemHook$ActiveLogPacketIDsResponse: void <init>(com.qualcomm.qcrilhook.EmbmsOemHook,int,java.nio.ByteBuffer)>
<com.android.framework.protobuf.BufferAllocator$1: com.android.framework.protobuf.AllocatedBuffer allocateHeapBuffer(int)>
<android.util.proto.EncodedBuffer: byte[] getBytes(int)>
<com.android.server.inputmethod.InputMethodManagerService: void showInputMethodMenu(boolean,int)>
<android.app.ApplicationLoaders: void createAndCacheNonBootclasspathSystemClassLoader(android.content.pm.SharedLibraryInfo)>
<com.android.server.wm.ActivityTaskManagerService$LocalService: int startActivitiesAsPackage(java.lang.String,java.lang.String,int,android.content.Intent[],android.os.Bundle)>
<com.android.internal.telephony.euicc.EuiccController: boolean checkCarrierPrivilegeInMetadata(android.telephony.euicc.DownloadableSubscription,java.lang.String)>
<android.app.ApplicationPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<com.android.internal.os.BatteryStatsHelper: byte[] readFully(java.io.FileInputStream,int)>
<android.media.ExifInterface: void readImageFileDirectory(android.media.ExifInterface$ByteOrderedDataInputStream,int)>
<android.telephony.euicc.EuiccRulesAuthTable$Builder: void <init>(int)>
<com.android.server.input.InputManagerService: java.util.List flatten(java.util.Map)>
<com.android.framework.protobuf.CodedOutputStreamWriter: void writeDeterministicLongMap(int,com.android.framework.protobuf.MapEntryLite$Metadata,java.util.Map)>
<android.graphics.drawable.StateListDrawable$StateListState: void growArray(int,int)>
<com.android.server.autofill.Helper: android.util.ArrayMap getFields(android.service.autofill.Dataset)>
<com.android.internal.telephony.RIL: java.util.ArrayList convertHalCellInfoList_1_4(java.util.ArrayList)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void onNotificationsSeenLocked(java.util.ArrayList)>
<android.content.pm.parsing.component.ParsedProviderUtils: android.content.pm.parsing.result.ParseResult parsePathPermission(android.content.pm.parsing.component.ParsedProvider,android.content.pm.parsing.ParsingPackage,android.content.res.Resources,android.content.res.XmlResourceParser,android.content.pm.parsing.result.ParseInput)>
<android.hardware.camera2.legacy.LegacyMetadataMapper: void mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative,android.hardware.Camera$Parameters)>
<com.android.internal.util.ArrayUtils: int[] removeInt(int[],int)>
<android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])>
<com.android.internal.util.ImageUtils: void ensureBufferSize(int)>
<android.bluetooth.le.BluetoothLeScanner: void startTruncatedScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>
<android.hardware.camera2.legacy.ParameterUtils: java.util.List getAvailableCropRectangles(android.hardware.Camera$Parameters,android.graphics.Rect,android.util.Size)>
<android.view.autofill.Helper: android.view.autofill.AutofillId[] toArray(java.util.Collection)>
<android.media.audiofx.AudioEffect: int getParameter(int,short[])>
<com.android.ims.ImsCall: java.util.List parseConferenceState(android.telephony.ims.ImsConferenceState)>
<com.android.server.rollback.RollbackStore: android.util.SparseLongArray ceSnapshotInodesFromJson(org.json.JSONArray)>
<com.android.internal.telephony.SubscriptionInfoUpdater: boolean updateEmbeddedSubscriptionsCache(int,android.service.euicc.GetEuiccProfileInfoListResult)>
<android.content.pm.InstantAppResolveInfo$InstantAppDigest: void <init>(java.lang.String,int)>
<android.content.ContentValues: void <init>(int)>
<android.database.sqlite.SQLiteQueryBuilder: long insert(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)>
<android.os.HwBlob: java.lang.Byte[] wrapArray(byte[])>
<com.android.internal.os.KernelCpuThreadReaderDiff: void changeToDiffs(java.util.Map,com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)>
<android.content.pm.parsing.ParsingPackageImpl: void <init>(android.os.Parcel)>
<android.security.keystore.AttestationUtils: android.security.keymaster.KeymasterArguments prepareAttestationArguments(android.content.Context,int[],byte[],java.lang.String)>
<com.android.internal.telephony.cat.CatCmdMessage: void <init>(android.os.Parcel)>
<android.content.pm.ShortcutInfo: android.content.Intent[] cloneIntents(android.content.Intent[])>
<android.telephony.TelephonyHistogram: void <init>(int,int,int)>
<android.security.identity.Util: byte[] stripLeadingZeroes(byte[])>
<com.android.internal.telephony.RIL: java.util.ArrayList convertHalCellInfoList_1_2(java.util.ArrayList)>
<android.telephony.SmsMessage: java.util.ArrayList fragmentText(java.lang.String,int)>
<com.android.internal.telephony.uicc.SIMRecords: void handleSmses(java.util.ArrayList)>
<com.android.i18n.phonenumbers.prefixmapper.FlyweightMapStorage: void createDescriptionPool(java.util.SortedSet,java.util.SortedMap)>
<android.bluetooth.SdpRecord: void <init>(android.os.Parcel)>
<com.android.internal.telephony.RIL: java.lang.String[] lambda$convertDataCallResult$2(int)>
<com.android.internal.telephony.uicc.SIMRecords: void handleSms(byte[])>
<android.os.HidlMemoryUtil: byte[] hidlMemoryToByteArray(android.os.HidlMemory)>
<com.android.server.backup.BackupPasswordManager$PasswordHashFileCodec: com.android.server.backup.BackupPasswordManager$BackupPasswordHash deserialize(java.io.DataInputStream)>
<com.android.server.backup.restore.PerformUnifiedRestoreTask: void <init>(com.android.server.backup.UserBackupManagerService,com.android.server.backup.transport.TransportClient,android.app.backup.IRestoreObserver,android.app.backup.IBackupManagerMonitor,long,android.content.pm.PackageInfo,int,boolean,java.lang.String[],com.android.server.backup.internal.OnTaskFinishedListener)>
<android.os.PooledStringReader: void <init>(android.os.Parcel)>
<android.security.keystore.AndroidKeyStoreCipherSpiBase: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>
<android.media.audiofx.AudioEffect$NativeEventHandler: void handleMessage(android.os.Message)>
<android.os.BatteryStats$LevelStepTracker: void <init>(int)>
<android.widget.AbsListView$RecycleBin: void fillActiveViews(int,int)>
<com.android.internal.database.SortCursor: void <init>(android.database.Cursor[],java.lang.String)>
<com.android.server.connectivity.IpConnectivityEventBuilder: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$Pair[] toPairArray(android.util.SparseIntArray)>
<android.net.netlink.StructNlAttr: void <init>(short,android.net.netlink.StructNlAttr[])>
<android.service.quickaccesswallet.GetWalletCardsResponse: android.service.quickaccesswallet.GetWalletCardsResponse readFromParcel(android.os.Parcel)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkStats: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$NetworkStats mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.connectivity.IpConnectivityEventBuilder: java.util.List toProto(java.util.List)>
<android.telephony.CbGeoUtils: java.util.List parseGeometriesFromString(java.lang.String)>
<android.renderscript.Script: void reduce(int,android.renderscript.Allocation[],android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>
<android.util.PackageUtils: java.lang.String[] computeSignaturesSha256Digests(android.content.pm.Signature[])>
<com.android.server.backup.utils.PasswordUtils: byte[] hexToByteArray(java.lang.String)>
<com.android.internal.telephony.nano.CarrierIdProto$CarrierId: com.android.internal.telephony.nano.CarrierIdProto$CarrierId mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<com.android.internal.telephony.uicc.euicc.EuiccCard: android.telephony.euicc.EuiccNotification[] lambda$retrieveNotificationList$44(byte[])>
<com.android.server.wm.LaunchParamsPersister: void loadLaunchParams(int)>
<com.android.server.location.gnss.GnssSatelliteBlacklistHelper: java.util.List parseSatelliteBlacklist(java.lang.String)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getSharedUserPackagesForPackageLocked(java.lang.String,int)>
<com.android.internal.accessibility.dialog.AccessibilityTargetHelper: java.util.List getAccessibilityActivityTargets(android.content.Context,int)>
<com.qualcomm.qcrilhook.BaseQmiTypes$BaseQmiStructType: byte[] parseData(java.nio.ByteBuffer,int)>
<com.android.internal.telephony.NetworkScanRequestTracker: void notifyMessenger(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>
<android.graphics.Shader: long[] convertColors(int[])>
<android.telephony.TelephonyScanManager$1: void handleMessage(android.os.Message)>
<android.nfc.NdefMessage$1: android.nfc.NdefMessage createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.uicc.euicc.EuiccCard: java.lang.String padTrailingFs(java.lang.String)>
<android.widget.ProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)>
<android.app.NotificationChannel: long[] safeLongArray(org.xmlpull.v1.XmlPullParser,java.lang.String,long[])>
<android.hardware.camera2.impl.CameraDeviceImpl: int submitCaptureRequest(java.util.List,android.hardware.camera2.impl.CaptureCallback,java.util.concurrent.Executor,boolean)>
<android.media.MediaCodec$MediaImage: void <init>(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,long,int,int,android.graphics.Rect)>
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<android.os.HwParcel: void writeDoubleVector(java.util.ArrayList)>
<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])>
<android.os.UserManager: long[] getSerialNumbersOfUsers(boolean)>
<android.content.pm.PackageParser: boolean parseProviderTags(android.content.res.Resources,android.content.res.XmlResourceParser,boolean,android.content.pm.PackageParser$Provider,java.lang.String[])>
<android.content.pm.parsing.component.ParsedProviderUtils: android.content.pm.parsing.result.ParseResult parseGrantUriPermission(android.content.pm.parsing.component.ParsedProvider,android.content.pm.parsing.ParsingPackage,android.content.res.Resources,android.content.res.XmlResourceParser,android.content.pm.parsing.result.ParseInput)>
<com.android.server.accessibility.AccessibilitySecurityPolicy: java.lang.String[] computeValidReportedPackages(java.lang.String,int)>
<android.os.BinderProxy$ProxyMap: android.os.BinderProxy$InterfaceCount[] getSortedInterfaceCounts(int)>
<android.accounts.AccountManager$3: android.accounts.Account[] bundleToResult(android.os.Bundle)>
<com.android.server.location.ContextHubServiceUtil: byte[] createPrimitiveByteArray(java.util.ArrayList)>
<android.content.res.ColorStateList: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
<android.content.pm.PackageInfoLite: void <init>(android.os.Parcel)>
<com.android.internal.telephony.uicc.IccUtils: byte[] unsignedIntToBytes(int)>
<com.android.phone.ecc.nano.CodedInputByteBufferNano: byte[] getData(int,int)>
<android.telephony.CellIdentityNr: void <init>(int,int,int,int[],java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,java.util.Collection)>
<android.hardware.TriggerEvent: void <init>(int)>
<com.android.server.autofill.Session: android.util.ArrayMap createSanitizers(android.service.autofill.SaveInfo)>
<com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute: com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano)>
<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[],android.graphics.drawable.LayerDrawable$LayerState)>
<android.media.MediaCodec: void setParameters(android.os.Bundle)>
<android.media.MediaCodecList: android.media.MediaCodecInfo getNewCodecInfoAt(int)>
<org.apache.http.util.CharArrayBuffer: void expand(int)>
<android.net.nsd.NsdServiceInfo: void setTxtRecords(java.lang.String)>
<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getSupportedShortAudioDescriptorsFromConfig(java.util.List,int[])>
<android.speech.tts.FileSynthesisCallback: int audioAvailable(byte[],int,int)>
<android.media.ExifInterface$ExifAttribute: android.media.ExifInterface$ExifAttribute createSLong(int[],java.nio.ByteOrder)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<com.android.internal.telephony.RadioConfig: java.util.ArrayList primitiveArrayToArrayList(int[])>
<android.content.ClipData: java.lang.String[] getMimeTypes(android.content.ContentResolver,android.net.Uri)>
<android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,android.database.sqlite.SQLiteStatementInfo)>
<com.android.server.locksettings.LockSettingsService: void callToAuthSecretIfNeeded(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>
<com.android.server.biometrics.face.FaceUserState: java.util.ArrayList getCopy(java.util.ArrayList)>
<android.service.autofill.augmented.AugmentedAutofillService$AutofillProxy: void autofill(java.util.List)>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList)>
<android.app.job.JobInfo: void <init>(android.app.job.JobInfo$Builder)>
<android.app.Instrumentation: int execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)>
<android.app.PendingIntent: android.app.PendingIntent getActivitiesAsUser(android.content.Context,int,android.content.Intent[],int,android.os.Bundle,android.os.UserHandle)>
<com.android.internal.telephony.uicc.euicc.EuiccCard: android.telephony.euicc.EuiccNotification[] lambda$listNotifications$42(byte[])>
<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean,com.android.internal.policy.PhoneWindow$PanelFeatureState)>
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSelectItem(com.android.internal.telephony.cat.CommandDetails,java.util.List)>
<android.media.ExifInterface: void getJpegAttributes(android.media.ExifInterface$ByteOrderedDataInputStream,int,int)>
<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch: com.android.server.connectivity.metrics.nano.IpConnectivityLogClass$DNSLookupBatch mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<android.mtp.MtpDatabase: int[] getObjectList(int,int,int)>
<android.graphics.GraphicsStatsService: java.util.HashSet dumpActiveLocked(long,java.util.ArrayList)>
<android.util.TimeUtils: int formatDurationLocked(long,int)>
<com.android.server.autofill.ui.FillUi: void <init>(android.content.Context,android.service.autofill.FillResponse,android.view.autofill.AutofillId,java.lang.String,com.android.server.autofill.ui.OverlayControl,java.lang.CharSequence,android.graphics.drawable.Drawable,boolean,com.android.server.autofill.ui.FillUi$Callback)>
<com.android.server.pm.PackageInstallerSession: void installNonStagedLocked(java.util.List)>
<android.telephony.data.ApnSetting: android.telephony.data.ApnSetting fromString(java.lang.String)>
<com.android.internal.graphics.palette.ColorCutQuantizer: java.util.List generateAverageColors(java.util.Collection)>
<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parseClusterPackage(java.io.File,int)>
<android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerCertificates(byte[][],java.lang.String,java.lang.String)>
<android.content.pm.parsing.ParsingPackageUtils: android.content.pm.parsing.result.ParseResult parseFeatureGroup(android.content.pm.parsing.result.ParseInput,android.content.pm.parsing.ParsingPackage,android.content.res.Resources,android.content.res.XmlResourceParser)>
<android.os.incremental.V4Signature: byte[] readBytes(java.io.InputStream)>
<com.qualcomm.qcrilhook.QcRilHook: void qcRilSendApnInfo(java.lang.String,java.lang.String,int,int)>
<org.apache.http.util.CharArrayBuffer: void <init>(int)>
<android.hardware.camera2.impl.CameraMetadataNative: boolean setFaceRectangles(android.graphics.Rect[])>
<com.android.internal.telephony.cdma.sms.UserData: byte[] stringToAscii(java.lang.String)>
<android.util.apk.ApkSignatureVerifier: android.content.pm.PackageParser$SigningDetails verifyV3Signature(java.lang.String,boolean)>
<com.android.internal.colorextraction.types.Tonal$ConfigParser: float[] readFloatArray(java.lang.String)>
<android.media.audiofx.DynamicsProcessing$Config: void <init>(int,android.media.audiofx.DynamicsProcessing$Config)>
<android.os.HwBlob: java.lang.Short[] wrapArray(short[])>
<android.hardware.location.ContextHubInfo: void <init>(android.os.Parcel)>
<com.android.internal.app.LocaleHelper: java.lang.String getDisplayLocaleList(android.os.LocaleList,java.util.Locale,int)>
<com.android.internal.graphics.palette.Palette$Builder: int[] getPixelsFromBitmap(android.graphics.Bitmap)>
<com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.ArrayList,com.android.server.pm.permission.PermissionManagerServiceInternal$PermissionCallback)>
<com.android.framework.protobuf.ByteBufferWriter: byte[] getOrCreateBuffer(int)>
<com.android.server.connectivity.PermissionMonitor: int[] toIntArray(java.util.Collection)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>
<com.qualcomm.qcrilhook.QcRilHook: android.os.AsyncResult sendQcRilHookMsg(int,java.lang.String)>
<android.permission.PermissionManager: java.util.List splitPermissionInfoListToNonParcelableList(java.util.List)>
<android.hardware.radio.Utils: java.util.Set createIntSet(android.os.Parcel)>
<android.media.MediaExtractor: java.util.ArrayList toByteArray(byte[])>
<com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>
<com.android.server.pm.PackageDexOptimizer: int performDexOptLI(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.lang.String[],com.android.server.pm.CompilerStats$PackageStats,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,com.android.server.pm.dex.DexoptOptions)>
<com.android.internal.telephony.RIL: java.util.ArrayList primitiveArrayToArrayList(int[])>
<com.android.framework.protobuf.ByteString$CodedBuilder: void <init>(int)>
<android.security.keystore.KeyProperties$BlockMode: java.lang.String[] allFromKeymaster(java.util.Collection)>
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,java.lang.String,long)>
<android.media.audiopolicy.AudioPolicy: boolean setUserIdDeviceAffinity(int,java.util.List)>
<com.android.phone.ecc.nano.ProtobufEccData$CountryInfo: com.android.phone.ecc.nano.ProtobufEccData$CountryInfo mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano)>
<com.android.server.ethernet.EthernetNetworkFactory: java.lang.String[] lambda$getAvailableInterfaces$3(int)>
<android.os.HwParcel: void writeInt8Vector(java.util.ArrayList)>
<android.net.shared.ProvisioningConfiguration$ScanResultInfo: byte[] convertToByteArray(java.nio.ByteBuffer)>
<com.android.server.pm.UserManagerService: void readEntry(android.os.Bundle,java.util.ArrayList,org.xmlpull.v1.XmlPullParser)>
<android.net.NetworkStatsHistory: void <init>(java.io.DataInputStream)>
<android.graphics.Typeface: android.graphics.Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[],java.lang.String,int,int)>
<com.android.internal.telephony.RadioConfig: java.util.ArrayList convertHalSlotStatus_1_2(java.util.ArrayList)>
<com.android.uiautomator.core.InteractionController: boolean performMultiPointerGesture(android.view.MotionEvent$PointerCoords[][])>
<com.android.server.backup.utils.TarBackupReader: void readMetadata(com.android.server.backup.FileMetadata)>
<com.android.server.am.BroadcastRecord: void <init>(com.android.server.am.BroadcastQueue,android.content.Intent,com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,int,int,boolean,java.lang.String,java.lang.String[],int,android.app.BroadcastOptions,java.util.List,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean,int,boolean,boolean)>
<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo$1: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo createFromParcel(android.os.Parcel)>
<android.stats.devicepolicy.nano.StringList: android.stats.devicepolicy.nano.StringList mergeFrom(com.android.framework.protobuf.nano.CodedInputByteBufferNano)>
<com.android.server.accessibility.MotionEventInjector: android.view.MotionEvent obtainMotionEvent(long,long,int,android.accessibilityservice.GestureDescription$TouchPoint[],int)>
<com.android.internal.os.KernelCpuSpeedReader: void <init>(int,int)>
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>
<android.os.WorkSource: void set(android.os.WorkSource)>
<android.accounts.ChooseTypeAndAccountActivity: java.util.LinkedHashMap getAcceptableAccountChoices(android.accounts.AccountManager)>
<android.telephony.SubscriptionManager: void setSubscriptionPlans(int,java.util.List)>
<com.android.internal.util.function.pooled.PooledLambdaImpl: com.android.internal.util.function.pooled.PooledLambda acquire(com.android.internal.util.function.pooled.PooledLambdaImpl$Pool,java.lang.Object,int,int,int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])>
<android.os.ZygoteProcess: java.util.List getAbiList(java.io.BufferedWriter,java.io.DataInputStream)>
<com.android.server.pm.PackageManagerService: java.util.List getAllowedSharedLibInfos(com.android.server.pm.PackageManagerService$ScanResult,java.util.Map)>
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>
<com.android.server.pm.PackageManagerService$PackageManagerInternalImpl: java.lang.String[] filterOnlySystemPackages(java.lang.String[])>
<com.android.server.backup.PackageManagerBackupAgent: int getAncestralRecordVersionValue(android.app.backup.BackupDataInput)>
<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String parseName(java.nio.ByteBuffer,int)>
<com.android.internal.os.RuntimeInit$Arguments: void parseArgs(java.lang.String[])>
<android.net.netlink.NetlinkConstants: java.lang.String toHexString(byte[],int,int)>
<android.hardware.camera2.legacy.CameraDeviceUserShim: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>
<com.android.server.power.WakeLockLog$TheLog: void <init>(com.android.server.power.WakeLockLog$Injector,com.android.server.power.WakeLockLog$EntryByteTranslator,com.android.server.power.WakeLockLog$TagDatabase)>
<android.app.AppOpsManager$HistoricalUidOps: void <init>(android.app.AppOpsManager$HistoricalUidOps)>
<android.os.HwBlob: java.lang.Float[] wrapArray(float[])>
<android.os.HwParcel: void writeNativeHandleVector(java.util.ArrayList)>
<android.widget.TextView: void populateCharacterBounds(android.view.inputmethod.CursorAnchorInfo$Builder,int,int,float,float)>
<android.util.apk.ApkSigningBlockUtils: byte[][] computeContentDigestsPer1MbChunk(int[],android.util.apk.DataSource[])>
<android.media.audiofx.DynamicsProcessing$Eq: void <init>(boolean,boolean,int)>
<com.android.framework.protobuf.LazyStringArrayList: void <init>(com.android.framework.protobuf.LazyStringList)>
<com.android.server.emergency.EmergencyAffordanceService: void <init>(android.content.Context)>
<android.app.slice.SliceManager: void pinSlice(android.net.Uri,java.util.Set)>



========================== ReachableRiskyMethods(76) ==============================
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<android.os.BaseBundle: void copyInternal(android.os.BaseBundle,boolean)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>
<android.util.ArraySet: void allocArrays(int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>
<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<android.nfc.Tag$1: android.nfc.Tag createFromParcel(android.os.Parcel)>
<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
<android.hardware.location.NanoApp: void <init>(android.os.Parcel)>
<android.view.contentcapture.DataRemovalRequest: void <init>(android.os.Parcel)>
<android.media.midi.MidiDeviceInfo: void <init>(int,int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,boolean)>
<android.util.SparseArray: void <init>(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>
<android.media.midi.MidiDeviceStatus: void <init>(android.media.midi.MidiDeviceInfo,boolean[],int[])>
<android.os.LocaleList: void <init>(java.util.Locale[])>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>
<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
<android.os.Parcel: java.lang.String[] createString8Array()>
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.content.IntentFilter: void <init>(android.os.Parcel)>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<android.hardware.location.ContextHubMessage: void <init>(android.os.Parcel)>
<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>
<android.os.VibrationEffect$Waveform: void <init>(long[],int[],int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.os.Parcel: java.lang.String[] createString16Array()>
<com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
<android.os.BatterySaverPolicyConfig: void <init>(android.os.Parcel)>
<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
<android.os.Parcel: android.util.ArraySet readArraySet(java.lang.ClassLoader)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>
<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>
<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
<android.os.BaseBundle: java.util.ArrayList deepcopyArrayList(java.util.ArrayList)>
<android.content.pm.ShortcutInfo: void <init>(android.os.Parcel)>
<android.os.WorkSource: void <init>(android.os.Parcel)>
<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>
<android.content.ContentValues: void <init>(android.os.Parcel)>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
<android.nfc.BeamShareData$1: android.nfc.BeamShareData createFromParcel(android.os.Parcel)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>
<android.util.ArrayMap: void allocArrays(int)>
<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.view.textclassifier.TextClassifierEvent: void <init>(android.os.Parcel)>
<android.telephony.ImsiEncryptionInfo: void <init>(android.os.Parcel)>
<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>
<android.os.Parcel: void readStringList(java.util.List)>
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>
<com.android.server.VibratorService: int[] areEffectsSupported(int[])>
<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
<android.nfc.Tag: java.lang.String[] generateTechStringList(int[])>
<com.android.server.pm.PackageManagerService$PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>
<android.view.RemoteAnimationDefinition: void <init>(android.os.Parcel)>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>



========================== AllEntryPointNumForMSPair ==================================
<<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>--specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(i0)>: 47
<<android.os.Parcel: java.lang.String[] createString8Array()>--r1 = newarray (java.lang.String)[i0]>: 12
<<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>--r2 = newarray (android.security.keymaster.KeyAttestationPackageInfo)[$i1]>: 1
<<android.view.contentcapture.DataRemovalRequest: void <init>(android.os.Parcel)>--specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0)>: 1
<<com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>--r2 = newarray (java.lang.String)[$i2]>: 1
<<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>----------- No Unit --------->: 33
<<android.os.Parcel: java.lang.String[] createString16Array()>--r1 = newarray (java.lang.String)[i0]>: 158
<<android.nfc.Tag$1: android.nfc.Tag createFromParcel(android.os.Parcel)>--r1 = newarray (int)[$i0]>: 1
<<com.android.server.pm.PackageManagerService$PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>--r1 = newarray (boolean)[$i2]>: 1
<<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>--specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i7)>: 1
<<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>--$r2 = newarray (android.view.textservice.SpellCheckerInfo)[$i1]>: 1
<<android.os.WorkSource: void <init>(android.os.Parcel)>--specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i1)>: 24
<<com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>--specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i4)>: 1
<<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>--$r7 = newarray (android.os.CoolingDevice)[$i2]>: 1
<<android.os.Parcel: android.util.ArraySet readArraySet(java.lang.ClassLoader)>--specialinvoke $r1.<android.util.ArraySet: void <init>(int)>(i0)>: 16
<<com.android.server.VibratorService: int[] areEffectsSupported(int[])>--r1 = newarray (int)[$i0]>: 1
<<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>--$r7 = newarray (android.os.Temperature)[$i2]>: 1
<<android.os.BaseBundle: java.util.ArrayList deepcopyArrayList(java.util.ArrayList)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)>: 17
<<com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>--specialinvoke r9.<java.util.ArrayList: void <init>(int)>(i1)>: 1
<<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>--r1 = newarray (java.lang.CharSequence)[i0]>: 47
<<android.nfc.Tag: java.lang.String[] generateTechStringList(int[])>--r27 = newarray (java.lang.String)[i0]>: 1
<<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>--specialinvoke r4.<java.util.ArrayList: void <init>(int)>(i1)>: 1
<<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>--r1 = newarray (java.lang.String[])[i0]>: 1
<<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>----------- No Unit --------->: 138
<<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>----------- No Unit --------->: 6
<<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)>: 39
<<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>--r2 = newarray (android.os.health.HealthStatsParceler)[i1]>: 1
<<android.os.VibrationEffect$Waveform: void <init>(long[],int[],int)>--r1 = newarray (long)[$i0]>: 2
<<android.telephony.ImsiEncryptionInfo: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i0]>: 1
<<android.os.Parcel: java.util.ArrayList createStringArrayList()>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)>: 116
<<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>--r4 = newarray (boolean)[$i4]>: 1
<<android.nfc.BeamShareData$1: android.nfc.BeamShareData createFromParcel(android.os.Parcel)>--r12 = newarray (android.net.Uri)[i0]>: 1
<<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i0]>: 1
<<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>--r1 = newarray (int[])[i0]>: 8
<<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>--r1 = newarray (byte)[i0]>: 1
<<com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>--specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2)>: 1
<<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>--specialinvoke r27.<java.util.ArrayList: void <init>(int)>(i1)>: 1
<<android.content.pm.ShortcutInfo: void <init>(android.os.Parcel)>--specialinvoke $r24.<android.util.ArraySet: void <init>(int)>(i10)>: 3
<<android.content.ContentValues: void <init>(android.os.Parcel)>--specialinvoke $r1.<android.util.ArrayMap: void <init>(int)>($i0)>: 1
<<android.os.BaseBundle: void copyInternal(android.os.BaseBundle,boolean)>--specialinvoke r3.<android.util.ArrayMap: void <init>(int)>(i0)>: 17
<<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>--specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0)>: 5
<<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>--specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i4)>: 1
<<android.media.midi.MidiDeviceStatus: void <init>(android.media.midi.MidiDeviceInfo,boolean[],int[])>--r4 = newarray (boolean)[$i0]>: 1
<<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>--r7 = newarray (java.lang.StackTraceElement)[$i7]>: 1
<<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>--r4 = newarray (long)[$i6]>: 1
<<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>--r2 = newarray (java.lang.String)[$i1]>: 1
<<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>--r1 = newarray (java.lang.Object)[i0]>: 47
<<android.util.SparseArray: void <init>(int)>--$r2 = newarray (int)[$i1]>: 2
<<android.view.textclassifier.TextClassifierEvent: void <init>(android.os.Parcel)>--r10 = newarray (float)[$i3]>: 1
<<android.view.RemoteAnimationDefinition: void <init>(android.os.Parcel)>--specialinvoke $r2.<android.util.SparseArray: void <init>(int)>(i0)>: 2
<<android.util.ArraySet: void allocArrays(int)>--$r39 = newarray (int)[i0]>: 3
<<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>--r1 = newarray (android.os.Parcelable)[i0]>: 47
<<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>--$r18 = newarray (java.lang.String)[$i10]>: 1
<<android.util.ArrayMap: void allocArrays(int)>--$r42 = newarray (int)[i0]>: 19
<<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)>: 47
<<android.hardware.location.ContextHubMessage: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i2]>: 1
<<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>--r6 = newarray (java.util.Locale)[$i0]>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>--specialinvoke r11.<java.util.ArrayList: void <init>(int)>(i0)>: 1
<<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>--$r16 = newarray (java.lang.String)[$i7]>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>--$r8 = newarray (java.lang.String)[$i1]>: 1
<<android.os.LocaleList: void <init>(java.util.Locale[])>--r1 = newarray (java.util.Locale)[$i1]>: 1
<<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>--specialinvoke $r1.<android.util.SparseBooleanArray: void <init>(int)>(i0)>: 47
<<android.media.midi.MidiDeviceInfo: void <init>(int,int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,boolean)>--$r14 = newarray (java.lang.String)[i0]>: 2
<<android.os.Parcel: void readStringList(java.util.List)>----------- No Unit --------->: 13
<<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>--r18 = newarray (int)[i36]>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>--$r6 = newarray (java.lang.String)[$i1]>: 1
<<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>--specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0)>: 47
<<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>--specialinvoke r24.<java.util.ArrayList: void <init>(int)>($i2)>: 1
<<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>--specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)>: 1
<<com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>--r2 = newarray (boolean)[$i0]>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>--specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i2)>: 1
<<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>----------- No Unit --------->: 5
<<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>--r2 = newarray (java.lang.String)[$i1]>: 1
<<android.content.IntentFilter: void <init>(android.os.Parcel)>--specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i11)>: 10
<<android.hardware.location.NanoApp: void <init>(android.os.Parcel)>--r4 = newarray (int)[$i5]>: 1
<<android.os.BatterySaverPolicyConfig: void <init>(android.os.Parcel)>--specialinvoke $r2.<android.util.ArrayMap: void <init>(int)>(i0)>: 1
Pair Sum: 1025
Interface Num: 373



========================== AllEntryPoints ====================================
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>--specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.os.Parcel: java.lang.String[] createString8Array()>--r1 = newarray (java.lang.String)[i0]
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>--r2 = newarray (android.security.keymaster.KeyAttestationPackageInfo)[$i1]
        <android.security.keymaster.IKeyAttestationApplicationIdProvider$Stub$Proxy: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<android.view.contentcapture.DataRemovalRequest: void <init>(android.os.Parcel)>--specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0)
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
<com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>--r2 = newarray (java.lang.String)[$i2]
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getNamesForUids(int[])>
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>----------- No Unit ---------
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void stopScan(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
<android.os.Parcel: java.lang.String[] createString16Array()>--r1 = newarray (java.lang.String)[i0]
        <android.media.IAudioService$Stub$Proxy: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <android.app.IActivityManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void fullTransportBackupForUser(int,java.lang.String[])>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(android.net.Network,java.lang.String[])>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void notifyPackagesReplacedReceived(java.lang.String[])>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] filterAppsEligibleForBackupForUser(int,java.lang.String[])>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.app.IActivityManager$Stub$Proxy: void startDelegateShellPermissionIdentity(int,java.lang.String[])>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.media.IAudioService$Stub$Proxy: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void snoozeLimit(android.net.NetworkTemplate)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
        <android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.os.INetworkManagementService$Stub$Proxy: void startTetheringWithConfiguration(boolean,java.lang.String[])>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyInfo)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
        <android.accounts.IAccountManager$Stub$Proxy: void unregisterAccountListener(java.lang.String[],java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManagerNative$Stub$Proxy: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>
        <android.permission.IPermissionManager$Stub$Proxy: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>
        <android.accounts.IAccountManager$Stub$Proxy: void registerAccountListener(java.lang.String[],java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.media.IAudioService$Stub$Proxy: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setAudioRestriction(int,int,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDetailedUidStats(java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.media.IAudioService$Stub$Proxy: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.backup.IBackupManager$Stub$Proxy: void adbBackup(int,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>
<android.nfc.Tag$1: android.nfc.Tag createFromParcel(android.os.Parcel)>--r1 = newarray (int)[$i0]
        <android.nfc.INfcAdapter$Stub$Proxy: void dispatch(android.nfc.Tag)>
<com.android.server.pm.PackageManagerService$PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>--r1 = newarray (boolean)[$i2]
        <android.content.pm.IPackageManagerNative$Stub$Proxy: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>--specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i7)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>--$r2 = newarray (android.view.textservice.SpellCheckerInfo)[$i1]
        <com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>
<android.os.WorkSource: void <init>(android.os.Parcel)>--specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i1)
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
<com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>--specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i4)
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ChangedPackages getChangedPackages(int,int)>
<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>--$r7 = newarray (android.os.CoolingDevice)[$i2]
        <android.os.IThermalService$Stub$Proxy: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>
<android.os.Parcel: android.util.ArraySet readArraySet(java.lang.ClassLoader)>--specialinvoke $r1.<android.util.ArraySet: void <init>(int)>(i0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<com.android.server.VibratorService: int[] areEffectsSupported(int[])>--r1 = newarray (int)[$i0]
        <android.os.IVibratorService$Stub$Proxy: int[] areEffectsSupported(int[])>
<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>--$r7 = newarray (android.os.Temperature)[$i2]
        <android.os.IThermalService$Stub$Proxy: android.os.Temperature[] getCurrentTemperaturesWithType(int)>
<android.os.BaseBundle: java.util.ArrayList deepcopyArrayList(java.util.ArrayList)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
        <android.media.IAudioService$Stub$Proxy: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>--specialinvoke r9.<java.util.ArrayList: void <init>(int)>(i1)
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>--r1 = newarray (java.lang.CharSequence)[i0]
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.nfc.Tag: java.lang.String[] generateTechStringList(int[])>--r27 = newarray (java.lang.String)[i0]
        <android.nfc.INfcAdapter$Stub$Proxy: void dispatch(android.nfc.Tag)>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>--specialinvoke r4.<java.util.ArrayList: void <init>(int)>(i1)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)>
<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>--r1 = newarray (java.lang.String[])[i0]
        <android.nfc.INfcAdapter$Stub$Proxy: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)>
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>----------- No Unit ---------
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.app.prediction.IPredictionManager$Stub$Proxy: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <android.view.IWindowManager$Stub$Proxy: void modifyDisplayWindowInsets(int,android.view.InsetsState)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
        <android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>
        <android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.INotificationManager$Stub$Proxy: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void stopScan(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.net.INetworkStatsService$Stub$Proxy: void unregisterUsageRequest(android.net.DataUsageRequest)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
        <android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <android.app.INotificationManager$Stub$Proxy: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
        <android.os.INetworkManagementService$Stub$Proxy: void addRoute(int,android.net.RouteInfo)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
        <android.content.IContentService$Stub$Proxy: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void removeRoute(int,android.net.RouteInfo)>
        <android.nfc.INfcAdapter$Stub$Proxy: void invokeBeamInternal(android.nfc.BeamShareData)>
        <android.os.INetworkManagementService$Stub$Proxy: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneSignalStrength(android.telephony.SignalStrength)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IIpConnectivityMetrics$Stub$Proxy: int logEvent(android.net.ConnectivityMetricsEvent)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.content.IContentService$Stub$Proxy: void sync(android.content.SyncRequest,java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.media.midi.IMidiManager$Stub$Proxy: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>----------- No Unit ---------
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int attestKey(android.security.keystore.IKeystoreCertificateChainCallback,java.lang.String,android.security.keymaster.KeymasterArguments)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int generateKey(android.security.keystore.IKeystoreKeyCharacteristicsCallback,java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.os.INetworkManagementService$Stub$Proxy: int removeRoutesFromLocalNetwork(java.util.List)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAutofillFailure(int,java.util.List,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: void setSystemSelectionChannels(java.util.List,int,com.android.internal.telephony.IBooleanConsumer)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int attestDeviceIds(android.security.keystore.IKeystoreCertificateChainCallback,android.security.keymaster.KeymasterArguments)>
        <com.android.internal.telecom.ITelecomService$Stub$Proxy: void startConference(java.util.List,android.os.Bundle,java.lang.String)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int importWrappedKey(android.security.keystore.IKeystoreKeyCharacteristicsCallback,java.lang.String,byte[],java.lang.String,byte[],android.security.keymaster.KeymasterArguments,long,long)>
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.os.INetworkManagementService$Stub$Proxy: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: void querySyncProviders(java.util.List,java.util.List)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>
        <com.android.internal.telephony.IOns$Stub$Proxy: void updateAvailableNetworks(java.util.List,com.android.internal.telephony.IUpdateAvailableNetworksCallback,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int finish(android.security.keystore.IKeystoreOperationResultCallback,android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[],byte[],byte[])>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int update(android.security.keystore.IKeystoreOperationResultCallback,android.os.IBinder,android.security.keymaster.KeymasterArguments,byte[])>
        <android.telephony.ims.aidl.IImsRcsController$Stub$Proxy: void requestCapabilities(int,java.lang.String,java.lang.String,java.util.List,android.telephony.ims.aidl.IRcsUceControllerCallback)>
        <android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int importKey(android.security.keystore.IKeystoreKeyCharacteristicsCallback,java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.security.keystore.IKeystoreService$Stub$Proxy: int begin(android.security.keystore.IKeystoreOperationResultCallback,android.os.IBinder,java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfoForSubscriber(int,java.util.List)>
<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>--r2 = newarray (android.os.health.HealthStatsParceler)[i1]
        <com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>
<android.os.VibrationEffect$Waveform: void <init>(long[],int[],int)>--r1 = newarray (long)[$i0]
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
<android.telephony.ImsiEncryptionInfo: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i0]
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: void setCarrierInfoForImsiEncryption(int,java.lang.String,android.telephony.ImsiEncryptionInfo)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>
        <android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void cacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>
        <android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void querySyncProviders(java.util.List,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean runBackgroundDexoptJob(java.util.List)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>
        <android.app.backup.IBackupManager$Stub$Proxy: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.app.backup.IBackupManager$Stub$Proxy: void excludeKeysFromRestore(java.lang.String,java.util.List)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void scheduleApplicationInfoChanged(java.util.List,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setMimeGroup(java.lang.String,java.lang.String,java.util.List)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void uncacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
        <android.os.IDeviceIdleController$Stub$Proxy: int addPowerSaveWhitelistApps(java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: void enableVisualVoicemailSmsFilter(java.lang.String,int,android.telephony.VisualVoicemailSmsFilterSettings)>
        <com.android.internal.telecom.ITelecomService$Stub$Proxy: void registerPhoneAccount(android.telecom.PhoneAccount)>
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void clearLaunchParamsForPackages(java.util.List)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.app.role.IRoleManager$Stub$Proxy: void setRoleNamesFromController(java.util.List)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void continueOperation(int,android.content.Intent,android.os.Bundle)>
        <com.android.internal.telecom.ITelecomService$Stub$Proxy: void handleCallIntent(android.content.Intent,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void verifyIntentFilter(int,int,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void setSupportedCountries(boolean,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void resetInteractAcrossProfilesAppOps(java.util.List)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startDreamActivity(android.content.Intent)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: void updateEmergencyNumberListTestMode(int,android.telephony.emergency.EmergencyNumber)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAffiliationIds(android.content.ComponentName,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
        <android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>--r4 = newarray (boolean)[$i4]
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
<android.nfc.BeamShareData$1: android.nfc.BeamShareData createFromParcel(android.os.Parcel)>--r12 = newarray (android.net.Uri)[i0]
        <android.nfc.INfcAdapter$Stub$Proxy: void invokeBeamInternal(android.nfc.BeamShareData)>
<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i0]
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>--r1 = newarray (int[])[i0]
        <com.android.internal.telecom.ITelecomService$Stub$Proxy: void registerPhoneAccount(android.telecom.PhoneAccount)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>--r1 = newarray (byte)[i0]
        <android.nfc.INfcAdapter$Stub$Proxy: void dispatch(android.nfc.Tag)>
<com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>--specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2)
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>--specialinvoke r27.<java.util.ArrayList: void <init>(int)>(i1)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
<android.content.pm.ShortcutInfo: void <init>(android.os.Parcel)>--specialinvoke $r24.<android.util.ArraySet: void <init>(int)>(i10)
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
<android.content.ContentValues: void <init>(android.os.Parcel)>--specialinvoke $r1.<android.util.ArrayMap: void <init>(int)>($i0)
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
<android.os.BaseBundle: void copyInternal(android.os.BaseBundle,boolean)>--specialinvoke r3.<android.util.ArrayMap: void <init>(int)>(i0)
        <android.media.IAudioService$Stub$Proxy: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>--specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>--specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i4)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void interrupt(int)>
<android.media.midi.MidiDeviceStatus: void <init>(android.media.midi.MidiDeviceInfo,boolean[],int[])>--r4 = newarray (boolean)[$i0]
        <android.media.midi.IMidiManager$Stub$Proxy: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>--r7 = newarray (java.lang.StackTraceElement)[$i7]
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>--r4 = newarray (long)[$i6]
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>--r2 = newarray (java.lang.String)[$i1]
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>--r1 = newarray (java.lang.Object)[i0]
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.util.SparseArray: void <init>(int)>--$r2 = newarray (int)[$i1]
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
<android.view.textclassifier.TextClassifierEvent: void <init>(android.os.Parcel)>--r10 = newarray (float)[$i3]
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
<android.view.RemoteAnimationDefinition: void <init>(android.os.Parcel)>--specialinvoke $r2.<android.util.SparseArray: void <init>(int)>(i0)
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)>
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
<android.util.ArraySet: void allocArrays(int)>--$r39 = newarray (int)[i0]
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>--r1 = newarray (android.os.Parcelable)[i0]
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>--$r18 = newarray (java.lang.String)[$i10]
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<android.util.ArrayMap: void allocArrays(int)>--$r42 = newarray (int)[i0]
        <android.media.IAudioService$Stub$Proxy: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.os.IPowerManager$Stub$Proxy: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>
        <android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.IAudioService$Stub$Proxy: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>--specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.hardware.location.ContextHubMessage: void <init>(android.os.Parcel)>--r2 = newarray (byte)[$i2]
        <android.hardware.location.IContextHubService$Stub$Proxy: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>
<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>--r6 = newarray (java.util.Locale)[$i0]
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>--specialinvoke r11.<java.util.ArrayList: void <init>(int)>(i0)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)>
<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>--$r16 = newarray (java.lang.String)[$i7]
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>--$r8 = newarray (java.lang.String)[$i1]
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<android.os.LocaleList: void <init>(java.util.Locale[])>--r1 = newarray (java.util.Locale)[$i1]
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>--specialinvoke $r1.<android.util.SparseBooleanArray: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.media.midi.MidiDeviceInfo: void <init>(int,int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,boolean)>--$r14 = newarray (java.lang.String)[i0]
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>
<android.os.Parcel: void readStringList(java.util.List)>----------- No Unit ---------
        <android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>--r18 = newarray (int)[i36]
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>--$r6 = newarray (java.lang.String)[$i1]
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>--specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
        <android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)>
        <android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)>
        <android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>--specialinvoke r24.<java.util.ArrayList: void <init>(int)>($i2)
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>--specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)
        <android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>--r2 = newarray (boolean)[$i0]
        <android.os.IVibratorService$Stub$Proxy: boolean[] arePrimitivesSupported(int[])>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>--specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i2)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPasswordSufficientAfterProfileUnification(int,int)>
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>----------- No Unit ---------
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
        <com.android.internal.telephony.ITelephony$Stub$Proxy: int setAllowedCarriers(android.telephony.CarrierRestrictionRules)>
        <android.location.ILocationManager$Stub$Proxy: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
        <com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>--r2 = newarray (java.lang.String)[$i1]
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.content.IntentFilter: void <init>(android.os.Parcel)>--specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i11)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<android.hardware.location.NanoApp: void <init>(android.os.Parcel)>--r4 = newarray (int)[$i5]
        <android.hardware.location.IContextHubService$Stub$Proxy: int loadNanoApp(int,android.hardware.location.NanoApp)>
<android.os.BatterySaverPolicyConfig: void <init>(android.os.Parcel)>--specialinvoke $r2.<android.util.ArrayMap: void <init>(int)>(i0)
        <android.os.IPowerManager$Stub$Proxy: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>



========================== RiskyMethodAndUnits ====================================
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>
        specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(i0)
<android.os.Parcel: java.lang.String[] createString8Array()>
        r1 = newarray (java.lang.String)[i0]
<com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
        r2 = newarray (android.security.keymaster.KeyAttestationPackageInfo)[$i1]
<android.view.contentcapture.DataRemovalRequest: void <init>(android.os.Parcel)>
        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>
        r2 = newarray (java.lang.String)[$i2]
<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>
        --------- No Unit ---------
<android.os.Parcel: java.lang.String[] createString16Array()>
        r1 = newarray (java.lang.String)[i0]
<android.nfc.Tag$1: android.nfc.Tag createFromParcel(android.os.Parcel)>
        r1 = newarray (int)[$i0]
<com.android.server.pm.PackageManagerService$PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>
        r1 = newarray (boolean)[$i2]
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i7)
<com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>
        $r2 = newarray (android.view.textservice.SpellCheckerInfo)[$i1]
<android.os.WorkSource: void <init>(android.os.Parcel)>
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i1)
<com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>
        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i4)
<com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>
        $r7 = newarray (android.os.CoolingDevice)[$i2]
<android.os.Parcel: android.util.ArraySet readArraySet(java.lang.ClassLoader)>
        specialinvoke $r1.<android.util.ArraySet: void <init>(int)>(i0)
<com.android.server.VibratorService: int[] areEffectsSupported(int[])>
        r1 = newarray (int)[$i0]
<com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>
        $r7 = newarray (android.os.Temperature)[$i2]
<android.os.BaseBundle: java.util.ArrayList deepcopyArrayList(java.util.ArrayList)>
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
        specialinvoke r9.<java.util.ArrayList: void <init>(int)>(i1)
<android.os.Parcel: java.lang.CharSequence[] readCharSequenceArray()>
        r1 = newarray (java.lang.CharSequence)[i0]
<android.nfc.Tag: java.lang.String[] generateTechStringList(int[])>
        r27 = newarray (java.lang.String)[i0]
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>
        specialinvoke r4.<java.util.ArrayList: void <init>(int)>(i1)
<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>
        r1 = newarray (java.lang.String[])[i0]
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>
        --------- No Unit ---------
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>
        --------- No Unit ---------
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>
        r2 = newarray (android.os.health.HealthStatsParceler)[i1]
<android.os.VibrationEffect$Waveform: void <init>(long[],int[],int)>
        r1 = newarray (long)[$i0]
<android.telephony.ImsiEncryptionInfo: void <init>(android.os.Parcel)>
        r2 = newarray (byte)[$i0]
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
        r4 = newarray (boolean)[$i4]
<android.nfc.BeamShareData$1: android.nfc.BeamShareData createFromParcel(android.os.Parcel)>
        r12 = newarray (android.net.Uri)[i0]
<android.hardware.location.NanoAppBinary: void <init>(android.os.Parcel)>
        r2 = newarray (byte)[$i0]
<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>
        r1 = newarray (int[])[i0]
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>
        r1 = newarray (byte)[i0]
<com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2)
<com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
        specialinvoke r27.<java.util.ArrayList: void <init>(int)>(i1)
<android.content.pm.ShortcutInfo: void <init>(android.os.Parcel)>
        specialinvoke $r24.<android.util.ArraySet: void <init>(int)>(i10)
<android.content.ContentValues: void <init>(android.os.Parcel)>
        specialinvoke $r1.<android.util.ArrayMap: void <init>(int)>($i0)
<android.os.BaseBundle: void copyInternal(android.os.BaseBundle,boolean)>
        specialinvoke r3.<android.util.ArrayMap: void <init>(int)>(i0)
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>
        specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i4)
<android.media.midi.MidiDeviceStatus: void <init>(android.media.midi.MidiDeviceInfo,boolean[],int[])>
        r4 = newarray (boolean)[$i0]
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>
        r7 = newarray (java.lang.StackTraceElement)[$i7]
<com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
        r4 = newarray (long)[$i6]
<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
        r2 = newarray (java.lang.String)[$i1]
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>
        r1 = newarray (java.lang.Object)[i0]
<android.util.SparseArray: void <init>(int)>
        $r2 = newarray (int)[$i1]
<android.view.textclassifier.TextClassifierEvent: void <init>(android.os.Parcel)>
        r10 = newarray (float)[$i3]
<android.view.RemoteAnimationDefinition: void <init>(android.os.Parcel)>
        specialinvoke $r2.<android.util.SparseArray: void <init>(int)>(i0)
<android.util.ArraySet: void allocArrays(int)>
        $r39 = newarray (int)[i0]
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>
        r1 = newarray (android.os.Parcelable)[i0]
<com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        $r18 = newarray (java.lang.String)[$i10]
<android.util.ArrayMap: void allocArrays(int)>
        $r42 = newarray (int)[i0]
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>
        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0)
<android.hardware.location.ContextHubMessage: void <init>(android.os.Parcel)>
        r2 = newarray (byte)[$i2]
<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>
        r6 = newarray (java.util.Locale)[$i0]
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>
        specialinvoke r11.<java.util.ArrayList: void <init>(int)>(i0)
<com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
        $r16 = newarray (java.lang.String)[$i7]
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
        $r8 = newarray (java.lang.String)[$i1]
<android.os.LocaleList: void <init>(java.util.Locale[])>
        r1 = newarray (java.util.Locale)[$i1]
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
        specialinvoke $r1.<android.util.SparseBooleanArray: void <init>(int)>(i0)
<android.media.midi.MidiDeviceInfo: void <init>(int,int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,boolean)>
        $r14 = newarray (java.lang.String)[i0]
<android.os.Parcel: void readStringList(java.util.List)>
        --------- No Unit ---------
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>
        r18 = newarray (int)[i36]
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
        $r6 = newarray (java.lang.String)[$i1]
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>
        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0)
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>
        specialinvoke r24.<java.util.ArrayList: void <init>(int)>($i2)
<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0)
<com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>
        r2 = newarray (boolean)[$i0]
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>
        specialinvoke r13.<java.util.ArrayList: void <init>(int)>($i2)
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>
        --------- No Unit ---------
<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
        r2 = newarray (java.lang.String)[$i1]
<android.content.IntentFilter: void <init>(android.os.Parcel)>
        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i11)
<android.hardware.location.NanoApp: void <init>(android.os.Parcel)>
        r4 = newarray (int)[$i5]
<android.os.BatterySaverPolicyConfig: void <init>(android.os.Parcel)>
        specialinvoke $r2.<android.util.ArrayMap: void <init>(int)>(i0)
