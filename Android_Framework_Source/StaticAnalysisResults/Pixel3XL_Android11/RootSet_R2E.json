{"<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>"],"<com.android.server.usage.AppTimeLimitController: void noteUsageStart(java.lang.String,int,long)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>"],"<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>"],"<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>":["<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceQuota(java.lang.String,long)>"],"<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>"],"<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>","<android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>","<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(android.net.Network)>"],"<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>":["<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>"],"<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>":["<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>","<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)>"],"<com.android.server.usage.AppTimeLimitController: void addUsageSessionObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,int)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>"],"<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>":["<android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>"],"<com.android.server.pm.UserManagerService: com.android.server.pm.RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>","<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isInstantApp(java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>","<android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: void reconcileSecondaryDexFiles(java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>","<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.service.dreams.IDreamManager$Stub$Proxy: void testDream(int,android.content.ComponentName)>","<android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageAvailable(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>","<android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>","<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean getBlockUninstallForUser(java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.os.IUserManager$Stub$Proxy: void setUserAccount(int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.os.IUserManager$Stub$Proxy: boolean hasUserRestriction(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>","<android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppInactive(java.lang.String,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.os.IUserManager$Stub$Proxy: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getIconMaxDimensions(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killBackgroundProcesses(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>","<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>","<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void resetAllModes(int,java.lang.String)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>","<android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>","<android.os.IUserManager$Stub$Proxy: int getUserRestrictionSource(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>","<android.os.IUserManager$Stub$Proxy: void setUserRestriction(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: int getInstallReason(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void makePackageIdle(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void checkPackageStartable(java.lang.String,int)>","<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponentsForUser(int,android.content.ComponentName[])>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int stopUser(android.content.ComponentName,android.os.UserHandle)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>","<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean canRequestPackageInstalls(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSuspendedForUser(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>","<android.os.IUserManager$Stub$Proxy: void setUserName(int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getMaxShortcutCountPerActivity(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>"],"<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: void getExitInfoLocked(int,int,java.util.ArrayList)>":["<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>"],"<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>":["<android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>"],"<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>"],"<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>"],"<android.app.admin.SystemUpdatePolicy$1: android.app.admin.SystemUpdatePolicy createFromParcel(android.os.Parcel)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>"],"<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>"],"<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>"],"<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"],"<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"],"<com.android.server.usage.AppTimeLimitController: void addAppUsageObserver(int,int,java.lang.String[],long,android.app.PendingIntent,int)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>"],"<com.android.server.am.BroadcastDispatcher: void insertLocked(java.util.ArrayList,com.android.server.am.BroadcastDispatcher$Deferrals)>":["<android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>"],"<com.android.server.am.BroadcastDispatcher: void startDeferring(int)>":["<android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>"],"<com.android.server.media.MediaSessionStack: java.util.List getActiveSessions(int)>":["<android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>"],"<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>"],"<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,com.android.server.location.CallerIdentity)>":["<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>"],"<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>":["<android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>","<android.permission.IPermissionManager$Stub$Proxy: void stopOneTimePermissionSession(java.lang.String,int)>"],"<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>"],"<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>":["<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>":["<android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>","<android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>"],"<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo createAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>":["<android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>","<android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>","<android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>","<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>"],"<com.android.server.clipboard.ClipboardService: com.android.server.clipboard.ClipboardService$PerUserClipboard getClipboard(int)>":["<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>"],"<com.android.server.am.CachedAppOptimizer: void compactAppSome(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"],"<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>":["<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>"],"<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>":["<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>"],"<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"],"<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>":["<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>"],"<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>"],"<android.accounts.Account: void <init>(android.os.Parcel)>":["<android.accounts.IAccountManager$Stub$Proxy: boolean accountAuthenticated(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>","<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPreviousName(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>","<android.content.IContentService$Stub$Proxy: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>","<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean someUserHasAccount(android.accounts.Account)>","<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>","<android.content.IContentService$Stub$Proxy: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>","<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>","<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>","<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>","<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>"],"<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>"],"<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.location.LocationRequestStatistics: void startRequesting(java.lang.String,java.lang.String,java.lang.String,long,boolean)>":["<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>"],"<com.android.server.am.ActiveServices: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean,boolean)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>":["<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>"],"<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>"],"<com.android.server.pm.InstantAppRegistry$CookiePersistence: void addPendingPersistCookieLPw(int,com.android.server.pm.parsing.pkg.AndroidPackage,byte[],java.io.File)>":["<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstantAppCookie(java.lang.String,byte[],int)>"],"<com.android.server.am.CachedAppOptimizer: void compactAppFull(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<android.app.role.RoleControllerManager: void <init>(android.content.ComponentName,android.os.Handler,android.content.Context)>":["<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>"],"<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncStart(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncFinish(java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobStart(java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobFinish(java.lang.String,int,int)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>"],"<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>":["<android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>","<android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>","<android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>","<android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>","<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>","<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>"],"<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>":["<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>"],"<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.permission.IPermissionManager$Stub$Proxy: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>","<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>"],"<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: java.lang.Object startObject(java.lang.String)>":["<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobStart(java.lang.String,int)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncStart(java.lang.String,int)>"],"<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>":["<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>"],"<com.android.server.wm.RecentTasks: void removeForAddTask(com.android.server.wm.Task)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"],"<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionOverride(int,int,int,long,java.lang.String)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.media.IAudioService$Stub$Proxy: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.companion.ICompanionDeviceManager$Stub$Proxy: boolean hasNotificationAccess(android.content.ComponentName)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void addPackageDependency(java.lang.String)>"],"<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.notification.PreferencesHelper: void readXml(org.xmlpull.v1.XmlPullParser,boolean,int)>":["<android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>"],"<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>"],"<com.android.server.am.ActiveServices: void registerAppOpCallbackLocked(com.android.server.am.ServiceRecord)>":["<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>"],"<com.android.server.appwidget.AppWidgetServiceImpl: com.android.server.appwidget.AppWidgetServiceImpl$Host lookupOrAddHostLocked(com.android.server.appwidget.AppWidgetServiceImpl$HostId)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>"],"<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>":["<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>"],"<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void setAudioRestriction(int,int,int,int,java.lang.String[])>"],"<com.android.server.am.BroadcastDispatcher: void enqueueOrderedBroadcastLocked(com.android.server.am.BroadcastRecord)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>"],"<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>":["<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>","<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: boolean areBubblesAllowed(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>","<android.app.INotificationManager$Stub$Proxy: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>","<android.app.INotificationManager$Stub$Proxy: void setBubblesAllowed(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>","<android.app.INotificationManager$Stub$Proxy: int getBubblePreferenceForPackage(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>","<android.app.INotificationManager$Stub$Proxy: void deleteNotificationChannel(java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>","<android.app.INotificationManager$Stub$Proxy: boolean canShowBadge(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>","<android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>","<android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>","<android.app.INotificationManager$Stub$Proxy: boolean hasSentValidMsg(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: int getPackageImportance(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>","<android.app.INotificationManager$Stub$Proxy: void setShowBadge(java.lang.String,int,boolean)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabledForPackage(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void setNotificationDelegate(java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>","<android.app.INotificationManager$Stub$Proxy: boolean onlyHasDefaultChannel(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void deleteConversationNotificationChannels(java.lang.String,int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabled(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: boolean isInInvalidMsgState(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>"],"<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"],"<com.android.server.am.ActiveUids: void put(int,com.android.server.am.UidRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.UiModeManagerService: void enableCarMode(int,java.lang.String)>":["<android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)>","<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)>"],"<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>":["<android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>"],"<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>":["<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceAlert(java.lang.String,long)>"],"<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>":["<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>"],"<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: void setAutoPersisting(java.lang.String,boolean)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>","<android.os.storage.IStorageManager$Stub$Proxy: void allocateBytes(java.lang.String,long,int,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>","<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: boolean isBackgroundRestricted(java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>","<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>","<android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: boolean isOperationActive(int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>","<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.net.IIpSecService$Stub$Proxy: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>","<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>","<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>","<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean archiveStoredConversation(java.lang.String,long,boolean)>","<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>","<android.app.IWallpaperManager$Stub$Proxy: boolean isWallpaperSupported(java.lang.String)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<android.os.IPowerManager$Stub$Proxy: void wakeUp(long,int,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperation(int,int,java.lang.String)>","<android.security.IFileIntegrityService$Stub$Proxy: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>","<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>","<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>","<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>","<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String,int)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void setMode(int,int,java.lang.String,int)>","<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>","<android.permission.IPermissionManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: boolean isUidActive(int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>","<android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>","<android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperationRaw(int,int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>","<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>","<android.net.IConnectivityManager$Stub$Proxy: void setVpnPackageAuthorization(java.lang.String,int,int)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int getUidProcessState(int,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: java.util.List getProfiles(java.lang.String)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredConversation(java.lang.String,long)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: void applyTunnelModeTransform(int,int,int,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>","<android.os.storage.IStorageManager$Stub$Proxy: long getAllocatableBytes(java.lang.String,int,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>","<android.permission.IPermissionManager$Stub$Proxy: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>","<android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int getPackageProcessState(java.lang.String,java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>","<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>","<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>","<android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>","<android.net.IIpSecService$Stub$Proxy: void deleteTunnelInterface(int,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>","<com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>"],"<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>":["<android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>"],"<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>"],"<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.wm.RecentTasks: boolean moveAffiliatedTasksToFront(com.android.server.wm.Task,int)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"],"<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>":["<com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>"],"<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"],"<com.android.server.inputmethod.InputMethodManagerService: boolean showCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>":["<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"],"<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>":["<android.app.IActivityTaskManager$Stub$Proxy: void setPackageAskScreenCompat(java.lang.String,boolean)>"],"<com.android.server.am.ActivityManagerService: void addPidLocked(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.am.ProcessList: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,com.android.server.am.HostingRecord,int,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>"],"<com.android.server.location.ContextHubTransactionManager: void addTransaction(com.android.server.location.ContextHubServiceTransaction)>":["<android.hardware.location.IContextHubService$Stub$Proxy: int loadNanoApp(int,android.hardware.location.NanoApp)>","<android.hardware.location.IContextHubService$Stub$Proxy: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>","<android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>"],"<com.android.server.pm.Settings: int acquireAndRegisterNewAppIdLPw(com.android.server.pm.SettingBase)>":["<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>"],"<com.android.server.am.ActivityManagerService: boolean requestPssLocked(com.android.server.am.ProcessRecord,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.am.AppExitInfoTracker$IsolatedUidRecords: void addIsolatedUid(int,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>":["<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>"],"<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>":["<android.app.slice.ISliceManager$Stub$Proxy: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>","<android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>","<android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>","<android.app.slice.ISliceManager$Stub$Proxy: boolean hasSliceAccess(java.lang.String)>","<android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>","<android.app.slice.ISliceManager$Stub$Proxy: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>","<android.app.slice.ISliceManager$Stub$Proxy: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>"],"<com.android.server.IntentResolver: void remove_all_objects(android.util.ArrayMap,java.lang.String,java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>"],"<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>"],"<com.android.server.wm.PendingRemoteAnimationRegistry: void addPendingAnimation(java.lang.String,android.view.RemoteAnimationAdapter)>":["<android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>"],"<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>":["<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>"],"<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>":["<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>"],"<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$UidState getUidStateLocked(int,boolean)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void setMode(int,int,java.lang.String,int)>","<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>","<android.permission.IPermissionManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperationRaw(int,int,java.lang.String)>","<android.net.IConnectivityManager$Stub$Proxy: void setVpnPackageAuthorization(java.lang.String,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: boolean isOperationActive(int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>","<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>","<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.permission.IPermissionManager$Stub$Proxy: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])>","<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>","<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getUidOps(int,int[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperation(int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>","<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>"],"<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>":["<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>"],"<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>"],"<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>"],"<com.android.server.power.AmbientDisplaySuppressionController: void suppress(java.lang.String,int,boolean)>":["<android.os.IPowerManager$Stub$Proxy: void suppressAmbientDisplay(java.lang.String,boolean)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>"],"<com.android.server.wm.RecentTasks: void cleanupLocked(int)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"],"<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>":["<android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>"],"<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>":["<android.hardware.input.IInputManager$Stub$Proxy: void vibrate(int,long[],int,android.os.IBinder)>"],"<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>":["<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>","<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>","<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>","<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>"],"<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>"],"<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>":["<android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>"],"<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>"],"<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)>":["<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)>","<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>"],"<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>":["<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>"],"<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>":["<android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>","<android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>"],"<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(long)>":["<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>","<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneSignalStrength(android.telephony.SignalStrength)>"],"<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>":["<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>"],"<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.pm.Settings$RuntimePermissionPersistence: void readStateForUserSyncLPr(int)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.internal.app.procstats.AssociationState$SourceState: void trackProcState(int,int,long)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<android.content.SyncAdaptersCache: java.lang.String[] getSyncAdapterPackagesForAuthority(java.lang.String,int)>":["<android.content.IContentService$Stub$Proxy: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>"],"<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>"],"<com.android.server.am.CachedAppOptimizer: void compactAppPersistent(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>":["<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>","<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>"],"<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>":["<android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>"],"<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>":["<android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>"],"<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>"],"<com.android.server.am.ServiceRecord: void addConnection(android.os.IBinder,com.android.server.am.ConnectionRecord)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>":["<android.os.INetworkManagementService$Stub$Proxy: void addIdleTimer(java.lang.String,int,int)>"],"<com.android.server.am.ProcessRecord$PackageList: com.android.internal.app.procstats.ProcessStats$ProcessStateHolder put(java.lang.String,com.android.internal.app.procstats.ProcessStats$ProcessStateHolder)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>"],"<com.android.server.display.PersistentDataStore: boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: void renameWifiDisplay(java.lang.String,java.lang.String)>"],"<com.android.server.notification.PreferencesHelper: void createNotificationChannelGroup(java.lang.String,int,android.app.NotificationChannelGroup,boolean)>":["<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>","<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>"],"<com.android.server.AlarmManagerService: boolean addBatchLocked(java.util.ArrayList,com.android.server.AlarmManagerService$Batch)>":["<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"],"<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>":["<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>"],"<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>":["<android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>","<android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>","<android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>","<android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>","<android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>","<android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>"],"<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>":["<android.app.IActivityTaskManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)>"],"<android.app.NotificationChannelGroup: void addChannel(android.app.NotificationChannel)>":["<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)>","<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>"],"<android.graphics.GraphicsStatsService: android.graphics.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>":["<android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>"],"<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState getOrCreateUserState(int)>":["<android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>"],"<com.android.server.pm.dex.PackageDynamicCodeLoading: boolean record(java.lang.String,java.lang.String,int,int,java.lang.String)>":["<android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>"],"<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>"],"<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,int,int)>":["<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>"],"<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"],"<com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager getOrCreateController(int)>":["<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>"],"<com.android.server.am.ActivityManagerService: void enqueueUidChangeLocked(com.android.server.am.UidRecord,int,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>"],"<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>":["<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>"],"<com.android.server.inputmethod.InputMethodManagerService: boolean hideCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>":["<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>"],"<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>":["<android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>":["<android.os.IDeviceIdleController$Stub$Proxy: void removeSystemPowerWhitelistApp(java.lang.String)>"],"<com.android.server.appop.AppOpsService: void setUserRestrictionNoCheck(int,boolean,android.os.IBinder,int,java.lang.String[])>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>"],"<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>"],"<android.app.ResourcesManager: android.content.res.ResourcesImpl findOrCreateResourcesImplForKeyLocked(android.content.res.ResourcesKey)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>":["<android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>"],"<com.android.server.appop.AppOpsService: void collectAsyncNotedOp(int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>":["<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>","<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: void setAutoPersisting(java.lang.String,boolean)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>","<android.app.IActivityManager$Stub$Proxy: boolean isUidActive(int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>","<android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>","<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int getUidProcessState(int,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: java.util.List getProfiles(java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredConversation(java.lang.String,long)>","<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: void applyTunnelModeTransform(int,int,int,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>","<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>","<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int getPackageProcessState(java.lang.String,java.lang.String)>","<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean archiveStoredConversation(java.lang.String,long,boolean)>","<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>","<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>","<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>","<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>","<android.os.IPowerManager$Stub$Proxy: void wakeUp(long,int,java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>","<android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>","<android.net.IIpSecService$Stub$Proxy: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.net.IIpSecService$Stub$Proxy: void deleteTunnelInterface(int,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>","<com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)>","<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>","<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>","<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>","<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>"],"<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>":["<android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>"],"<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>"],"<com.android.server.am.PendingTempWhitelists: void put(int,com.android.server.am.ActivityManagerService$PendingTempWhitelist)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: android.util.ArrayMap getOrAllocate(int)>":["<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>"],"<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>":["<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>"],"<com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>":["<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>"],"<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>":["<android.content.pm.IPackageManager$Stub$Proxy: void clearCrossProfileIntentFilters(int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>"],"<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean,boolean)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$Association startAssociationLocked(int,java.lang.String,int,int,long,android.content.ComponentName,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>":["<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>"],"<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>":["<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>"],"<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>":["<android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>"],"<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>":["<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>"],"<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>":["<android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>"],"<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>":["<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>"],"<com.android.server.pm.BackgroundDexOptService: int trackPerformDexOpt(java.lang.String,boolean,java.util.function.Supplier)>":["<android.content.pm.IPackageManager$Stub$Proxy: boolean runBackgroundDexoptJob(java.util.List)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>"],"<com.android.server.notification.NotificationManagerService$NotificationAssistants: void allowAdjustmentType(java.lang.String)>":["<android.app.INotificationManager$Stub$Proxy: void allowAssistantAdjustment(java.lang.String)>"],"<android.hardware.display.DisplayManager: android.view.Display getOrCreateDisplayLocked(int,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>"],"<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>":["<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>"],"<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>":["<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>","<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>"],"<com.android.server.am.UserController: boolean startUserInternal(int,boolean,android.os.IProgressListener,com.android.server.utils.TimingsTraceAndSlog)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.textclassifier.TextClassificationManagerService: com.android.server.textclassifier.TextClassificationManagerService$UserState getUserStateLocked(int)>":["<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>"],"<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>":["<android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>","<android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>"],"<com.android.server.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>":["<android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>"],"<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByName(int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.am.ProcessList: int updateLruProcessInternalLocked(com.android.server.am.ProcessRecord,long,int,int,java.lang.String,java.lang.Object,com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>":["<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>","<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>","<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>","<android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>"],"<com.android.server.content.ContentService: android.util.ArrayMap findOrCreateCacheLocked(int,java.lang.String)>":["<android.content.IContentService$Stub$Proxy: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>","<android.content.IContentService$Stub$Proxy: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>"],"<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>"],"<com.android.server.BluetoothManagerService: void addActiveLog(int,java.lang.String,boolean)>":["<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>","<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(java.lang.String,boolean)>","<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect(java.lang.String)>","<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>","<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable(java.lang.String)>"],"<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>":["<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>"],"<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>"],"<com.android.server.am.AnrHelper: void appNotResponding(com.android.server.am.ProcessRecord,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,com.android.server.wm.WindowProcessController,boolean,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void appNotResponding(java.lang.String)>"],"<com.android.server.am.PendingIntentController: void incrementUidStatLocked(com.android.server.am.PendingIntentRecord)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>"],"<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>"],"<com.android.server.appwidget.AppWidgetServiceImpl: void onWidgetProviderAddedOrChangedLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>"],"<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>":["<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"],"<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData getOrCreateGenericModelDataLocked(java.util.UUID)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"],"<com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,android.app.ITransientNotification,int,int,android.app.ITransientNotificationCallback)>":["<android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>","<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>"],"<android.util.SparseArrayMap: void add(int,java.lang.String,java.lang.Object)>":["<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>"],"<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>":["<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>"],"<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ProcessState getProcessStateLocked(com.android.internal.app.procstats.ProcessStats$PackageState,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killApplicationProcess(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])>"],"<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>":["<android.view.autofill.IAutoFillManager$Stub$Proxy: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>"],"<com.android.server.wm.WindowProcessController: void addPackage(java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.media.MediaSessionStack: void addSession(com.android.server.media.MediaSessionRecordImpl)>":["<android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>","<android.media.session.ISessionManager$Stub$Proxy: void notifySession2Created(android.media.Session2Token)>"],"<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>":["<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>","<android.media.IAudioService$Stub$Proxy: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>","<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>","<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>","<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>","<android.media.IAudioService$Stub$Proxy: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>"],"<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>":["<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationProfileData(java.lang.String)>"],"<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>"],"<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>":["<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>","<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>"],"<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>"],"<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>"],"<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void onStart(java.util.UUID)>":["<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>","<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>"],"<com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>":["<android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>"],"<android.app.ResourcesManager: android.content.res.ApkAssets loadApkAssets(java.lang.String,boolean,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>"],"<com.android.server.am.AppExitInfoTracker: void putToSparse2dArray(android.util.SparseArray,int,int,java.lang.Object,java.util.function.Supplier,java.util.function.Consumer)>":["<android.app.IActivityManager$Stub$Proxy: void setProcessStateSummary(byte[])>"],"<com.android.server.wm.PersisterQueue: void addItem(com.android.server.wm.PersisterQueue$WriteQueueItem,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"],"<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>":["<android.hardware.input.IInputManager$Stub$Proxy: void addPortAssociation(java.lang.String,int)>"],"<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>"],"<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>":["<android.hardware.display.IDisplayManager$Stub$Proxy: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>"],"<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>":["<android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>"],"<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>":["<android.hardware.input.IInputManager$Stub$Proxy: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>","<android.hardware.input.IInputManager$Stub$Proxy: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>","<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>","<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>","<android.hardware.input.IInputManager$Stub$Proxy: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>","<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>","<android.hardware.input.IInputManager$Stub$Proxy: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>","<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>"],"<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>":["<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>","<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>"],"<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>"],"<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>"],"<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>":["<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>"],"<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>":["<android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>"],"<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>"],"<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>"],"<com.android.server.job.JobPackageTracker$DataSet: com.android.server.job.JobPackageTracker$PackageEntry getOrCreateEntry(int,java.lang.String)>":["<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>","<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>"],"<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.am.ProcessRecord: boolean startService(com.android.server.am.ServiceRecord)>":["<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,int)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>"],"<com.android.server.location.gnss.GnssManagerService: boolean addGnssDataListenerLocked(java.lang.Object,android.os.IInterface,java.lang.String,java.lang.String,com.android.server.location.RemoteListenerHelper,android.util.ArrayMap,java.util.function.Consumer)>":["<android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>"],"<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>":["<android.net.IEthernetManager$Stub$Proxy: android.net.IpConfiguration getConfiguration(java.lang.String)>","<android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>"],"<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>":["<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>"],"<com.android.server.clipboard.ClipboardService: void addActiveOwnerLocked(int,java.lang.String)>":["<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int,int,int,int,int,boolean,int[])>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>":["<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>","<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isInstantApp(java.lang.String,int)>","<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>","<android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: void reconcileSecondaryDexFiles(java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>","<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>","<android.service.dreams.IDreamManager$Stub$Proxy: void testDream(int,android.content.ComponentName)>","<android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>","<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageAvailable(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>","<android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>","<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean getBlockUninstallForUser(java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>","<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>","<android.os.IUserManager$Stub$Proxy: boolean hasUserRestriction(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>","<android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppInactive(java.lang.String,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.os.IUserManager$Stub$Proxy: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getIconMaxDimensions(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killBackgroundProcesses(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>","<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>","<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>","<com.android.internal.app.IAppOpsService$Stub$Proxy: void resetAllModes(int,java.lang.String)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>","<android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>","<android.os.IUserManager$Stub$Proxy: int getUserRestrictionSource(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>","<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>","<android.os.IUserManager$Stub$Proxy: void setUserRestriction(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: int getInstallReason(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>","<android.content.pm.ILauncherApps$Stub$Proxy: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void makePackageIdle(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>","<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void checkPackageStartable(java.lang.String,int)>","<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponentsForUser(int,android.content.ComponentName[])>","<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int stopUser(android.content.ComponentName,android.os.UserHandle)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>","<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>","<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean canRequestPackageInstalls(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSuspendedForUser(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)>","<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>","<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getMaxShortcutCountPerActivity(java.lang.String,int)>","<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>"],"<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>"],"<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>":["<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>"],"<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>":["<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>"],"<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>":["<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.IntentResolver: void addFilter(java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"],"<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>":["<android.os.IDeviceIdleController$Stub$Proxy: int addPowerSaveWhitelistApps(java.util.List)>","<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveWhitelistApp(java.lang.String)>"],"<com.android.server.DropBoxManagerService$DropBoxManagerBroadcastHandler: void maybeDeferBroadcast(java.lang.String,long)>":["<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>"],"<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>":["<android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>"],"<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>":["<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>"],"<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopJobLocked(java.lang.String,long,int)>":["<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobFinish(java.lang.String,int,int)>"],"<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>"],"<com.android.server.am.ActivityManagerService: void requireAllowedAssociationsLocked(java.lang.String)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>":["<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>","<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>"],"<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.AlarmManagerService: void setImplLocked(com.android.server.AlarmManagerService$Alarm,boolean,boolean)>":["<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>"],"<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>":["<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>"],"<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>","<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>"],"<com.android.server.am.ActivityManagerService$PidMap: void doAddInternal(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>":["<android.net.INetworkStatsService$Stub$Proxy: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>"],"<android.content.IntentFilter: void addAction(java.lang.String)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>","<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>","<android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>"],"<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>":["<android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>"],"<com.android.server.content.SyncStorageEngine: java.util.List getCurrentSyncsLocked(int)>":["<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>"],"<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>":["<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>","<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>"],"<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>"],"<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceMap getServiceMapLocked(int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.am.ProcessList: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,int,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>":["<android.app.IActivityTaskManager$Stub$Proxy: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>"],"<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutUser getUserShortcutsLocked(int)>":["<android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>","<android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>","<android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>","<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>","<android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>","<android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>"],"<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserInternalUncheckedNoTracing(java.lang.String,java.lang.String,int,int,boolean,java.lang.String[],com.android.server.utils.TimingsTraceAndSlog)>":["<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>":["<android.os.storage.IStorageManager$Stub$Proxy: void partitionPublic(java.lang.String)>","<android.os.storage.IStorageManager$Stub$Proxy: void partitionPrivate(java.lang.String)>","<android.os.storage.IStorageManager$Stub$Proxy: void partitionMixed(java.lang.String,int)>"],"<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>":["<android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>"],"<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>":["<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>"],"<com.android.server.am.ProcessList: void addProcessNameLocked(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>"],"<android.util.LruCache: java.lang.Object get(java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.am.ProcessList$ImperceptibleKillRunner: boolean enqueueLocked(com.android.server.am.ProcessRecord,java.lang.String,int)>":["<android.app.IActivityManager$Stub$Proxy: void killProcessesWhenImperceptible(int[],java.lang.String)>"],"<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>"],"<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>"],"<com.android.server.am.BroadcastQueue: void enqueueParallelBroadcastLocked(com.android.server.am.BroadcastRecord)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>":["<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>"],"<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>"],"<com.android.server.am.BroadcastStats: void addBroadcast(java.lang.String,java.lang.String,int,int,long)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>","<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>":["<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"],"<com.android.server.print.PrintManagerService$PrintManagerImpl: com.android.server.print.UserState getOrCreateUserStateLocked(int,boolean,boolean)>":["<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>","<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>","<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>","<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>","<android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>","<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>","<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>","<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>"],"<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>"],"<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>":["<android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>","<android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>"],"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>":["<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>","<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>","<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>","<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>"],"<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>":["<android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>"],"<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>":["<android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>","<android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>"],"<com.android.server.usage.AppTimeLimitController: void addAppUsageLimitObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,int)>":["<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>"],"<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$ProcessChangeItem enqueueProcessChangeItemLocked(int,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.appwidget.AppWidgetServiceImpl: void incrementAppWidgetServiceRefCount(int,android.util.Pair)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>"],"<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>":["<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>"],"<com.android.server.appwidget.AppWidgetServiceImpl: void addWidgetLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>"],"<com.android.internal.telephony.TelephonyPermissions: boolean reportAccessDeniedToReadIdentifiers(android.content.Context,int,int,int,java.lang.String,java.lang.String)>":["<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>","<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>","<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>","<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>"],"<com.android.internal.app.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killApplicationProcess(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])>"],"<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)>":["<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"],"<com.android.server.am.ActivityManagerService: void updateProcessForegroundLocked(com.android.server.am.ProcessRecord,boolean,int,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>":["<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>"],"<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>":["<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>"],"<com.android.server.am.ActivityManagerService: com.android.server.am.ContentProviderConnection incProviderCountLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String,java.lang.String,boolean)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>":["<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>"],"<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>","<android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>"],"<com.android.server.statusbar.StatusBarManagerService: void manageDisableListLocked(int,int,android.os.IBinder,java.lang.String,int)>":["<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>","<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>","<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>","<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>","<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>","<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>","<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>","<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>","<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>"],"<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>":["<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>"],"<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.notification.PreferencesHelper: boolean createNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,boolean)>":["<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>","<android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>","<android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>"],"<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>":["<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>","<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>"],"<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>":["<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo)>","<android.permission.IPermissionManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo,boolean)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermissionAsync(android.content.pm.PermissionInfo)>"],"<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>":["<android.content.IContentService$Stub$Proxy: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>"],"<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>":["<android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>"],"<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>":["<android.os.IDeviceIdleController$Stub$Proxy: void restoreSystemPowerWhitelistApp(java.lang.String)>"],"<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>":["<android.view.IWindowManager$Stub$Proxy: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>"],"<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>":["<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>","<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>"],"<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>":["<android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>"],"<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void noteWakeupAlarmLocked(java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>"],"<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>":["<android.net.IIpConnectivityMetrics$Stub$Proxy: int logEvent(android.net.ConnectivityMetricsEvent)>"],"<com.android.server.am.ActivityManagerService: void maybeUpdateProviderUsageStatsLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>"],"<com.android.server.pm.Settings: void writeKernelMappingLPr(java.lang.String,int,int[])>":["<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>","<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>"],"<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>":["<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>"],"<com.android.server.am.ProcessList: android.os.AppZygote createAppZygoteForProcessIfNeeded(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>"],"<com.android.server.am.ActiveServices: void setServiceForegroundInnerLocked(com.android.server.am.ServiceRecord,int,android.app.Notification,int,int)>":["<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>"],"<com.android.server.am.ActiveServices: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,boolean,java.lang.String)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>":["<android.content.pm.IPackageManager$Stub$Proxy: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>"],"<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)>":["<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>"],"<com.android.server.location.LocationRequestStatistics$RequestSummaryLimitedHistory: void addRequestSummary(com.android.server.location.LocationRequestStatistics$RequestSummary)>":["<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>","<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>"],"<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>":["<android.net.INetworkStatsService$Stub$Proxy: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>"],"<com.android.server.am.CachedAppOptimizer: void compactAppBfgs(com.android.server.am.ProcessRecord)>":["<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>","<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>","<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>","<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>","<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>","<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>","<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>","<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>","<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>","<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>","<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>","<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>","<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>","<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>","<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>","<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>","<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>"],"<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>":["<android.permission.IPermissionManager$Stub$Proxy: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>","<android.permission.IPermissionManager$Stub$Proxy: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>"],"<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>":["<android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void clearDefaults(java.lang.String,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDefaults(java.lang.String,int)>","<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>"]}