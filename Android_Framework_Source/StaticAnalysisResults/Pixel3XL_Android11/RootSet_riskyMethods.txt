========================== UnReachableRiskyMethods(1179) ==============================
<com.android.internal.telephony.uicc.UiccPkcs15: void parseAccf(java.lang.String)>
<android.hardware.display.DisplayManagerGlobal: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>
<android.permission.PermissionControllerManager: void <init>(android.content.Context,android.os.Handler)>
<com.android.server.pm.AppsFilter: void addPackageInternal(com.android.server.pm.PackageSetting,android.util.ArrayMap)>
<android.view.RemoteAnimationDefinition: void addRemoteAnimation(int,int,android.view.RemoteAnimationAdapter)>
<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<com.android.server.connectivity.DnsManager: void noteDnsServersForNetwork(int,android.net.LinkProperties)>
<android.app.PropertyInvalidatedCache: void <init>(int,java.lang.String)>
<com.android.server.pm.StagingManager: void createSession(com.android.server.pm.PackageInstallerSession)>
<com.android.server.wm.WallpaperVisibilityListeners: void registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>
<com.android.server.pm.AppsFilter: void updateShouldFilterCacheForPackage(java.lang.String,com.android.server.pm.PackageSetting,android.util.ArrayMap,android.content.pm.UserInfo[],int)>
<com.android.server.wm.LaunchParamsPersister: void addComponentNameToLaunchParamAffinityMapIfNotNull(android.content.ComponentName,java.lang.String)>
<com.android.server.LockGuard: java.lang.Object guard(java.lang.Object)>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Node getNodeForAnimation(android.animation.Animator)>
<android.telecom.Logging.SessionManager: void startExternalSession(android.telecom.Logging.Session$Info,java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.server.DeviceIdleController: boolean addPowerSaveWhitelistExceptIdleInternal(java.lang.String)>
<com.android.server.notification.ShortcutHelper: void maybeListenForShortcutChangesForBubbles(com.android.server.notification.NotificationRecord,boolean,android.os.Handler)>
<com.android.server.wm.WindowProcessController: void addActivityIfNeeded(com.android.server.wm.ActivityRecord)>
<com.android.server.wm.UnknownAppVisibilityController: void notifyRelayouted(com.android.server.wm.ActivityRecord)>
<com.android.server.audio.AudioDeviceInventory: void makeA2dpSrcAvailable(java.lang.String)>
<com.android.server.power.batterysaver.BatterySavingStats: com.android.server.power.batterysaver.BatterySavingStats$Stat getStat(int)>
<com.android.server.wm.PersisterQueue: void addListener(com.android.server.wm.PersisterQueue$Listener)>
<android.telecom.RemoteConnectionManager: void addConnectionService(android.content.ComponentName,com.android.internal.telecom.IConnectionService)>
<android.app.LoaderManagerImpl$LoaderInfo: void onLoadCanceled(android.content.Loader)>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>
<com.android.internal.app.LocaleStore: com.android.internal.app.LocaleStore$LocaleInfo getLocaleInfo(java.util.Locale)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDisallowedApplication(java.lang.String)>
<org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>
<com.android.server.usage.AppTimeLimitController: com.android.server.usage.AppTimeLimitController$UserData getOrCreateUserDataLocked(int)>
<android.os.SystemService$State: void <init>(java.lang.String,int,java.lang.String)>
<com.android.server.pm.PackageInstallerService: int createSessionInternal(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>
<android.app.ContextImpl: android.util.ArrayMap getSharedPreferencesCacheLocked()>
<com.android.internal.telephony.CarrierPrivilegesTracker: void updateCertsForPackage(android.content.pm.PackageInfo)>
<android.provider.DeviceConfig: void incrementNamespace(java.lang.String)>
<android.app.UiAutomation$IAccessibilityServiceClientImpl$1: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.wm.AccessibilityController: void handleWindowObserverOfEmbeddedDisplayLocked(int,com.android.server.wm.WindowState)>
<com.android.server.pm.StagingManager: void prepareForLoggingApexdRevert(com.android.server.pm.PackageInstallerSession,java.lang.String)>
<com.android.server.am.UserController: void stopSingleUserLU(int,boolean,android.app.IStopUserCallback,com.android.server.am.UserState$KeyEvictedCallback)>
<android.filterfw.core.FilterFactory: void addPackage(java.lang.String)>
<com.android.server.connectivity.DnsManager: void sendDnsConfigurationForNetwork(int)>
<com.android.server.wm.InsetsStateController: void onControlFakeTargetChanged(int,com.android.server.wm.InsetsControlTarget)>
<com.android.server.wm.UnknownAppVisibilityController: void notifyAppResumedFinished(com.android.server.wm.ActivityRecord)>
<com.android.server.connectivity.PermissionMonitor: void onVpnUidRangesAdded(java.lang.String,java.util.Set,int)>
<com.android.server.audio.AudioDeviceInventory: void makeA2dpDeviceAvailable(java.lang.String,java.lang.String,java.lang.String,int)>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance(java.util.Locale)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void buildType1EmailList(int)>
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int,long)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onTorchStatusChangedLocked(int,java.lang.String)>
<android.view.ViewRootImpl: void fireAccessibilityFocusEventIfHasFocusedNode()>
<com.android.internal.telephony.metrics.TelephonyMetrics: void finishCallSession(com.android.internal.telephony.metrics.InProgressCallSession)>
<com.android.server.TestNetworkService: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onPhysicalCameraStatusChangedLocked(int,java.lang.String,java.lang.String)>
<com.android.server.usage.UsageStatsService: void onStopUser(android.content.pm.UserInfo)>
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage createStorage(java.lang.String,android.content.pm.DataLoaderParams,int,boolean,android.content.pm.IDataLoaderStatusListener,android.os.incremental.StorageHealthCheckParams,android.os.incremental.IStorageHealthListener)>
<com.android.server.pm.Settings: void readRestoredIntentFilterVerifications(org.xmlpull.v1.XmlPullParser)>
<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworksServiceCallback: void onQualifiedNetworkTypesChanged(int,int[])>
<android.animation.LayoutTransition: void runDisappearingTransition(android.view.ViewGroup,android.view.View)>
<com.android.server.am.AssistDataRequester: void requestData(java.util.List,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)>
<com.android.server.wm.WindowState: void onExitAnimationDone()>
<com.android.server.firewall.IntentFirewall$FirewallIntentResolver: void addComponentFilter(android.content.ComponentName,com.android.server.firewall.IntentFirewall$Rule)>
<android.app.LoadedApk: android.app.Application makeApplication(boolean,android.app.Instrumentation)>
<android.hardware.camera2.marshal.MarshalRegistry: void registerMarshalQueryable(android.hardware.camera2.marshal.MarshalQueryable)>
<android.app.FragmentTransition: android.util.ArrayMap captureOutSharedElements(android.util.ArrayMap,android.transition.TransitionSet,android.app.FragmentTransition$FragmentContainerTransition)>
<com.android.server.voiceinteraction.DatabaseHelper$SoundModelRecord: long writeToDatabase(int,android.database.sqlite.SQLiteDatabase)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityDisplayListener: void onDisplayAdded(int)>
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage createStorage(java.lang.String,android.os.incremental.IncrementalStorage,int)>
<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>
<com.android.server.media.MediaRouterService$UserHandler$ProviderRecord: void appendClientState(android.media.MediaRouterClientState)>
<android.app.DexLoadReporter: void registerAppDataDir(java.lang.String,java.lang.String)>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.app.admin.SystemUpdatePolicy: android.app.admin.SystemUpdatePolicy restoreFromXml(org.xmlpull.v1.XmlPullParser)>
<com.android.server.StorageManagerService$StorageManagerInternalImpl: void addExternalStoragePolicy(android.os.storage.StorageManagerInternal$ExternalStorageMountPolicy)>
<com.android.internal.telephony.LocalLog: void append(java.lang.String)>
<com.android.server.SystemConfig: void addFeature(java.lang.String,int)>
<android.hardware.SystemSensorManager: void registerDynamicSensorCallbackImpl(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>
<com.android.server.SystemConfig: void readSplitPermission(org.xmlpull.v1.XmlPullParser,java.io.File)>
<com.android.internal.os.FuseAppLoop$BytesMap: byte[] startUsing(long)>
<com.android.server.notification.NotificationManagerService: void sendAccessibilityEvent(android.app.Notification,java.lang.CharSequence)>
<com.android.server.statusbar.StatusBarManagerService: com.android.server.statusbar.StatusBarManagerService$UiState getUiState(int)>
<android.media.audiopolicy.AudioVolumeGroupChangeHandler: void registerListener(android.media.AudioManager$VolumeGroupCallback)>
<com.android.server.wm.WindowToken$FixedRotationTransformState: void transform(com.android.server.wm.WindowContainer)>
<com.android.server.accessibility.AccessibilityManagerService: void announceNewUserIfNeeded()>
<android.app.AppOpsManager: void startWatchingStarted(int[],android.app.AppOpsManager$OnOpStartedListener)>
<com.android.server.AlarmManagerService: void deliverPendingBackgroundAlarmsLocked(java.util.ArrayList,long)>
<android.view.inputmethod.InputConnectionInspector: int getMissingMethodFlagsInternal(java.lang.Class)>
<android.app.NotificationHistory: void addNotificationToWrite(android.app.NotificationHistory$HistoricalNotification)>
<com.android.server.pm.PackageSettingBase: boolean disableComponentLPw(java.lang.String,int)>
<android.view.ViewRootImpl: void registerAnimatingRenderNode(android.graphics.RenderNode)>
<com.android.internal.telephony.CarrierServiceBindHelper: void updateForPhoneId(int,java.lang.String)>
<com.android.server.StorageManagerService: void addObbStateLocked(com.android.server.StorageManagerService$ObbState)>
<android.widget.AbsListView$RecycleBin: void addScrapView(android.view.View,int)>
<com.android.server.connectivity.Vpn$IkeV2VpnRunner: void onSessionLost(android.net.Network)>
<android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int,boolean)>
<com.android.framework.protobuf.LazyStringArrayList: void mergeFrom(com.android.framework.protobuf.LazyStringList)>
<android.view.ViewPropertyAnimator: void startAnimation()>
<com.android.server.DropBoxManagerService: void addLowPriorityTag(java.lang.String)>
<com.android.server.usb.UsbPortManager: void logToStatsd(com.android.server.usb.UsbPortManager$PortInfo,com.android.internal.util.IndentingPrintWriter)>
<com.android.server.display.color.AppSaturationController: android.util.SparseArray getOrCreateUserIdMapLocked(java.lang.String)>
<com.android.server.am.BroadcastDispatcher$1: void broadcastAlarmPending(int)>
<com.android.server.display.DisplayModeDirector$AppRequestObserver: void setAppRequestedModeLocked(int,int)>
<com.android.server.wm.ActivityTaskManagerService$LocalService: void registerScreenObserver(com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver)>
<com.android.server.wm.ActivityRecord: void onRemovedFromDisplay()>
<android.media.AudioManager: void addOnPreferredDeviceForStrategyChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnPreferredDeviceForStrategyChangedListener)>
<com.android.server.wm.ActivityTaskManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>
<com.android.server.uri.UriPermissionOwner: void addReadPermission(com.android.server.uri.UriPermission)>
<com.android.server.connectivity.NetworkNotificationManager$NotificationType: void <init>(java.lang.String,int,int)>
<android.view.autofill.AutofillManager: void setTrackedViews(int,android.view.autofill.AutofillId[],boolean,boolean,android.view.autofill.AutofillId[],android.view.autofill.AutofillId)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeRilDataCallEvent(int,int,int,int)>
<android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] getCapturedViewProperties(java.lang.Class)>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<com.android.server.wm.RecentsAnimationController: com.android.server.wm.AnimationAdapter addAnimation(com.android.server.wm.Task,boolean,boolean,com.android.server.wm.SurfaceAnimator$OnAnimationFinishedCallback)>
<com.android.server.wm.ActivityStack: void setWindowingModeInSurfaceTransaction(int,boolean)>
<com.android.server.pm.ComponentResolver: void adjustPriority(java.util.List,android.content.pm.parsing.component.ParsedActivity,android.content.pm.parsing.component.ParsedIntentInfo,java.lang.String)>
<com.android.framework.protobuf.SmallSortedMap: java.lang.Object put(java.lang.Comparable,java.lang.Object)>
<android.telecom.Connection: android.telecom.Connection addConnectionListener(android.telecom.Connection$Listener)>
<com.android.server.soundtrigger.SoundTriggerLogger: void log(com.android.server.soundtrigger.SoundTriggerLogger$Event)>
<android.app.trust.TrustManager: void registerTrustListener(android.app.trust.TrustManager$TrustListener)>
<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<com.android.server.TelephonyRegistry: void onMultiSimConfigChanged()>
<android.widget.ActivityChooserModel: android.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.qualcomm.qcrilhook.EmbmsOemHook: int activateTmgi(int,byte,byte[],int,int[],int[],android.os.Message,int)>
<android.view.ViewPropertyAnimator: void animatePropertyBy(int,float,float)>
<android.media.MediaFile: void addFileType(int,java.lang.String)>
<com.android.internal.telephony.metrics.VoiceCallSessionStats: void addCall(com.android.internal.telephony.Connection)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata addIntlNumberFormat(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>
<com.android.server.pm.Settings$RuntimePermissionPersistence: void updateRuntimePermissionsFingerprintLPr(int)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void connectCameraServiceLocked()>
<com.android.server.connectivity.Vpn$IkeV2VpnRunner: void onChildOpened(android.net.Network,android.net.ipsec.ike.ChildSessionConfiguration)>
<com.android.server.wm.AnimatingActivityRegistry: void notifyStarting(com.android.server.wm.ActivityRecord)>
<android.view.InsetsController: android.view.InsetsSourceConsumer getSourceConsumer(int)>
<com.android.internal.app.procstats.ProcessStats: void readFromParcel(android.os.Parcel)>
<com.android.server.SystemConfig: void readInstallInUserType(org.xmlpull.v1.XmlPullParser,java.util.Map,java.util.Map)>
<com.android.server.wm.InsetsStateController: void onControlChanged(int,com.android.server.wm.InsetsControlTarget)>
<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>
<com.android.server.hdmi.HdmiControlService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>
<android.transition.Transition: void addUnmatched(android.util.ArrayMap,android.util.ArrayMap)>
<com.android.server.connectivity.DefaultNetworkMetrics: void flushEvents(java.util.List)>
<com.android.server.inputmethod.InputMethodManagerService$LocalServiceImpl: void registerInputMethodListListener(com.android.server.inputmethod.InputMethodManagerInternal$InputMethodListListener)>
<android.transition.TransitionSet: void addTransitionInternal(android.transition.Transition)>
<android.bluetooth.le.BluetoothLeAdvertiser$2$1: void run()>
<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>
<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>
<com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor: void accept(com.android.server.job.controllers.JobStatus)>
<android.media.MediaRouter2Manager: void registerCallback(java.util.concurrent.Executor,android.media.MediaRouter2Manager$Callback)>
<com.android.server.AlarmManagerService$InFlight: void <init>(com.android.server.AlarmManagerService,com.android.server.AlarmManagerService$Alarm,long)>
<android.app.Activity: void restoreManagedDialogs(android.os.Bundle)>
<com.android.server.NsdService$NsdStateMachine$DefaultState: boolean processMessage(android.os.Message)>
<android.telecom.RemoteConference: void addConnection(android.telecom.RemoteConnection)>
<com.android.internal.telephony.PhoneSwitcher: void onRequestNetwork(android.net.NetworkRequest)>
<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ServiceState getServiceStateLocked(java.lang.String,int,long,java.lang.String,java.lang.String)>
<com.android.server.AlarmManagerService$DeliveryTracker: void deliverLocked(com.android.server.AlarmManagerService$Alarm,long,boolean)>
<com.android.server.notification.NotificationManagerService: void addEnqueuedNotification(com.android.server.notification.NotificationRecord)>
<android.app.WallpaperManager$Globals: void addOnColorsChangedListener(android.app.WallpaperManager$OnColorsChangedListener,android.os.Handler,int,int)>
<com.android.internal.os.KernelSingleUidTimeReader: void setAllUidsCpuTimesMs(android.util.SparseArray)>
<com.android.server.storage.StorageSessionController: void onVolumeMount(android.os.ParcelFileDescriptor,android.os.storage.VolumeInfo)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void readExcessivePowerFromParcelLocked(android.os.Parcel)>
<com.android.server.wm.TaskSnapshotController: void addSkipClosingAppSnapshotTasks(android.util.ArraySet)>
<com.android.internal.util.MimeIconUtils: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>
<com.android.server.vr.VrManagerService$NotificationAccessManager: void update(java.util.Collection)>
<com.android.server.display.BrightnessTracker: void recordSensorEvent(android.hardware.SensorEvent)>
<com.android.server.accessibility.AccessibilityManagerService: void restoreEnabledAccessibilityServicesLocked(java.lang.String,java.lang.String)>
<com.android.server.power.PowerManagerService: void updateUidProcStateInternal(int,int)>
<com.android.server.wm.RemoteAnimationController: com.android.server.wm.RemoteAnimationController$RemoteAnimationRecord createRemoteAnimationRecord(com.android.server.wm.WindowContainer,android.graphics.Point,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<com.android.server.notification.ZenModeHelper: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule,java.lang.String)>
<com.android.server.wm.WindowContainer: void getParents(java.util.LinkedList)>
<com.android.internal.telephony.phonenumbers.prefixmapper.MappingFileProvider: void readExternal(java.io.ObjectInput)>
<com.android.server.wm.EmbeddedWindowController: void add(android.os.IBinder,com.android.server.wm.EmbeddedWindowController$EmbeddedWindow)>
<com.android.server.am.ActivityManagerService: void dispatchUidsChanged()>
<com.android.server.slice.SlicePermissionManager$H: void handleMessage(android.os.Message)>
<com.android.server.pm.BackgroundDexOptService: void addPackagesUpdatedListener(com.android.server.pm.BackgroundDexOptService$PackagesUpdatedListener)>
<com.android.server.usb.UsbHostManager: boolean usbDeviceAdded(java.lang.String,int,int,byte[])>
<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<com.android.server.wm.ActivityStarter: int waitForResult(int,com.android.server.wm.ActivityRecord)>
<android.view.AccessibilityInteractionController$AddNodeInfosForViewId: boolean test(android.view.View)>
<android.telecom.Logging.EventManager: void registerEventListener(android.telecom.Logging.EventManager$EventListener)>
<com.android.server.blob.BlobStoreManagerService: android.util.ArrayMap getUserBlobsLocked(int)>
<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>
<com.android.server.usage.AppTimeLimitController: com.android.server.usage.AppTimeLimitController$ObserverAppData getOrCreateObserverAppDataLocked(int)>
<com.android.internal.app.procstats.ProcessStats: void writeCommonString(android.os.Parcel,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getScreenOffRpmTimerLocked(java.lang.String)>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance(java.util.Locale)>
<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openInputPort(android.os.IBinder,int)>
<com.android.server.job.controllers.BatteryController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>
<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
<com.android.server.power.batterysaver.FileUpdater: boolean ensureDefaultLoaded(java.lang.String)>
<android.widget.AbsListView$RecycleBin: void scrapActiveViews()>
<com.android.server.AlarmManagerService: void updateNextAlarmInfoForUserLocked(int,android.app.AlarmManager$AlarmClockInfo)>
<com.android.server.StorageManagerService: void onVolumeStateChangedAsync(android.os.storage.VolumeInfo,int,int)>
<com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: void put(android.os.IBinder,com.android.internal.inputmethod.InputMethodPrivilegedOperations)>
<com.android.server.blob.BlobStoreManagerService: void addUserSessionsForTest(android.util.LongSparseArray,int)>
<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)>
<com.android.server.ConnectivityService: void handleRegisterConnectivityDiagnosticsCallback(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addSearchDomain(java.lang.String)>
<com.android.server.notification.SnoozeHelper: void storeRecordLocked(java.lang.String,java.lang.String,java.lang.Integer,android.util.ArrayMap,java.lang.Object)>
<com.android.server.wm.Task: boolean reparent(com.android.server.wm.ActivityStack,int,int,boolean,boolean,boolean,java.lang.String)>
<com.android.internal.telephony.protobuf.nano.FieldData: void addUnknownField(com.android.internal.telephony.protobuf.nano.UnknownFieldData)>
<com.android.server.pm.ComponentResolver$ServiceIntentResolver: void addService(android.content.pm.parsing.component.ParsedService)>
<com.android.internal.app.procstats.ProcessStats: void add(com.android.internal.app.procstats.ProcessStats)>
<android.telephony.TelephonyScanManager: void saveScanInfo(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>
<com.android.server.notification.NotificationManagerService: void addDisabledHint(com.android.server.notification.ManagedServices$ManagedServiceInfo,int)>
<com.android.server.inputmethod.AdditionalSubtypeUtils: void load(android.util.ArrayMap,int)>
<com.android.server.audio.AudioService: void initVolumeGroupStates()>
<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
<com.android.server.wm.WindowProcessController: void addRecentTask(com.android.server.wm.Task)>
<android.util.LocalLog: void append(java.lang.String)>
<android.content.UndoManager: void restoreInstanceState(android.os.Parcel,java.lang.ClassLoader)>
<com.android.internal.telephony.cat.IconLoader: void handleMessage(android.os.Message)>
<com.android.server.audio.BtHelper: com.android.server.audio.BtHelper$ScoClient getScoClient(android.os.IBinder,boolean)>
<android.telecom.ConnectionService: void addConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.Connection)>
<android.app.QueuedWork: void addFinisher(java.lang.Runnable)>
<com.android.server.appwidget.AppWidgetServiceImpl$BackupRestoreController: void pruneWidgetStateLocked(java.lang.String,int)>
<com.android.server.ethernet.EthernetNetworkFactory: void addInterface(java.lang.String,java.lang.String,android.net.NetworkCapabilities,android.net.IpConfiguration)>
<com.android.server.wm.DisplayContent: void lambda$new$8$DisplayContent(com.android.server.wm.WindowState)>
<com.android.server.notification.GroupHelper: void addToOngoingGroupCount(android.service.notification.StatusBarNotification,boolean)>
<com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>
<android.app.ActivityThread: android.app.ContentProviderHolder installProvider(android.content.Context,android.app.ContentProviderHolder,android.content.pm.ProviderInfo,boolean,boolean,boolean)>
<com.android.server.job.controllers.QuotaController: void saveTimingSession(int,java.lang.String,com.android.server.job.controllers.QuotaController$TimingSession)>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,android.bluetooth.le.AdvertisingSetCallback,android.os.Handler)>
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcherCommon(android.content.ServiceConnection,android.content.Context,android.os.Handler,java.util.concurrent.Executor,int)>
<com.android.server.notification.NotificationManagerService$Archive: void record(android.service.notification.StatusBarNotification,int)>
<android.util.EventLog: void readTagsFile()>
<com.android.server.audio.SoundEffectsHelper: void loadTouchSoundAssetDefaults()>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<com.android.server.am.ActiveServices: void setWhiteListAllowWhileInUsePermissionInFgs()>
<com.android.server.pm.Settings: void replaceAppIdLPw(int,com.android.server.pm.SettingBase)>
<com.android.server.notification.NotificationManagerService: void createAutoGroupSummary(int,java.lang.String,java.lang.String)>
<com.android.server.wm.WindowProcessControllerMap: void put(int,com.android.server.wm.WindowProcessController)>
<android.view.ViewOverlay$OverlayViewGroup: void add(android.graphics.drawable.Drawable)>
<com.android.server.uri.UriPermissionOwner: void addWritePermission(com.android.server.uri.UriPermission)>
<android.view.autofill.AutofillManager: void notifyDisableAutofill(long,android.content.ComponentName)>
<com.android.server.am.AssistDataRequester: void onHandleAssistScreenshot(android.graphics.Bitmap)>
<com.android.server.content.SyncStorageEngine: long insertStartSyncEvent(com.android.server.content.SyncOperation,long)>
<android.hardware.display.DisplayManager: void addPresentationDisplaysLocked(java.util.ArrayList,int[],int)>
<com.android.server.RescueParty$RescuePartyObserver: void recordDeviceConfigAccess(java.lang.String,java.lang.String)>
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo)>
<com.android.internal.telephony.dataconnection.DcNetworkAgent: void checkDuplicateInterface(java.lang.String)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchDescendantsOfVirtualNode(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeProvider,java.util.List)>
<android.app.ActivityThread: void handleRequestAssistContextExtras(android.app.ActivityThread$RequestAssistContextExtras)>
<com.android.server.notification.NotificationManagerService$NotificationListeners: void setOnNotificationPostedTrimLocked(com.android.server.notification.ManagedServices$ManagedServiceInfo,int)>
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean,int)>
<com.android.server.display.DisplayModeDirector$DisplayObserver: void observe()>
<com.android.server.DeviceIdleController: void registerDeviceIdleConstraintInternal(com.android.server.deviceidle.IDeviceIdleConstraint,java.lang.String,int)>
<com.android.server.wm.DisplayWindowSettings: void readDisplay(org.xmlpull.v1.XmlPullParser)>
<com.android.server.job.controllers.StorageController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>
<android.animation.PropertyValuesHolder$MultiFloatValuesHolder: void setupSetter(java.lang.Class)>
<com.android.server.accessibility.FingerprintGestureDispatcher: void updateClientList(java.util.List)>
<com.android.server.inputmethod.InputMethodManagerService: void queryInputMethodServicesInternal(android.content.Context,int,android.util.ArrayMap,android.util.ArrayMap,java.util.ArrayList)>
<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void postProcess()>
<com.android.server.wm.WindowToken: void linkFixedRotationTransform(com.android.server.wm.WindowToken)>
<android.view.contentcapture.ContentCaptureManager$LocalDataShareAdapterResourceManager: void initializeForDelegate(android.view.contentcapture.ContentCaptureManager$DataShareAdapterDelegate,android.view.contentcapture.DataShareWriteAdapter,java.util.concurrent.Executor)>
<com.android.server.power.ShutdownThread: void metricShutdownStart()>
<com.android.server.rollback.RollbackManagerServiceImpl: com.android.server.rollback.Rollback createNewRollbackLocked(android.content.pm.PackageInstaller$SessionInfo)>
<com.android.commands.monkey.MonkeyUtils$PackageFilter: void addInvalidPackages(java.util.Set)>
<com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<com.android.phone.ecc.nano.FieldData: void addUnknownField(com.android.phone.ecc.nano.UnknownFieldData)>
<android.animation.AnimatorSet: void handleAnimationEvents(int,int,long)>
<com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.nano.TelephonyProto$SmsSession finishSmsSession(com.android.internal.telephony.metrics.InProgressSmsSession)>
<android.hardware.display.DisplayManager: void addAllDisplaysLocked(java.util.ArrayList,int[])>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityUserState getUserStateLocked(int)>
<android.transition.TransitionInflater: java.lang.Object createCustom(android.util.AttributeSet,java.lang.Class,java.lang.String)>
<com.android.server.audio.PlaybackActivityMonitor$DuckingManager: void duckUid(int,java.util.ArrayList)>
<android.view.View: void setScrollContainer(boolean)>
<com.android.internal.telephony.uicc.UiccController: void addCardId(java.lang.String)>
<com.android.server.wm.AccessibilityController: boolean setWindowsForAccessibilityCallbackLocked(int,com.android.server.wm.WindowManagerInternal$WindowsForAccessibilityCallback)>
<com.android.server.appop.AppOpsService$4: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.wm.LaunchParamsPersister: void saveTask(com.android.server.wm.Task,com.android.server.wm.DisplayContent)>
<android.content.UndoManager: android.content.UndoOwner restoreOwner(android.os.Parcel)>
<com.android.server.pm.permission.PermissionManagerService: void addOnRuntimePermissionStateChangedListener(android.permission.PermissionManagerInternal$OnRuntimePermissionStateChangedListener)>
<android.media.tv.TvInputManager: void registerCallback(android.media.tv.TvInputManager$TvInputCallback,android.os.Handler)>
<com.android.server.notification.NotificationHistoryManager: void disableHistory(com.android.server.notification.NotificationHistoryDatabase,int)>
<android.os.StrictMode: void incrementExpectedActivityCount(java.lang.Class)>
<com.android.server.wm.WindowManagerService$LocalService: void waitForAllWindowsDrawn(java.lang.Runnable,long,int)>
<com.android.server.wm.RootWindowContainer: com.android.server.wm.ActivityTaskManagerInternal$SleepToken createSleepToken(java.lang.String,int)>
<android.transition.Transition: void addViewValues(android.transition.TransitionValuesMaps,android.view.View,android.transition.TransitionValues)>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getActivityState(android.app.Activity)>
<com.android.server.notification.NotificationHistoryManager: void onUserRemoved(int)>
<android.view.inputmethod.InputMethodManager: int sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager$PendingEvent)>
<com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents: void parseComponent(org.xmlpull.v1.XmlPullParser)>
<android.nfc.dta.NfcDta: android.nfc.dta.NfcDta getInstance(android.nfc.NfcAdapter)>
<com.android.server.pm.ModuleInfoProvider: void loadModuleMetadata(android.content.res.XmlResourceParser,android.content.res.Resources)>
<com.android.server.wm.UnknownAppVisibilityController: void notifyLaunched(com.android.server.wm.ActivityRecord)>
<com.android.server.StorageManagerService$StorageManagerInternalImpl: void addResetListener(android.os.storage.StorageManagerInternal$ResetListener)>
<com.android.server.contentcapture.ContentCaptureManagerService$DataShareCallbackDelegate: void accept(android.service.contentcapture.IDataShareReadAdapter)>
<com.android.framework.protobuf.GeneratedMessageLite: com.android.framework.protobuf.GeneratedMessageLite getDefaultInstance(java.lang.Class)>
<android.telecom.Logging.SessionManager: void continueSession(android.telecom.Logging.Session,java.lang.String)>
<com.android.server.wm.HighRefreshRateBlacklist: void updateBlacklist(java.lang.String)>
<com.android.internal.telephony.uicc.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)>
<com.android.server.pm.PackageSettingBase: void addEnabledComponent(java.lang.String,int)>
<android.app.servertransaction.ObjectPool: void recycle(android.app.servertransaction.ObjectPoolItem)>
<android.app.BackStackRecord: android.app.Fragment expandOps(java.util.ArrayList,android.app.Fragment)>
<android.app.FragmentManagerImpl: void addFragment(android.app.Fragment,boolean)>
<android.media.MediaRouter: void addRouteStatic(android.media.MediaRouter$RouteInfo)>
<com.android.server.pm.PackageManagerService: void commitPackageSettings(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int,boolean,com.android.server.pm.PackageManagerService$ReconciledPackage)>
<android.view.WindowManagerGlobal: void removeViewLocked(int,boolean)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void add(int,com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry)>
<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long,android.content.pm.ApplicationInfo)>
<android.app.NotificationHistory: void addPooledStrings(java.util.List)>
<com.android.commands.monkey.MonkeyPowerEvent: void bufferLogEvent(java.lang.String,java.lang.String)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>
<com.android.server.wm.ActivityTaskManagerService: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo findOrCreateVersion(java.lang.String)>
<com.android.server.biometrics.fingerprint.FingerprintUtils: com.android.server.biometrics.fingerprint.FingerprintUserState getStateForUser(android.content.Context,int)>
<android.nfc.NfcActivityManager: void registerApplication(android.app.Application)>
<com.android.server.protolog.ProtoLogImpl: void addLogGroupEnum(com.android.server.protolog.common.IProtoLogGroup[])>
<com.android.server.display.AmbientBrightnessStatsTracker$AmbientBrightnessStats: java.util.Deque getOrCreateUserStats(java.util.Map,int)>
<com.android.server.lights.LightsService: void populateAvailableLightsFromHidl(android.content.Context)>
<com.android.server.wm.AppWarnings: void readConfigFromFileAmsThread()>
<com.android.server.wm.WindowState: void updateTapExcludeRegion(android.graphics.Region)>
<android.graphics.drawable.DrawableInflater: android.graphics.drawable.Drawable inflateFromClass(java.lang.String)>
<com.android.server.wm.WindowManagerService: void registerAppFreezeListener(com.android.server.wm.WindowManagerService$AppFreezeListener)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>
<com.android.server.connectivity.TcpKeepaliveController: void startSocketMonitor(java.io.FileDescriptor,com.android.server.connectivity.KeepaliveTracker$KeepaliveInfo,int)>
<com.android.server.slice.SlicePermissionManager: void addDirtyImmediate(com.android.server.slice.DirtyTracker$Persistable)>
<com.android.internal.telephony.SettingsObserver: void observe(android.net.Uri,int)>
<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<com.android.server.display.WifiDisplayController$7: void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)>
<android.graphics.Paint: void syncTextLocalesWithMinikin()>
<com.android.server.location.NanoAppStateManager: void handleQueryAppEntry(int,long,int)>
<android.os.PowerManager: void addThermalStatusListener(java.util.concurrent.Executor,android.os.PowerManager$OnThermalStatusChangedListener)>
<com.android.internal.util.LocalLog: void w(java.lang.String)>
<android.net.NetworkCapabilities: void combineUids(android.net.NetworkCapabilities)>
<android.media.MediaRouter2: void syncRoutesOnHandler(java.util.List,android.media.RoutingSessionInfo)>
<com.android.server.media.MediaSessionRecord$ControllerStub: void registerCallback(java.lang.String,android.media.session.ISessionControllerCallback)>
<com.android.internal.os.BinderInternal: void addGcWatcher(java.lang.Runnable)>
<com.android.server.role.RoleManagerService: android.os.RemoteCallbackList getOrCreateListeners(int)>
<com.android.server.wm.WindowProcessController: void addHostActivity(com.android.server.wm.ActivityRecord)>
<android.app.ApplicationPackageManager: void putCachedString(android.app.ApplicationPackageManager$ResourceName,java.lang.CharSequence)>
<com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor: void postProcess()>
<com.android.server.wm.DisplayContent: void lambda$new$4$DisplayContent(com.android.server.wm.WindowState)>
<com.android.internal.telephony.SmsUsageMonitor: void loadPremiumSmsPolicyDb()>
<com.android.server.SystemServiceManager: com.android.server.SystemService startServiceFromJar(java.lang.String,java.lang.String)>
<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutNonPersistentUser getNonPersistentUserLocked(int)>
<android.animation.LayoutTransition$2: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<com.android.server.am.ActivityManagerService: void dispatchProcessesChanged()>
<android.animation.AnimatorSet: android.animation.AnimatorSet clone()>
<com.android.server.pm.ComponentResolver$ActivityIntentResolver: void addActivity(android.content.pm.parsing.component.ParsedActivity,java.lang.String,java.util.List)>
<android.app.ActivityThread: android.app.ActivityThread$ProviderClientRecord installProviderAuthoritiesLocked(android.content.IContentProvider,android.content.ContentProvider,android.app.ContentProviderHolder)>
<com.android.server.accessibility.AccessibilityManagerService: void readColonDelimitedStringToSet(java.lang.String,java.util.Set,boolean,java.util.function.Function)>
<com.android.server.utils.quota.CountQuotaTracker: void setCountLimit(com.android.server.utils.quota.Category,int,long)>
<com.android.server.am.PendingStartActivityUids: void add(int,int)>
<com.android.omadm.radioconfig.OemRilItemsFactory: void putItemsToMap(com.android.omadm.radioconfig.items.OemRilConfigItems)>
<android.view.ViewRootImpl: boolean requestLayoutDuringLayout(android.view.View)>
<android.os.RegistrantList: void add(android.os.Registrant)>
<android.view.accessibility.AccessibilityNodeInfo: void init(android.view.accessibility.AccessibilityNodeInfo,boolean)>
<com.android.internal.telephony.RadioConfig: com.android.internal.telephony.RILRequest obtainRequest(int,android.os.Message,android.os.WorkSource)>
<com.android.server.wm.DragState: void sendDragStartedLocked(com.android.server.wm.WindowState,float,float,android.content.ClipDescription)>
<com.android.internal.telephony.CallManager: void registerForPhoneStates(com.android.internal.telephony.Phone)>
<com.android.server.am.AssistDataRequester: void onHandleAssistData(android.os.Bundle)>
<android.provider.Settings$NameValueCache: android.util.ArrayMap getStringsForPrefix(android.content.ContentResolver,java.lang.String,java.util.List)>
<android.telecom.RemoteConference: void registerCallback(android.telecom.RemoteConference$Callback,android.os.Handler)>
<com.android.server.SystemServer: boolean handleEarlySystemWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
<android.app.AppOpsManager: void startWatchingActive(java.lang.String[],java.util.concurrent.Executor,android.app.AppOpsManager$OnOpActiveChangedListener)>
<com.android.server.connectivity.DefaultNetworkMetrics: void logCurrentDefaultNetwork(long,com.android.server.connectivity.NetworkAgentInfo)>
<com.android.server.wm.DisplayContent: android.view.SurfaceControl addShellRoot(android.view.IWindow,int)>
<com.android.server.usb.UsbAlsaManager: void usbDeviceAdded(java.lang.String,android.hardware.usb.UsbDevice,com.android.server.usb.descriptors.UsbDescriptorParser)>
<com.android.server.wm.WindowState: void updateResizingWindowIfNeeded()>
<android.view.accessibility.AccessibilityCache: android.util.SparseArray getWindowsOnAllDisplays()>
<com.android.server.pm.Settings: void addPackageSettingLPw(com.android.server.pm.PackageSetting,com.android.server.pm.SharedUserSetting)>
<com.android.server.Watchdog: void addThread(android.os.Handler,long)>
<com.android.server.am.ProcessRecord: void addAllowBackgroundActivityStartsToken(android.os.Binder)>
<com.android.server.notification.ManagedServices$UserProfiles: void updateCache(android.content.Context)>
<android.app.FragmentManagerImpl: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRootOfTrustEntryExists(int,int,java.lang.String)>
<com.android.server.pm.permission.PermissionSettings: void putPermissionTreeLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>
<com.android.server.location.LocationManagerService: void initializeGnss()>
<android.hardware.input.InputManager: void registerOnTabletModeChangedListener(android.hardware.input.InputManager$OnTabletModeChangedListener,android.os.Handler)>
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService$UserData readUserLP(int,java.io.InputStream)>
<com.android.server.wm.TaskPersister: android.util.SparseBooleanArray loadPersistedTaskIdsForUser(int)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
<android.telecom.ConnectionService: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean)>
<android.content.UndoManager: int undo(android.content.UndoOwner[],int)>
<com.android.server.content.SyncStorageEngine: void readStatusInfoLocked(java.io.InputStream)>
<com.android.server.power.batterysaver.BatterySaverController: void addListener(android.os.PowerManagerInternal$LowPowerModeListener)>
<com.android.server.display.DisplayManagerService: void registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)>
<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>
<com.android.server.audio.RecordingActivityMonitor: int trackRecorder(android.os.IBinder)>
<org.ccil.cowan.tagsoup.Schema: void entity(java.lang.String,int)>
<com.android.internal.os.PowerProfile: void readPowerValuesFromXml(android.content.Context,boolean)>
<com.android.server.pm.dex.DexManager: java.lang.Object putIfAbsent(java.util.Map,java.lang.Object,java.lang.Object)>
<com.android.server.hdmi.HdmiControlService: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>
<com.android.server.wm.ActivityRecord: void makeVisibleIfNeeded(com.android.server.wm.ActivityRecord,boolean)>
<android.media.MediaRouter2: void registerTransferCallback(java.util.concurrent.Executor,android.media.MediaRouter2$TransferCallback)>
<android.view.GestureExclusionTracker: void updateRectsForView(android.view.View)>
<com.android.internal.os.BatteryStatsImpl: void updateKernelWakelocksLocked()>
<com.android.server.StorageManagerService$4: void onDiskCreated(java.lang.String,int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeServiceStateChanged(int,android.telephony.ServiceState)>
<android.view.ViewRootImpl$UnhandledKeyManager: boolean dispatch(android.view.View,android.view.KeyEvent)>
<com.android.server.pm.Settings: void readPackageLPw(org.xmlpull.v1.XmlPullParser)>
<android.bluetooth.BluetoothAdapter: boolean addOnMetadataChangedListener(android.bluetooth.BluetoothDevice,java.util.concurrent.Executor,android.bluetooth.BluetoothAdapter$OnMetadataChangedListener)>
<com.android.internal.telephony.RegistrantList: void add(com.android.internal.telephony.Registrant)>
<android.view.accessibility.WeakSparseArray: void append(int,java.lang.Object)>
<com.android.server.DeviceIdleController: void resetSystemPowerWhitelistInternal()>
<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata addIntlNumberFormat(com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat)>
<com.android.internal.telephony.SubscriptionController$WatchedSlotIndexToSubIds: void put(int,java.util.ArrayList)>
<android.test.SimpleCache: java.lang.Object get(java.lang.Object)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchSiblingsOfRealNode(android.view.View,java.util.List)>
<com.android.framework.protobuf.Protobuf: com.android.framework.protobuf.Schema registerSchemaOverride(java.lang.Class,com.android.framework.protobuf.Schema)>
<android.media.AudioPortEventHandler: void registerListener(android.media.AudioManager$OnAudioPortUpdateListener)>
<android.webkit.UrlInterceptRegistry: boolean registerHandler(android.webkit.UrlInterceptHandler)>
<com.android.server.om.OverlayReferenceMapper: void rebuild()>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRecoveryServiceMetadataEntryExists(int,int)>
<com.android.server.DeviceIdleController: void onStart()>
<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: void loadPhonePrefixMapFromFile(java.lang.String)>
<com.android.server.contentcapture.ContentCaptureManagerService$GlobalContentCaptureOptions: void setServiceInfo(int,java.lang.String,boolean)>
<android.telecom.Logging.SessionManager: void endSession()>
<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>
<com.android.server.power.ThermalManagerService$TemperatureWatcher: void updateSevereThresholds()>
<android.animation.AnimatorSet: void findSiblings(android.animation.AnimatorSet$Node,java.util.ArrayList)>
<com.android.internal.os.FuseAppLoop: void recycleLocked(com.android.internal.os.FuseAppLoop$Args)>
<android.media.MediaRouter2: void requestCreateController(android.media.MediaRouter2$RoutingController,android.media.MediaRoute2Info,long)>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance(java.util.Locale)>
<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>
<com.android.server.wm.WindowManagerService: void addWindowChangeListener(com.android.server.wm.WindowManagerService$WindowChangeListener)>
<com.android.server.wm.DisplayPolicy: void addWindowLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams)>
<android.app.ActivityThread: android.util.ArrayMap getBackupAgentsForUser(int)>
<com.android.internal.telephony.TelephonyTester: void handleTestDialogEventPackageIntent(android.content.Intent)>
<android.view.InputDevice: void addMotionRange(int,int,float,float,float,float,float)>
<com.android.internal.telephony.CellularNetworkValidator$ValidatedNetworkCache: void storeLastValidationResult(int,boolean)>
<android.app.ResourcesManager: android.app.ResourcesManager$ActivityResources getOrCreateActivityResourcesStructLocked(android.os.IBinder)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>
<com.android.server.connectivity.KeepaliveTracker: int findFirstFreeSlot(com.android.server.connectivity.NetworkAgentInfo)>
<android.app.ResourcesManager: android.content.res.Resources createResourcesLocked(java.lang.ClassLoader,android.content.res.ResourcesImpl,android.content.res.CompatibilityInfo)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeNetworkCapabilitiesChangedEvent(int,android.net.NetworkCapabilities)>
<android.view.accessibility.AccessibilityManager: void addHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener,android.os.Handler)>
<com.android.internal.telephony.CarrierPrivilegesTracker: void handlePackageAddedOrReplaced(java.lang.String)>
<org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>
<android.media.tv.TvInputManager: void createSessionInternal(java.lang.String,boolean,android.media.tv.TvInputManager$SessionCallback,android.os.Handler)>
<com.android.server.devicepolicy.Owners$ProfileOwnerReadWriter: boolean readInner(org.xmlpull.v1.XmlPullParser,int,java.lang.String)>
<com.android.server.AlarmManagerService: com.android.server.AlarmManagerService$BroadcastStats getStatsLocked(int,java.lang.String)>
<com.android.server.job.JobSchedulerService: void onBootPhase(int)>
<com.android.server.accounts.AccountsDb$PreNDatabaseHelper: long insertMetaAuthTypeAndUid(android.database.sqlite.SQLiteDatabase,java.lang.String,int)>
<android.view.View$AttachInfo: void delayNotifyContentCaptureEvent(android.view.contentcapture.ContentCaptureSession,android.view.View,boolean)>
<com.android.server.appop.AppOpsService: void setUidMode(int,int,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.wm.WindowState: void requestDrawIfNeeded(java.util.List)>
<com.android.server.sip.SipWakeupTimer: void insertEvent(com.android.server.sip.SipWakeupTimer$MyEvent)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>
<android.telecom.Logging.EventManager: void addEventRecord(android.telecom.Logging.EventManager$EventRecord)>
<com.android.server.wm.ActivityStack: void startActivityLocked(com.android.server.wm.ActivityRecord,com.android.server.wm.ActivityRecord,boolean,boolean,android.app.ActivityOptions)>
<android.preference.GenericInflater: java.lang.Object createItem(java.lang.String,java.lang.String,android.util.AttributeSet)>
<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory findOrCreateHistory(com.android.server.net.NetworkIdentitySet,int,int,int)>
<com.android.server.wm.TaskOrganizerController: android.app.ActivityManager$RunningTaskInfo createRootTask(int,int)>
<com.android.server.wm.ActivityStack: void moveTaskToFront(com.android.server.wm.Task,boolean,android.app.ActivityOptions,com.android.server.am.AppTimeTracker,boolean,java.lang.String)>
<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage openStorage(java.lang.String)>
<android.os.WorkSource: boolean add(android.os.WorkSource)>
<android.app.PropertyInvalidatedCache: void uncorkInvalidations(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void addActionUnchecked(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>
<com.android.internal.telephony.GsmCdmaPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean,int,int,com.android.internal.telephony.TelephonyComponentFactory)>
<com.android.framework.protobuf.LazyStringArrayList: void add(int,byte[])>
<com.android.server.ConnectivityService$SettingsObserver: void observe(android.net.Uri,int)>
<com.android.server.pm.PackageManagerService: void loadPrivatePackagesInner(android.os.storage.VolumeInfo)>
<com.android.server.wm.TaskOrganizerController: void dispatchTaskInfoChanged(com.android.server.wm.Task,boolean)>
<com.android.server.job.controllers.DeviceIdleJobsController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStateSubsystem getSubsystem(java.lang.String)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>
<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void setSnapshotListener(int,android.app.PendingIntent)>
<com.android.server.wm.BLASTSyncEngine: int startSyncSet(com.android.server.wm.BLASTSyncEngine$TransactionReadyListener)>
<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,java.lang.ClassLoader,boolean,boolean,boolean)>
<android.app.FragmentManagerImpl: void makeActive(android.app.Fragment)>
<com.android.server.accessibility.AccessibilityInputFilter: void addFirstEventHandler(int,com.android.server.accessibility.EventStreamTransformation)>
<com.android.internal.telephony.PhoneFactory: void addLocalLog(java.lang.String,int)>
<android.telecom.Logging.EventManager: void addRequestResponsePair(android.telecom.Logging.EventManager$TimedEventPair)>
<android.app.FragmentManagerImpl: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>
<com.android.server.wm.KeyguardController: com.android.server.wm.KeyguardController$KeyguardDisplayState getDisplay(int)>
<com.android.server.wm.WindowManagerService$H: void handleMessage(android.os.Message)>
<com.android.server.pm.Settings: void readDefaultAppsLPw(org.xmlpull.v1.XmlPullParser,int)>
<com.android.internal.telephony.dataconnection.TransportManager: void updateAvailableNetworks()>
<com.android.internal.telephony.IntentBroadcaster: void broadcastStickyIntent(android.content.Context,android.content.Intent,int)>
<android.renderscript.Font: void addFamilyToMap(android.renderscript.Font$FontFamily)>
<com.android.server.BluetoothManagerService: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
<android.app.FragmentManagerImpl: void makeInactive(android.app.Fragment)>
<com.android.server.search.SearchManagerService: com.android.server.search.Searchables getSearchables(int,boolean)>
<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void initDisplayState()>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>
<com.android.server.wm.Session: void onWindowSurfaceVisibilityChanged(com.android.server.wm.WindowSurfaceController,boolean,int)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)>
<com.android.server.wm.AnimatingActivityRegistry: boolean notifyAboutToFinish(com.android.server.wm.ActivityRecord,java.lang.Runnable)>
<com.android.server.wm.TaskSnapshotController: void getClosingTasks(android.util.ArraySet,android.util.ArraySet)>
<com.android.internal.telephony.CarrierPrivilegesTracker: void handleInitializeTracker()>
<com.android.server.appwidget.AppWidgetServiceImpl$BackupRestoreController: void restoreWidgetState(java.lang.String,byte[],int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeCarrierIdMatchingEvent(int,int,int,java.lang.String,java.lang.String,com.android.internal.telephony.CarrierResolver$CarrierMatchingRule)>
<com.android.server.NetworkManagementService: void <init>(android.content.Context,com.android.server.NetworkManagementService$SystemServices)>
<com.android.server.display.PersistentDataStore: void loadRememberedWifiDisplaysFromXml(org.xmlpull.v1.XmlPullParser)>
<android.app.SystemServiceRegistry: void registerService(java.lang.String,java.lang.Class,android.app.SystemServiceRegistry$ServiceFetcher)>
<com.android.server.wm.ResetTargetTaskHelper: boolean processActivity(com.android.server.wm.ActivityRecord,boolean)>
<com.android.server.hdmi.HdmiControlService$CecMessageBuffer: void bufferSystemAudioModeRequest(com.android.server.hdmi.HdmiCecMessage)>
<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.AssociationState getAssociationStateLocked(java.lang.String,int,long,java.lang.String,java.lang.String)>
<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>
<com.android.internal.telephony.CallManager: boolean registerPhone(com.android.internal.telephony.Phone)>
<com.android.server.wm.AppTransition: void overridePendingAppTransitionMultiThumb(android.view.AppTransitionAnimationSpec[],android.os.IRemoteCallback,android.os.IRemoteCallback,boolean)>
<android.view.View: void saveAttributeData(android.util.AttributeSet,android.content.res.TypedArray)>
<com.android.server.wm.RunningTasks: void processTask(com.android.server.wm.Task)>
<com.android.server.notification.NotificationManagerService: int buzzBeepBlinkLocked(com.android.server.notification.NotificationRecord)>
<android.app.ActivityThread: void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)>
<org.ccil.cowan.tagsoup.Schema: void elementType(java.lang.String,int,int,int)>
<com.android.server.pm.ProcessLoggingHandler: java.lang.String computeStringHashOfApk(java.lang.String)>
<android.provider.DeviceConfig: void decrementNamespace(java.lang.String)>
<com.android.framework.protobuf.LazyStringArrayList: boolean addAllByteArray(java.util.Collection)>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<com.android.server.usb.UsbPortManager: void addOrUpdatePortLocked(java.lang.String,int,int,int,boolean,int,boolean,int,boolean,boolean,int,boolean,int,com.android.internal.util.IndentingPrintWriter)>
<com.android.server.pm.permission.PermissionManagerService: boolean grantSignaturePermission(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.permission.BasePermission,com.android.server.pm.permission.PermissionsState)>
<android.hardware.location.GeofenceHardwareImpl$3: void handleMessage(android.os.Message)>
<com.android.server.AlarmManagerService$AppWakeupHistory: void recordAlarmForPackage(java.lang.String,int,long)>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<com.android.server.lights.LightsService: void populateAvailableLightsFromAidl(android.content.Context)>
<com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService$UserData putUserInfo(android.content.pm.UserInfo)>
<com.android.server.pm.ShortcutService$LocalService: void addShortcutChangeCallback(android.content.pm.LauncherApps$ShortcutChangeCallback)>
<org.ccil.cowan.tagsoup.CommandLine: int getopts(java.util.Hashtable,java.lang.String[])>
<android.app.FragmentManagerImpl: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,android.util.ArraySet)>
<com.android.internal.telephony.RIL: void addToRilHistogram(com.android.internal.telephony.RILRequest)>
<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int)>
<com.android.server.VibratorService$ExternalVibratorService: int onExternalVibrationStart(android.os.ExternalVibration)>
<android.app.ApplicationPackageManager: void putCachedIcon(android.app.ApplicationPackageManager$ResourceName,android.graphics.drawable.Drawable)>
<com.android.server.audio.RecordingActivityMonitor: void registerRecordingCallback(android.media.IRecordingConfigDispatcher,boolean)>
<com.android.framework.protobuf.LazyStringArrayList: boolean addAll(int,java.util.Collection)>
<com.android.internal.os.FuseAppLoop: int registerCallback(android.os.ProxyFileDescriptorCallback,android.os.Handler)>
<com.android.internal.telephony.phonenumbers.prefixmapper.PrefixFileReader: void loadPhonePrefixMapFromFile(java.lang.String)>
<android.os.FileObserver$ObserverThread: int[] startWatching(java.util.List,int,android.os.FileObserver)>
<com.android.server.notification.ZenModeHelper: void addCallback(com.android.server.notification.ZenModeHelper$Callback)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: boolean buildType2EmailList(int)>
<android.view.InsetsController: void onControlsChanged(android.view.InsetsSourceControl[])>
<com.android.server.sip.SipWakeLock: void acquire(java.lang.Object)>
<com.android.server.connectivity.NetworkAgentInfo: boolean addRequest(android.net.NetworkRequest)>
<android.app.ActivityThread: void handleRelaunchActivityInner(android.app.ActivityThread$ActivityClientRecord,int,java.util.List,java.util.List,android.app.servertransaction.PendingTransactionActions,boolean,android.content.res.Configuration,java.lang.String)>
<com.android.server.wm.TaskDisplayArea: void registerStackOrderChangedListener(com.android.server.wm.TaskDisplayArea$OnStackOrderChangedListener)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void handleMessage(android.os.Message)>
<com.android.server.media.AudioPlayerStateMonitor: void registerListener(com.android.server.media.AudioPlayerStateMonitor$OnAudioPlayerActiveStateChangedListener,android.os.Handler)>
<android.database.sqlite.SQLiteDatabase: void openInner()>
<com.android.server.location.UserInfoHelper: void addListener(com.android.server.location.UserInfoHelper$UserListener)>
<android.nfc.cardemulation.CardEmulation: android.nfc.cardemulation.CardEmulation getInstance(android.nfc.NfcAdapter)>
<com.android.internal.telephony.phonenumbers.internal.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)>
<android.net.ConnectivityModuleConnector: void registerHealthListener(android.net.ConnectivityModuleConnector$ConnectivityModuleHealthListener)>
<com.android.server.pm.CompilerStats: com.android.server.pm.CompilerStats$PackageStats createPackageStats(java.lang.String)>
<com.android.server.ethernet.EthernetTracker: void start()>
<com.android.server.wm.Task: void initializeChangeTransition(android.graphics.Rect)>
<com.android.server.pm.ShortcutService$LocalService: void addListener(android.content.pm.ShortcutServiceInternal$ShortcutChangeListener)>
<com.android.server.SystemConfig: void readPrivAppPermissions(org.xmlpull.v1.XmlPullParser,android.util.ArrayMap,android.util.ArrayMap)>
<android.animation.AnimationHandler: void addAnimationFrameCallback(android.animation.AnimationHandler$AnimationFrameCallback,long)>
<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig updatePrivateDns(android.net.Network,android.net.shared.PrivateDnsConfig)>
<com.android.server.pm.PackageInstallerService: void readSessionsLocked()>
<android.content.SearchRecentSuggestionsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<com.android.server.trust.TrustArchive: void addEvent(com.android.server.trust.TrustArchive$Event)>
<com.android.commands.monkey.MonkeySourceNetworkViews: java.lang.Class getIdClass(java.lang.String,java.lang.String)>
<com.android.server.connectivity.KeepaliveTracker: void handleStartKeepalive(android.os.Message)>
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>
<com.android.server.job.controllers.QuotaController: void prepareForExecutionLocked(com.android.server.job.controllers.JobStatus)>
<com.android.server.PackageWatchdog: void loadFromFile()>
<com.android.server.NativeDaemonConnector$ResponseQueue: com.android.server.NativeDaemonEvent remove(int,long,java.lang.String)>
<com.android.server.audio.SoundEffectsHelper: int findOrAddResourceByFileName(java.lang.String)>
<com.android.server.audio.AudioDeviceBroker: boolean addSpeakerphoneClient(android.os.IBinder,int,boolean)>
<android.app.ActivityThread: android.app.ActivityThread$ActivityClientRecord prepareRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,android.util.MergedConfiguration,boolean)>
<com.android.server.wm.InsetsStateController: void addToControlMaps(com.android.server.wm.InsetsControlTarget,int,boolean)>
<com.android.server.wm.WindowToken: void setExiting()>
<com.android.server.connectivity.Vpn: boolean setAllowOnlyVpnForUids(boolean,java.util.Collection)>
<com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.metrics.InProgressCallSession startNewCallSessionIfNeeded(int)>
<android.media.MediaRouter2Manager: void addRoutesOnHandler(java.util.List)>
<com.android.server.wm.TaskPersister: void writeTaskIdsFiles()>
<com.android.server.pm.ShortcutBitmapSaver: void saveBitmapLocked(android.content.pm.ShortcutInfo,int,android.graphics.Bitmap$CompressFormat,int)>
<com.android.server.hdmi.HdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>
<com.android.server.wm.DisplayWindowSettings: com.android.server.wm.DisplayWindowSettings$Entry updateIdentifierForEntry(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>
<android.transition.Transition: void createAnimators(android.view.ViewGroup,android.transition.TransitionValuesMaps,android.transition.TransitionValuesMaps,java.util.ArrayList,java.util.ArrayList)>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)>
<android.animation.AnimationHandler: void addOneShotCommitCallback(android.animation.AnimationHandler$AnimationFrameCallback)>
<android.view.ViewRootImpl: void addWindowCallbacks(android.view.WindowCallbacks)>
<android.telecom.Connection: void setConferenceables(java.util.List)>
<android.app.ActivityThread: android.app.Activity performLaunchActivity(android.app.ActivityThread$ActivityClientRecord,android.content.Intent)>
<android.view.WindowManagerGlobal: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.view.ViewTreeObserver$CopyOnWriteArray: void add(java.lang.Object)>
<com.android.uiautomator.core.UiDevice: void setWatcherTriggered(java.lang.String)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>
<com.android.server.wm.ActivityRecord: void addToStopping(boolean,boolean,java.lang.String)>
<com.android.server.SystemServiceManager: void startService(com.android.server.SystemService)>
<com.android.server.hdmi.HdmiControlService: void addSystemAudioModeChangeListner(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>
<android.telecom.RemoteConnection: void registerCallback(android.telecom.RemoteConnection$Callback,android.os.Handler)>
<com.android.server.om.OverlayReferenceMapper: void addTargetToMap(java.lang.String,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: int writeHistoryTag(android.os.BatteryStats$HistoryTag)>
<android.os.StrictMode$InstanceTracker: void <init>(java.lang.Object)>
<com.android.server.AppStateTracker: boolean updateForcedAppStandbyUidPackageLocked(int,java.lang.String,boolean)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.net.InetAddress)>
<com.android.server.notification.PreferencesHelper: void lockChannelsForOEM(java.lang.String[])>
<android.net.ConnectivityManager: android.net.NetworkRequest requestNetworkForFeatureLocked(android.net.NetworkCapabilities)>
<com.android.server.usb.UsbPortManager: void addSimulatedPort(java.lang.String,int,com.android.internal.util.IndentingPrintWriter)>
<android.os.TransactionTracker: void addTrace(java.lang.Throwable)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchPredecessorsOfVirtualNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeProvider,java.util.List)>
<com.android.server.pm.Settings: boolean registerExistingAppIdLPw(int,com.android.server.pm.SettingBase,java.lang.Object)>
<android.os.UEventObserver$UEventThread: void sendEvent(java.lang.String)>
<com.android.server.net.NetworkStatsSubscriptionsMonitor: void onSubscriptionsChanged()>
<com.android.server.am.AppTimeTracker: void start(java.lang.String)>
<com.android.server.biometrics.face.FaceUtils: com.android.server.biometrics.face.FaceUserState getStateForUser(android.content.Context,int)>
<com.android.internal.os.BatteryStatsImpl: void onUserRemovedLocked(int)>
<com.android.server.pm.PackageSignatures: int readCertsListXml(org.xmlpull.v1.XmlPullParser,java.util.ArrayList,java.util.ArrayList,int,boolean,android.content.pm.PackageParser$SigningDetails$Builder)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void updateActiveSubscriptionInfoList(java.util.List)>
<android.hardware.input.InputManager: void onInputDevicesChanged(int[])>
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void onStatusChangedLocked(int,java.lang.String)>
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>
<com.android.server.connectivity.MultipathPolicyTracker$1: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>
<android.media.MediaRouter$RouteGroup: void addRoute(android.media.MediaRouter$RouteInfo,int)>
<com.android.server.wm.WindowState: void openInputChannel(android.view.InputChannel)>
<org.ccil.cowan.tagsoup.Parser: void setFeature(java.lang.String,boolean)>
<com.android.nfc_extras.NfcAdapterExtras: com.android.nfc_extras.NfcAdapterExtras get(android.nfc.NfcAdapter)>
<com.android.server.pm.UserManagerService$LocalService: void addUserRestrictionsListener(android.os.UserManagerInternal$UserRestrictionsListener)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getWakeupReasonTimerLocked(java.lang.String)>
<com.android.server.Watchdog$HandlerChecker: void addMonitorLocked(com.android.server.Watchdog$Monitor)>
<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>
<com.android.server.devicepolicy.SecurityLogMonitor: void mergeBatchLocked(java.util.ArrayList)>
<com.android.server.am.AppExitInfoTracker: void getExitInfo(java.lang.String,int,int,int,java.util.ArrayList)>
<com.android.server.audio.RecordingActivityMonitor: java.util.List updateSnapshot(int,int,android.media.AudioRecordingConfiguration)>
<com.android.server.ConnectivityService: void onUserStart(int)>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventDispatchedListenerLocked(android.media.session.IOnMediaKeyEventDispatchedListener,int)>
<com.android.server.location.AppForegroundHelper: void addListener(com.android.server.location.AppForegroundHelper$AppForegroundListener)>
<com.android.server.usage.AppStandbyController$StandbyUpdateRecord: void recycle()>
<android.app.NotificationHistory: void addNewNotificationToWrite(android.app.NotificationHistory$HistoricalNotification)>
<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: void add(java.lang.String,java.lang.Object)>
<android.media.tv.TvInputManager$2: void onInputStateChanged(java.lang.String,int)>
<android.content.UndoManager$UndoState: void addOperation(android.content.UndoOperation)>
<com.android.server.pm.StagingManager: void updateStoredSession(com.android.server.pm.PackageInstallerSession)>
<com.android.server.power.ThermalManagerService: void onTemperatureChanged(android.os.Temperature,boolean)>
<com.android.server.am.ActivityManagerService: java.util.List generateApplicationProvidersLocked(com.android.server.am.ProcessRecord)>
<android.app.PropertyInvalidatedCache: void corkInvalidations(java.lang.String)>
<com.android.server.Watchdog$HandlerChecker: void scheduleCheckLocked()>
<android.os.ServiceManager: void initServiceCache(java.util.Map)>
<com.android.server.net.NetworkPolicyManagerService: void setMeteredRestrictedPackagesInternal(java.util.Set,int)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureUserMetadataEntryExists(int)>
<com.android.i18n.phonenumbers.MetadataManager: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataFromMultiFilePrefix(java.lang.Object,java.util.concurrent.ConcurrentHashMap,java.lang.String,com.android.i18n.phonenumbers.MetadataLoader)>
<com.android.server.location.gnss.GnssGeofenceProvider: boolean addCircularHardwareGeofence(int,double,double,double,int,int,int,int)>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)>
<android.app.ActivityThread: java.lang.Object getGetProviderLock(java.lang.String,int)>
<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int,int)>
<com.android.server.pm.PackageManagerService$InstallParams: void handleStartCopy()>
<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)>
<android.media.ImageReader: int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)>
<com.android.server.pm.PackageSettingBase: void addOrUpdateSuspension(java.lang.String,android.content.pm.SuspendDialogInfo,android.os.PersistableBundle,android.os.PersistableBundle,int)>
<com.android.server.sip.SipService: void addPendingSession(android.net.sip.ISipSession)>
<android.app.LoaderManagerImpl$LoaderInfo: void onLoadComplete(android.content.Loader,java.lang.Object)>
<android.net.ConnectivityManager: void registerTetheringEventCallback(java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEventCallback)>
<android.app.BackStackRecord: void trackAddedFragmentsInPop(java.util.ArrayList)>
<com.android.internal.os.KernelSingleUidTimeReader: void removeUidsInRange(int,int)>
<com.android.server.location.AppOpsHelper: void addListener(com.android.server.location.AppOpsHelper$LocationAppOpListener)>
<com.android.internal.app.procstats.ProcessStats: void updateFragmentation()>
<com.android.internal.os.BatteryStatsImpl: void readSummaryFromParcel(android.os.Parcel)>
<com.android.server.wm.ActivityStackSupervisor: void addToPipModeChangedList(com.android.server.wm.ActivityRecord)>
<android.app.Notification: void lambda$writeToParcel$0$Notification(android.os.Parcel,android.app.PendingIntent,android.os.Parcel,int)>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context,int,android.renderscript.RenderScript$ContextType,int)>
<com.android.server.notification.NotificationManagerService$RoleObserver: void onRoleHoldersChanged(java.lang.String,android.os.UserHandle)>
<com.android.server.AlarmManagerService: boolean triggerAlarmsLocked(java.util.ArrayList,long)>
<com.android.server.pm.CompilerStats: void setPackageStats(java.lang.String,com.android.server.pm.CompilerStats$PackageStats)>
<android.os.UEventObserver$UEventThread: void addObserver(java.lang.String,android.os.UEventObserver)>
<android.telecom.Connection: void setConferenceableConnections(java.util.List)>
<com.android.server.blob.BlobStoreManagerService: void addUserBlobsForTest(android.util.ArrayMap,int)>
<android.view.ViewRootImpl: void addConfigCallback(android.view.ViewRootImpl$ConfigChangedCallback)>
<com.android.server.pm.PackageManagerService$IntentVerifierProxy: com.android.server.pm.IntentFilterVerificationState createDomainVerificationState(int,int,int,java.lang.String)>
<com.android.server.autofill.AutofillManagerService$DisabledInfoCache: com.android.server.autofill.AutofillManagerService$AutofillDisabledInfo getOrCreateAutofillDisabledInfoByUserIdLocked(int)>
<com.android.server.wm.ActivityTaskManagerService$LocalService: void setCompanionAppPackages(int,java.util.Set)>
<com.android.server.AppStateTracker: void addListener(com.android.server.AppStateTracker$Listener)>
<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager$OnOpChangedListener)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: com.android.internal.os.BatteryStatsImpl$DualTimer readTimersFromParcel(com.android.internal.os.BatteryStatsImpl$TimeBase,com.android.internal.os.BatteryStatsImpl$TimeBase,android.os.Parcel)>
<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>
<com.android.server.power.ShutdownThread: void metricEnded(java.lang.String)>
<android.view.View$AttachInfo: void delayNotifyContentCaptureInsetsEvent(android.graphics.Insets)>
<com.android.server.am.BroadcastQueue: void processCurBroadcastLocked(com.android.server.am.BroadcastRecord,com.android.server.am.ProcessRecord,boolean)>
<android.app.ActivityThread: void handleCreateBackupAgent(android.app.ActivityThread$CreateBackupAgentData)>
<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.android.uiautomator.core.UiDevice: void registerWatcher(java.lang.String,com.android.uiautomator.core.UiWatcher)>
<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>
<com.android.server.content.SyncJobService: boolean onStartJob(android.app.job.JobParameters)>
<com.android.server.wm.InputMonitor$UpdateInputForAllWindowsConsumer: void accept(com.android.server.wm.WindowState)>
<android.content.UndoManager: int redo(android.content.UndoOwner[],int)>
<com.android.server.vr.EnabledComponentsObserver: void rebuildAll()>
<com.android.server.display.DisplayManagerService$DisplayManagerHandler: void handleMessage(android.os.Message)>
<com.android.server.ethernet.EthernetTracker: void parseEthernetConfig(java.lang.String)>
<android.view.accessibility.AccessibilityCache: void addWindowByDisplayLocked(int,android.view.accessibility.AccessibilityWindowInfo)>
<android.accessibilityservice.AccessibilityServiceInfo: android.util.SparseArray getCapabilityInfoSparseArray(android.content.Context)>
<android.bluetooth.le.PeriodicAdvertisingManager: void registerSync(android.bluetooth.le.ScanResult,int,int,android.bluetooth.le.PeriodicAdvertisingCallback,android.os.Handler)>
<android.view.AccessibilityInteractionController: void findAccessibilityNodeInfosByTextUiThread(android.os.Message)>
<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>
<android.hardware.SensorManager: java.util.List getSensorList(int)>
<com.android.server.wm.TaskOrganizerController: void registerTaskOrganizer(android.window.ITaskOrganizer,int)>
<com.android.server.wm.ActivityStartController: void addPendingActivityLaunch(com.android.server.wm.ActivityStackSupervisor$PendingActivityLaunch)>
<com.android.server.slice.SlicePermissionManager: void readRestore(org.xmlpull.v1.XmlPullParser)>
<com.android.internal.telephony.phonenumbers.MetadataManager: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataFromMultiFilePrefix(java.lang.Object,java.util.concurrent.ConcurrentHashMap,java.lang.String,com.android.internal.telephony.phonenumbers.MetadataLoader)>
<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>
<com.android.server.display.DisplayModeDirector: void updateVoteLocked(int,int,com.android.server.display.DisplayModeDirector$Vote)>
<android.telecom.Conference: boolean addConnection(android.telecom.Connection)>
<com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<com.android.internal.os.BatteryStatsImpl: void readFromParcelLocked(android.os.Parcel)>
<com.android.server.wm.AnimatingActivityRegistry: void endDeferringFinished()>
<com.android.server.accessibility.AccessibilityWindowManager: void startTrackingWindows(int)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>
<com.android.server.pm.Settings: void addInstallerPackageNames(com.android.server.pm.InstallSource)>
<com.android.internal.telephony.uicc.AdnRecordCache: void handleMessage(android.os.Message)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeSetPreferredNetworkType(int,int)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,java.util.concurrent.Executor,android.location.LocationListener)>
<android.media.AudioManager: void registerAudioFocusRequest(android.media.AudioFocusRequest)>
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>
<com.android.server.wm.RefreshRatePolicy: void addNonHighRefreshRatePackage(java.lang.String)>
<com.android.internal.telephony.dataconnection.DataEnabledOverride: void setDataAllowedInVoiceCall(boolean)>
<com.android.server.notification.NotificationHistoryManager: void onUserUnlocked(int)>
<com.android.server.pm.PackageManagerService: void scheduleDeferredNoKillInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.content.pm.IPackageInstallObserver2)>
<com.android.server.am.BroadcastStats: void addBackgroundCheckViolation(java.lang.String,java.lang.String)>
<com.android.server.wm.AccessibilityController: boolean setMagnificationCallbacksLocked(int,com.android.server.wm.WindowManagerInternal$MagnificationCallbacks)>
<com.android.server.accounts.AccountManagerService$AccountManagerInternalImpl: void addOnAppPermissionChangeListener(android.accounts.AccountManagerInternal$OnAppPermissionChangeListener)>
<android.content.pm.LauncherApps: void registerPackageInstallerSessionCallback(java.util.concurrent.Executor,android.content.pm.PackageInstaller$SessionCallback)>
<android.widget.RemoteViews: void setViewLayoutWidth(int,int)>
<com.android.framework.protobuf.LazyStringArrayList: void add(com.android.framework.protobuf.ByteString)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getRpmTimerLocked(java.lang.String)>
<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>
<com.android.server.input.InputManagerService: void deliverInputDevicesChanged(android.view.InputDevice[])>
<android.app.AppOpsManager: void startWatchingNoted(int[],android.app.AppOpsManager$OnOpNotedListener)>
<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>
<com.android.server.power.ShutdownThread: void metricStarted(java.lang.String)>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)>
<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>
<android.view.InsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>
<com.android.server.wm.RecentTasks: void loadUserRecentsLocked(int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeOnImsConnectionState(int,int,android.telephony.ims.ImsReasonInfo)>
<com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String getDataLoaderParamsArgs(android.os.ShellCommand)>
<com.android.internal.telephony.metrics.VoiceCallRatTracker: void addProto(com.android.internal.telephony.nano.PersistAtomsProto$RawVoiceCallRatUsage)>
<com.android.server.location.NanoAppStateManager: void addNanoAppInstance(int,long,int)>
<com.android.server.hdmi.HdmiCecMessageValidator: void addValidationInfo(int,com.android.server.hdmi.HdmiCecMessageValidator$ParameterValidator,int)>
<android.view.autofill.AutofillManager$TrackedViews: android.util.ArraySet addToSet(android.util.ArraySet,java.lang.Object)>
<com.android.internal.telephony.SubscriptionController: void refreshCachedActiveSubscriptionInfoList()>
<com.android.server.power.batterysaver.BatterySaverPolicy: void addListener(com.android.server.power.batterysaver.BatterySaverPolicy$BatterySaverPolicyListener)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
<com.android.framework.protobuf.GeneratedMessageLite: void registerDefaultInstance(java.lang.Class,com.android.framework.protobuf.GeneratedMessageLite)>
<android.telephony.ModemActivityInfo: void populateTransmitPowerRange(int[])>
<com.android.server.wm.AppTransitionController: boolean transitionGoodToGo(android.util.ArraySet,android.util.ArrayMap)>
<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: void readExternal(java.io.ObjectInput)>
<android.transition.Transition: void matchItemIds(android.util.ArrayMap,android.util.ArrayMap,android.util.LongSparseArray,android.util.LongSparseArray)>
<com.android.server.IpSecService$UserResourceTracker: com.android.server.IpSecService$UserRecord getUserRecord(int)>
<com.android.internal.os.BatteryStatsImpl: void readDailyItemTagLocked(org.xmlpull.v1.XmlPullParser)>
<com.android.server.audio.AudioDeviceInventory: void makeHearingAidDeviceAvailable(java.lang.String,java.lang.String,int,java.lang.String)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager forContextInternal(int,android.os.Looper)>
<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>
<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>
<android.hardware.LegacySensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>
<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window,int)>
<com.android.server.connectivity.Vpn$LegacyVpnRunner: void bringup()>
<com.android.server.AlarmManagerService: void calculateDeliveryPriorities(java.util.ArrayList)>
<com.android.server.pm.Settings: void readBlockUninstallPackagesLPw(org.xmlpull.v1.XmlPullParser,int)>
<com.android.internal.telephony.CarrierPrivilegesTracker: void maybeUpdateCertsAndNotifyRegistrants(java.util.Set,java.util.Set)>
<com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submitTask(java.lang.Runnable,java.lang.String)>
<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener,android.os.Handler)>
<com.android.server.display.DisplayModeDirector$DisplayObserver: void updateDisplayModes(int)>
<android.hardware.SystemSensorManager: boolean registerListenerImpl(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler,int,int)>
<com.android.server.media.MediaSessionService: void updateUser()>
<com.android.server.hdmi.HdmiControlService$CecMessageBuffer: void bufferActiveSource(com.android.server.hdmi.HdmiCecMessage)>
<com.android.internal.telephony.metrics.VoiceCallRatTracker: void addToKey(com.android.internal.telephony.metrics.VoiceCallRatTracker$Key,long,java.util.Set)>
<com.android.ims.internal.ContactNumberUtils: boolean isInExcludedList(java.lang.String)>
<android.provider.DeviceConfig: void addOnPropertiesChangedListener(java.lang.String,java.util.concurrent.Executor,android.provider.DeviceConfig$OnPropertiesChangedListener)>
<com.android.server.notification.NotificationUsageStats$SQLiteLog: void writeEvent(long,int,com.android.server.notification.NotificationRecord)>
<android.hardware.camera2.marshal.MarshalRegistry: android.hardware.camera2.marshal.Marshaler getMarshaler(android.hardware.camera2.utils.TypeReference,int)>
<com.android.server.wm.TaskDisplayArea: void lambda$moveSplitScreenTasksToFullScreen$2$TaskDisplayArea(com.android.server.wm.Task)>
<com.android.server.wm.InsetsStateController: void notifyControlChanged(com.android.server.wm.InsetsControlTarget)>
<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>
<android.media.MediaRouter2: void registerControllerCallback(java.util.concurrent.Executor,android.media.MediaRouter2$ControllerCallback)>
<android.os.StrictMode$InstanceTracker: void finalize()>
<com.android.server.wm.WindowState: void onResize()>
<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: void readExternal(java.io.ObjectInput)>
<android.widget.ExpandableListPosition: void recycle()>
<android.media.MediaRouter2: void registerRouteCallback(java.util.concurrent.Executor,android.media.MediaRouter2$RouteCallback,android.media.RouteDiscoveryPreference)>
<com.android.server.wm.ActivityTaskManagerService$LocalService: void setAllowAppSwitches(java.lang.String,int,int)>
<android.app.FragmentManagerImpl: void attachFragment(android.app.Fragment)>
<com.android.server.net.NetworkPolicyManagerService: void notifyOverLimitNL(android.net.NetworkTemplate)>
<com.android.internal.telephony.uicc.CarrierTestOverride: void override(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.wm.WindowManagerService: void postWindowRemoveCleanupLocked(com.android.server.wm.WindowState)>
<com.android.server.NsdService$NsdStateMachine$EnabledState: void storeRequestMap(int,int,com.android.server.NsdService$ClientInfo,int)>
<android.app.FragmentManagerImpl: boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int)>
<com.android.internal.os.BatteryStatsHelper: void storeStatsHistoryInFile(java.lang.String)>
<com.android.server.wm.ActivityStackSupervisor: void waitActivityVisible(android.content.ComponentName,android.app.WaitResult)>
<com.android.server.media.MediaSessionService$FullUserRecord: void addOnMediaKeyEventSessionChangedListenerLocked(android.media.session.IOnMediaKeyEventSessionChangedListener,int)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<com.android.server.wm.DisplayRotation$OrientationListener: void onProposedRotationChanged(int)>
<android.view.InsetsController: void controlAnimationUnchecked(int,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener,android.graphics.Rect,boolean,long,android.view.animation.Interpolator,int,int,boolean)>
<android.widget.RemoteViews: void setRemoteInputs(int,android.app.RemoteInput[])>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,java.util.concurrent.Executor)>
<com.android.server.wm.ActivityRecord: void onDisplayChanged(com.android.server.wm.DisplayContent)>
<android.util.SparseSetArray: boolean add(int,java.lang.Object)>
<android.app.ActivityThread: void handleCreateService(android.app.ActivityThread$CreateServiceData)>
<com.android.server.inputmethod.InputMethodUtils$InputMethodSettings: void putString(java.lang.String,java.lang.String)>
<com.android.server.am.AppExitInfoTracker$AppExitInfoExternalSource: void addLocked(int,int,java.lang.Object)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchAccessibilityNodeInfos(android.view.View,int,int,java.util.List,android.os.Bundle)>
<android.media.tv.TvInputManager$2: void onInputAdded(java.lang.String)>
<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>
<com.android.server.wm.WindowAnimator: void addAfterPrepareSurfacesRunnable(java.lang.Runnable)>
<android.widget.ExpandableListConnector$PositionMetadata: void recycle()>
<android.app.FragmentManagerImpl: void restoreAllState(android.os.Parcelable,android.app.FragmentManagerNonConfig)>
<com.android.internal.policy.PhoneWindow$RotationWatcher: void addWindow(com.android.internal.policy.PhoneWindow)>
<com.android.server.StorageManagerService: void readSettingsLocked()>
<com.android.server.wm.FixedRotationAnimationController$FixedRotationAnimationAdapter: boolean shouldDeferAnimationFinish(java.lang.Runnable)>
<com.android.server.accessibility.AccessibilityManagerService: void enableAccessibilityServiceLocked(android.content.ComponentName,int)>
<com.android.server.pm.ComponentResolver: void addProvidersLocked(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>
<com.android.server.inputmethod.InputMethodManagerService: com.android.internal.view.InputBindResult attachNewInputLocked(int,boolean)>
<com.android.server.wm.RootWindowContainer: boolean switchUser(int,com.android.server.am.UserState)>
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
<com.android.server.connectivity.NetdEventListenerService: void flushStatistics(java.util.List)>
<com.android.server.wm.WindowContainer: void applyAnimationUnchecked(android.view.WindowManager$LayoutParams,boolean,int,boolean,java.util.ArrayList)>
<com.android.server.pm.UserManagerService: void readUserListLP()>
<com.android.server.content.SyncStorageEngine: android.content.SyncInfo addActiveSync(com.android.server.content.SyncManager$ActiveSyncContext)>
<android.transition.Transition: void matchIds(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseArray,android.util.SparseArray)>
<android.app.ResourcesManager: android.content.res.Resources createResourcesForActivityLocked(android.os.IBinder,java.lang.ClassLoader,android.content.res.ResourcesImpl,android.content.res.CompatibilityInfo)>
<com.android.server.notification.ConditionProviders: com.android.server.notification.ConditionProviders$ConditionRecord getRecordLocked(android.net.Uri,android.content.ComponentName,boolean)>
<android.content.pm.FallbackCategoryProvider: void loadFallbacks()>
<com.android.server.vr.VrManagerService: void logEvent(com.android.server.utils.ManagedApplicationService$LogFormattable)>
<com.android.server.wm.SurfaceAnimationRunner: void startAnimationLocked(com.android.server.wm.SurfaceAnimationRunner$RunningAnimation)>
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[],int)>
<android.view.View: void addFocusables(java.util.ArrayList,int,int)>
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])>
<com.android.server.wm.DisplayPolicy: void simulateLayoutDecorWindow(com.android.server.wm.WindowState,com.android.server.wm.DisplayFrames,android.view.InsetsState,com.android.server.wm.WindowFrames,android.util.SparseArray,java.util.function.Consumer)>
<com.android.server.notification.NotificationHistoryManager: void onPackageRemoved(int,java.lang.String)>
<com.android.internal.net.VpnConfig: void addLegacyAddresses(java.lang.String)>
<com.android.server.connectivity.NetworkAgentInfo: void lingerRequest(android.net.NetworkRequest,long,long)>
<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: void put(int,android.security.keystore.recovery.KeyChainSnapshot)>
<com.android.server.wm.RecentTasks: void resetFreezeTaskListReordering(com.android.server.wm.Task)>
<com.android.server.audio.AudioDeviceInventory: boolean handleDeviceConnection(boolean,int,java.lang.String,java.lang.String)>
<com.android.internal.os.KernelSingleUidTimeReader: long[] computeDelta(int,long[])>
<com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>
<com.android.internal.telephony.phonenumbers.prefixmapper.MappingFileProvider: void readFileConfigs(java.util.SortedMap)>
<android.widget.ProgressBar: void refreshProgress(int,int,boolean,boolean)>
<com.android.server.autofill.ui.FillUi$ItemsAdapter$1: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>
<com.android.server.media.MediaSessionStack: void onPlaybackStateChanged(com.android.server.media.MediaSessionRecordImpl,boolean)>
<android.app.FragmentTransition: android.util.ArrayMap captureInSharedElements(android.util.ArrayMap,android.transition.TransitionSet,android.app.FragmentTransition$FragmentContainerTransition)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchDescendantsOfRealNode(android.view.View,java.util.List)>
<com.android.server.pm.AppsFilter: void grantImplicitAccess(int,int)>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void onPackageModified(java.lang.String)>
<com.android.internal.telephony.CarrierResolver: void loadCarrierMatchingRulesOnMccMnc()>
<com.android.server.wm.ActivityRecord: void setVisibility(boolean,boolean)>
<android.filterfw.core.StopWatchMap: void start(java.lang.String)>
<android.widget.RemoteViewsAdapter: void saveRemoteViewsCache()>
<com.android.server.LockGuard: com.android.server.LockGuard$LockInfo findOrCreateLockInfo(java.lang.Object)>
<android.transition.TransitionManager: void changeScene(android.transition.Scene,android.transition.Transition)>
<com.android.internal.telephony.CarrierPrivilegesTracker: java.util.Set getUidsForPackage(java.lang.String)>
<com.android.framework.protobuf.FieldSet: void addRepeatedField(com.android.framework.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object)>
<android.app.ContextImpl: android.content.SharedPreferences getSharedPreferences(java.io.File,int)>
<android.media.midi.MidiDeviceServer$1: java.io.FileDescriptor openOutputPort(android.os.IBinder,int)>
<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(java.lang.String,int,int[],int)>
<android.telecom.ConnectionService$2: void handleMessage(android.os.Message)>
<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addView(android.view.View)>
<com.android.server.hdmi.HdmiControlService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>
<com.android.framework.protobuf.LazyStringArrayList: boolean addAllByteString(java.util.Collection)>
<com.android.server.content.SyncManager$SyncHandler: boolean dispatchSyncOperation(com.android.server.content.SyncOperation)>
<com.android.server.SystemConfig: void readPermissionsFromXml(java.io.File,int)>
<android.telecom.Logging.SessionManager: void registerSessionListener(android.telecom.Logging.SessionManager$ISessionListener)>
<com.android.framework.protobuf.ProtobufArrayList: void add(int,java.lang.Object)>
<android.animation.PropertyValuesHolder$MultiIntValuesHolder: void setupSetter(java.lang.Class)>
<com.android.server.appwidget.AppWidgetServiceImpl: int readProfileStateFromFileLocked(java.io.FileInputStream,int,java.util.List)>
<com.android.server.am.UserController: void logUserJourneyInfo(android.content.pm.UserInfo,android.content.pm.UserInfo,int)>
<android.telecom.RemoteConnection$VideoProvider: void registerCallback(android.telecom.RemoteConnection$VideoProvider$Callback)>
<com.android.server.hdmi.HdmiControlService$CecMessageBuffer: void bufferImageOrTextViewOn(com.android.server.hdmi.HdmiCecMessage)>
<android.net.StaticIpConfiguration: void addDnsServer(java.net.InetAddress)>
<com.android.commands.monkey.MonkeyUtils$PackageFilter: void addValidPackages(java.util.Set)>
<android.media.midi.MidiDeviceServer$1: int connectPorts(android.os.IBinder,java.io.FileDescriptor,int)>
<com.android.server.connectivity.NetdEventListenerService: void addWakeupEvent(android.net.metrics.WakeupEvent)>
<android.hardware.hdmi.HdmiControlManager: void addHdmiCecVolumeControlFeatureListener(java.util.concurrent.Executor,android.hardware.hdmi.HdmiControlManager$HdmiCecVolumeControlFeatureListener)>
<android.media.MediaRouter2Manager: int createTransferRequest(android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest,android.media.audiopolicy.AudioPolicy)>
<com.android.server.notification.PreferencesHelper: boolean onPackagesChanged(boolean,int,java.lang.String[],int[])>
<com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules: void handleMessage(android.os.Message)>
<android.content.pm.LauncherApps: void addCallbackLocked(android.content.pm.LauncherApps$Callback,android.os.Handler)>
<com.android.server.pm.PackageInstallerService: void addHistoricalSessionLocked(com.android.server.pm.PackageInstallerSession)>
<com.android.server.pm.PackageSettingBase: boolean enableComponentLPw(java.lang.String,int)>
<android.net.NetworkAgent: void queueOrSendMessage(android.os.Message)>
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>
<com.android.server.AlarmManagerService$LocalService: void registerInFlightListener(com.android.server.AlarmManagerInternal$InFlightListener)>
<com.android.uiautomator.core.Tracer: void setOutputMode(com.android.uiautomator.core.Tracer$Mode)>
<android.media.Ringtone: void startLocalPlayer()>
<com.android.internal.util.Parcelling$Cache: com.android.internal.util.Parcelling put(com.android.internal.util.Parcelling)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeOnImsCapabilities(int,int,android.telephony.ims.feature.MmTelFeature$MmTelCapabilities)>
<android.telephony.DataFailCause: boolean isPermanentFailure(android.content.Context,int,int)>
<com.android.server.wallpaper.WallpaperManagerService: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
<com.android.server.net.NetworkStatsCollection: void recordHistory(com.android.server.net.NetworkStatsCollection$Key,android.net.NetworkStatsHistory)>
<com.android.server.pm.Settings: void readDisabledSysPackageLPw(org.xmlpull.v1.XmlPullParser)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchPredecessorsOfRealNode(android.view.View,java.util.List)>
<com.android.server.wm.TaskSnapshotCache: void putSnapshot(com.android.server.wm.Task,android.app.ActivityManager$TaskSnapshot)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.util.Locale,boolean,boolean)>
<org.junit.validator.AnnotationValidatorFactory: org.junit.validator.AnnotationValidator createAnnotationValidator(org.junit.validator.ValidateWith)>
<com.android.internal.telephony.VisualVoicemailSmsFilter: void buildPatternsMap(android.content.Context)>
<com.android.server.appop.AppOpsService: java.util.HashMap addCallbacks(java.util.HashMap,int,int,java.lang.String,android.util.ArraySet)>
<com.android.server.notification.NotificationManagerService: void addNotification(com.android.server.notification.NotificationRecord)>
<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting addPackageLPw(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,int,int,java.lang.String[],long[],java.util.Map)>
<com.android.service.ims.TaskManager: void putTaskInternal(int,com.android.service.ims.Task)>
<com.android.server.wm.WindowState: void setWaitingForDrawnIfResizingChanged()>
<com.android.internal.telephony.euicc.EuiccConnector: void onCommandStart(com.android.internal.telephony.euicc.EuiccConnector$BaseEuiccCommandCallback)>
<android.view.View: void announceForAccessibility(java.lang.CharSequence)>
<com.android.server.usage.UsageStatsService: void initializeUserUsageStatsServiceLocked(int,long,java.util.HashMap)>
<android.hardware.SystemSensorManager: boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor)>
<com.android.server.wm.WindowManagerService: void updateNonSystemOverlayWindowsVisibilityIfNeeded(com.android.server.wm.WindowState,boolean)>
<android.telecom.Logging.SessionManager: void startSession(java.lang.String,java.lang.String)>
<com.android.server.connectivity.NetdEventListenerService: android.net.metrics.NetworkMetrics getMetricsForNetwork(long,int)>
<android.telecom.Conference: void setConferenceableConnections(java.util.List)>
<android.hardware.SystemSensorManager: void updateDynamicSensorList()>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void onPackagesUnsuspended(java.lang.String[])>
<com.android.server.appwidget.AppWidgetServiceImpl: boolean addProviderLocked(android.content.pm.ResolveInfo)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void readPreferenceDeniedList(org.xmlpull.v1.XmlPullParser)>
<com.android.server.audio.AudioDeviceInventory: void onSaveSetPreferredDevice(int,android.media.AudioDeviceAttributes)>
<com.android.server.SystemConfig: void readComponentOverrides(org.xmlpull.v1.XmlPullParser,java.io.File)>
<com.android.server.wm.SurfaceAnimationRunner: void startAnimation(com.android.server.wm.LocalAnimationAdapter$AnimationSpec,android.view.SurfaceControl,android.view.SurfaceControl$Transaction,java.lang.Runnable)>
<com.android.server.connectivity.DnsManager: void updateTransportsForNetwork(int,int[])>
<com.android.server.utils.quota.UptcMap: void add(int,java.lang.String,java.lang.String,java.lang.Object)>
<android.widget.Toast: void addCallback(android.widget.Toast$Callback)>
<com.android.server.wm.LaunchObserverRegistryImpl: void handleRegisterLaunchObserver(com.android.server.wm.ActivityMetricsLaunchObserver)>
<com.android.internal.util.TraceBuffer: void add(java.lang.Object)>
<android.hardware.SensorPrivacyManager: void addSensorPrivacyListener(android.hardware.SensorPrivacyManager$OnSensorPrivacyChangedListener)>
<android.media.session.MediaSessionLegacyHelper: android.media.session.MediaSessionLegacyHelper$SessionHolder getHolder(android.app.PendingIntent,boolean)>
<com.android.internal.os.BatteryStatsImpl: void removeIsolatedUidLocked(int)>
<com.android.i18n.phonenumbers.internal.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)>
<com.android.server.wm.RecentsAnimation: void lambda$finishAnimation$0$RecentsAnimation(int,boolean,com.android.server.wm.RecentsAnimationController)>
<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowAnimator$DisplayContentsAnimator getDisplayContentsAnimatorLocked(int)>
<com.android.server.wm.WindowStateAnimator: void markPreservedSurfaceForDestroy()>
<com.android.server.notification.ConditionProviders: void addSystemProvider(com.android.server.notification.SystemConditionProviderService)>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.transition.Transition$2: void onAnimationStart(android.animation.Animator)>
<com.android.server.SystemConfig: void readPermission(org.xmlpull.v1.XmlPullParser,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopePreO(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: void readFileConfigs(java.util.SortedMap)>
<android.transition.Transition: void captureValues(android.view.ViewGroup,boolean)>
<com.android.server.notification.NotificationHistoryManager: void onUserStopped(int)>
<android.media.MediaTranscodeManager: android.media.MediaTranscodeManager$TranscodingJob enqueueTranscodingRequest(android.media.MediaTranscodeManager$TranscodingRequest,java.util.concurrent.Executor,android.media.MediaTranscodeManager$OnTranscodingFinishedListener)>
<android.view.ViewRootImpl: void addSurfaceChangedCallback(android.view.ViewRootImpl$SurfaceChangedCallback)>
<android.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)>
<com.android.framework.protobuf.LazyStringArrayList: void add(int,com.android.framework.protobuf.ByteString)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void insert(int,android.widget.RemoteViews,long,int[])>
<com.android.location.provider.ActivityRecognitionProvider: void registerSink(com.android.location.provider.ActivityRecognitionProvider$Sink)>
<com.android.server.wm.TaskSnapshotController: void lambda$screenTurningOff$2$TaskSnapshotController(com.android.server.wm.Task)>
<android.hardware.camera2.CameraManager$CameraManagerGlobal: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,java.util.concurrent.Executor)>
<com.android.internal.net.VpnConfig: void addLegacyRoutes(java.lang.String)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage commitReconciledScanResultLocked(com.android.server.pm.PackageManagerService$ReconciledPackage,int[])>
<com.android.server.pm.PackageSettingBase: void addDisabledComponent(java.lang.String,int)>
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int,int,long)>
<com.android.server.wm.Session: void windowAddedLocked(java.lang.String)>
<com.android.server.am.CachedAppOptimizer$MemCompactionHandler: void handleMessage(android.os.Message)>
<com.android.server.SensorPrivacyService$SensorPrivacyHandler: void addListener(android.hardware.ISensorPrivacyListener)>
<com.android.server.media.BluetoothRouteProvider$DeviceStateChangedReceiver: void handleConnectionStateChanged(int,android.content.Intent,android.bluetooth.BluetoothDevice)>
<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>
<android.renderscript.Allocation: void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener)>
<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>
<android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] getExportedProperties(java.lang.Class)>
<com.android.server.pm.Settings: java.lang.String addRenamedPackageLPw(java.lang.String,java.lang.String)>
<com.android.internal.util.NotificationMessagingUtil: void cacheDefaultSmsApp(int)>
<com.android.server.DeviceIdleController: void registerStationaryListener(com.android.server.DeviceIdleInternal$StationaryListener)>
<android.telecom.Logging.EventManager: void lambda$changeEventCacheSize$1$EventManager(android.telecom.Logging.EventManager$EventRecord)>
<android.media.MediaRouter2Manager: void changeRoutesOnHandler(java.util.List)>
<com.android.server.am.ActivityManagerService: void addErrorToDropBox(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.io.File,android.app.ApplicationErrorReport$CrashInfo)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata addNumberFormat(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>
<android.transition.Transition$ArrayListManager: java.util.ArrayList add(java.util.ArrayList,java.lang.Object)>
<com.android.server.power.PowerManagerService: void uidActiveInternal(int)>
<com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.metrics.InProgressSmsSession startNewSmsSessionIfNeeded(int)>
<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addViewRect(android.view.View$AttachInfo$InvalidateInfo)>
<com.android.server.inputmethod.InputMethodUtils$InputMethodSettings: void putInt(java.lang.String,int)>
<android.app.AlarmManager: void setImpl(int,long,long,long,int,android.app.PendingIntent,android.app.AlarmManager$OnAlarmListener,java.lang.String,android.os.Handler,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
<com.android.internal.os.BatteryStatsImpl: void recordDailyStatsLocked()>
<android.app.PropertyInvalidatedCache: void invalidateCacheLocked(java.lang.String)>
<com.android.server.textservices.TextServicesManagerService: void initializeInternalStateLocked(int)>
<android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher: void prefetchSiblingsOfVirtualNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeProvider,java.util.List)>
<com.android.framework.protobuf.ExtensionRegistryLite: void add(com.android.framework.protobuf.GeneratedMessageLite$GeneratedExtension)>
<com.android.server.audio.SoundEffectsHelper$SoundPoolLoader: void addHandler(com.android.server.audio.SoundEffectsHelper$OnEffectsLoadCompleteHandler)>
<com.android.server.location.gnss.GnssVisibilityControl: void handleUpdateProxyApps(java.util.List)>
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>
<android.transition.Transition: void matchNames(android.util.ArrayMap,android.util.ArrayMap,android.util.ArrayMap,android.util.ArrayMap)>
<android.transition.Transition: void matchInstances(android.util.ArrayMap,android.util.ArrayMap)>
<android.view.ViewGroup: boolean notifyChildOfDragStart(android.view.View)>
<com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
<com.android.server.accessibility.KeyEventDispatcher: boolean notifyKeyEventLocked(android.view.KeyEvent,int,java.util.List)>
<android.net.ConnectivityDiagnosticsManager: void registerConnectivityDiagnosticsCallback(android.net.NetworkRequest,java.util.concurrent.Executor,android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback)>
<com.android.server.notification.NotificationManagerService: void handleGroupedNotificationLocked(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,int,int)>
<com.android.server.job.controllers.QuotaController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>
<com.android.internal.telephony.dataconnection.DataEnabledOverride: void setAlwaysAllowMms(boolean)>
<com.android.server.usage.UsageStatsService: void onStartUser(android.content.pm.UserInfo)>
<com.android.server.pm.permission.BasePermission: boolean readLPw(java.util.Map,org.xmlpull.v1.XmlPullParser)>
<com.android.server.notification.NotificationManagerService$EnqueueNotificationRunnable: void run()>
<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void appendConnectorWithCondition(java.util.function.Predicate)>
<com.android.internal.os.BatteryStatsImpl$Uid: void makeWifiBatchedScanBin(int,android.os.Parcel)>
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>
<com.android.server.notification.GroupHelper: void onNotificationPosted(android.service.notification.StatusBarNotification,boolean)>
<com.android.server.hdmi.HdmiControlService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>
<com.android.server.content.SyncManager$SyncHandler: android.os.PowerManager$WakeLock getSyncWakeLock(com.android.server.content.SyncOperation)>
<com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.server.net.NetworkStatsObservers: void handleRegister(com.android.server.net.NetworkStatsObservers$RequestInfo)>
<com.android.server.trust.TrustManagerService: void handleScheduleTrustTimeout(int,int)>
<android.os.SystemProperties: void addChangeCallback(java.lang.Runnable)>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void onPackagesSuspended(java.lang.String[])>
<android.app.ApplicationLoaders: void createAndCacheNonBootclasspathSystemClassLoader(android.content.pm.SharedLibraryInfo)>
<android.media.AudioManager: void registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)>
<com.android.server.om.OverlayReferenceMapper: void addOverlayToMap(java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.AnomalyReporter: void reportAnomaly(java.util.UUID,java.lang.String)>
<android.media.ExifInterface: void readImageFileDirectory(android.media.ExifInterface$ByteOrderedDataInputStream,int)>
<android.nfc.NfcAdapter: boolean addNfcUnlockHandler(android.nfc.NfcAdapter$NfcUnlockHandler,java.lang.String[])>
<com.android.server.infra.FrameworkResourcesServiceNameResolver: void setTemporaryService(int,java.lang.String,int)>
<com.android.server.notification.NotificationUsageStats: void emit()>
<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport getViewportLocked(int,java.lang.String)>
<android.view.accessibility.AccessibilityCache: void add(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.server.devicepolicy.NetworkLoggingHandler: void handleMessage(android.os.Message)>
<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>
<com.android.server.wm.TaskSnapshotPersister$1: void run()>
<com.android.server.PackageWatchdog: void lambda$startObservingHealth$3$PackageWatchdog(com.android.server.PackageWatchdog$PackageHealthObserver,java.util.List,java.util.List)>
<android.app.LoaderManagerImpl: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void accept(com.android.server.job.controllers.JobStatus)>
<com.android.server.wm.AppWarnings: void setPackageFlag(java.lang.String,int,boolean)>
<com.android.framework.protobuf.Protobuf: com.android.framework.protobuf.Schema registerSchema(java.lang.Class,com.android.framework.protobuf.Schema)>
<com.android.server.wm.ActivityStack$RemoveHistoryRecordsForApp: void addActivityToRemove(com.android.server.wm.ActivityRecord)>
<com.android.server.notification.NotificationManagerService$1: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String,int)>
<com.android.server.accessibility.AccessibilityInputFilter: void enableFeatures()>
<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata addNumberFormat(com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat)>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>
<com.android.server.media.BluetoothRouteProvider$BluetoothProfileListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<com.android.internal.telephony.uicc.IccRecords: int storePendingTransaction(android.os.Message,java.lang.Object)>
<android.media.MediaRouter2: void createControllerOnHandler(int,android.media.RoutingSessionInfo)>
<com.android.server.power.ThermalManagerService$TemperatureWatcher: void updateTemperature()>
<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.hardware.location.IContextHubClientCallback)>
<com.android.server.wm.ActivityStackSupervisor: void addToMultiWindowModeChangedList(com.android.server.wm.ActivityRecord)>
<com.android.framework.protobuf.FieldSet: void mergeFromField(java.util.Map$Entry)>
<com.android.server.usage.UsageStatsService: void reportEvent(android.app.usage.UsageEvents$Event,int)>
<com.android.server.wm.RecentTasks: void loadPersistedTaskIdsForUserLocked(int)>
<com.android.server.net.NetworkPolicyManagerService: void readPolicyAL()>
<com.android.server.am.ActiveServices: boolean collectPackageServicesLocked(java.lang.String,java.util.Set,boolean,boolean,android.util.ArrayMap)>
<com.android.internal.app.procstats.ProcessStats: java.lang.String readCommonString(android.os.Parcel,int)>
<com.android.server.BatteryService: void sendBatteryLevelChangedIntentLocked()>
<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(int,android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>
<com.android.server.audio.PlaybackActivityMonitor: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher,boolean)>
<com.android.server.ConnectivityService: void handleRegisterNetworkAgent(com.android.server.connectivity.NetworkAgentInfo,android.net.INetworkMonitor)>
<com.android.server.location.LocationManagerService: void initializeProvidersLocked()>
<com.android.server.usb.UsbProfileGroupSettingsManager: void readPreference(org.xmlpull.v1.XmlPullParser)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>
<com.android.server.appop.AppOpsService: java.util.ArrayList addChange(java.util.ArrayList,int,int,java.lang.String)>
<com.android.server.AlarmManagerService$AlarmThread: void run()>
<com.android.server.wm.LaunchParamsController: void registerModifier(com.android.server.wm.LaunchParamsController$LaunchParamsModifier)>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<com.android.server.wm.RecentTasks: void syncPersistentTaskIdsLocked()>
<com.android.internal.os.RailStats: void updateRailData(long,java.lang.String,java.lang.String,long,long)>
<android.view.ViewRootImpl: void addFirstDrawHandler(java.lang.Runnable)>
<android.app.LoaderManagerImpl: void installLoader(android.app.LoaderManagerImpl$LoaderInfo)>
<com.android.server.location.gnss.GnssNetworkConnectivityHandler: com.android.server.location.gnss.GnssNetworkConnectivityHandler$NetworkAttributes updateTrackedNetworksState(boolean,android.net.Network,android.net.NetworkCapabilities)>
<com.android.framework.protobuf.SmallSortedMap: java.lang.Object removeArrayEntryAt(int)>
<com.android.server.appwidget.AppWidgetServiceImpl$BackupRestoreController: void stashHostRestoreUpdateLocked(com.android.server.appwidget.AppWidgetServiceImpl$Host,int,int)>
<com.android.server.wm.LockTaskController: void setLockTaskMode(com.android.server.wm.Task,int,java.lang.String,boolean)>
<com.android.server.net.NetworkPolicyManagerService: void updateSubscriptions()>
<com.android.server.wm.WindowManagerService: void prepareNoneTransitionForRelaunching(com.android.server.wm.ActivityRecord)>
<com.android.server.pm.ComponentResolver$ProviderIntentResolver: void addProvider(android.content.pm.parsing.component.ParsedProvider)>
<com.android.server.wm.RecentTasks: int processNextAffiliateChainLocked(int)>
<android.media.MediaRouter2: void changeRoutesOnHandler(java.util.List)>
<android.view.ViewTreeObserver: void merge(android.view.ViewTreeObserver)>
<android.filterfw.core.FilterFactory: void addFilterLibrary(java.lang.String)>
<com.android.server.AlarmManagerService: void recordWakeupAlarms(java.util.ArrayList,long,long)>
<android.app.Notification$Builder: android.app.Notification$Builder addPerson(android.app.Person)>
<android.hardware.hdmi.HdmiControlManager: void addHotplugEventListener(android.hardware.hdmi.HdmiControlManager$HotplugEventListener)>
<com.android.server.power.batterysaver.FileUpdater: void writeFiles(android.util.ArrayMap)>
<com.android.server.am.ActivityManagerService: boolean isReceivingBroadcastLocked(com.android.server.am.ProcessRecord,android.util.ArraySet)>
<com.android.server.net.watchlist.WatchlistReportDbHelper: boolean insertNewRecord(byte[],java.lang.String,long)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void writeImsSetFeatureValue(int,int,int,int)>
<com.android.internal.telephony.SubscriptionController$WatchedSlotIndexToSubIds: void addToSubIdList(int,java.lang.Integer)>
<com.android.server.blob.BlobStoreManagerService: android.util.LongSparseArray getUserSessionsLocked(int)>
<android.net.VpnService$Builder: android.net.VpnService$Builder addAllowedApplication(java.lang.String)>
<com.android.server.wm.LaunchParamsPersister: void loadLaunchParams(int)>
<com.qualcomm.qcrilhook.QmiOemHook: void registerService(short,android.os.Handler,int)>
<com.android.server.wm.ActivityRecord: boolean addToFinishingAndWaitForIdle()>
<com.android.server.hdmi.HdmiCecController: void addLocalDevice(int,com.android.server.hdmi.HdmiCecLocalDevice)>
<com.android.internal.telephony.uicc.CarrierTestOverride: void loadCarrierTestOverrides()>
<com.android.framework.protobuf.LazyStringArrayList: void add(int,java.lang.String)>
<android.net.NetworkPolicyManager: void registerSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)>
<com.android.internal.telephony.metrics.TelephonyMetrics: void addTelephonyEvent(com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent)>
<android.content.UndoManager: void pushWorkingState()>
<android.content.ClipDescription: void addMimeTypes(java.lang.String[])>
<android.animation.LayoutTransition: void setupChangeAnimation(android.view.ViewGroup,int,android.animation.Animator,long,android.view.View)>
<android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper: void startRegistration()>
<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>
<android.media.MediaRouter2Manager: void updatePreferredFeatures(java.lang.String,java.util.List)>
<android.app.backup.FullBackup: android.app.backup.FullBackup$BackupScheme getBackupScheme(android.content.Context)>
<com.android.internal.os.AtomicDirectory: java.io.FileOutputStream openWrite(java.io.File)>
<android.nfc.cardemulation.NfcFCardEmulation: android.nfc.cardemulation.NfcFCardEmulation getInstance(android.nfc.NfcAdapter)>
<com.android.internal.widget.PointerLocationView: void onPointerEvent(android.view.MotionEvent)>
<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>
<com.android.server.accessibility.MagnificationController: void register(int)>
<com.android.server.role.RoleManagerService: void maybeGrantDefaultRolesAsync(int)>
<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData createKeyphraseModelDataLocked(java.util.UUID,int)>
<com.android.server.StorageManagerService: void snapshotAndMonitorLegacyStorageAppOp(android.os.UserHandle)>
<com.android.internal.app.LocaleStore: void fillCache(android.content.Context)>
<com.android.server.appop.AppOpsService: void readNoteOpCallerStackTraces()>
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>
<com.android.server.display.DisplayManagerService: void applyGlobalDisplayStateLocked(java.util.List)>
<com.android.server.display.DisplayModeDirector: android.util.SparseArray getOrCreateVotesByDisplay(int)>
<com.android.server.media.MediaRouter2ServiceImpl: com.android.server.media.MediaRouter2ServiceImpl$UserRecord getOrCreateUserRecordLocked(int)>
<android.content.UndoManager: android.content.UndoOwner getOwner(java.lang.String,java.lang.Object)>
<com.android.internal.telephony.dataconnection.TransportManager: void handleMessage(android.os.Message)>
<android.content.pm.LauncherApps: void registerShortcutChangeCallback(android.content.pm.LauncherApps$ShortcutChangeCallback,android.content.pm.LauncherApps$ShortcutQuery,java.util.concurrent.Executor)>
<com.android.server.display.PersistentDataStore: void loadDisplaysFromXml(org.xmlpull.v1.XmlPullParser)>
<com.android.server.devicepolicy.Owners: boolean readLegacyOwnerFileLocked(java.io.File)>
<com.android.server.media.BluetoothRouteProvider: void addEventReceiver(java.lang.String,com.android.server.media.BluetoothRouteProvider$BluetoothEventReceiver)>
<com.android.internal.util.ContrastColorUtil: boolean isGrayscaleIcon(android.graphics.Bitmap)>
<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
<com.android.server.usb.UsbHostManager: void addConnectionRecord(java.lang.String,int,byte[])>
<com.android.internal.os.RpmStats: com.android.internal.os.RpmStats$PowerStatePlatformSleepState getAndUpdatePlatformState(java.lang.String,long,int)>
<com.android.server.usage.StorageStatsService$LocalService: void registerStorageStatsAugmenter(com.android.server.usage.StorageStatsManagerInternal$StorageStatsAugmenter,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: void onCleanupUserLocked(int)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: void run()>
<android.os.TestLooperManager: void <init>(android.os.Looper)>
<com.android.internal.app.procstats.SparseMappingTable$Table: int getOrAddKey(byte,int)>
<android.app.QueuedWork: void queue(java.lang.Runnable,boolean)>
<com.android.server.StorageManagerService: void addInternalVolumeLocked()>
<com.android.server.SystemConfig: void readOemPermissions(org.xmlpull.v1.XmlPullParser)>
<com.android.server.wm.SurfaceAnimator: void transferAnimation(com.android.server.wm.SurfaceAnimator)>
<com.android.server.wm.FixedRotationAnimationController: void fadeWindowToken(boolean,com.android.server.wm.WindowToken)>
<com.android.internal.os.BatteryStatsImpl: void removeUidStatsLocked(int)>
<com.android.server.inputmethod.InputMethodManagerService$MyPackageMonitor: void addKnownImePackageNameLocked(java.lang.String)>
<android.telecom.Conference: android.telecom.Conference addListener(android.telecom.Conference$Listener)>
<android.telephony.SmsManager: android.telephony.SmsManager getSmsManagerForSubscriptionId(int)>
<android.graphics.LeakyTypefaceStorage: void writeTypefaceToParcel(android.graphics.Typeface,android.os.Parcel)>
<android.media.MediaRouter2: void addRoutesOnHandler(java.util.List)>
<com.android.server.notification.NotificationHistoryManager: void replaceNotificationHistoryDatabase(int,com.android.server.notification.NotificationHistoryDatabase)>
<com.android.server.input.PersistentDataStore: void loadInputDevicesFromXml(org.xmlpull.v1.XmlPullParser)>
<android.view.ViewTreeObserver$CopyOnWriteArray: void addAll(android.view.ViewTreeObserver$CopyOnWriteArray)>
<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: java.util.List toListLocked(java.util.List,int)>
<com.android.server.media.BluetoothRouteProvider: void addActiveRoute(com.android.server.media.BluetoothRouteProvider$BluetoothRouteInfo)>
<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>
<com.android.server.wm.DisplayPolicy: void adjustWindowParamsLw(com.android.server.wm.WindowState,android.view.WindowManager$LayoutParams,int,int)>
<com.android.server.pm.PackageManagerService$PackageManagerInternalImpl: com.android.server.pm.PackageList getPackageList(android.content.pm.PackageManagerInternal$PackageListObserver)>
<com.android.framework.protobuf.nano.FieldData: void addUnknownField(com.android.framework.protobuf.nano.UnknownFieldData)>
<android.view.ViewGroup: void addTransientView(android.view.View,int)>
<com.android.internal.telephony.TelephonyDevController: void updateOrInsert(com.android.internal.telephony.HardwareConfig,java.util.ArrayList)>
<android.media.session.MediaSessionManager: void addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)>
<com.android.server.pm.Settings: boolean readLPw(java.util.List)>
<com.android.server.wm.WindowManagerService: boolean prepareWindowReplacementTransition(com.android.server.wm.ActivityRecord)>
<com.android.server.appwidget.AppWidgetServiceImpl$BackupRestoreController: void stashProviderRestoreUpdateLocked(com.android.server.appwidget.AppWidgetServiceImpl$Provider,int,int)>
<com.android.server.location.gnss.GnssNetworkConnectivityHandler$1: void onSubscriptionsChanged()>
<android.widget.RemoteViewsService: android.os.IBinder onBind(android.content.Intent)>
<com.android.server.sip.SipSessionGroup: void removeSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.telecom.ConnectionService: java.lang.String addConferenceInternal(android.telecom.Conference)>
<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,int,android.os.Handler)>
<com.android.server.StorageManagerService$4: void onVolumeCreated(java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.app.role.RoleManager: void addOnRoleHoldersChangedListenerAsUser(java.util.concurrent.Executor,android.app.role.OnRoleHoldersChangedListener,android.os.UserHandle)>
<com.android.server.PackageWatchdog: void registerHealthObserver(com.android.server.PackageWatchdog$PackageHealthObserver)>
<android.app.AppOpsManager: void readAndLogNotedAppops(android.os.Parcel)>
<com.android.server.storage.AppFuseBridge: android.os.ParcelFileDescriptor addBridge(com.android.server.storage.AppFuseBridge$MountScope)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$DualTimer getSensorTimerLocked(int,boolean)>
<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String,boolean)>
<com.android.internal.telephony.SmsNumberUtils: java.util.ArrayList getAllIDDs(android.content.Context,java.lang.String)>
<com.android.server.textclassifier.IconsUriHelper: android.net.Uri getContentUri(java.lang.String,int)>
<com.android.internal.telephony.CarrierServiceBindHelper: void updateBindingsAndSimStates()>
<android.hardware.camera2.marshal.impl.MarshalQueryableEnum: void registerEnumValues(java.lang.Class,int[])>
<com.android.server.pm.PackageManagerService: void commitSharedLibraryInfoLocked(android.content.pm.SharedLibraryInfo)>
<com.android.server.wm.WindowState: boolean addEmbeddedDisplayContent(com.android.server.wm.DisplayContent)>
<com.android.server.am.ActivityManagerService: void addProcessToGcListLocked(com.android.server.am.ProcessRecord)>
<com.android.server.wm.WindowState: void onUnfreezeBounds()>
<com.android.server.trust.TrustManagerService: void refreshAgentList(int)>
<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>
<com.android.server.am.ActivityManagerService: void addServiceToMap(android.util.ArrayMap,java.lang.String)>
<com.android.server.autofill.AutofillManagerService$AugmentedAutofillState: void setServiceInfo(int,java.lang.String,boolean)>
<com.android.server.content.SyncStorageEngine: void readStatusParcelLocked(java.io.File)>
<com.android.server.notification.NotificationHistoryDatabase$WriteBufferRunnable: void run(long,android.util.AtomicFile)>
<com.android.server.DeviceIdleController: void readConfigFileLocked(org.xmlpull.v1.XmlPullParser)>
<com.android.server.display.PersistentDataStore$BrightnessConfigurations: void loadFromXml(org.xmlpull.v1.XmlPullParser)>
<com.android.server.pm.StagingManager: void restoreSession(com.android.server.pm.PackageInstallerSession,boolean)>
<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>
<com.android.server.wm.RecentTasks: void registerCallback(com.android.server.wm.RecentTasks$Callbacks)>
<com.android.server.wm.DisplayContent: void lambda$destroyLeakedSurfaces$15$DisplayContent(com.android.server.wm.WindowState)>
<android.os.storage.StorageManager: void registerStorageVolumeCallback(java.util.concurrent.Executor,android.os.storage.StorageManager$StorageVolumeCallback)>
<android.widget.RemoteViews: java.lang.invoke.MethodHandle getMethod(android.view.View,java.lang.String,java.lang.Class,boolean)>
<com.android.framework.protobuf.LazyStringArrayList: void add(byte[])>
<com.android.server.notification.ZenModeFiltering$RepeatCallers: void recordCall(android.content.Context,android.os.Bundle)>
<com.android.server.wm.ActivityTaskManagerService$LocalService: void onUidAddedToPendingTempWhitelist(int,java.lang.String)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void readExternal(java.io.ObjectInput)>
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>
<com.android.server.ConnectivityService: void handleRegisterNetworkProvider(com.android.server.ConnectivityService$NetworkProviderInfo)>
<com.android.server.notification.RankingHelper: void sort(java.util.ArrayList)>
<com.android.server.NativeDaemonConnector$ResponseQueue: void add(int,com.android.server.NativeDaemonEvent)>
<com.android.server.sip.SipSessionGroup: void addSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.os.StrictMode: void decrementExpectedActivityCount(java.lang.Class)>
<com.android.server.pm.PackageSignatures: void writeCertsListXml(org.xmlpull.v1.XmlSerializer,java.util.ArrayList,android.content.pm.Signature[],boolean)>
<android.hardware.hdmi.HdmiControlManager: void addHdmiControlStatusChangeListener(android.hardware.hdmi.HdmiControlManager$HdmiControlStatusChangeListener)>
<android.animation.LayoutTransition: void runAppearingTransition(android.view.ViewGroup,android.view.View)>



========================== ReachableRiskyMethods(351) ==============================
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>
<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,int,int)>
<com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,android.app.ITransientNotification,int,int,android.app.ITransientNotificationCallback)>
<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>
<com.android.server.UiModeManagerService: void enableCarMode(int,java.lang.String)>
<com.android.server.am.PendingTempWhitelists: void put(int,com.android.server.am.ActivityManagerService$PendingTempWhitelist)>
<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: void getExitInfoLocked(int,int,java.util.ArrayList)>
<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>
<com.android.server.usage.AppTimeLimitController: void noteUsageStart(java.lang.String,int,long)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ContentProviderConnection incProviderCountLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String,java.lang.String,boolean)>
<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>
<com.android.server.am.ProcessList$ImperceptibleKillRunner: boolean enqueueLocked(com.android.server.am.ProcessRecord,java.lang.String,int)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>
<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>
<android.util.SparseArrayMap: void add(int,java.lang.String,java.lang.Object)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<com.android.server.pm.dex.PackageDynamicCodeLoading: boolean record(java.lang.String,java.lang.String,int,int,java.lang.String)>
<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserInternalUncheckedNoTracing(java.lang.String,java.lang.String,int,int,boolean,java.lang.String[],com.android.server.utils.TimingsTraceAndSlog)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<com.android.server.am.CachedAppOptimizer: void compactAppFull(com.android.server.am.ProcessRecord)>
<com.android.server.wm.PersisterQueue: void addItem(com.android.server.wm.PersisterQueue$WriteQueueItem,boolean)>
<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>
<com.android.server.am.BroadcastDispatcher: void startDeferring(int)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>
<com.android.server.am.ActiveServices: void registerAppOpCallbackLocked(com.android.server.am.ServiceRecord)>
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
<com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>
<com.android.internal.app.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>
<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>
<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>
<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>
<com.android.server.notification.PreferencesHelper: void readXml(org.xmlpull.v1.XmlPullParser,boolean,int)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>
<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>
<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
<com.android.server.am.ProcessList: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,int,java.lang.String)>
<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>
<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>
<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>
<com.android.server.media.MediaSessionStack: java.util.List getActiveSessions(int)>
<com.android.server.location.LocationRequestStatistics: void startRequesting(java.lang.String,java.lang.String,java.lang.String,long,boolean)>
<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>
<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>
<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>
<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
<android.app.ResourcesManager: android.content.res.ApkAssets loadApkAssets(java.lang.String,boolean,boolean)>
<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>
<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>
<com.android.server.am.ActivityManagerService: void requireAllowedAssociationsLocked(java.lang.String)>
<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void onStart(java.util.UUID)>
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>
<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutUser getUserShortcutsLocked(int)>
<com.android.server.notification.PreferencesHelper: boolean createNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,boolean)>
<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<com.android.server.IntentResolver: void remove_all_objects(android.util.ArrayMap,java.lang.String,java.lang.Object)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopJobLocked(java.lang.String,long,int)>
<android.app.admin.SystemUpdatePolicy$1: android.app.admin.SystemUpdatePolicy createFromParcel(android.os.Parcel)>
<com.android.server.location.LocationRequestStatistics$RequestSummaryLimitedHistory: void addRequestSummary(com.android.server.location.LocationRequestStatistics$RequestSummary)>
<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$UidState getUidStateLocked(int,boolean)>
<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>
<com.android.server.AlarmManagerService: boolean addBatchLocked(java.util.ArrayList,com.android.server.AlarmManagerService$Batch)>
<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
<com.android.server.print.PrintManagerService$PrintManagerImpl: com.android.server.print.UserState getOrCreateUserStateLocked(int,boolean,boolean)>
<com.android.internal.telephony.TelephonyPermissions: boolean reportAccessDeniedToReadIdentifiers(android.content.Context,int,int,int,java.lang.String,java.lang.String)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$Association startAssociationLocked(int,java.lang.String,int,int,long,android.content.ComponentName,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<com.android.internal.app.procstats.AssociationState$SourceState: void trackProcState(int,int,long)>
<com.android.server.am.CachedAppOptimizer: void compactAppBfgs(com.android.server.am.ProcessRecord)>
<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>
<com.android.server.am.ActiveServices: void setServiceForegroundInnerLocked(com.android.server.am.ServiceRecord,int,android.app.Notification,int,int)>
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>
<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>
<com.android.server.am.ProcessList: android.os.AppZygote createAppZygoteForProcessIfNeeded(com.android.server.am.ProcessRecord)>
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>
<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>
<com.android.server.display.PersistentDataStore: boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)>
<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>
<com.android.server.wm.RecentTasks: void cleanupLocked(int)>
<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>
<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>
<com.android.server.am.ProcessList: int updateLruProcessInternalLocked(com.android.server.am.ProcessRecord,long,int,int,java.lang.String,java.lang.Object,com.android.server.am.ProcessRecord)>
<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
<android.app.NotificationChannelGroup: void addChannel(android.app.NotificationChannel)>
<com.android.server.am.AppExitInfoTracker$IsolatedUidRecords: void addIsolatedUid(int,int)>
<com.android.server.statusbar.StatusBarManagerService: void manageDisableListLocked(int,int,android.os.IBinder,java.lang.String,int)>
<com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>
<com.android.server.am.ActivityManagerService: boolean requestPssLocked(com.android.server.am.ProcessRecord,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceMap getServiceMapLocked(int)>
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
<android.graphics.GraphicsStatsService: android.graphics.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>
<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: java.lang.Object startObject(java.lang.String)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,int)>
<com.android.server.IntentResolver: void addFilter(java.lang.Object)>
<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>
<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int,int,int,int,int,boolean,int[])>
<com.android.server.content.ContentService: android.util.ArrayMap findOrCreateCacheLocked(int,java.lang.String)>
<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>
<com.android.server.am.ActiveServices: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,boolean,java.lang.String)>
<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>
<com.android.server.am.ServiceRecord: void addConnection(android.os.IBinder,com.android.server.am.ConnectionRecord)>
<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>
<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>
<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean)>
<com.android.server.usage.AppTimeLimitController: void addUsageSessionObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,int)>
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,com.android.server.location.CallerIdentity)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>
<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>
<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>
<com.android.server.notification.PreferencesHelper: void createNotificationChannelGroup(java.lang.String,int,android.app.NotificationChannelGroup,boolean)>
<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
<com.android.server.pm.UserManagerService: com.android.server.pm.RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int)>
<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>
<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>
<com.android.server.pm.Settings: void writeKernelMappingLPr(java.lang.String,int,int[])>
<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void allowAdjustmentType(java.lang.String)>
<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>
<com.android.server.wm.RecentTasks: boolean moveAffiliatedTasksToFront(com.android.server.wm.Task,int)>
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>
<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>
<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>
<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.server.am.UserController: boolean startUserInternal(int,boolean,android.os.IProgressListener,com.android.server.utils.TimingsTraceAndSlog)>
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>
<com.android.server.content.SyncStorageEngine: java.util.List getCurrentSyncsLocked(int)>
<com.android.server.appop.AppOpsService: void setUserRestrictionNoCheck(int,boolean,android.os.IBinder,int,java.lang.String[])>
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByName(int)>
<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>
<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>
<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>
<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>
<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>
<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>
<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData getOrCreateGenericModelDataLocked(java.util.UUID)>
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>
<com.android.server.power.AmbientDisplaySuppressionController: void suppress(java.lang.String,int,boolean)>
<com.android.server.inputmethod.InputMethodManagerService: boolean hideCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>
<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>
<com.android.server.wm.RecentTasks: void removeForAddTask(com.android.server.wm.Task)>
<com.android.server.pm.BackgroundDexOptService: int trackPerformDexOpt(java.lang.String,boolean,java.util.function.Supplier)>
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>
<android.content.SyncAdaptersCache: java.lang.String[] getSyncAdapterPackagesForAuthority(java.lang.String,int)>
<com.android.server.am.ActivityManagerService: void maybeUpdateProviderUsageStatsLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)>
<android.app.ResourcesManager: android.content.res.ResourcesImpl findOrCreateResourcesImplForKeyLocked(android.content.res.ResourcesKey)>
<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>
<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
<com.android.server.inputmethod.InputMethodManagerService: boolean showCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>
<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>
<com.android.server.am.PendingIntentController: void incrementUidStatLocked(com.android.server.am.PendingIntentRecord)>
<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
<com.android.server.wm.WindowProcessController: void addPackage(java.lang.String)>
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>
<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(long)>
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean,boolean)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
<com.android.server.wm.PendingRemoteAnimationRegistry: void addPendingAnimation(java.lang.String,android.view.RemoteAnimationAdapter)>
<com.android.server.usage.AppTimeLimitController: void addAppUsageObserver(int,int,java.lang.String[],long,android.app.PendingIntent,int)>
<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>
<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>
<com.android.server.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>
<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>
<com.android.server.appwidget.AppWidgetServiceImpl: void onWidgetProviderAddedOrChangedLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>
<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>
<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>
<com.android.server.am.AnrHelper: void appNotResponding(com.android.server.am.ProcessRecord,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,com.android.server.wm.WindowProcessController,boolean,java.lang.String)>
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: android.util.ArrayMap getOrAllocate(int)>
<com.android.server.am.ActivityManagerService: void updateProcessForegroundLocked(com.android.server.am.ProcessRecord,boolean,int,boolean)>
<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.usage.AppTimeLimitController: void addAppUsageLimitObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,int)>
<android.hardware.display.DisplayManager: android.view.Display getOrCreateDisplayLocked(int,boolean)>
<com.android.server.pm.Settings$RuntimePermissionPersistence: void readStateForUserSyncLPr(int)>
<com.android.server.appwidget.AppWidgetServiceImpl: com.android.server.appwidget.AppWidgetServiceImpl$Host lookupOrAddHostLocked(com.android.server.appwidget.AppWidgetServiceImpl$HostId)>
<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
<com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState getOrCreateUserState(int)>
<com.android.server.am.BroadcastStats: void addBroadcast(java.lang.String,java.lang.String,int,int,long)>
<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>
<com.android.server.AlarmManagerService: void setImplLocked(com.android.server.AlarmManagerService$Alarm,boolean,boolean)>
<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>
<com.android.server.media.MediaSessionStack: void addSession(com.android.server.media.MediaSessionRecordImpl)>
<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>
<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>
<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)>
<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>
<com.android.server.am.ActiveServices: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean,boolean)>
<com.android.server.BluetoothManagerService: void addActiveLog(int,java.lang.String,boolean)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>
<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>
<com.android.server.am.ActivityManagerService$PidMap: void doAddInternal(com.android.server.am.ProcessRecord)>
<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void noteWakeupAlarmLocked(java.lang.String)>
<com.android.server.am.BroadcastDispatcher: void insertLocked(java.util.ArrayList,com.android.server.am.BroadcastDispatcher$Deferrals)>
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>
<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ProcessState getProcessStateLocked(com.android.internal.app.procstats.ProcessStats$PackageState,java.lang.String)>
<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>
<com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager getOrCreateController(int)>
<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>
<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>
<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>
<com.android.server.location.gnss.GnssManagerService: boolean addGnssDataListenerLocked(java.lang.Object,android.os.IInterface,java.lang.String,java.lang.String,com.android.server.location.RemoteListenerHelper,android.util.ArrayMap,java.util.function.Consumer)>
<com.android.server.job.JobPackageTracker$DataSet: com.android.server.job.JobPackageTracker$PackageEntry getOrCreateEntry(int,java.lang.String)>
<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>
<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>
<com.android.server.am.ActiveUids: void put(int,com.android.server.am.UidRecord)>
<com.android.server.am.ActivityManagerService: void addPidLocked(com.android.server.am.ProcessRecord)>
<com.android.server.am.ProcessRecord$PackageList: com.android.internal.app.procstats.ProcessStats$ProcessStateHolder put(java.lang.String,com.android.internal.app.procstats.ProcessStats$ProcessStateHolder)>
<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>
<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>
<com.android.server.appop.AppOpsService: void collectAsyncNotedOp(int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>
<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>
<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>
<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>
<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
<com.android.server.appwidget.AppWidgetServiceImpl: void addWidgetLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>
<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>
<com.android.server.pm.Settings: int acquireAndRegisterNewAppIdLPw(com.android.server.pm.SettingBase)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$ProcessChangeItem enqueueProcessChangeItemLocked(int,int)>
<com.android.server.am.CachedAppOptimizer: void compactAppSome(com.android.server.am.ProcessRecord)>
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>
<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>
<com.android.server.clipboard.ClipboardService: com.android.server.clipboard.ClipboardService$PerUserClipboard getClipboard(int)>
<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>
<com.android.server.am.BroadcastQueue: void enqueueParallelBroadcastLocked(com.android.server.am.BroadcastRecord)>
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>
<com.android.server.appwidget.AppWidgetServiceImpl: void incrementAppWidgetServiceRefCount(int,android.util.Pair)>
<com.android.server.pm.InstantAppRegistry$CookiePersistence: void addPendingPersistCookieLPw(int,com.android.server.pm.parsing.pkg.AndroidPackage,byte[],java.io.File)>
<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>
<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>
<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>
<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>
<com.android.server.am.ProcessList: void addProcessNameLocked(com.android.server.am.ProcessRecord)>
<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>
<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>
<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>
<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>
<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>
<com.android.server.textclassifier.TextClassificationManagerService: com.android.server.textclassifier.TextClassificationManagerService$UserState getUserStateLocked(int)>
<com.android.server.am.ActivityManagerService: void enqueueUidChangeLocked(com.android.server.am.UidRecord,int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>
<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)>
<com.android.server.am.ProcessRecord: boolean startService(com.android.server.am.ServiceRecord)>
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo createAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>
<android.app.role.RoleControllerManager: void <init>(android.content.ComponentName,android.os.Handler,android.content.Context)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>
<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>
<com.android.server.am.AppExitInfoTracker: void putToSparse2dArray(android.util.SparseArray,int,int,java.lang.Object,java.util.function.Supplier,java.util.function.Consumer)>
<android.content.IntentFilter: void addAction(java.lang.String)>
<com.android.server.am.CachedAppOptimizer: void compactAppPersistent(com.android.server.am.ProcessRecord)>
<android.accounts.Account: void <init>(android.os.Parcel)>
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>
<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>
<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)>
<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>
<com.android.server.DropBoxManagerService$DropBoxManagerBroadcastHandler: void maybeDeferBroadcast(java.lang.String,long)>
<com.android.server.location.ContextHubTransactionManager: void addTransaction(com.android.server.location.ContextHubServiceTransaction)>
<com.android.server.clipboard.ClipboardService: void addActiveOwnerLocked(int,java.lang.String)>
<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>
<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>
<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>
<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>
<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,com.android.server.am.HostingRecord,int,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)>
<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>
<com.android.server.am.BroadcastDispatcher: void enqueueOrderedBroadcastLocked(com.android.server.am.BroadcastRecord)>



========================== AllEntryPointNumForMSPair ==================================
<<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r27)>: 1
<<com.android.server.usage.AppTimeLimitController: void noteUsageStart(java.lang.String,int,long)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r4)>: 2
<<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>--interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3)>: 1
<<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)>: 2
<<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>--virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, $r10)>: 1
<<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>--virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r14)>: 1
<<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>--virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)>: 3
<<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>--virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r0)>: 1
<<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 8
<<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)>: 2
<<com.android.server.usage.AppTimeLimitController: void addUsageSessionObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,int)>--virtualinvoke $r16.<android.util.SparseArray: void append(int,java.lang.Object)>(i5, r25)>: 1
<<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>--virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7)>: 1
<<com.android.server.pm.UserManagerService: com.android.server.pm.RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 232
<<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: void getExitInfoLocked(int,int,java.util.ArrayList)>--virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r21)>: 1
<<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>--virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)>: 1
<<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>--virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r17)>: 4
<<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r17)>: 4
<<android.app.admin.SystemUpdatePolicy$1: android.app.admin.SystemUpdatePolicy createFromParcel(android.os.Parcel)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7)>: 1
<<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)>: 1
<<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)>: 22
<<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 1
<<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 1
<<com.android.server.usage.AppTimeLimitController: void addAppUsageObserver(int,int,java.lang.String[],long,android.app.PendingIntent,int)>--virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)>: 1
<<com.android.server.am.BroadcastDispatcher: void insertLocked(java.util.ArrayList,com.android.server.am.BroadcastDispatcher$Deferrals)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i4, r1)>: 1
<<com.android.server.am.BroadcastDispatcher: void startDeferring(int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r9)>: 1
<<com.android.server.media.MediaSessionStack: java.util.List getActiveSessions(int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)>: 1
<<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>--virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r56)>: 1
<<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,com.android.server.location.CallerIdentity)>--interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r16)>: 1
<<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10)>: 2
<<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r6)>: 1
<<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 3
<<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, r22)>: 4
<<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)>: 4
<<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo createAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r9)>: 7
<<com.android.server.clipboard.ClipboardService: com.android.server.clipboard.ClipboardService$PerUserClipboard getClipboard(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)>: 8
<<com.android.server.am.CachedAppOptimizer: void compactAppSome(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 29
<<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>--virtualinvoke $r37.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r70)>: 1
<<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>--virtualinvoke r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r66, $r48)>: 1
<<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>--virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r2)>: 1
<<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r16)>: 4
<<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 2
<<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r2)>: 1
<<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)>--virtualinvoke $r28.<java.util.ArrayList: boolean add(java.lang.Object)>($r27)>: 5
<<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)>: 1
<<android.accounts.Account: void <init>(android.os.Parcel)>--z2 = interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r0)>: 47
<<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>--virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r16)>: 3
<<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)>: 1
<<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>--r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1)>: 15
<<com.android.server.location.LocationRequestStatistics: void startRequesting(java.lang.String,java.lang.String,java.lang.String,long,boolean)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)>: 2
<<com.android.server.am.ActiveServices: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean,boolean)>--virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)>: 5
<<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>--virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r19)>: 3
<<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r18)>: 3
<<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)>: 1
<<com.android.server.pm.InstantAppRegistry$CookiePersistence: void addPendingPersistCookieLPw(int,com.android.server.pm.parsing.pkg.AndroidPackage,byte[],java.io.File)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 1
<<com.android.server.am.CachedAppOptimizer: void compactAppFull(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 29
<<android.app.role.RoleControllerManager: void <init>(android.content.ComponentName,android.os.Handler,android.content.Context)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r13)>: 3
<<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 56
<<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>--virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r17)>: 7
<<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>--virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20)>: 1
<<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>--interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r15)>: 39
<<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>--virtualinvoke r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r19)>: 14
<<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)>: 11
<<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: java.lang.Object startObject(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, r30)>: 7
<<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)>: 1
<<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)>: 1
<<com.android.server.wm.RecentTasks: void removeForAddTask(com.android.server.wm.Task)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)>: 7
<<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r79)>: 42
<<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>--virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r67)>: 65
<<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>--virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r7)>: 1
<<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>--virtualinvoke $r47.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r75)>: 22
<<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>--virtualinvoke $r29.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)>: 22
<<com.android.server.notification.PreferencesHelper: void readXml(org.xmlpull.v1.XmlPullParser,boolean,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, r46)>: 1
<<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r19)>: 1
<<com.android.server.am.ActiveServices: void registerAppOpCallbackLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)>: 1
<<com.android.server.appwidget.AppWidgetServiceImpl: com.android.server.appwidget.AppWidgetServiceImpl$Host lookupOrAddHostLocked(com.android.server.appwidget.AppWidgetServiceImpl$HostId)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)>: 2
<<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.authtokens", "authtoken", r4)>: 1
<<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r9)>: 1
<<com.android.server.am.BroadcastDispatcher: void enqueueOrderedBroadcastLocked(com.android.server.am.BroadcastRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 11
<<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>--virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)>: 1
<<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r21)>: 37
<<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r21)>: 37
<<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 6
<<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>--virtualinvoke $r42.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, r33)>: 1
<<com.android.server.am.ActiveUids: void put(int,com.android.server.am.UidRecord)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)>: 29
<<com.android.server.UiModeManagerService: void enableCarMode(int,java.lang.String)>--interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r19)>: 2
<<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r22)>: 1
<<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r22)>: 1
<<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>--virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r13)>: 1
<<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>--$l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("shared_accounts", "name", r4)>: 3
<<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r14)>: 214
<<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>--virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r8)>: 41
<<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r18)>: 1
<<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)>: 1
<<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)>: 6
<<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)>: 6
<<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>--virtualinvoke $r47.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r38)>: 1
<<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 11
<<com.android.server.wm.RecentTasks: boolean moveAffiliatedTasksToFront(com.android.server.wm.Task,int)>--virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, r89)>: 7
<<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>--virtualinvoke $r33.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r59)>: 1
<<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>--virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r7)>: 1
<<com.android.server.inputmethod.InputMethodManagerService: boolean showCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>--virtualinvoke $r11.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)>: 2
<<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5)>: 1
<<com.android.server.am.ActivityManagerService: void addPidLocked(com.android.server.am.ProcessRecord)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r6)>: 22
<<com.android.server.am.ProcessList: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,com.android.server.am.HostingRecord,int,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r39)>: 10
<<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)>: 4
<<com.android.server.location.ContextHubTransactionManager: void addTransaction(com.android.server.location.ContextHubServiceTransaction)>--virtualinvoke $r2.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r5)>: 3
<<com.android.server.pm.Settings: int acquireAndRegisterNewAppIdLPw(com.android.server.pm.SettingBase)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)>: 1
<<com.android.server.am.ActivityManagerService: boolean requestPssLocked(com.android.server.am.ProcessRecord,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 29
<<com.android.server.am.AppExitInfoTracker$IsolatedUidRecords: void addIsolatedUid(int,int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 22
<<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>--virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)>: 2
<<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)>: 8
<<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)>: 8
<<com.android.server.IntentResolver: void remove_all_objects(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12)>: 22
<<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>--virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, r1)>: 2
<<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r27)>: 2
<<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r29)>: 2
<<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r24)>: 2
<<com.android.server.wm.PendingRemoteAnimationRegistry: void addPendingAnimation(java.lang.String,android.view.RemoteAnimationAdapter)>--virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)>: 1
<<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>--virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>--virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r19)>: 1
<<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$UidState getUidStateLocked(int,boolean)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)>: 108
<<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>--virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)>: 2
<<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 8
<<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r23)>: 1
<<com.android.server.power.AmbientDisplaySuppressionController: void suppress(java.lang.String,int,boolean)>--interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r11)>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>--z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r6)>: 1
<<com.android.server.wm.RecentTasks: void cleanupLocked(int)>--virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r48)>: 7
<<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>--virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)>: 3
<<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)>: 3
<<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r13)>: 1
<<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>--virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r18)>: 42
<<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>--virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r22)>: 42
<<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean)>--virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r0)>: 7
<<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r44)>: 1
<<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>--virtualinvoke r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r11)>: 5
<<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)>: 2
<<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>--virtualinvoke $r25.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r58)>: 2
<<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r73)>: 2
<<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>--virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21)>: 4
<<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 5
<<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)>: 1
<<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>--virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r6)>: 2
<<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>--virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r11)>: 11
<<com.android.server.pm.Settings$RuntimePermissionPersistence: void readStateForUserSyncLPr(int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r40)>: 5
<<com.android.internal.app.procstats.AssociationState$SourceState: void trackProcState(int,int,long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 29
<<android.content.SyncAdaptersCache: java.lang.String[] getSyncAdapterPackagesForAuthority(java.lang.String,int)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)>: 1
<<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>--virtualinvoke $r19.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r24)>: 14
<<com.android.server.am.CachedAppOptimizer: void compactAppPersistent(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 29
<<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>--interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)>: 2
<<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1)>: 2
<<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r16)>: 1
<<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>--virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r21)>: 1
<<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r22)>: 1
<<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>--virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r11)>: 15
<<com.android.server.am.ServiceRecord: void addConnection(android.os.IBinder,com.android.server.am.ConnectionRecord)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)>: 4
<<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>--virtualinvoke r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r13)>: 1
<<com.android.server.am.ProcessRecord$PackageList: com.android.internal.app.procstats.ProcessStats$ProcessStateHolder put(java.lang.String,com.android.internal.app.procstats.ProcessStats$ProcessStateHolder)>--$r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4)>: 23
<<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r8)>: 1
<<com.android.server.display.PersistentDataStore: boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 1
<<com.android.server.notification.PreferencesHelper: void createNotificationChannelGroup(java.lang.String,int,android.app.NotificationChannelGroup,boolean)>--interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r1)>: 3
<<com.android.server.AlarmManagerService: boolean addBatchLocked(java.util.ArrayList,com.android.server.AlarmManagerService$Batch)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i2, r1)>: 1
<<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>--$l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("grants", "accounts_id", r4)>: 1
<<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)>: 11
<<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 22
<<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12)>: 2
<<android.app.NotificationChannelGroup: void addChannel(android.app.NotificationChannel)>--interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)>: 4
<<android.graphics.GraphicsStatsService: android.graphics.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>--virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r6)>: 1
<<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r128)>: 24
<<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r143)>: 24
<<com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState getOrCreateUserState(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)>: 1
<<com.android.server.pm.dex.PackageDynamicCodeLoading: boolean record(java.lang.String,java.lang.String,int,int,java.lang.String)>--interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)>: 1
<<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r2)>: 6
<<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,int,int)>--interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r21)>: 1
<<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>--virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)>: 4
<<com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager getOrCreateController(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 3
<<com.android.server.am.ActivityManagerService: void enqueueUidChangeLocked(com.android.server.am.UidRecord,int,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)>: 29
<<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>--virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)>: 1
<<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>--virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r12)>: 1
<<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 1
<<com.android.server.inputmethod.InputMethodManagerService: boolean hideCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>--virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r9)>: 4
<<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)>: 1
<<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)>: 1
<<com.android.server.appop.AppOpsService: void setUserRestrictionNoCheck(int,boolean,android.os.IBinder,int,java.lang.String[])>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r17)>: 2
<<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>--virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3)>: 2
<<android.app.ResourcesManager: android.content.res.ResourcesImpl findOrCreateResourcesImplForKeyLocked(android.content.res.ResourcesKey)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)>: 14
<<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)>: 1
<<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)>: 1
<<com.android.server.appop.AppOpsService: void collectAsyncNotedOp(int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r21)>: 131
<<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>--virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)>: 1
<<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i9, r27)>: 1
<<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r25)>: 1
<<com.android.server.am.PendingTempWhitelists: void put(int,com.android.server.am.ActivityManagerService$PendingTempWhitelist)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)>: 5
<<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: android.util.ArrayMap getOrAllocate(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 4
<<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r12)>: 1
<<com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r1)>: 3
<<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 2
<<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean,boolean)>--virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r81)>: 5
<<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$Association startAssociationLocked(int,java.lang.String,int,int,long,android.content.ComponentName,java.lang.String)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)>: 7
<<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>--$l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", "name", r4)>: 2
<<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>--virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2)>: 1
<<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>--virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r27)>: 1
<<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, null)>: 1
<<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>--$l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.accounts", "name", r4)>: 2
<<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r3)>: 1
<<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 1
<<com.android.server.pm.BackgroundDexOptService: int trackPerformDexOpt(java.lang.String,boolean,java.util.function.Supplier)>--virtualinvoke r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r6)>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>--interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(r17)>: 1
<<com.android.server.notification.NotificationManagerService$NotificationAssistants: void allowAdjustmentType(java.lang.String)>--interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r8)>: 1
<<android.hardware.display.DisplayManager: android.view.Display getOrCreateDisplayLocked(int,boolean)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)>: 13
<<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>--virtualinvoke r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)>: 3
<<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>--virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)>: 1
<<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10)>: 2
<<com.android.server.am.UserController: boolean startUserInternal(int,boolean,android.os.IProgressListener,com.android.server.utils.TimingsTraceAndSlog)>--virtualinvoke $r51.<android.util.SparseArray: void put(int,java.lang.Object)>(i22, r87)>: 7
<<com.android.server.textclassifier.TextClassificationManagerService: com.android.server.textclassifier.TextClassificationManagerService$UserState getUserStateLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 7
<<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r52.<java.util.ArrayList: void add(int,java.lang.Object)>(i42, r0)>: 23
<<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 23
<<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r35.<java.util.ArrayList: void add(int,java.lang.Object)>(i35, r0)>: 23
<<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>--virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)>: 2
<<com.android.server.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 1
<<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByName(int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 25
<<com.android.server.am.ProcessList: int updateLruProcessInternalLocked(com.android.server.am.ProcessRecord,long,int,int,java.lang.String,java.lang.Object,com.android.server.am.ProcessRecord)>--virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(i6, r0)>: 23
<<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r27)>: 4
<<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>--interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.content.ContentService: android.util.ArrayMap findOrCreateCacheLocked(int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 2
<<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>--virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)>: 1
<<com.android.server.BluetoothManagerService: void addActiveLog(int,java.lang.String,boolean)>--virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r4)>: 5
<<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r24.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)>: 4
<<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r26.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)>: 4
<<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r166, r168)>: 4
<<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>--virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)>: 5
<<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>--interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>--interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.am.AnrHelper: void appNotResponding(com.android.server.am.ProcessRecord,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,com.android.server.wm.WindowProcessController,boolean,java.lang.String)>--virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)>: 1
<<com.android.server.am.PendingIntentController: void incrementUidStatLocked(com.android.server.am.PendingIntentRecord)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r20)>: 15
<<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)>: 1
<<com.android.server.appwidget.AppWidgetServiceImpl: void onWidgetProviderAddedOrChangedLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>--virtualinvoke r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)>: 2
<<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>--virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r83)>: 2
<<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r37.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 22
<<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>($r40)>: 22
<<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>(r77)>: 22
<<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData getOrCreateGenericModelDataLocked(java.util.UUID)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r7)>: 1
<<com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,android.app.ITransientNotification,int,int,android.app.ITransientNotificationCallback)>--virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r87)>: 2
<<android.util.SparseArrayMap: void add(int,java.lang.String,java.lang.Object)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)>: 3
<<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>--virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r26)>: 1
<<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ProcessState getProcessStateLocked(com.android.internal.app.procstats.ProcessStats$PackageState,java.lang.String)>--virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, r43)>: 32
<<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)>: 5
<<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r47)>: 8
<<com.android.server.wm.WindowProcessController: void addPackage(java.lang.String)>--virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r5)>: 23
<<com.android.server.media.MediaSessionStack: void addSession(com.android.server.media.MediaSessionRecordImpl)>--interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)>: 2
<<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>--virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r6)>: 12
<<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>--$z0 = virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>($r4)>: 1
<<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>--interfaceinvoke $r11.<java.util.Map: void putAll(java.util.Map)>($r12)>: 14
<<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.extras", "key", r4)>: 3
<<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>--interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r6)>: 1
<<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>--l1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("st_sound_model", null, r2, 5)>: 1
<<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)>: 7
<<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void onStart(java.util.UUID)>--virtualinvoke $r8.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r12)>: 2
<<com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>--virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r5)>: 1
<<android.app.ResourcesManager: android.content.res.ApkAssets loadApkAssets(java.lang.String,boolean,boolean)>--virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3)>: 14
<<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("meta", null, r4, 5)>: 14
<<com.android.server.am.AppExitInfoTracker: void putToSparse2dArray(android.util.SparseArray,int,int,java.lang.Object,java.util.function.Supplier,java.util.function.Consumer)>--virtualinvoke r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r1)>: 1
<<com.android.server.wm.PersisterQueue: void addItem(com.android.server.wm.PersisterQueue$WriteQueueItem,boolean)>--virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4)>: 9
<<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>--interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)>: 1
<<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>--interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 5
<<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)>: 1
<<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)>: 1
<<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 1
<<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)>: 8
<<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)>: 2
<<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>--virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r27)>: 5
<<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r15.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)>: 7
<<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(i11, r2)>: 7
<<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)>: 7
<<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>--interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)>: 1
<<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>--virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)>: 5
<<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)>: 1
<<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r14)>: 3
<<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)>: 1
<<com.android.server.job.JobPackageTracker$DataSet: com.android.server.job.JobPackageTracker$PackageEntry getOrCreateEntry(int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 3
<<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)>: 1
<<com.android.server.am.ProcessRecord: boolean startService(com.android.server.am.ServiceRecord)>--z0 = virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r0)>: 5
<<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r23)>: 12
<<com.android.server.location.gnss.GnssManagerService: boolean addGnssDataListenerLocked(java.lang.Object,android.os.IInterface,java.lang.String,java.lang.String,com.android.server.location.RemoteListenerHelper,android.util.ArrayMap,java.util.function.Consumer)>--virtualinvoke r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r8)>: 4
<<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>--virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4)>: 2
<<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>--l4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("sound_model", null, r2, 5)>: 1
<<com.android.server.clipboard.ClipboardService: void addActiveOwnerLocked(int,java.lang.String)>--virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r18)>: 1
<<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int,int,int,int,int,boolean,int[])>--virtualinvoke $r55.<android.util.SparseArray: void put(int,java.lang.Object)>(i46, r212)>: 11
<<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3)>: 229
<<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>--virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r24)>: 4
<<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>--virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r23)>: 1
<<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23)>: 1
<<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)>: 1
<<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>--virtualinvoke $r108.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r263, r218)>: 7
<<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>--virtualinvoke $r110.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r267, r218)>: 7
<<com.android.server.IntentResolver: void addFilter(java.lang.Object)>--virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r1)>: 2
<<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>--r14 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)>: 2
<<com.android.server.DropBoxManagerService$DropBoxManagerBroadcastHandler: void maybeDeferBroadcast(java.lang.String,long)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)>: 1
<<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>--virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r13)>: 1
<<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>--interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r13)>: 1
<<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopJobLocked(java.lang.String,long,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)>: 1
<<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)>: 1
<<com.android.server.am.ActivityManagerService: void requireAllowedAssociationsLocked(java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)>: 4
<<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>--interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r28)>: 2
<<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)>: 31
<<com.android.server.AlarmManagerService: void setImplLocked(com.android.server.AlarmManagerService$Alarm,boolean,boolean)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>--virtualinvoke $r2.<java.util.TreeSet: boolean add(java.lang.Object)>(r13)>: 1
<<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r15)>: 1
<<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>--virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>($i5, r24)>: 2
<<com.android.server.am.ActivityManagerService$PidMap: void doAddInternal(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, r1)>: 22
<<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6)>: 1
<<android.content.IntentFilter: void addAction(java.lang.String)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)>: 5
<<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>--virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r4)>: 1
<<com.android.server.content.SyncStorageEngine: java.util.List getCurrentSyncsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 1
<<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>--virtualinvoke r44.<java.util.ArrayList: boolean add(java.lang.Object)>(r45)>: 2
<<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>--virtualinvoke r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r12)>: 1
<<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r14)>: 1
<<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceMap getServiceMapLocked(int)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)>: 26
<<com.android.server.am.ProcessList: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,int,java.lang.String)>--virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 22
<<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>--virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1)>: 1
<<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutUser getUserShortcutsLocked(int)>--virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)>: 18
<<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserInternalUncheckedNoTracing(java.lang.String,java.lang.String,int,int,boolean,java.lang.String[],com.android.server.utils.TimingsTraceAndSlog)>--virtualinvoke $r106.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r105)>: 5
<<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)>: 3
<<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r31)>: 1
<<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)>: 1
<<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>--$r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r42)>: 1
<<com.android.server.am.ProcessList: void addProcessNameLocked(com.android.server.am.ProcessRecord)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, r1)>: 22
<<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)>: 4
<<android.util.LruCache: java.lang.Object get(java.lang.Object)>--r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r11)>: 15
<<android.util.LruCache: java.lang.Object get(java.lang.Object)>--virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r4)>: 15
<<com.android.server.am.ProcessList$ImperceptibleKillRunner: boolean enqueueLocked(com.android.server.am.ProcessRecord,java.lang.String,int)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)>: 1
<<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 2
<<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)>: 2
<<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)>: 1
<<com.android.server.am.BroadcastQueue: void enqueueParallelBroadcastLocked(com.android.server.am.BroadcastRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 13
<<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>--interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r23)>: 1
<<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>--interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r3)>: 1
<<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)>: 6
<<com.android.server.am.BroadcastStats: void addBroadcast(java.lang.String,java.lang.String,int,int,long)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r14)>: 11
<<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>--virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>(r83)>: 1
<<com.android.server.print.PrintManagerService$PrintManagerImpl: com.android.server.print.UserState getOrCreateUserStateLocked(int,boolean,boolean)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)>: 10
<<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>--virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)>: 105
<<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>--interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r38)>: 2
<<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>--interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r36)>: 2
<<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>--virtualinvoke $r3.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r2)>: 11
<<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>--virtualinvoke $r6.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r5)>: 11
<<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>--$r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2)>: 1
<<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r8)>: 2
<<com.android.server.usage.AppTimeLimitController: void addAppUsageLimitObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,int)>--virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)>: 1
<<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$ProcessChangeItem enqueueProcessChangeItemLocked(int,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)>: 29
<<com.android.server.appwidget.AppWidgetServiceImpl: void incrementAppWidgetServiceRefCount(int,android.util.Pair)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r3)>: 1
<<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)>: 3
<<com.android.server.appwidget.AppWidgetServiceImpl: void addWidgetLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)>: 1
<<com.android.internal.telephony.TelephonyPermissions: boolean reportAccessDeniedToReadIdentifiers(android.content.Context,int,int,int,java.lang.String,java.lang.String)>--interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r33)>: 12
<<com.android.internal.app.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 33
<<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r5)>: 2
<<com.android.server.am.ActivityManagerService: void updateProcessForegroundLocked(com.android.server.am.ProcessRecord,boolean,int,boolean)>--virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 25
<<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>--virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r13)>: 1
<<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>--virtualinvoke r144.<java.util.ArrayList: boolean add(java.lang.Object)>(r106)>: 3
<<com.android.server.am.ActivityManagerService: com.android.server.am.ContentProviderConnection incProviderCountLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String,java.lang.String,boolean)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)>: 5
<<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r18)>: 3
<<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>--virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r13)>: 107
<<com.android.server.statusbar.StatusBarManagerService: void manageDisableListLocked(int,int,android.os.IBinder,java.lang.String,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)>: 109
<<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9)>: 1
<<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r32.<java.util.ArrayList: void add(int,java.lang.Object)>(i23, r23)>: 23
<<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r27.<java.util.ArrayList: void add(int,java.lang.Object)>(i24, r23)>: 23
<<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r16.<java.util.ArrayList: void add(int,java.lang.Object)>(i26, r35)>: 23
<<com.android.server.notification.PreferencesHelper: boolean createNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,boolean)>--virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r1)>: 3
<<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)>: 2
<<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)>: 3
<<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>--virtualinvoke r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r0)>: 1
<<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)>: 1
<<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)>: 1
<<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)>: 1
<<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)>: 6
<<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)>: 6
<<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>--virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r18)>: 2
<<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)>: 1
<<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>--virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r213)>: 5
<<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>--virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r213)>: 5
<<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void noteWakeupAlarmLocked(java.lang.String)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)>: 1
<<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)>: 1
<<com.android.server.am.ActivityManagerService: void maybeUpdateProviderUsageStatsLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)>: 6
<<com.android.server.pm.Settings: void writeKernelMappingLPr(java.lang.String,int,int[])>--virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r19)>: 3
<<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>--virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r40, r41)>: 1
<<com.android.server.am.ProcessList: android.os.AppZygote createAppZygoteForProcessIfNeeded(com.android.server.am.ProcessRecord)>--virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r29)>: 22
<<com.android.server.am.ActiveServices: void setServiceForegroundInnerLocked(com.android.server.am.ServiceRecord,int,android.app.Notification,int,int)>--virtualinvoke $r145.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r146, r144)>: 1
<<com.android.server.am.ActiveServices: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,boolean,java.lang.String)>--virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r2)>: 25
<<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)>: 2
<<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 1
<<com.android.server.location.LocationRequestStatistics$RequestSummaryLimitedHistory: void addRequestSummary(com.android.server.location.LocationRequestStatistics$RequestSummary)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)>: 2
<<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>--virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)>: 1
<<com.android.server.am.CachedAppOptimizer: void compactAppBfgs(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)>: 29
<<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)>: 2
<<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r12)>: 8
Pair Sum: 3813
Interface Num: 808



========================== AllEntryPoints ====================================
<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r27)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
<com.android.server.usage.AppTimeLimitController: void noteUsageStart(java.lang.String,int,long)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r4)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>--interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>--virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, $r10)
        <android.os.INetworkManagementService$Stub$Proxy: void setInterfaceQuota(java.lang.String,long)>
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>--virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r14)
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>--virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)>
        <android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(android.net.Network)>
<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>--virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r0)
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)
        <com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)>
<com.android.server.usage.AppTimeLimitController: void addUsageSessionObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,int)>--virtualinvoke $r16.<android.util.SparseArray: void append(int,java.lang.Object)>(i5, r25)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>--virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7)
        <android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>
<com.android.server.pm.UserManagerService: com.android.server.pm.RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isInstantApp(java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: void reconcileSecondaryDexFiles(java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void testDream(int,android.content.ComponentName)>
        <android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageAvailable(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean getBlockUninstallForUser(java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserAccount(int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.os.IUserManager$Stub$Proxy: boolean hasUserRestriction(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppInactive(java.lang.String,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getIconMaxDimensions(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killBackgroundProcesses(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void resetAllModes(int,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>
        <android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>
        <android.os.IUserManager$Stub$Proxy: int getUserRestrictionSource(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserRestriction(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getInstallReason(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void makePackageIdle(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void checkPackageStartable(java.lang.String,int)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponentsForUser(int,android.content.ComponentName[])>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int stopUser(android.content.ComponentName,android.os.UserHandle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean canRequestPackageInstalls(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSuspendedForUser(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserName(int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getMaxShortcutCountPerActivity(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: void getExitInfoLocked(int,int,java.util.ArrayList)>--virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r21)
        <android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>--virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>--virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r17)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r17)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
<android.app.admin.SystemUpdatePolicy$1: android.app.admin.SystemUpdatePolicy createFromParcel(android.os.Parcel)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.usage.AppTimeLimitController: void addAppUsageObserver(int,int,java.lang.String[],long,android.app.PendingIntent,int)>--virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
<com.android.server.am.BroadcastDispatcher: void insertLocked(java.util.ArrayList,com.android.server.am.BroadcastDispatcher$Deferrals)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i4, r1)
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
<com.android.server.am.BroadcastDispatcher: void startDeferring(int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r9)
        <android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
<com.android.server.media.MediaSessionStack: java.util.List getActiveSessions(int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
        <android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>
<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>--virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r56)
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,com.android.server.location.CallerIdentity)>--interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r16)
        <android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10)
        <android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>
        <android.permission.IPermissionManager$Stub$Proxy: void stopOneTimePermissionSession(java.lang.String,int)>
<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r6)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, r22)
        <android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
        <android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)
        <android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
        <android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo createAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r9)
        <android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>
        <android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>
        <android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<com.android.server.clipboard.ClipboardService: com.android.server.clipboard.ClipboardService$PerUserClipboard getClipboard(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<com.android.server.am.CachedAppOptimizer: void compactAppSome(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>--virtualinvoke $r37.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r70)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>--virtualinvoke r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r66, $r48)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>--virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r2)
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r16)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r2)
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)>--virtualinvoke $r28.<java.util.ArrayList: boolean add(java.lang.Object)>($r27)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
<android.accounts.Account: void <init>(android.os.Parcel)>--z2 = interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r0)
        <android.accounts.IAccountManager$Stub$Proxy: boolean accountAuthenticated(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
        <android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPreviousName(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>
        <android.content.IContentService$Stub$Proxy: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
        <android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean someUserHasAccount(android.accounts.Account)>
        <android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
        <android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
        <android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
        <android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>--virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r16)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>--r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.location.LocationRequestStatistics: void startRequesting(java.lang.String,java.lang.String,java.lang.String,long,boolean)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.am.ActiveServices: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean,boolean)>--virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>--virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r19)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r18)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<com.android.server.pm.InstantAppRegistry$CookiePersistence: void addPendingPersistCookieLPw(int,com.android.server.pm.parsing.pkg.AndroidPackage,byte[],java.io.File)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setInstantAppCookie(java.lang.String,byte[],int)>
<com.android.server.am.CachedAppOptimizer: void compactAppFull(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<android.app.role.RoleControllerManager: void <init>(android.content.ComponentName,android.os.Handler,android.content.Context)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r13)
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncStart(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncFinish(java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobStart(java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobFinish(java.lang.String,int,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>--virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r17)
        <android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
        <android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>
        <android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>
        <android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>
        <android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>--virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20)
        <android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>
<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>--interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r15)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>--virtualinvoke r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r19)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: java.lang.Object startObject(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, r30)
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobStart(java.lang.String,int)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncStart(java.lang.String,int)>
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
<com.android.server.wm.RecentTasks: void removeForAddTask(com.android.server.wm.Task)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r79)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: boolean hasNotificationAccess(android.content.ComponentName)>
        <android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionOverride(int,int,int,long,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
        <android.media.IAudioService$Stub$Proxy: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>--virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r67)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)>
        <android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionOverride(int,int,int,long,java.lang.String)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.media.IAudioService$Stub$Proxy: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: boolean hasNotificationAccess(android.content.ComponentName)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>--virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r7)
        <android.app.IActivityManager$Stub$Proxy: void addPackageDependency(java.lang.String)>
<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>--virtualinvoke $r47.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r75)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>--virtualinvoke $r29.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: void readXml(org.xmlpull.v1.XmlPullParser,boolean,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, r46)
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r19)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
<com.android.server.am.ActiveServices: void registerAppOpCallbackLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: com.android.server.appwidget.AppWidgetServiceImpl$Host lookupOrAddHostLocked(com.android.server.appwidget.AppWidgetServiceImpl$HostId)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.authtokens", "authtoken", r4)
        <android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r9)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setAudioRestriction(int,int,int,int,java.lang.String[])>
<com.android.server.am.BroadcastDispatcher: void enqueueOrderedBroadcastLocked(com.android.server.am.BroadcastRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>--virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r21)
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean areBubblesAllowed(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void setBubblesAllowed(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: int getBubblePreferenceForPackage(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationChannel(java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.app.INotificationManager$Stub$Proxy: boolean canShowBadge(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
        <android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: boolean hasSentValidMsg(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: int getPackageImportance(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
        <android.app.INotificationManager$Stub$Proxy: void setShowBadge(java.lang.String,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabledForPackage(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationDelegate(java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.app.INotificationManager$Stub$Proxy: boolean onlyHasDefaultChannel(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void deleteConversationNotificationChannels(java.lang.String,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabled(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean isInInvalidMsgState(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r21)
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean areBubblesAllowed(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: void setBubblesAllowed(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: int getBubblePreferenceForPackage(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationChannel(java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.app.INotificationManager$Stub$Proxy: boolean canShowBadge(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
        <android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: boolean hasSentValidMsg(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: int getPackageImportance(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
        <android.app.INotificationManager$Stub$Proxy: void setShowBadge(java.lang.String,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabledForPackage(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void setNotificationDelegate(java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.app.INotificationManager$Stub$Proxy: boolean onlyHasDefaultChannel(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void deleteConversationNotificationChannels(java.lang.String,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabled(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: boolean isInInvalidMsgState(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>--virtualinvoke $r42.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, r33)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<com.android.server.am.ActiveUids: void put(int,com.android.server.am.UidRecord)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.UiModeManagerService: void enableCarMode(int,java.lang.String)>--interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r19)
        <android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)>
        <android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r22)
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r22)
        <android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>--virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r13)
        <android.os.INetworkManagementService$Stub$Proxy: void setInterfaceAlert(java.lang.String,long)>
<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>--$l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("shared_accounts", "name", r4)
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r14)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void setAutoPersisting(java.lang.String,boolean)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.os.storage.IStorageManager$Stub$Proxy: void allocateBytes(java.lang.String,long,int,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean isBackgroundRestricted(java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: boolean isOperationActive(int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>
        <android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.net.IIpSecService$Stub$Proxy: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>
        <android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean archiveStoredConversation(java.lang.String,long,boolean)>
        <android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: boolean isWallpaperSupported(java.lang.String)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void wakeUp(long,int,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperation(int,int,java.lang.String)>
        <android.security.IFileIntegrityService$Stub$Proxy: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String,int)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setMode(int,int,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean isUidActive(int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperationRaw(int,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void setVpnPackageAuthorization(java.lang.String,int,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int getUidProcessState(int,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: java.util.List getProfiles(java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredConversation(java.lang.String,long)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: void applyTunnelModeTransform(int,int,int,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>
        <android.os.storage.IStorageManager$Stub$Proxy: long getAllocatableBytes(java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int getPackageProcessState(java.lang.String,java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>
        <android.net.IIpSecService$Stub$Proxy: void deleteTunnelInterface(int,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>--virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r8)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>
        <android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>
        <android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r18)
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>--virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>--virtualinvoke $r47.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r38)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.wm.RecentTasks: boolean moveAffiliatedTasksToFront(com.android.server.wm.Task,int)>--virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, r89)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>--virtualinvoke $r33.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r59)
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>
<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>--virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r7)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
<com.android.server.inputmethod.InputMethodManagerService: boolean showCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>--virtualinvoke $r11.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5)
        <android.app.IActivityTaskManager$Stub$Proxy: void setPackageAskScreenCompat(java.lang.String,boolean)>
<com.android.server.am.ActivityManagerService: void addPidLocked(com.android.server.am.ProcessRecord)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r6)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,com.android.server.am.HostingRecord,int,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r39)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
<com.android.server.location.ContextHubTransactionManager: void addTransaction(com.android.server.location.ContextHubServiceTransaction)>--virtualinvoke $r2.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r5)
        <android.hardware.location.IContextHubService$Stub$Proxy: int loadNanoApp(int,android.hardware.location.NanoApp)>
        <android.hardware.location.IContextHubService$Stub$Proxy: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>
        <android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
<com.android.server.pm.Settings: int acquireAndRegisterNewAppIdLPw(com.android.server.pm.SettingBase)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
        <android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)>
<com.android.server.am.ActivityManagerService: boolean requestPssLocked(com.android.server.am.ProcessRecord,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.am.AppExitInfoTracker$IsolatedUidRecords: void addIsolatedUid(int,int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>--virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)
        <android.app.slice.ISliceManager$Stub$Proxy: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
        <android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
        <android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.app.slice.ISliceManager$Stub$Proxy: boolean hasSliceAccess(java.lang.String)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.app.slice.ISliceManager$Stub$Proxy: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>
        <android.app.slice.ISliceManager$Stub$Proxy: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)
        <android.app.slice.ISliceManager$Stub$Proxy: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
        <android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
        <android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
        <android.app.slice.ISliceManager$Stub$Proxy: boolean hasSliceAccess(java.lang.String)>
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
        <android.app.slice.ISliceManager$Stub$Proxy: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>
        <android.app.slice.ISliceManager$Stub$Proxy: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>
<com.android.server.IntentResolver: void remove_all_objects(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>--virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, r1)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r27)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r29)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r24)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<com.android.server.wm.PendingRemoteAnimationRegistry: void addPendingAnimation(java.lang.String,android.view.RemoteAnimationAdapter)>--virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
        <android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>--virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r12)
        <android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>--virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r19)
        <android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$UidState getUidStateLocked(int,boolean)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setMode(int,int,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperationRaw(int,int,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: void setVpnPackageAuthorization(java.lang.String,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: boolean isOperationActive(int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>
        <android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getUidOps(int,int[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperation(int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
        <android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>--virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>
<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r23)
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<com.android.server.power.AmbientDisplaySuppressionController: void suppress(java.lang.String,int,boolean)>--interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r11)
        <android.os.IPowerManager$Stub$Proxy: void suppressAmbientDisplay(java.lang.String,boolean)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>--z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r6)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>
<com.android.server.wm.RecentTasks: void cleanupLocked(int)>--virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r48)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>--virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
        <android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r13)
        <android.hardware.input.IInputManager$Stub$Proxy: void vibrate(int,long[],int,android.os.IBinder)>
<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>--virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r18)
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>--virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r22)
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean)>--virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r0)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r44)
        <android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>
<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>--virtualinvoke r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r11)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)
        <com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>--virtualinvoke $r25.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r58)
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r73)
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>--virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21)
        <android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
        <android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneSignalStrength(android.telephony.SignalStrength)>
<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>--virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r6)
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>--virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r11)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.pm.Settings$RuntimePermissionPersistence: void readStateForUserSyncLPr(int)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r40)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.internal.app.procstats.AssociationState$SourceState: void trackProcState(int,int,long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<android.content.SyncAdaptersCache: java.lang.String[] getSyncAdapterPackagesForAuthority(java.lang.String,int)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)
        <android.content.IContentService$Stub$Proxy: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>--virtualinvoke $r19.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r24)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
<com.android.server.am.CachedAppOptimizer: void compactAppPersistent(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>--interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1)
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
        <com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r16)
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>--virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r21)
        <android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>
<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r22)
        <android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>
<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>--virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r11)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>
<com.android.server.am.ServiceRecord: void addConnection(android.os.IBinder,com.android.server.am.ConnectionRecord)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>--virtualinvoke r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r13)
        <android.os.INetworkManagementService$Stub$Proxy: void addIdleTimer(java.lang.String,int,int)>
<com.android.server.am.ProcessRecord$PackageList: com.android.internal.app.procstats.ProcessStats$ProcessStateHolder put(java.lang.String,com.android.internal.app.procstats.ProcessStats$ProcessStateHolder)>--$r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>--virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r8)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<com.android.server.display.PersistentDataStore: boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.hardware.display.IDisplayManager$Stub$Proxy: void renameWifiDisplay(java.lang.String,java.lang.String)>
<com.android.server.notification.PreferencesHelper: void createNotificationChannelGroup(java.lang.String,int,android.app.NotificationChannelGroup,boolean)>--interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r1)
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
<com.android.server.AlarmManagerService: boolean addBatchLocked(java.util.ArrayList,com.android.server.AlarmManagerService$Batch)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i2, r1)
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>--$l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("grants", "accounts_id", r4)
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
        <android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
        <android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
        <android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12)
        <android.app.IActivityTaskManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)>
<android.app.NotificationChannelGroup: void addChannel(android.app.NotificationChannel)>--interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>
<android.graphics.GraphicsStatsService: android.graphics.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)
        <android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>--virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r6)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r128)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>--virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r143)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState getOrCreateUserState(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
        <android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>
<com.android.server.pm.dex.PackageDynamicCodeLoading: boolean record(java.lang.String,java.lang.String,int,int,java.lang.String)>--interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)
        <android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>
<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r2)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,int,int)>--interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r21)
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>--virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
<com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager getOrCreateController(int)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<com.android.server.am.ActivityManagerService: void enqueueUidChangeLocked(com.android.server.am.UidRecord,int,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>--virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>--virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r12)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
<com.android.server.inputmethod.InputMethodManagerService: boolean hideCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>--virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r9)
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
        <android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
        <android.os.IDeviceIdleController$Stub$Proxy: void removeSystemPowerWhitelistApp(java.lang.String)>
<com.android.server.appop.AppOpsService: void setUserRestrictionNoCheck(int,boolean,android.os.IBinder,int,java.lang.String[])>--virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r17)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>--virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
<android.app.ResourcesManager: android.content.res.ResourcesImpl findOrCreateResourcesImplForKeyLocked(android.content.res.ResourcesKey)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)
        <android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>--virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)
        <android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<com.android.server.appop.AppOpsService: void collectAsyncNotedOp(int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r21)
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>
        <android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void setAutoPersisting(java.lang.String,boolean)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean isUidActive(int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int getUidProcessState(int,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: java.util.List getProfiles(java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredConversation(java.lang.String,long)>
        <android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: void applyTunnelModeTransform(int,int,int,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>
        <android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int getPackageProcessState(java.lang.String,java.lang.String)>
        <android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean archiveStoredConversation(java.lang.String,long,boolean)>
        <android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
        <android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
        <android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
        <android.os.IPowerManager$Stub$Proxy: void wakeUp(long,int,java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
        <android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>
        <android.net.IIpSecService$Stub$Proxy: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.net.IIpSecService$Stub$Proxy: void deleteTunnelInterface(int,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)>
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
        <android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
        <android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>--virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i9, r27)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r25)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<com.android.server.am.PendingTempWhitelists: void put(int,com.android.server.am.ActivityManagerService$PendingTempWhitelist)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: android.util.ArrayMap getOrAllocate(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r12)
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>--virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r1)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.pm.IPackageManager$Stub$Proxy: void clearCrossProfileIntentFilters(int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean,boolean)>--virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r81)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$Association startAssociationLocked(int,java.lang.String,int,int,long,android.content.ComponentName,java.lang.String)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>--$l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", "name", r4)
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>--virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2)
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>--virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r27)
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>
<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>--virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, null)
        <android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)>
<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>--$l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.accounts", "name", r4)
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r3)
        <android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
<com.android.server.pm.BackgroundDexOptService: int trackPerformDexOpt(java.lang.String,boolean,java.util.function.Supplier)>--virtualinvoke r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r6)
        <android.content.pm.IPackageManager$Stub$Proxy: boolean runBackgroundDexoptJob(java.util.List)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>--interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(r17)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void allowAdjustmentType(java.lang.String)>--interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r8)
        <android.app.INotificationManager$Stub$Proxy: void allowAssistantAdjustment(java.lang.String)>
<android.hardware.display.DisplayManager: android.view.Display getOrCreateDisplayLocked(int,boolean)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>--virtualinvoke r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>--virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>--interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10)
        <android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)>
        <android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
<com.android.server.am.UserController: boolean startUserInternal(int,boolean,android.os.IProgressListener,com.android.server.utils.TimingsTraceAndSlog)>--virtualinvoke $r51.<android.util.SparseArray: void put(int,java.lang.Object)>(i22, r87)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.textclassifier.TextClassificationManagerService: com.android.server.textclassifier.TextClassificationManagerService$UserState getUserStateLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r52.<java.util.ArrayList: void add(int,java.lang.Object)>(i42, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>--virtualinvoke $r35.<java.util.ArrayList: void add(int,java.lang.Object)>(i35, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>--virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
        <android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
        <android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<com.android.server.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)>
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByName(int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.am.ProcessList: int updateLruProcessInternalLocked(com.android.server.am.ProcessRecord,long,int,int,java.lang.String,java.lang.Object,com.android.server.am.ProcessRecord)>--virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(i6, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r27)
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>
        <android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>
        <android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>--interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r12)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
<com.android.server.content.ContentService: android.util.ArrayMap findOrCreateCacheLocked(int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.content.IContentService$Stub$Proxy: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>
        <android.content.IContentService$Stub$Proxy: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>--virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<com.android.server.BluetoothManagerService: void addActiveLog(int,java.lang.String,boolean)>--virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r4)
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(java.lang.String,boolean)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect(java.lang.String)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable(java.lang.String)>
<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r24.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r26.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>--virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r166, r168)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>--virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>--interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r12)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>--interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r12)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<com.android.server.am.AnrHelper: void appNotResponding(com.android.server.am.ProcessRecord,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,com.android.server.wm.WindowProcessController,boolean,java.lang.String)>--virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
        <android.app.IActivityManager$Stub$Proxy: void appNotResponding(java.lang.String)>
<com.android.server.am.PendingIntentController: void incrementUidStatLocked(com.android.server.am.PendingIntentRecord)>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r20)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>
<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)
        <android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<com.android.server.appwidget.AppWidgetServiceImpl: void onWidgetProviderAddedOrChangedLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>--virtualinvoke r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>--virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r83)
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r37.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>($r40)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>--virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>(r77)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData getOrCreateGenericModelDataLocked(java.util.UUID)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r7)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,android.app.ITransientNotification,int,int,android.app.ITransientNotificationCallback)>--virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r87)
        <android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
<android.util.SparseArrayMap: void add(int,java.lang.String,java.lang.Object)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>--virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r26)
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ProcessState getProcessStateLocked(com.android.internal.app.procstats.ProcessStats$PackageState,java.lang.String)>--virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, r43)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killApplicationProcess(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r47)
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
<com.android.server.wm.WindowProcessController: void addPackage(java.lang.String)>--virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r5)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.media.MediaSessionStack: void addSession(com.android.server.media.MediaSessionRecordImpl)>--interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.media.session.ISessionManager$Stub$Proxy: void notifySession2Created(android.media.Session2Token)>
<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>--virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r6)
        <android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
        <android.media.IAudioService$Stub$Proxy: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>
        <android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)>
        <android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        <android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
        <android.media.IAudioService$Stub$Proxy: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>
<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>--$z0 = virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>($r4)
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationProfileData(java.lang.String)>
<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>--interfaceinvoke $r11.<java.util.Map: void putAll(java.util.Map)>($r12)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.extras", "key", r4)
        <android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>--interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r6)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)>
<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>--l1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("st_sound_model", null, r2, 5)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void onStart(java.util.UUID)>--virtualinvoke $r8.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r12)
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        <com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>--virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r5)
        <android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
<android.app.ResourcesManager: android.content.res.ApkAssets loadApkAssets(java.lang.String,boolean,boolean)>--virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>--$l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("meta", null, r4, 5)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
<com.android.server.am.AppExitInfoTracker: void putToSparse2dArray(android.util.SparseArray,int,int,java.lang.Object,java.util.function.Supplier,java.util.function.Consumer)>--virtualinvoke r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r1)
        <android.app.IActivityManager$Stub$Proxy: void setProcessStateSummary(byte[])>
<com.android.server.wm.PersisterQueue: void addItem(com.android.server.wm.PersisterQueue$WriteQueueItem,boolean)>--virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>--interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
        <android.hardware.input.IInputManager$Stub$Proxy: void addPortAssociation(java.lang.String,int)>
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>--interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)
        <android.hardware.display.IDisplayManager$Stub$Proxy: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>--virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)
        <android.hardware.display.IDisplayManager$Stub$Proxy: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)
        <android.hardware.input.IInputManager$Stub$Proxy: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>
        <android.hardware.input.IInputManager$Stub$Proxy: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
        <android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
        <android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
        <android.hardware.input.IInputManager$Stub$Proxy: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
        <android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>
        <android.hardware.input.IInputManager$Stub$Proxy: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
        <android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
        <android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>--virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r27)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r15.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(i11, r2)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>--virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>--interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>--virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
        <android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)
        <android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r14)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<com.android.server.job.JobPackageTracker$DataSet: com.android.server.job.JobPackageTracker$PackageEntry getOrCreateEntry(int,java.lang.String)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)>
        <android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.am.ProcessRecord: boolean startService(com.android.server.am.ServiceRecord)>--z0 = virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r23)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
<com.android.server.location.gnss.GnssManagerService: boolean addGnssDataListenerLocked(java.lang.Object,android.os.IInterface,java.lang.String,java.lang.String,com.android.server.location.RemoteListenerHelper,android.util.ArrayMap,java.util.function.Consumer)>--virtualinvoke r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r8)
        <android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>--virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4)
        <android.net.IEthernetManager$Stub$Proxy: android.net.IpConfiguration getConfiguration(java.lang.String)>
        <android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>
<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>--l4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("sound_model", null, r2, 5)
        <com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<com.android.server.clipboard.ClipboardService: void addActiveOwnerLocked(int,java.lang.String)>--virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r18)
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int,int,int,int,int,boolean,int[])>--virtualinvoke $r55.<android.util.SparseArray: void put(int,java.lang.Object)>(i46, r212)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3)
        <android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isInstantApp(java.lang.String,int)>
        <android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
        <android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: void reconcileSecondaryDexFiles(java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void testDream(int,android.content.ComponentName)>
        <android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>
        <android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageAvailable(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)>
        <android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>
        <android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean getBlockUninstallForUser(java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>
        <android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
        <android.os.IUserManager$Stub$Proxy: boolean hasUserRestriction(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppInactive(java.lang.String,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getIconMaxDimensions(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killBackgroundProcesses(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>
        <android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>
        <com.android.internal.app.IAppOpsService$Stub$Proxy: void resetAllModes(int,java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>
        <android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>
        <android.os.IUserManager$Stub$Proxy: int getUserRestrictionSource(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
        <android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserRestriction(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getInstallReason(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
        <android.content.pm.ILauncherApps$Stub$Proxy: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void makePackageIdle(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>
        <android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void checkPackageStartable(java.lang.String,int)>
        <android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponentsForUser(int,android.content.ComponentName[])>
        <android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int stopUser(android.content.ComponentName,android.os.UserHandle)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
        <android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean canRequestPackageInstalls(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSuspendedForUser(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)>
        <android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>
        <android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getMaxShortcutCountPerActivity(java.lang.String,int)>
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>--virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r24)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>--virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r23)
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23)
        <android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)
        <android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>--virtualinvoke $r108.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r263, r218)
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>--virtualinvoke $r110.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r267, r218)
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.IntentResolver: void addFilter(java.lang.Object)>--virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>--r14 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
        <android.os.IDeviceIdleController$Stub$Proxy: int addPowerSaveWhitelistApps(java.util.List)>
        <android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveWhitelistApp(java.lang.String)>
<com.android.server.DropBoxManagerService$DropBoxManagerBroadcastHandler: void maybeDeferBroadcast(java.lang.String,long)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>--virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r13)
        <android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>--interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r13)
        <android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopJobLocked(java.lang.String,long,int)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)
        <com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobFinish(java.lang.String,int,int)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
<com.android.server.am.ActivityManagerService: void requireAllowedAssociationsLocked(java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>--interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r28)
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)>
        <android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)>
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>--virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.AlarmManagerService: void setImplLocked(com.android.server.AlarmManagerService$Alarm,boolean,boolean)>--virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>--virtualinvoke $r2.<java.util.TreeSet: boolean add(java.lang.Object)>(r13)
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>
<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>--virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r15)
        <com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)>
<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>--virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>($i5, r24)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>
<com.android.server.am.ActivityManagerService$PidMap: void doAddInternal(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6)
        <android.net.INetworkStatsService$Stub$Proxy: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>
<android.content.IntentFilter: void addAction(java.lang.String)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>--virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r4)
        <android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<com.android.server.content.SyncStorageEngine: java.util.List getCurrentSyncsLocked(int)>--virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>--virtualinvoke r44.<java.util.ArrayList: boolean add(java.lang.Object)>(r45)
        <android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)>
        <android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>--virtualinvoke r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r12)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r14)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceMap getServiceMapLocked(int)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.am.ProcessList: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,int,java.lang.String)>--virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>--virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1)
        <android.app.IActivityTaskManager$Stub$Proxy: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>
<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutUser getUserShortcutsLocked(int)>--virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
        <android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)>
        <android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserInternalUncheckedNoTracing(java.lang.String,java.lang.String,int,int,boolean,java.lang.String[],com.android.server.utils.TimingsTraceAndSlog)>--virtualinvoke $r106.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r105)
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>--virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)
        <android.os.storage.IStorageManager$Stub$Proxy: void partitionPublic(java.lang.String)>
        <android.os.storage.IStorageManager$Stub$Proxy: void partitionPrivate(java.lang.String)>
        <android.os.storage.IStorageManager$Stub$Proxy: void partitionMixed(java.lang.String,int)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r31)
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)
        <android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>--$r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r42)
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
<com.android.server.am.ProcessList: void addProcessNameLocked(com.android.server.am.ProcessRecord)>--virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, r1)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>--virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>--r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r11)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>--virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r4)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.am.ProcessList$ImperceptibleKillRunner: boolean enqueueLocked(com.android.server.am.ProcessRecord,java.lang.String,int)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)
        <android.app.IActivityManager$Stub$Proxy: void killProcessesWhenImperceptible(int[],java.lang.String)>
<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>--virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
<com.android.server.am.BroadcastQueue: void enqueueParallelBroadcastLocked(com.android.server.am.BroadcastRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>--interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r23)
        <com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>--interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r3)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
<com.android.server.am.BroadcastStats: void addBroadcast(java.lang.String,java.lang.String,int,int,long)>--virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r14)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
        <android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>--virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>(r83)
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.print.PrintManagerService$PrintManagerImpl: com.android.server.print.UserState getOrCreateUserStateLocked(int,boolean,boolean)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)
        <android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
        <android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)>
        <android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
        <android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
        <android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
        <android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)>
        <android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
        <android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)>
<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>--virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>
<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>--interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r38)
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>
<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>--interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r36)
        <android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
        <android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>--virtualinvoke $r3.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r2)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>--virtualinvoke $r6.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r5)
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)>
        <android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)>
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)>
<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>--$r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2)
        <android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)>
<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r8)
        <android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
        <android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
<com.android.server.usage.AppTimeLimitController: void addAppUsageLimitObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,int)>--virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)
        <android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$ProcessChangeItem enqueueProcessChangeItemLocked(int,int)>--virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: void incrementAppWidgetServiceRefCount(int,android.util.Pair)>--virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r3)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>--virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.appwidget.AppWidgetServiceImpl: void addWidgetLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)>
<com.android.internal.telephony.TelephonyPermissions: boolean reportAccessDeniedToReadIdentifiers(android.content.Context,int,int,int,java.lang.String,java.lang.String)>--interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r33)
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)>
        <com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>
        <android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>
        <com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
<com.android.internal.app.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killApplicationProcess(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])>
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r5)
        <com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
        <com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.am.ActivityManagerService: void updateProcessForegroundLocked(com.android.server.am.ProcessRecord,boolean,int,boolean)>--virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>--virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r13)
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>--virtualinvoke r144.<java.util.ArrayList: boolean add(java.lang.Object)>(r106)
        <android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ContentProviderConnection incProviderCountLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String,java.lang.String,boolean)>--virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>--virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r18)
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>--virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r13)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>
        <android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>
<com.android.server.statusbar.StatusBarManagerService: void manageDisableListLocked(int,int,android.os.IBinder,java.lang.String,int)>--virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)>
        <android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>
        <android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
        <android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)>
        <android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
        <com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)>
        <android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)>
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>--virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9)
        <android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r32.<java.util.ArrayList: void add(int,java.lang.Object)>(i23, r23)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r27.<java.util.ArrayList: void add(int,java.lang.Object)>(i24, r23)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>--virtualinvoke $r16.<java.util.ArrayList: void add(int,java.lang.Object)>(i26, r35)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean createNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,boolean)>--virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r1)
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>
        <android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
        <android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>--virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
        <android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
        <android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
        <android.content.pm.IPackageManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo,boolean)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>--virtualinvoke r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r0)
        <android.content.IContentService$Stub$Proxy: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>--virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
        <android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
        <android.os.IDeviceIdleController$Stub$Proxy: void restoreSystemPowerWhitelistApp(java.lang.String)>
<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>--virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
        <android.view.IWindowManager$Stub$Proxy: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>
<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>--virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>--virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r18)
        <android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
        <android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>--virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
        <android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>--virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r213)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>--virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r213)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void noteWakeupAlarmLocked(java.lang.String)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
        <android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>--virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)
        <android.net.IIpConnectivityMetrics$Stub$Proxy: int logEvent(android.net.ConnectivityMetricsEvent)>
<com.android.server.am.ActivityManagerService: void maybeUpdateProviderUsageStatsLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)>--virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<com.android.server.pm.Settings: void writeKernelMappingLPr(java.lang.String,int,int[])>--virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r19)
        <android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>--virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r40, r41)
        <android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
<com.android.server.am.ProcessList: android.os.AppZygote createAppZygoteForProcessIfNeeded(com.android.server.am.ProcessRecord)>--virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r29)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<com.android.server.am.ActiveServices: void setServiceForegroundInnerLocked(com.android.server.am.ServiceRecord,int,android.app.Notification,int,int)>--virtualinvoke $r145.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r146, r144)
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<com.android.server.am.ActiveServices: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,boolean,java.lang.String)>--virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r2)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>--virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)
        <android.content.pm.IPackageManager$Stub$Proxy: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<com.android.server.location.LocationRequestStatistics$RequestSummaryLimitedHistory: void addRequestSummary(com.android.server.location.LocationRequestStatistics$RequestSummary)>--virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
        <android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
        <android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>--virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)
        <android.net.INetworkStatsService$Stub$Proxy: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>
<com.android.server.am.CachedAppOptimizer: void compactAppBfgs(com.android.server.am.ProcessRecord)>--virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        <android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
        <com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
        <android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
        <android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)>
        <android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
        <android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
        <android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
        <android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
        <android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
        <android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
        <android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
        <android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
        <android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        <android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)>
        <android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
        <android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)>
<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>--virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        <android.permission.IPermissionManager$Stub$Proxy: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
        <android.permission.IPermissionManager$Stub$Proxy: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>--virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r12)
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void clearDefaults(java.lang.String,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDefaults(java.lang.String,int)>
        <android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>



========================== RiskyMethodAndUnits ====================================
<com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r27)
<com.android.server.usage.AppTimeLimitController: void noteUsageStart(java.lang.String,int,long)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r4)
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3)
<com.android.server.backup.BackupManagerService: void startServiceForUser(int,com.android.server.backup.UserBackupManagerService)>
        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>
        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r30, $r10)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>
        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r14)
<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>
        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)
<com.android.server.midi.MidiService$Device: void setDeviceServer(android.media.midi.IMidiDeviceServer)>
        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r0)
<com.android.server.wm.WindowManagerService: void scheduleWindowReplacementTimeouts(com.android.server.wm.ActivityRecord)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.internal.telephony.SmsUsageMonitor: void setPremiumSmsPermission(java.lang.String,int)>
        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)
<com.android.server.usage.AppTimeLimitController: void addUsageSessionObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,int)>
        virtualinvoke $r16.<android.util.SparseArray: void append(int,java.lang.Object)>(i5, r25)
<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>
        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7)
<com.android.server.pm.UserManagerService: com.android.server.pm.RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.am.AppExitInfoTracker$AppExitInfoContainer: void getExitInfoLocked(int,int,java.util.ArrayList)>
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r21)
<com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(com.android.server.wm.ActivityMetricsLogger$LaunchingState,int,com.android.server.wm.ActivityRecord)>
        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r17)
        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r17)
<android.app.admin.SystemUpdatePolicy$1: android.app.admin.SystemUpdatePolicy createFromParcel(android.os.Parcel)>
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7)
<com.android.server.usb.UsbProfileGroupSettingsManager: void addDevicePackagesToDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)
<com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccountLocked(android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getInteractionConnectionsForUserLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.accessibility.AccessibilityWindowManager: android.util.SparseArray getWindowTokensForUserLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.usage.AppTimeLimitController: void addAppUsageObserver(int,int,java.lang.String[],long,android.app.PendingIntent,int)>
        virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)
<com.android.server.am.BroadcastDispatcher: void insertLocked(java.util.ArrayList,com.android.server.am.BroadcastDispatcher$Deferrals)>
        virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i4, r1)
<com.android.server.am.BroadcastDispatcher: void startDeferring(int)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r9)
<com.android.server.media.MediaSessionStack: java.util.List getActiveSessions(int)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
<com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r56)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,com.android.server.location.CallerIdentity)>
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r16)
<com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.OneTimePermissionUserManager getOneTimePermissionUserManager(int)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10)
<com.android.server.devicepolicy.Owners: void transferProfileOwner(android.content.ComponentName,int)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r6)
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, r22)
        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo createAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>
        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r9)
<com.android.server.clipboard.ClipboardService: com.android.server.clipboard.ClipboardService$PerUserClipboard getClipboard(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
<com.android.server.am.CachedAppOptimizer: void compactAppSome(com.android.server.am.ProcessRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
        virtualinvoke $r37.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, r70)
<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>
        virtualinvoke r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r66, $r48)
<com.android.server.VibratorService: void addToPreviousVibrationsLocked(com.android.server.VibratorService$Vibration)>
        virtualinvoke r4.<java.util.LinkedList: void addLast(java.lang.Object)>($r2)
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>
        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r16)
<android.widget.RemoteViews$BitmapCache: int getBitmapId(android.graphics.Bitmap)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r2)
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)>
        virtualinvoke $r28.<java.util.ArrayList: boolean add(java.lang.Object)>($r27)
<com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)
<android.accounts.Account: void <init>(android.os.Parcel)>
        z2 = interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r0)
<com.android.server.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int,int)>
        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>($r16)
        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
        r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1)
<com.android.server.location.LocationRequestStatistics: void startRequesting(java.lang.String,java.lang.String,java.lang.String,long,boolean)>
        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)
<com.android.server.am.ActiveServices: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean,boolean)>
        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)
<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>
        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r19)
        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r18)
<com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r13)
<com.android.server.pm.InstantAppRegistry$CookiePersistence: void addPendingPersistCookieLPw(int,com.android.server.pm.parsing.pkg.AndroidPackage,byte[],java.io.File)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.am.CachedAppOptimizer: void compactAppFull(com.android.server.am.ProcessRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<android.app.role.RoleControllerManager: void <init>(android.content.ComponentName,android.os.Handler,android.content.Context)>
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r13)
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(com.android.server.content.SyncStorageEngine$EndPoint,int,boolean)>
        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r17)
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>
        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r20)
<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>
        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r15)
<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.view.DisplayAdjustments)>
        virtualinvoke r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r19)
<com.android.server.wm.utils.RotationCache: java.lang.Object getOrCompute(java.lang.Object,int)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
<com.android.internal.os.BatteryStatsImpl$OverflowArrayMap: java.lang.Object startObject(java.lang.String)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, r30)
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData getWallpaperSafeLocked(int,int)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r11)
<com.android.server.wm.RecentTasks: void removeForAddTask(com.android.server.wm.Task)>
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>
        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r79)
        virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r67)
<com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>
        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r7)
<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>
        virtualinvoke $r47.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r75)
        virtualinvoke $r29.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
<com.android.server.notification.PreferencesHelper: void readXml(org.xmlpull.v1.XmlPullParser,boolean,int)>
        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, r46)
<com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r19)
<com.android.server.am.ActiveServices: void registerAppOpCallbackLocked(com.android.server.am.ServiceRecord)>
        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
<com.android.server.appwidget.AppWidgetServiceImpl: com.android.server.appwidget.AppWidgetServiceImpl$Host lookupOrAddHostLocked(com.android.server.appwidget.AppWidgetServiceImpl$HostId)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
<com.android.server.accounts.AccountsDb: long insertAuthToken(long,java.lang.String,java.lang.String)>
        $l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.authtokens", "authtoken", r4)
<com.android.server.appop.AudioRestrictionManager: void setZenModeAudioRestriction(int,int,int,int,java.lang.String[])>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r9)
<com.android.server.am.BroadcastDispatcher: void enqueueOrderedBroadcastLocked(com.android.server.am.BroadcastRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>
        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r21)
        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r21)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
        virtualinvoke $r42.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, r33)
<com.android.server.am.ActiveUids: void put(int,com.android.server.am.UidRecord)>
        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
<com.android.server.UiModeManagerService: void enableCarMode(int,java.lang.String)>
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r19)
<com.android.server.media.MediaRouter2ServiceImpl: void registerRouter2Locked(android.media.IMediaRouter2,int,int,java.lang.String,int,boolean,boolean)>
        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r22)
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r22)
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>
        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r13)
<com.android.server.accounts.AccountsDb: long insertSharedAccount(android.accounts.Account)>
        $l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("shared_accounts", "name", r4)
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$Ops getOpsLocked(int,java.lang.String,java.lang.String,android.app.AppOpsManager$RestrictionBypass,boolean)>
        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r14)
        virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r8)
<com.android.server.media.MediaRouterService: void registerClientLocked(android.media.IMediaRouterClient,int,int,java.lang.String,int,boolean)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r18)
        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)
<com.android.server.am.ProviderMap: void putProviderByClass(android.content.ComponentName,com.android.server.am.ContentProviderRecord)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
        virtualinvoke $r47.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r38)
<com.android.server.wm.AppTransition: void registerListenerLocked(com.android.server.wm.WindowManagerInternal$AppTransitionListener)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.wm.RecentTasks: boolean moveAffiliatedTasksToFront(com.android.server.wm.Task,int)>
        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, r89)
<com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>
        virtualinvoke $r33.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r59)
<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r7)
<com.android.server.inputmethod.InputMethodManagerService: boolean showCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>
        virtualinvoke $r11.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
<com.android.server.wm.CompatModePackages: void setPackageFlagLocked(java.lang.String,int,boolean)>
        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5)
<com.android.server.am.ActivityManagerService: void addPidLocked(com.android.server.am.ProcessRecord)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r6)
<com.android.server.am.ProcessList: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,com.android.server.am.HostingRecord,int,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)>
        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r39)
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbUserSettingsManager getSettingsForUser(int)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
<com.android.server.location.ContextHubTransactionManager: void addTransaction(com.android.server.location.ContextHubServiceTransaction)>
        virtualinvoke $r2.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r5)
<com.android.server.pm.Settings: int acquireAndRegisterNewAppIdLPw(com.android.server.pm.SettingBase)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
<com.android.server.am.ActivityManagerService: boolean requestPssLocked(com.android.server.am.ProcessRecord,int)>
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.am.AppExitInfoTracker$IsolatedUidRecords: void addIsolatedUid(int,int)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection$DisplayConnector getDisplayConnectorOrCreate(int)>
        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceClientPermissions getClient(com.android.server.slice.SlicePermissionManager$PkgUser)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)
        virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)
<com.android.server.IntentResolver: void remove_all_objects(android.util.ArrayMap,java.lang.String,java.lang.Object)>
        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12)
<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>
        virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, r1)
<com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r27)
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r29)
        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r24)
<com.android.server.wm.PendingRemoteAnimationRegistry: void addPendingAnimation(java.lang.String,android.view.RemoteAnimationAdapter)>
        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
<com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
        virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r12)
<com.android.server.location.ContextHubClientManager: android.hardware.location.IContextHubClient registerClient(android.hardware.location.ContextHubInfo,android.app.PendingIntent,long)>
        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r19)
<com.android.server.appop.AppOpsService: com.android.server.appop.AppOpsService$UidState getUidStateLocked(int,boolean)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>
        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r23)
<com.android.server.power.AmbientDisplaySuppressionController: void suppress(java.lang.String,int,boolean)>
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r11)
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>
        z1 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r6)
<com.android.server.wm.RecentTasks: void cleanupLocked(int)>
        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r48)
<com.android.server.uri.UriGrantsManagerService: com.android.server.uri.UriPermission findOrCreateUriPermissionLocked(java.lang.String,java.lang.String,int,com.android.server.uri.GrantUri)>
        virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)
        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
<com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r13)
<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>
        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r18)
        virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r22)
<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean)>
        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r0)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r44)
<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>
        virtualinvoke r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r11)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)
<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int,boolean)>
        virtualinvoke $r25.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r58)
        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r73)
<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>
        virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21)
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(long)>
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5)
<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$DisplayData getDisplayDataOrCreate(int)>
        virtualinvoke $r5.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r6)
<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicyConstants$PointerEventListener)>
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r11)
<com.android.server.pm.Settings$RuntimePermissionPersistence: void readStateForUserSyncLPr(int)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r40)
<com.android.internal.app.procstats.AssociationState$SourceState: void trackProcState(int,int,long)>
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<android.content.SyncAdaptersCache: java.lang.String[] getSyncAdapterPackagesForAuthority(java.lang.String,int)>
        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r19)
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsNotChecked(int)>
        virtualinvoke $r19.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r24)
<com.android.server.am.CachedAppOptimizer: void compactAppPersistent(com.android.server.am.ProcessRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1)
<com.android.server.audio.PlaybackActivityMonitor: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r16)
<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>
        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r21)
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r22)
<com.android.server.am.PendingIntentController: com.android.server.am.PendingIntentRecord getIntentSender(int,java.lang.String,java.lang.String,int,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle)>
        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r11)
<com.android.server.am.ServiceRecord: void addConnection(android.os.IBinder,com.android.server.am.ConnectionRecord)>
        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>
        virtualinvoke r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r13)
<com.android.server.am.ProcessRecord$PackageList: com.android.internal.app.procstats.ProcessStats$ProcessStateHolder put(java.lang.String,com.android.internal.app.procstats.ProcessStats$ProcessStateHolder)>
        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4)
<com.android.server.devicepolicy.DevicePolicyManagerService: void transferActiveAdminUncheckedLocked(android.content.ComponentName,android.content.ComponentName,int)>
        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r8)
<com.android.server.display.PersistentDataStore: boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.notification.PreferencesHelper: void createNotificationChannelGroup(java.lang.String,int,android.app.NotificationChannelGroup,boolean)>
        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r1)
<com.android.server.AlarmManagerService: boolean addBatchLocked(java.util.ArrayList,com.android.server.AlarmManagerService$Batch)>
        virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i2, r1)
<com.android.server.accounts.AccountsDb: long insertGrant(long,java.lang.String,int)>
        $l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("grants", "accounts_id", r4)
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
<com.android.server.wm.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)>
        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12)
<android.app.NotificationChannelGroup: void addChannel(android.app.NotificationChannel)>
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
<android.graphics.GraphicsStatsService: android.graphics.GraphicsStatsService$ActiveBuffer fetchActiveBuffersLocked(android.view.IGraphicsStatsCallback,int,int,java.lang.String,long)>
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)
<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
        virtualinvoke r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r6)
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)>
        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r128)
        virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r143)
<com.android.server.role.RoleManagerService: com.android.server.role.RoleUserState getOrCreateUserState(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
<com.android.server.pm.dex.PackageDynamicCodeLoading: boolean record(java.lang.String,java.lang.String,int,int,java.lang.String)>
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)
<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,int,int)>
        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r21)
<android.widget.RemoteViews: void mergeRemoteViews(android.widget.RemoteViews)>
        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)
<com.android.server.role.RoleManagerService: android.app.role.RoleControllerManager getOrCreateController(int)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.am.ActivityManagerService: void enqueueUidChangeLocked(com.android.server.am.UidRecord,int,int)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,boolean,java.lang.String,java.lang.String,int,boolean)>
        virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>(r105)
        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r12)
<com.android.server.utils.UserTokenWatcher: void acquire(android.os.IBinder,java.lang.String,int)>
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.inputmethod.InputMethodManagerService: boolean hideCurrentInputLocked(android.os.IBinder,int,android.os.ResultReceiver,int)>
        virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r9)
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getHomeMatcher(int)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
<com.android.server.appop.AppOpsService: void setUserRestrictionNoCheck(int,boolean,android.os.IBinder,int,java.lang.String[])>
        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r17)
<com.android.server.devicepolicy.Owners: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>
        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3)
<android.app.ResourcesManager: android.content.res.ResourcesImpl findOrCreateResourcesImplForKeyLocked(android.content.res.ResourcesKey)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
<com.android.server.slice.SlicePermissionManager: com.android.server.slice.SliceProviderPermissions getProvider(com.android.server.slice.SlicePermissionManager$PkgUser)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r24)
        virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22)
<com.android.server.appop.AppOpsService: void collectAsyncNotedOp(int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r21)
<com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r13)
<com.android.server.accessibility.AccessibilityWindowManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i9, r27)
        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i8, r25)
<com.android.server.am.PendingTempWhitelists: void put(int,com.android.server.am.ActivityManagerService$PendingTempWhitelist)>
        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1)
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: android.util.ArrayMap getOrAllocate(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.textclassifier.TextClassificationManagerService$SessionCache: void put(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassificationContext)>
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r12)
<com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>
        virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r1)
<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean,boolean)>
        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r81)
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$Association startAssociationLocked(int,java.lang.String,int,int,long,android.content.ComponentName,java.lang.String)>
        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17)
<com.android.server.accounts.AccountsDb: long insertDeAccount(android.accounts.Account,long)>
        $l2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", "name", r4)
<com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
        virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2)
<com.android.server.notification.NotificationHistoryManager: com.android.server.notification.NotificationHistoryDatabase getUserHistoryAndInitializeIfNeededLocked(int)>
        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r27)
        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, null)
<com.android.server.accounts.AccountsDb: long insertCeAccount(android.accounts.Account,java.lang.String)>
        $l0 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.accounts", "name", r4)
<com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r3)
<com.android.server.wm.WallpaperController: void addWallpaperToken(com.android.server.wm.WallpaperWindowToken)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.pm.BackgroundDexOptService: int trackPerformDexOpt(java.lang.String,boolean,java.util.function.Supplier)>
        virtualinvoke r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r6)
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>
        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(r17)
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void allowAdjustmentType(java.lang.String)>
        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r8)
<android.hardware.display.DisplayManager: android.view.Display getOrCreateDisplayLocked(int,boolean)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
        virtualinvoke r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)
<com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r20)
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)>
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10)
<com.android.server.am.UserController: boolean startUserInternal(int,boolean,android.os.IProgressListener,com.android.server.utils.TimingsTraceAndSlog)>
        virtualinvoke $r51.<android.util.SparseArray: void put(int,java.lang.Object)>(i22, r87)
<com.android.server.textclassifier.TextClassificationManagerService: com.android.server.textclassifier.TextClassificationManagerService$UserState getUserStateLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.am.ProcessList: void updateLruProcessLocked(com.android.server.am.ProcessRecord,boolean,com.android.server.am.ProcessRecord)>
        virtualinvoke $r52.<java.util.ArrayList: void add(int,java.lang.Object)>(i42, r0)
        virtualinvoke $r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
        virtualinvoke $r35.<java.util.ArrayList: void add(int,java.lang.Object)>(i35, r0)
<com.android.server.midi.MidiService: com.android.server.midi.MidiService$Client getClient(android.os.IBinder)>
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
<com.android.server.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByName(int)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.am.ProcessList: int updateLruProcessInternalLocked(com.android.server.am.ProcessRecord,long,int,int,java.lang.String,java.lang.Object,com.android.server.am.ProcessRecord)>
        virtualinvoke $r5.<java.util.ArrayList: void add(int,java.lang.Object)>(i6, r0)
<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>
        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r27)
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r12)
<com.android.server.content.ContentService: android.util.ArrayMap findOrCreateCacheLocked(int,java.lang.String)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>
        virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r41)
<com.android.server.BluetoothManagerService: void addActiveLog(int,java.lang.String,boolean)>
        virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>(r4)
<com.android.server.am.ActiveServices: int bindServiceLocked(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
        virtualinvoke $r24.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)
        virtualinvoke $r26.<android.util.ArraySet: boolean add(java.lang.Object)>(r164)
        virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r166, r168)
<com.android.server.TelephonyRegistry: com.android.server.TelephonyRegistry$Record add(android.os.IBinder,int,int,boolean)>
        virtualinvoke $r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r25)
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r12)
        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r12)
<com.android.server.am.AnrHelper: void appNotResponding(com.android.server.am.ProcessRecord,java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,com.android.server.wm.WindowProcessController,boolean,java.lang.String)>
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3)
<com.android.server.am.PendingIntentController: void incrementUidStatLocked(com.android.server.am.PendingIntentRecord)>
        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r20)
<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)
<com.android.server.appwidget.AppWidgetServiceImpl: void onWidgetProviderAddedOrChangedLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>
        virtualinvoke r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r83)
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,boolean)>
        virtualinvoke $r37.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
        virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>($r40)
        virtualinvoke $r46.<java.util.ArrayList: boolean add(java.lang.Object)>(r77)
<com.android.server.soundtrigger.SoundTriggerHelper: com.android.server.soundtrigger.SoundTriggerHelper$ModelData getOrCreateGenericModelDataLocked(java.util.UUID)>
        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r7)
<com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,android.app.ITransientNotification,int,int,android.app.ITransientNotificationCallback)>
        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r87)
<android.util.SparseArrayMap: void add(int,java.lang.String,java.lang.Object)>
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
<com.android.server.audio.AudioService: int setModeInt(int,android.os.IBinder,int,int,java.lang.String)>
        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r26)
<com.android.internal.app.procstats.ProcessStats: com.android.internal.app.procstats.ProcessState getProcessStateLocked(com.android.internal.app.procstats.ProcessStats$PackageState,java.lang.String)>
        virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, r43)
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>
        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9)
<com.android.server.wm.ActivityTaskManagerService: com.android.server.wm.ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int,android.content.Intent,java.lang.String,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean,int,android.os.Bundle,long,int)>
        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r47)
<com.android.server.wm.WindowProcessController: void addPackage(java.lang.String)>
        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r5)
<com.android.server.media.MediaSessionStack: void addSession(com.android.server.media.MediaSessionRecordImpl)>
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
<com.android.server.audio.AudioEventLogger: void log(com.android.server.audio.AudioEventLogger$Event)>
        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r6)
<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>
        $z0 = virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>($r4)
<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>
        interfaceinvoke $r11.<java.util.Map: void putAll(java.util.Map)>($r12)
<com.android.server.accounts.AccountsDb: long insertExtra(long,java.lang.String,java.lang.String)>
        $l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ceDb.extras", "key", r4)
<com.android.server.accessibility.SystemActionPerformer: void registerSystemAction(int,android.app.RemoteAction)>
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r6)
<com.android.server.soundtrigger.SoundTriggerDbHelper: boolean updateGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
        l1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("st_sound_model", null, r2, 5)
<com.android.server.wm.DisplayWindowSettings: void writeSettingsIfNeeded(com.android.server.wm.DisplayWindowSettings$Entry,android.view.DisplayInfo)>
        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0)
<com.android.server.soundtrigger.SoundTriggerService$SoundModelStatTracker: void onStart(java.util.UUID)>
        virtualinvoke $r8.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r12)
<com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
        virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r5)
<android.app.ResourcesManager: android.content.res.ApkAssets loadApkAssets(java.lang.String,boolean,boolean)>
        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3)
<com.android.server.accounts.AccountsDb: long insertOrReplaceMetaAuthTypeAndUid(java.lang.String,int)>
        $l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("meta", null, r4, 5)
<com.android.server.am.AppExitInfoTracker: void putToSparse2dArray(android.util.SparseArray,int,int,java.lang.Object,java.util.function.Supplier,java.util.function.Consumer)>
        virtualinvoke r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r1)
<com.android.server.wm.PersisterQueue: void addItem(com.android.server.wm.PersisterQueue$WriteQueueItem,boolean)>
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4)
<com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
<com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)
        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4)
<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)
<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>
        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r27)
<com.android.server.wm.RecentTasks: void add(com.android.server.wm.Task)>
        virtualinvoke $r15.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)
        virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(i11, r2)
        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2)
<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>
        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6)
<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>
        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3)
<android.app.ActivityManager: void addOnUidImportanceListener(android.app.ActivityManager$OnUidImportanceListener,int)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r16)
<com.android.internal.os.BinderDeathDispatcher: int linkToDeath(android.os.IInterface,android.os.IBinder$DeathRecipient)>
        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r14)
<com.android.server.usb.UsbProfileGroupSettingsManager: void addAccessoryPackagesToDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14)
<com.android.server.job.JobPackageTracker$DataSet: com.android.server.job.JobPackageTracker$PackageEntry getOrCreateEntry(int,java.lang.String)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r19)
<com.android.server.am.ProcessRecord: boolean startService(com.android.server.am.ServiceRecord)>
        z0 = virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r0)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,int)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r23)
<com.android.server.location.gnss.GnssManagerService: boolean addGnssDataListenerLocked(java.lang.Object,android.os.IInterface,java.lang.String,java.lang.String,com.android.server.location.RemoteListenerHelper,android.util.ArrayMap,java.util.function.Consumer)>
        virtualinvoke r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r8)
<android.net.StaticIpConfiguration: void <init>(android.net.StaticIpConfiguration)>
        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4)
<com.android.server.voiceinteraction.DatabaseHelper: boolean updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
        l4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("sound_model", null, r2, 5)
<com.android.server.clipboard.ClipboardService: void addActiveOwnerLocked(int,java.lang.String)>
        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r18)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int,int,int,int,int,boolean,int[])>
        virtualinvoke $r55.<android.util.SparseArray: void put(int,java.lang.Object)>(i46, r212)
<com.android.server.pm.RestrictionsSet: boolean updateRestrictions(int,android.os.Bundle)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3)
<com.android.server.devicepolicy.DeviceAdminServiceController: void startServiceForOwner(java.lang.String,int,java.lang.String)>
        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, r24)
<com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo addDeviceLocked(int,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,android.media.midi.IMidiDeviceServer,android.content.pm.ServiceInfo,boolean,int)>
        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r24, r23)
        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23)
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceLookupResult retrieveServiceLocked(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,int,int,boolean,boolean,boolean,boolean)>
        virtualinvoke $r108.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r263, r218)
        virtualinvoke $r110.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r267, r218)
<com.android.server.IntentResolver: void addFilter(java.lang.Object)>
        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r1)
<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>
        r14 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
<com.android.server.DropBoxManagerService$DropBoxManagerBroadcastHandler: void maybeDeferBroadcast(java.lang.String,long)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r8)
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r13)
<com.android.server.sip.SipService: com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r13)
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopJobLocked(java.lang.String,long,int)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)
<com.android.server.usb.UsbProfileGroupSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,android.os.UserHandle)>
        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
<com.android.server.am.ActivityManagerService: void requireAllowedAssociationsLocked(java.lang.String)>
        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
<com.android.server.BluetoothManagerService: int updateBleAppCount(android.os.IBinder,boolean,java.lang.String)>
        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r28)
<com.android.server.am.ProviderMap: java.util.HashMap getProvidersByClass(int)>
        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11)
<com.android.server.AlarmManagerService: void setImplLocked(com.android.server.AlarmManagerService$Alarm,boolean,boolean)>
        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>
        virtualinvoke $r2.<java.util.TreeSet: boolean add(java.lang.Object)>(r13)
        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r15)
<com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>
        virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>($i5, r24)
<com.android.server.am.ActivityManagerService$PidMap: void doAddInternal(com.android.server.am.ProcessRecord)>
        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, r1)
<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>
        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6)
<android.content.IntentFilter: void addAction(java.lang.String)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)
<com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r4)
<com.android.server.content.SyncStorageEngine: java.util.List getCurrentSyncsLocked(int)>
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>
        virtualinvoke r44.<java.util.ArrayList: boolean add(java.lang.Object)>(r45)
<com.android.server.usage.UsageStatsService: void reportEventOrAddToQueue(int,android.app.usage.UsageEvents$Event)>
        virtualinvoke r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r12)
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r14)
<com.android.server.am.ActiveServices: com.android.server.am.ActiveServices$ServiceMap getServiceMapLocked(int)>
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9)
<com.android.server.am.ProcessList: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,int,int,java.lang.String)>
        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.wm.AppWarnings: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>
        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1)
<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutUser getUserShortcutsLocked(int)>
        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r6)
<com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserInternalUncheckedNoTracing(java.lang.String,java.lang.String,int,int,boolean,java.lang.String[],com.android.server.utils.TimingsTraceAndSlog)>
        virtualinvoke $r106.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r105)
<com.android.server.StorageManagerService: java.util.concurrent.CountDownLatch findOrCreateDiskScanLatch(java.lang.String)>
        virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9)
<com.android.server.media.MediaRouter2ServiceImpl: void registerManagerLocked(android.media.IMediaRouter2Manager,int,int,java.lang.String,int)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r31)
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r31)
<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r42)
<com.android.server.am.ProcessList: void addProcessNameLocked(com.android.server.am.ProcessRecord)>
        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, r1)
<com.android.server.usb.UsbPermissionManager: com.android.server.usb.UsbUserPermissionManager getPermissionsForUser(int)>
        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r12)
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
        r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r11)
        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r4)
<com.android.server.am.ProcessList$ImperceptibleKillRunner: boolean enqueueLocked(com.android.server.am.ProcessRecord,java.lang.String,int)>
        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r22)
<com.android.server.IntentResolver: void addFilter(android.util.ArrayMap,java.lang.String,java.lang.Object)>
        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
<com.android.server.usb.UsbProfileGroupSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,android.os.UserHandle)>
        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
<com.android.server.am.BroadcastQueue: void enqueueParallelBroadcastLocked(com.android.server.am.BroadcastRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
        interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r23)
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r3)
<android.widget.RemoteViews: void readActionsFromParcel(android.os.Parcel,int)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)
<com.android.server.am.BroadcastStats: void addBroadcast(java.lang.String,java.lang.String,int,int,long)>
        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r14)
<com.android.server.audio.MediaFocusControl: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,int,boolean)>
        virtualinvoke $r49.<java.util.ArrayList: boolean add(java.lang.Object)>(r83)
<com.android.server.print.PrintManagerService$PrintManagerImpl: com.android.server.print.UserState getOrCreateUserStateLocked(int,boolean,boolean)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16)
<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>
        virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r9)
<com.android.server.pm.dex.PackageDexUsage: boolean record(java.lang.String,java.lang.String,int,java.lang.String,boolean,java.lang.String,java.lang.String)>
        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r38)
        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r32, r36)
<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>
        virtualinvoke $r3.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r2)
        virtualinvoke $r6.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r5)
<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>
        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2)
<com.android.server.wm.ActivityRecord: void addResultLocked(com.android.server.wm.ActivityRecord,java.lang.String,int,int,android.content.Intent)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r8)
<com.android.server.usage.AppTimeLimitController: void addAppUsageLimitObserver(int,int,java.lang.String[],long,long,android.app.PendingIntent,int)>
        virtualinvoke $r15.<android.util.SparseArray: void append(int,java.lang.Object)>(i6, r21)
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$ProcessChangeItem enqueueProcessChangeItemLocked(int,int)>
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r12)
<com.android.server.appwidget.AppWidgetServiceImpl: void incrementAppWidgetServiceRefCount(int,android.util.Pair)>
        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r3)
<com.android.server.location.LocationManagerService: com.android.server.location.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,com.android.server.location.CallerIdentity,android.os.WorkSource,boolean)>
        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13)
<com.android.server.appwidget.AppWidgetServiceImpl: void addWidgetLocked(com.android.server.appwidget.AppWidgetServiceImpl$Widget)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
<com.android.internal.telephony.TelephonyPermissions: boolean reportAccessDeniedToReadIdentifiers(android.content.Context,int,int,int,java.lang.String,java.lang.String)>
        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r33)
<com.android.internal.app.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r5)
<com.android.server.am.ActivityManagerService: void updateProcessForegroundLocked(com.android.server.am.ProcessRecord,boolean,int,boolean)>
        virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r13)
<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>
        virtualinvoke r144.<java.util.ArrayList: boolean add(java.lang.Object)>(r106)
<com.android.server.am.ActivityManagerService: com.android.server.am.ContentProviderConnection incProviderCountLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord,android.os.IBinder,int,java.lang.String,java.lang.String,boolean)>
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r20)
<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>
        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r18)
<com.android.server.wm.LockTaskController: void updateLockTaskPackages(int,java.lang.String[])>
        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r13)
<com.android.server.statusbar.StatusBarManagerService: void manageDisableListLocked(int,int,android.os.IBinder,java.lang.String,int)>
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r16)
<com.android.server.audio.MediaFocusControl: boolean notifyExtFocusPolicyFocusRequest_syncAf(android.media.AudioFocusInfo,android.media.IAudioFocusDispatcher,android.os.IBinder)>
        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9)
<com.android.server.am.ProcessList: void updateClientActivitiesOrdering(com.android.server.am.ProcessRecord,int,int,int)>
        virtualinvoke $r32.<java.util.ArrayList: void add(int,java.lang.Object)>(i23, r23)
        virtualinvoke $r27.<java.util.ArrayList: void add(int,java.lang.Object)>(i24, r23)
        virtualinvoke $r16.<java.util.ArrayList: void add(int,java.lang.Object)>(i26, r35)
<com.android.server.notification.PreferencesHelper: boolean createNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,boolean)>
        virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r1)
<com.android.server.wallpaper.WallpaperManagerService: void migrateSystemToLockWallpaperLocked(int)>
        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5)
<com.android.server.pm.permission.PermissionSettings: void putPermissionLocked(java.lang.String,com.android.server.pm.permission.BasePermission)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>
        virtualinvoke r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r0)
<com.android.server.slice.SliceManagerService: com.android.server.slice.SliceManagerService$PackageMatchingCache getAssistantMatcher(int)>
        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7)
<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5)
<com.android.server.wm.InputMonitor: void addInputConsumer(java.lang.String,com.android.server.wm.InputConsumerImpl)>
        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
<com.android.server.am.ProviderMap: void putProviderByName(java.lang.String,com.android.server.am.ContentProviderRecord)>
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r0)
<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$NotificationId getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>
        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r18)
<com.android.server.slice.SliceManagerService: com.android.server.slice.PinnedSliceState getOrCreatePinnedSlice(android.net.Uri,java.lang.String)>
        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
<com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderImpl(android.app.IApplicationThread,java.lang.String,android.os.IBinder,int,java.lang.String,java.lang.String,boolean,int)>
        virtualinvoke $r38.<java.util.ArrayList: boolean add(java.lang.Object)>(r213)
        virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, r213)
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void noteWakeupAlarmLocked(java.lang.String)>
        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10)
<android.net.LinkProperties: boolean addValidatedPrivateDnsServer(java.net.InetAddress)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.connectivity.IpConnectivityMetrics: int append(android.net.ConnectivityMetricsEvent)>
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6)
<com.android.server.am.ActivityManagerService: void maybeUpdateProviderUsageStatsLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)>
        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
<com.android.server.pm.Settings: void writeKernelMappingLPr(java.lang.String,int,int[])>
        virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r19)
<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.wm.DisplayContent: void addWindowToken(android.os.IBinder,com.android.server.wm.WindowToken)>
        virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r40, r41)
<com.android.server.am.ProcessList: android.os.AppZygote createAppZygoteForProcessIfNeeded(com.android.server.am.ProcessRecord)>
        virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r26, r29)
<com.android.server.am.ActiveServices: void setServiceForegroundInnerLocked(com.android.server.am.ServiceRecord,int,android.app.Notification,int,int)>
        virtualinvoke $r145.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r146, r144)
<com.android.server.am.ActiveServices: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,boolean,java.lang.String)>
        virtualinvoke $r9.<android.util.ArraySet: boolean add(java.lang.Object)>(r2)
<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>
        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r8)
<android.net.LinkProperties: boolean addPcscfServer(java.net.InetAddress)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.location.LocationRequestStatistics$RequestSummaryLimitedHistory: void addRequestSummary(com.android.server.location.LocationRequestStatistics$RequestSummary)>
        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>
        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)
<com.android.server.am.CachedAppOptimizer: void compactAppBfgs(com.android.server.am.ProcessRecord)>
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
<com.android.server.pm.permission.PermissionSettings: void addAppOpPackage(java.lang.String,java.lang.String)>
        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
<com.android.server.usb.UsbSettingsManager: com.android.server.usb.UsbProfileGroupSettingsManager getSettingsForProfileGroup(android.os.UserHandle)>
        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r12)



========================== RiskyMethodWithParamContainingIBinder ====================================
Size:56<android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
<android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
<android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
