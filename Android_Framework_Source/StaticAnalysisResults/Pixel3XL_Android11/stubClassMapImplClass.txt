========================Service not in framework===============================
nfc -- android.nfc.INfcAdapter$Stub
telecom -- com.android.internal.telecom.ITelecomService$Stub
wifirtt -- android.net.wifi.rtt.IWifiRttManager$Stub
android.security.identity -- android.security.identity.ICredentialStoreFactory$Stub
android.security.keystore -- android.security.keystore.IKeystoreService$Stub
media.resource_manager -- android.media.IResourceManagerService$Stub
tethering -- android.net.ITetheringConnector$Stub
wifiaware -- android.net.wifi.aware.IWifiAwareManager$Stub
carrier_config -- com.android.internal.telephony.ICarrierConfigLoader$Stub
wifi -- android.net.wifi.IWifiManager$Stub
wifip2p -- android.net.wifi.p2p.IWifiP2pManager$Stub
phone -- com.android.internal.telephony.ITelephony$Stub
ions -- com.android.internal.telephony.IOns$Stub
qti.ims.ext -- org.codeaurora.ims.internal.IQtiImsExt$Stub
android.service.gatekeeper.IGateKeeperService -- android.service.gatekeeper.IGateKeeperService$Stub
rcs -- com.android.ims.internal.IRcsService$Stub
media.camera -- android.hardware.ICameraService$Stub
telephony_ims -- android.telephony.ims.aidl.IImsRcsController$Stub


=====================Stub Map Impl==================================
android.nfc.INfcAdapter$Stub--null
android.security.keymaster.IKeyAttestationApplicationIdProvider$Stub--com.android.server.security.KeyAttestationApplicationIdProviderService
android.app.INotificationManager$Stub--com.android.server.notification.NotificationManagerService$10
com.android.internal.telecom.ITelecomService$Stub--null
android.net.wifi.rtt.IWifiRttManager$Stub--null
android.webkit.IWebViewUpdateService$Stub--com.android.server.webkit.WebViewUpdateService$BinderService
android.media.IMediaResourceMonitor$Stub--com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl
android.hardware.usb.IUsbManager$Stub--com.android.server.usb.UsbService
android.hardware.fingerprint.IFingerprintService$Stub--com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper
android.media.midi.IMidiManager$Stub--com.android.server.midi.MidiService
android.app.IWallpaperManager$Stub--com.android.server.wallpaper.WallpaperManagerService
com.android.internal.telephony.IIccPhoneBook$Stub--com.android.internal.telephony.UiccPhoneBookController
com.android.internal.appwidget.IAppWidgetService$Stub--com.android.server.appwidget.AppWidgetServiceImpl
android.hardware.biometrics.IAuthService$Stub--com.android.server.biometrics.AuthService$AuthServiceImpl
android.view.autofill.IAutoFillManager$Stub--com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub
android.hardware.input.IInputManager$Stub--com.android.server.input.InputManagerService
android.media.IAudioService$Stub--com.android.server.audio.AudioService
com.android.internal.view.IInputMethodManager$Stub--com.android.server.inputmethod.InputMethodManagerService
android.content.pm.IPackageManager$Stub--com.android.server.pm.PackageManagerService
android.app.trust.ITrustManager$Stub--com.android.server.trust.TrustManagerService$1
android.service.textclassifier.ITextClassifierService$Stub--com.android.server.textclassifier.TextClassificationManagerService
android.os.storage.IStorageManager$Stub--com.android.server.StorageManagerService
android.permission.IPermissionManager$Stub--com.android.server.pm.permission.PermissionManagerService
android.hardware.ISensorPrivacyManager$Stub--com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl
android.security.identity.ICredentialStoreFactory$Stub--null
android.security.keystore.IKeystoreService$Stub--null
android.media.IResourceManagerService$Stub--null
android.view.IGraphicsStats$Stub--android.graphics.GraphicsStatsService
android.content.IRestrictionsManager$Stub--com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl
android.net.ITetheringConnector$Stub--null
android.net.wifi.aware.IWifiAwareManager$Stub--null
android.accounts.IAccountManager$Stub--com.android.server.accounts.AccountManagerService
com.android.internal.os.IDropBoxManagerService$Stub--com.android.server.DropBoxManagerService$2
com.android.internal.telephony.ICarrierConfigLoader$Stub--null
com.android.internal.compat.IPlatformCompat$Stub--com.android.server.compat.PlatformCompat
android.location.ICountryDetector$Stub--com.android.server.CountryDetectorService
android.app.blob.IBlobStoreManager$Stub--com.android.server.blob.BlobStoreManagerService$Stub
android.app.IUriGrantsManager$Stub--com.android.server.uri.UriGrantsManagerService
com.android.internal.app.procstats.IProcessStats$Stub--com.android.server.am.ProcessStatsService
android.content.pm.ILauncherApps$Stub--com.android.server.pm.LauncherAppsService$LauncherAppsImpl
android.os.IPowerManager$Stub--com.android.server.power.PowerManagerService$BinderService
android.net.wifi.IWifiManager$Stub--null
android.app.slice.ISliceManager$Stub--com.android.server.slice.SliceManagerService
android.net.wifi.p2p.IWifiP2pManager$Stub--null
android.os.IVibratorService$Stub--com.android.server.VibratorService
android.media.projection.IMediaProjectionManager$Stub--com.android.server.media.projection.MediaProjectionManagerService$BinderService
android.app.backup.IBackupManager$Stub--com.android.server.backup.BackupManagerService
android.companion.ICompanionDeviceManager$Stub--com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl
com.android.internal.telephony.IMms$Stub--com.android.server.MmsServiceBroker$BinderService
com.android.internal.telephony.ITelephony$Stub--null
android.app.ISearchManager$Stub--com.android.server.search.SearchManagerService
android.media.IMediaRouterService$Stub--com.android.server.media.MediaRouterService
android.content.IClipboard$Stub--com.android.server.clipboard.ClipboardService$ClipboardImpl
android.service.dreams.IDreamManager$Stub--com.android.server.dreams.DreamManagerService$BinderService
android.net.nsd.INsdManager$Stub--com.android.server.NsdService
android.hardware.lights.ILightsManager$Stub--com.android.server.lights.LightsService$LightsManagerBinderService
android.hardware.IConsumerIrService$Stub--com.android.server.ConsumerIrService
android.app.contentsuggestions.IContentSuggestionsManager$Stub--com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub
com.android.internal.telephony.IOns$Stub--null
org.codeaurora.ims.internal.IQtiImsExt$Stub--null
android.os.IPermissionController$Stub--com.android.server.am.ActivityManagerService$PermissionController
com.android.internal.statusbar.IStatusBarService$Stub--com.android.server.statusbar.StatusBarManagerService
android.view.contentcapture.IContentCaptureManager$Stub--com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub
android.app.usage.IStorageStatsManager$Stub--com.android.server.usage.StorageStatsService
android.hardware.location.IContextHubService$Stub--com.android.server.location.ContextHubService
android.service.vr.IVrManager$Stub--com.android.server.vr.VrManagerService$4
android.app.prediction.IPredictionManager$Stub--com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub
com.android.internal.telephony.ISub$Stub--com.android.internal.telephony.SubscriptionController
android.app.IUiModeManager$Stub--com.android.server.UiModeManagerService$11
android.os.INetworkManagementService$Stub--com.android.server.NetworkManagementService
android.net.IIpConnectivityMetrics$Stub--com.android.server.connectivity.IpConnectivityMetrics$Impl
android.media.session.ISessionManager$Stub--com.android.server.media.MediaSessionService$SessionManagerImpl
android.service.gatekeeper.IGateKeeperService$Stub--null
android.bluetooth.IBluetoothManager$Stub--com.android.server.BluetoothManagerService
com.android.ims.internal.IRcsService$Stub--null
android.view.accessibility.IAccessibilityManager$Stub--com.android.server.accessibility.AccessibilityManagerService
com.android.internal.telephony.IPhoneSubInfo$Stub--com.android.internal.telephony.PhoneSubInfoController
android.content.IContentService$Stub--com.android.server.content.ContentService
android.net.IEthernetManager$Stub--com.android.server.ethernet.EthernetServiceImpl
android.net.sip.ISipService$Stub--com.android.server.sip.SipService
android.app.admin.IDevicePolicyManager$Stub--com.android.server.devicepolicy.DevicePolicyManagerService
android.net.INetworkStatsService$Stub--com.android.server.net.NetworkStatsService
android.content.pm.IShortcutService$Stub--com.android.server.pm.ShortcutService
android.view.IWindowManager$Stub--com.android.server.wm.WindowManagerService
com.android.internal.telephony.euicc.IEuiccController$Stub--com.android.internal.telephony.euicc.EuiccController
com.android.internal.compat.IPlatformCompatNative$Stub--com.android.server.compat.PlatformCompatNative
android.os.IDeviceIdleController$Stub--com.android.server.DeviceIdleController$BinderService
android.security.IFileIntegrityService$Stub--com.android.server.security.FileIntegrityService$1
android.os.IBatteryPropertiesRegistrar$Stub--com.android.server.BatteryService$BatteryPropertiesRegistrar
android.app.role.IRoleManager$Stub--com.android.server.role.RoleManagerService$Stub
com.android.internal.telephony.euicc.IEuiccCardController$Stub--com.android.internal.telephony.euicc.EuiccCardController
android.hardware.display.IDisplayManager$Stub--com.android.server.display.DisplayManagerService$BinderService
com.android.internal.app.ISoundTriggerService$Stub--com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub
android.net.INetworkPolicyManager$Stub--com.android.server.net.NetworkPolicyManagerService
android.os.IHardwarePropertiesManager$Stub--com.android.server.HardwarePropertiesManagerService
android.hardware.ICameraService$Stub--null
com.android.internal.app.IVoiceInteractionManagerService$Stub--com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub
android.os.IDeviceIdentifiersPolicyService$Stub--com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy
android.app.job.IJobScheduler$Stub--com.android.server.job.JobSchedulerService$JobSchedulerStub
com.android.internal.textservice.ITextServicesManager$Stub--com.android.server.textservices.TextServicesManagerService
com.android.internal.telephony.ITelephonyRegistry$Stub--com.android.server.TelephonyRegistry
android.net.IIpSecService$Stub--com.android.server.IpSecService
android.os.IUserManager$Stub--com.android.server.pm.UserManagerService
android.content.pm.ICrossProfileApps$Stub--com.android.server.pm.CrossProfileAppsServiceImpl
android.app.usage.IUsageStatsManager$Stub--com.android.server.usage.UsageStatsService$BinderService
com.android.internal.app.IAppOpsService$Stub--com.android.server.appop.AppOpsService
com.android.internal.app.IBatteryStats$Stub--com.android.server.am.BatteryStatsService
android.print.IPrintManager$Stub--com.android.server.print.PrintManagerService$PrintManagerImpl
android.content.pm.IPackageManagerNative$Stub--com.android.server.pm.PackageManagerService$PackageManagerNative
android.telephony.ims.aidl.IImsRcsController$Stub--null
android.app.IActivityTaskManager$Stub--com.android.server.wm.ActivityTaskManagerService
android.app.IAlarmManager$Stub--com.android.server.AlarmManagerService$4
com.android.internal.telephony.ISms$Stub--com.android.internal.telephony.SmsController
android.content.rollback.IRollbackManager$Stub--com.android.server.rollback.RollbackManagerServiceImpl
android.os.IThermalService$Stub--com.android.server.power.ThermalManagerService$1
android.net.IConnectivityManager$Stub--com.android.server.ConnectivityService
android.location.ILocationManager$Stub--com.android.server.location.LocationManagerService
android.app.IActivityManager$Stub--com.android.server.am.ActivityManagerService
android.hardware.biometrics.IBiometricService$Stub--com.android.server.biometrics.BiometricService$BiometricServiceWrapper


=======================================================
<android.media.IAudioService$Stub$Proxy: boolean isStreamAffectedByRingerMode(int)> -- <com.android.server.audio.AudioService: boolean isStreamAffectedByRingerMode(int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getAllProfiles(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetAllProfilesCallback)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiOn()> -- <com.android.server.am.BatteryStatsService: void noteWifiOn()>
<android.app.INotificationManager$Stub$Proxy: boolean isPackagePaused(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean isPackagePaused(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordQuality(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)>
<android.view.IWindowManager$Stub$Proxy: void registerDisplayFoldListener(android.view.IDisplayFoldListener)> -- <com.android.server.wm.WindowManagerService: void registerDisplayFoldListener(android.view.IDisplayFoldListener)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isSmsSimPickActivityNeeded(int)> -- <com.android.internal.telephony.SmsController: boolean isSmsSimPickActivityNeeded(int)>
<android.net.IConnectivityManager$Stub$Proxy: void reportNetworkConnectivity(android.net.Network,boolean)> -- <com.android.server.ConnectivityService: void reportNetworkConnectivity(android.net.Network,boolean)>
<android.permission.IPermissionManager$Stub$Proxy: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)> -- <com.android.server.pm.permission.PermissionManagerService: void revokeDefaultPermissionsFromLuiApps(java.lang.String[],int)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)> -- <com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,int,android.telephony.PreciseDataConnectionState)>
<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)> -- <com.android.server.IpSecService: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void setMtu(java.lang.String,int)> -- <com.android.server.NetworkManagementService: void setMtu(java.lang.String,int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStop(android.os.IBinder,java.lang.String,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void reportUsageStop(android.os.IBinder,java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)> -- <com.android.server.ConnectivityService: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -- <com.android.server.inputmethod.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: void addPortAssociation(java.lang.String,int)> -- <com.android.server.input.InputManagerService: void addPortAssociation(java.lang.String,int)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean hasProjectionPermission(int,java.lang.String)> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean hasProjectionPermission(int,java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultVoiceSubId()> -- <com.android.internal.telephony.SubscriptionController: int getDefaultVoiceSubId()>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceQuota(java.lang.String,long)> -- <com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>
<android.os.storage.IStorageManager$Stub$Proxy: void unregisterListener(android.os.storage.IStorageEventListener)> -- <com.android.server.StorageManagerService: void unregisterListener(android.os.storage.IStorageEventListener)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)> -- <com.android.server.pm.PackageManagerService: boolean isPackageSignedByKeySetExactly(java.lang.String,android.content.pm.KeySet)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: void startLocalVoiceInteraction(android.os.IBinder,android.os.Bundle)>
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)> -- <com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>
<android.view.IWindowManager$Stub$Proxy: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)> -- <com.android.server.wm.WindowManagerService: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -- <com.android.internal.telephony.SmsController: void sendStoredMultipartText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)> -- <com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: int getComponentEnabledSetting(android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNumber(java.lang.String,int)> -- <com.android.internal.telephony.SubscriptionController: int setDisplayNumber(java.lang.String,int)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)> -- <com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSessionForUsageStats(int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setScreenCaptureDisabled(android.content.ComponentName,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setScreenCaptureDisabled(android.content.ComponentName,boolean,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceFromLocalNetwork(java.lang.String)> -- <com.android.server.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>
<android.os.IThermalService$Stub$Proxy: float getThermalHeadroom(int)> -- <com.android.server.power.ThermalManagerService$1: float getThermalHeadroom(int)>
<android.app.INotificationManager$Stub$Proxy: void requestBindListener(android.content.ComponentName)> -- <com.android.server.notification.NotificationManagerService$10: void requestBindListener(android.content.ComponentName)>
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> -- <com.android.server.content.ContentService: boolean getMasterSyncAutomatically()>
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getTasks(int)> -- <com.android.server.wm.ActivityTaskManagerService: java.util.List getTasks(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int stopRecognition(int,android.hardware.soundtrigger.IRecognitionStatusCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean requestBugreport(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean requestBugreport(android.content.ComponentName)>
<android.net.IEthernetManager$Stub$Proxy: android.net.IpConfiguration getConfiguration(java.lang.String)> -- <com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration getConfiguration(java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: int startActivityWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
<android.app.IActivityManager$Stub$Proxy: int getMemoryTrimLevel()> -- <com.android.server.am.ActivityManagerService: int getMemoryTrimLevel()>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)> -- <com.android.server.input.InputManagerService: android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: boolean isDeviceAssociatedForWifiConnection(java.lang.String,java.lang.String,int)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean isDeviceAssociatedForWifiConnection(java.lang.String,java.lang.String,int)>
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> -- <com.android.server.power.PowerManagerService$BinderService: void setStayOnSetting(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatePackages(android.content.ComponentName,java.lang.String)>
<android.app.IUiModeManager$Stub$Proxy: void enableCarMode(int,int,java.lang.String)> -- <com.android.server.UiModeManagerService$11: void enableCarMode(int,int,java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> -- <com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)>
<android.media.IMediaRouterService$Stub$Proxy: java.util.List getActiveSessions(android.media.IMediaRouter2Manager)> -- <com.android.server.media.MediaRouterService: java.util.List getActiveSessions(android.media.IMediaRouter2Manager)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setUiccApplicationsEnabled(boolean,int)> -- <com.android.internal.telephony.SubscriptionController: int setUiccApplicationsEnabled(boolean,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)>
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.ContextHubInfo getContextHubInfo(int)> -- <com.android.server.location.ContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void setMimeGroup(java.lang.String,java.lang.String,java.util.List)> -- <com.android.server.pm.PackageManagerService: void setMimeGroup(java.lang.String,java.lang.String,java.util.List)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> -- <com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void showSession(android.os.Bundle,int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void showSession(android.os.Bundle,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()> -- <com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)>
<android.media.midi.IMidiManager$Stub$Proxy: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)> -- <com.android.server.midi.MidiService: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo)> -- <com.android.server.pm.PackageManagerService: boolean addPermission(android.content.pm.PermissionInfo)>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)> -- <com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbAccessory getCurrentAccessory()> -- <com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.net.INetworkStatsService$Stub$Proxy: long getIfaceStats(java.lang.String,int)> -- <com.android.server.net.NetworkStatsService: long getIfaceStats(java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: void releaseSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String)> -- <com.android.server.media.MediaRouterService: void releaseSessionWithManager(android.media.IMediaRouter2Manager,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
<android.os.IUserManager$Stub$Proxy: void setUserAccount(int,java.lang.String)> -- <com.android.server.pm.UserManagerService: void setUserAccount(int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Rect getTaskBounds(int)> -- <com.android.server.wm.ActivityTaskManagerService: android.graphics.Rect getTaskBounds(int)>
<android.app.INotificationManager$Stub$Proxy: boolean isInInvalidMsgState(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean isInInvalidMsgState(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: void removeIdleTimer(java.lang.String)> -- <com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: void resetInteractAcrossProfilesAppOps(java.util.List)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: void resetInteractAcrossProfilesAppOps(java.util.List)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMasterVolumeMuted(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMasterVolumeMuted(android.content.ComponentName)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)> -- <com.android.server.pm.PackageManagerService: boolean isPackageSignedByKeySet(java.lang.String,android.content.pm.KeySet)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void getActiveServiceSupportedActions(java.util.List,com.android.internal.app.IVoiceActionCheckCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean addPermissionAsync(android.content.pm.PermissionInfo)> -- <com.android.server.pm.PackageManagerService: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.content.pm.PackageInfo getCurrentWebViewPackage()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: android.content.pm.PackageInfo getCurrentWebViewPackage()>
<android.view.IWindowManager$Stub$Proxy: void getBaseDisplaySize(int,android.graphics.Point)> -- <com.android.server.wm.WindowManagerService: void getBaseDisplaySize(int,android.graphics.Point)>
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)> -- <com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void startLockTaskModeByToken(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void startLockTaskModeByToken(android.os.IBinder)>
<android.app.IUiModeManager$Stub$Proxy: int getCurrentModeType()> -- <com.android.server.UiModeManagerService$11: int getCurrentModeType()>
<android.media.IAudioService$Stub$Proxy: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)> -- <com.android.server.audio.AudioService: void handleVolumeKey(android.view.KeyEvent,boolean,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setStorageEncryption(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)>
<android.app.INotificationManager$Stub$Proxy: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteResetVideo()> -- <com.android.server.am.BatteryStatsService: void noteResetVideo()>
<android.app.slice.ISliceManager$Stub$Proxy: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)> -- <com.android.server.slice.SliceManagerService: void revokeSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<android.app.IActivityManager$Stub$Proxy: void unregisterReceiver(android.content.IIntentReceiver)> -- <com.android.server.am.ActivityManagerService: void unregisterReceiver(android.content.IIntentReceiver)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isBleAppPresent()> -- <com.android.server.BluetoothManagerService: boolean isBleAppPresent()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetoothGatt getBluetoothGatt()> -- <com.android.server.BluetoothManagerService: android.bluetooth.IBluetoothGatt getBluetoothGatt()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -- <com.android.server.TelephonyRegistry: void removeOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<android.net.IConnectivityManager$Stub$Proxy: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)> -- <com.android.server.ConnectivityService: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void isContentCaptureFeatureEnabled(com.android.internal.os.IResultReceiver)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void isContentCaptureFeatureEnabled(com.android.internal.os.IResultReceiver)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()> -- <com.android.server.am.BatteryStatsService: android.os.connectivity.WifiBatteryStats getWifiBatteryStats()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryContentProviders(java.lang.String,int,int,java.lang.String)>
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)> -- <com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)>
<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageAllowedToAccessCalendarForUser(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyguardDisabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>
<android.os.IUserManager$Stub$Proxy: int getUserBadgeNoBackgroundResId(int)> -- <com.android.server.pm.UserManagerService: int getUserBadgeNoBackgroundResId(int)>
<android.content.pm.ILauncherApps$Stub$Proxy: java.lang.String getShortcutIconUri(java.lang.String,java.lang.String,java.lang.String,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: java.lang.String getShortcutIconUri(java.lang.String,java.lang.String,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isManagedKiosk()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedKiosk()>
<android.view.IWindowManager$Stub$Proxy: float getCurrentAnimatorScale()> -- <com.android.server.wm.WindowManagerService: float getCurrentAnimatorScale()>
<android.app.IActivityManager$Stub$Proxy: void cancelTaskWindowTransition(int)> -- <com.android.server.am.ActivityManagerService: void cancelTaskWindowTransition(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getPreferredDataSubscriptionId()> -- <com.android.internal.telephony.SubscriptionController: int getPreferredDataSubscriptionId()>
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)> -- <com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean activeServiceSupportsLaunchFromKeyguard()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsLaunchFromKeyguard()>
<android.view.IWindowManager$Stub$Proxy: boolean hasNavigationBar(int)> -- <com.android.server.wm.WindowManagerService: boolean hasNavigationBar(int)>
<android.content.IClipboard$Stub$Proxy: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getSmdsAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetSmdsAddressCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)> -- <com.android.server.appop.AppOpsService: void setUserRestrictions(android.os.Bundle,android.os.IBinder,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getStorageEncryption(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean updateIntentVerificationStatus(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: boolean updateIntentVerificationStatus(java.lang.String,int,int)>
<android.os.IUserManager$Stub$Proxy: boolean hasUserRestrictionOnAnyUser(java.lang.String)> -- <com.android.server.pm.UserManagerService: boolean hasUserRestrictionOnAnyUser(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean startBinderTracking()> -- <com.android.server.am.ActivityManagerService: boolean startBinderTracking()>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getModuleProperties()>
<android.view.IWindowManager$Stub$Proxy: boolean shouldShowSystemDecors(int)> -- <com.android.server.wm.WindowManagerService: boolean shouldShowSystemDecors(int)>
<android.os.storage.IStorageManager$Stub$Proxy: void lockUserKey(int)> -- <com.android.server.StorageManagerService: void lockUserKey(int)>
<android.location.ILocationManager$Stub$Proxy: void locationCallbackFinished(android.location.ILocationListener)> -- <com.android.server.location.LocationManagerService: void locationCallbackFinished(android.location.ILocationListener)>
<android.app.backup.IBackupManager$Stub$Proxy: android.os.UserHandle getUserForAncestralSerialNumber(long)> -- <com.android.server.backup.BackupManagerService: android.os.UserHandle getUserForAncestralSerialNumber(long)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: boolean showAssistFromActivity(android.os.IBinder,android.os.Bundle)>
<android.print.IPrintManager$Stub$Proxy: void setBindInstantServiceAllowed(int,boolean)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void setBindInstantServiceAllowed(int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>
<android.os.INetworkManagementService$Stub$Proxy: boolean getIpForwardingEnabled()> -- <com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>
<android.content.IContentService$Stub$Proxy: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)> -- <com.android.server.content.ContentService: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>
<android.app.role.IRoleManager$Stub$Proxy: boolean isRoleHeld(java.lang.String,java.lang.String)> -- <com.android.server.role.RoleManagerService$Stub: boolean isRoleHeld(java.lang.String,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)> -- <com.android.server.backup.BackupManagerService: void setBackupEnabled(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNotificationListenerServicePermitted(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNotificationListenerServicePermitted(java.lang.String,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneOff()> -- <com.android.server.am.BatteryStatsService: void notePhoneOff()>
<android.media.IAudioService$Stub$Proxy: void releasePlayer(int)> -- <com.android.server.audio.AudioService: void releasePlayer(int)>
<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String,int)> -- <com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void setFocusedStack(int)> -- <com.android.server.am.ActivityManagerService: void setFocusedStack(int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetProfileCallback)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getPhoneId(int)> -- <com.android.internal.telephony.SubscriptionController: int getPhoneId(int)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: boolean isValidMediaProjection(android.media.projection.IMediaProjection)> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean isValidMediaProjection(android.media.projection.IMediaProjection)>
<android.content.IClipboard$Stub$Proxy: void clearPrimaryClip(java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: void clearPrimaryClip(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void checkPackageStartable(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: void checkPackageStartable(java.lang.String,int)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)> -- <com.android.server.textservices.TextServicesManagerService: void getSpellCheckerService(int,java.lang.String,java.lang.String,com.android.internal.textservice.ITextServicesSessionListener,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void deletePreloadsFileCache()> -- <com.android.server.pm.PackageManagerService: void deletePreloadsFileCache()>
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintJobInfos(int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintJobInfos(int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStarted(int)> -- <com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)>
<android.content.pm.ILauncherApps$Stub$Proxy: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void pinShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle)>
<android.content.IContentService$Stub$Proxy: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)> -- <com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkAudioOperation(int,int,int,java.lang.String)> -- <com.android.server.appop.AppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void factoryReset()> -- <com.android.server.ConnectivityService: void factoryReset()>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void provideContextImage(int,int,android.os.Bundle)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextImage(int,int,android.os.Bundle)>
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputDevice getInputDevice(int)> -- <com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>
<android.media.IAudioService$Stub$Proxy: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)> -- <com.android.server.audio.AudioService: void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean hasBackupPassword()> -- <com.android.server.backup.BackupManagerService: boolean hasBackupPassword()>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)> -- <com.android.server.appop.AppOpsService: void stopWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<android.net.IConnectivityManager$Stub$Proxy: int registerNetworkProvider(android.os.Messenger,java.lang.String)> -- <com.android.server.ConnectivityService: int registerNetworkProvider(android.os.Messenger,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void setBubblesAllowed(java.lang.String,int,int)> -- <com.android.server.notification.NotificationManagerService$10: void setBubblesAllowed(java.lang.String,int,int)>
<android.app.IActivityManager$Stub$Proxy: void scheduleApplicationInfoChanged(java.util.List,int)> -- <com.android.server.am.ActivityManagerService: void scheduleApplicationInfoChanged(java.util.List,int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)> -- <com.android.server.accessibility.AccessibilityManagerService: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearSystemUpdatePolicyFreezePeriodRecord()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearSystemUpdatePolicyFreezePeriodRecord()>
<android.os.INetworkManagementService$Stub$Proxy: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)> -- <com.android.server.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
<android.app.IActivityManager$Stub$Proxy: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void noteAlarmStart(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void registerAppUsageLimitObserver(int,java.lang.String[],long,long,android.app.PendingIntent,java.lang.String)>
<android.net.IEthernetManager$Stub$Proxy: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)> -- <com.android.server.ethernet.EthernetServiceImpl: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: void flushPackageRestrictionsAsUser(int)> -- <com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUser(int)>
<android.content.rollback.IRollbackManager$Stub$Proxy: void expireRollbackForPackage(java.lang.String)> -- <com.android.server.rollback.RollbackManagerServiceImpl: void expireRollbackForPackage(java.lang.String)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChangeByUid(long,int)> -- <com.android.server.compat.PlatformCompat: void reportChangeByUid(long,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List retrieveNetworkLogs(android.content.ComponentName,java.lang.String,long)>
<android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)> -- <com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledCarrierApps(java.lang.String[],int)>
<android.view.IWindowManager$Stub$Proxy: void setRecentsVisibility(boolean)> -- <com.android.server.wm.WindowManagerService: void setRecentsVisibility(boolean)>
<android.net.IConnectivityManager$Stub$Proxy: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)> -- <com.android.server.ConnectivityService: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>
<android.app.ISearchManager$Stub$Proxy: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)> -- <com.android.server.search.SearchManagerService: android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForPackageForUser(long,long,int,java.lang.String,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: int getNavBarPosition(int)> -- <com.android.server.wm.WindowManagerService: int getNavBarPosition(int)>
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)> -- <com.android.server.power.PowerManagerService$BinderService: void crash(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String[] getBackgroundThrottlingWhitelist()> -- <com.android.server.location.LocationManagerService: java.lang.String[] getBackgroundThrottlingWhitelist()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber(java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumber(java.lang.String)>
<android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)> -- <com.android.server.media.MediaRouterService: void setRouteVolumeWithManager(android.media.IMediaRouter2Manager,int,android.media.MediaRoute2Info,int)>
<android.content.rollback.IRollbackManager$Stub$Proxy: android.content.pm.ParceledListSlice getAvailableRollbacks()> -- <com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.ParceledListSlice getAvailableRollbacks()>
<android.app.INotificationManager$Stub$Proxy: void deleteConversationNotificationChannels(java.lang.String,int,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void deleteConversationNotificationChannels(java.lang.String,int,java.lang.String)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void addClient(android.view.autofill.IAutoFillManagerClient,android.content.ComponentName,int,com.android.internal.os.IResultReceiver)>
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> -- <com.android.server.backup.BackupManagerService: void restoreAtInstall(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void setHasTopUi(boolean)> -- <com.android.server.am.ActivityManagerService: void setHasTopUi(boolean)>
<android.content.IContentService$Stub$Proxy: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)> -- <com.android.server.content.ContentService: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: int getUserIconBadgeResId(int)> -- <com.android.server.pm.UserManagerService: int getUserIconBadgeResId(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setTime(android.content.ComponentName,long)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTime(android.content.ComponentName,long)>
<android.hardware.location.IContextHubService$Stub$Proxy: int unloadNanoApp(int)> -- <com.android.server.location.ContextHubService: int unloadNanoApp(int)>
<android.os.IThermalService$Stub$Proxy: android.os.CoolingDevice[] getCurrentCoolingDevices()> -- <com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevices()>
<android.permission.IPermissionManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: int checkPermission(java.lang.String,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void forceUpdateUserSetupComplete()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void forceUpdateUserSetupComplete()>
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)> -- <com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallQualityChanged(android.telephony.CallQuality,int,int,int)> -- <com.android.server.TelephonyRegistry: void notifyCallQualityChanged(android.telephony.CallQuality,int,int,int)>
<android.net.IIpConnectivityMetrics$Stub$Proxy: int logEvent(android.net.ConnectivityMetricsEvent)> -- <com.android.server.connectivity.IpConnectivityMetrics$Impl: int logEvent(android.net.ConnectivityMetricsEvent)>
<android.view.IWindowManager$Stub$Proxy: boolean isViewServerRunning()> -- <com.android.server.wm.WindowManagerService: boolean isViewServerRunning()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> -- <com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>
<android.content.IContentService$Stub$Proxy: void sync(android.content.SyncRequest,java.lang.String)> -- <com.android.server.content.ContentService: void sync(android.content.SyncRequest,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)> -- <com.android.server.wm.WindowManagerService: void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)>
<android.content.pm.IPackageManager$Stub$Proxy: void performFstrimIfNeeded()> -- <com.android.server.pm.PackageManagerService: void performFstrimIfNeeded()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> -- <com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: java.util.List getLeasedBlobs(java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: java.util.List getLeasedBlobs(java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isProtectedBroadcast(java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean isProtectedBroadcast(java.lang.String)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheBytes(java.lang.String,java.lang.String)> -- <com.android.server.usage.StorageStatsService: long getCacheBytes(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isProvisioningAllowed(java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProvisioningAllowed(java.lang.String,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getAllowedNotificationAssistantForUser(int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.ComponentName getAllowedNotificationAssistantForUser(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reboot(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reboot(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean setTaskWindowingModeSplitScreenPrimary(int,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: boolean setTaskWindowingModeSplitScreenPrimary(int,boolean)>
<android.net.IEthernetManager$Stub$Proxy: boolean isAvailable(java.lang.String)> -- <com.android.server.ethernet.EthernetServiceImpl: boolean isAvailable(java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean isEnrolledForKeyphrase(int,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean isEnrolledForKeyphrase(int,java.lang.String)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)> -- <com.android.server.compat.PlatformCompat: void reportChangeByPackageName(long,java.lang.String,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)> -- <com.android.server.TelephonyRegistry: void notifyRegistrationFailed(int,int,android.telephony.CellIdentity,java.lang.String,int,int,int)>
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)> -- <com.android.server.notification.NotificationManagerService$10: void updateNotificationChannelForPackage(java.lang.String,int,android.app.NotificationChannel)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> -- <com.android.server.wm.ActivityTaskManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportPasswordChanged(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportPasswordChanged(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteInteractive(boolean)> -- <com.android.server.am.BatteryStatsService: void noteInteractive(boolean)>
<android.accounts.IAccountManager$Stub$Proxy: int getAccountVisibility(android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: int getAccountVisibility(android.accounts.Account,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: boolean isObbMounted(java.lang.String)> -- <com.android.server.StorageManagerService: boolean isObbMounted(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String,int,boolean)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryCratesForUid(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForUid(java.lang.String,int,java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: boolean setPowerModeChecked(int,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: boolean setPowerModeChecked(int,boolean)>
<android.os.IUserManager$Stub$Proxy: android.os.PersistableBundle getSeedAccountOptions()> -- <com.android.server.pm.UserManagerService: android.os.PersistableBundle getSeedAccountOptions()>
<android.media.IMediaRouterService$Stub$Proxy: void requestSetVolume(android.media.IMediaRouterClient,java.lang.String,int)> -- <com.android.server.media.MediaRouterService: void requestSetVolume(android.media.IMediaRouterClient,java.lang.String,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneState(int)> -- <com.android.server.am.BatteryStatsService: void notePhoneState(int)>
<android.app.IAlarmManager$Stub$Proxy: boolean setTime(long)> -- <com.android.server.AlarmManagerService$4: boolean setTime(long)>
<android.media.IAudioService$Stub$Proxy: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)> -- <com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback,int)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: android.app.PendingIntent requestNotificationAccess(android.content.ComponentName)>
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCalendarPackages(android.content.ComponentName,java.util.List)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> -- <com.android.server.location.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>
<android.app.INotificationManager$Stub$Proxy: void deleteNotificationHistoryItem(java.lang.String,int,long)> -- <com.android.server.notification.NotificationManagerService$10: void deleteNotificationHistoryItem(java.lang.String,int,long)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
<android.app.job.IJobScheduler$Stub$Proxy: android.content.pm.ParceledListSlice getAllPendingJobs()> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: android.content.pm.ParceledListSlice getAllPendingJobs()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isEnabled()> -- <com.android.server.BluetoothManagerService: boolean isEnabled()>
<android.media.IAudioService$Stub$Proxy: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])> -- <com.android.server.audio.AudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
<android.media.IAudioService$Stub$Proxy: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)> -- <com.android.server.audio.AudioService: void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes,int,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: boolean clearWindowContentFrameStats(android.os.IBinder)> -- <com.android.server.wm.WindowManagerService: boolean clearWindowContentFrameStats(android.os.IBinder)>
<android.accounts.IAccountManager$Stub$Proxy: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void renameAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int getFrontActivityScreenCompatMode()> -- <com.android.server.wm.ActivityTaskManagerService: int getFrontActivityScreenCompatMode()>
<android.hardware.usb.IUsbManager$Stub$Proxy: java.util.List getPorts()> -- <com.android.server.usb.UsbService: java.util.List getPorts()>
<android.app.IActivityTaskManager$Stub$Proxy: void stopAppSwitches()> -- <com.android.server.wm.ActivityTaskManagerService: void stopAppSwitches()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)> -- <com.android.server.statusbar.StatusBarManagerService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>
<android.service.vr.IVrManager$Stub$Proxy: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)> -- <com.android.server.vr.VrManagerService$4: void unregisterPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
<android.app.slice.ISliceManager$Stub$Proxy: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)> -- <com.android.server.slice.SliceManagerService: void pinSlice(java.lang.String,android.net.Uri,android.app.slice.SliceSpec[],android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAdminActive(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean isBoundWidgetPackage(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean isBoundWidgetPackage(java.lang.String,int)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUser(java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void setNetworkPermission(int,int)> -- <com.android.server.NetworkManagementService: void setNetworkPermission(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)> -- <com.android.server.pm.PackageManagerService: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>
<com.android.internal.telephony.ISub$Stub$Proxy: void removeSubscriptionsFromGroup(int[],android.os.ParcelUuid,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: void removeSubscriptionsFromGroup(int[],android.os.ParcelUuid,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void finishHeavyWeightApp()> -- <com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()>
<android.location.ILocationManager$Stub$Proxy: int getGnssBatchSize(java.lang.String)> -- <com.android.server.location.LocationManagerService: int getGnssBatchSize(java.lang.String)>
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled(boolean)> -- <com.android.server.NsdService: void setEnabled(boolean)>
<android.media.IAudioService$Stub$Proxy: java.util.List getActiveRecordingConfigurations()> -- <com.android.server.audio.AudioService: java.util.List getActiveRecordingConfigurations()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void setPackageStoppedState(java.lang.String,boolean,int)> -- <com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)>
<android.service.vr.IVrManager$Stub$Proxy: void registerListener(android.service.vr.IVrStateCallbacks)> -- <com.android.server.vr.VrManagerService$4: void registerListener(android.service.vr.IVrStateCallbacks)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean deliverNewSession(android.os.IBinder,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean deliverNewSession(android.os.IBinder,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: long getVersionCodeForPackage(java.lang.String)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: long getVersionCodeForPackage(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)> -- <com.android.server.wm.WindowManagerService: android.view.SurfaceControl addShellRoot(int,android.view.IWindow,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getProfileOwnerName(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)>
<android.os.storage.IStorageManager$Stub$Proxy: boolean isConvertibleToFBE()> -- <com.android.server.StorageManagerService: boolean isConvertibleToFBE()>
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int,java.lang.String,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void setDimensionHints(int,int,java.lang.String,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setSubscriptionProperty(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: int setSubscriptionProperty(int,java.lang.String,java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: void stopOneTimePermissionSession(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: void stopOneTimePermissionSession(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: void unregisterObserver(android.net.INetworkManagementEventObserver)> -- <com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>
<android.app.IActivityManager$Stub$Proxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -- <com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)> -- <com.android.server.usb.UsbService: void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<android.os.IDeviceIdleController$Stub$Proxy: void restoreSystemPowerWhitelistApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void restoreSystemPowerWhitelistApp(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isDeviceProvisioned()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioned()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationBubbleChanged(java.lang.String,boolean,int)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationBubbleChanged(java.lang.String,boolean,int)>
<android.os.IUserManager$Stub$Proxy: void clearSeedAccountData()> -- <com.android.server.pm.UserManagerService: void clearSeedAccountData()>
<android.media.IAudioService$Stub$Proxy: void recorderEvent(int,int)> -- <com.android.server.audio.AudioService: void recorderEvent(int,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setActivityController(android.app.IActivityController,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)> -- <com.android.server.NetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)> -- <com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>
<android.media.IAudioService$Stub$Proxy: boolean isMasterMute()> -- <com.android.server.audio.AudioService: boolean isMasterMute()>
<android.os.INetworkManagementService$Stub$Proxy: boolean isNetworkActive()> -- <com.android.server.NetworkManagementService: boolean isNetworkActive()>
<android.os.IUserManager$Stub$Proxy: boolean removeUser(int)> -- <com.android.server.pm.UserManagerService: boolean removeUser(int)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: long getRemainingLeaseQuotaBytes(java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: long getRemainingLeaseQuotaBytes(java.lang.String)>
<android.app.role.IRoleManager$Stub$Proxy: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)> -- <com.android.server.role.RoleManagerService$Stub: void removeRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(java.lang.String)> -- <com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: void removeSessionsListener(android.media.session.IActiveSessionsListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void removeSessionsListener(android.media.session.IActiveSessionsListener)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)> -- <com.android.server.appop.AppOpsService: int noteOperation(int,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void enableContaminantDetection(java.lang.String,boolean)> -- <com.android.server.usb.UsbService: void enableContaminantDetection(java.lang.String,boolean)>
<android.view.IWindowManager$Stub$Proxy: int getPreferredOptionsPanelGravity(int)> -- <com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isUnattendedManagedKiosk()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUnattendedManagedKiosk()>
<android.hardware.input.IInputManager$Stub$Proxy: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -- <com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void enterSafeMode()> -- <com.android.server.am.ActivityManagerService: void enterSafeMode()>
<android.app.IActivityManager$Stub$Proxy: java.util.List getTasks(int)> -- <com.android.server.am.ActivityManagerService: java.util.List getTasks(int)>
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnected(java.lang.String)> -- <com.android.server.backup.BackupManagerService: void agentDisconnected(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: android.content.pm.UserInfo getCurrentUser()> -- <com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>
<android.os.storage.IStorageManager$Stub$Proxy: void abortChanges(java.lang.String,boolean)> -- <com.android.server.StorageManagerService: void abortChanges(java.lang.String,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void setIpForwardingEnabled(boolean)> -- <com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)>
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestoreForUser(int,boolean)> -- <com.android.server.backup.BackupManagerService: void setAutoRestoreForUser(int,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String,int)> -- <com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void setPrivateNotificationsAllowed(boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setPrivateNotificationsAllowed(boolean)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void reportPastUsageStart(android.os.IBinder,java.lang.String,long,java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setDisabled(boolean)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setDisabled(boolean)>
<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long getAuthenticatorId(int)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: long getAuthenticatorId(int)>
<android.app.IActivityManager$Stub$Proxy: int getLaunchedFromUid(android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: int getLaunchedFromUid(android.os.IBinder)>
<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void cancelPrintJob(android.print.PrintJobId,int,int)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> -- <com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>
<android.content.pm.IShortcutService$Stub$Proxy: byte[] getBackupPayload(int)> -- <com.android.server.pm.ShortcutService: byte[] getBackupPayload(int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
<android.media.IAudioService$Stub$Proxy: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.audio.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)> -- <com.android.server.StorageManagerService: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
<android.view.IWindowManager$Stub$Proxy: void executeAppTransition()> -- <com.android.server.wm.WindowManagerService: void executeAppTransition()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkDeviceIdentifierAccess(java.lang.String,int,int)>
<android.app.trust.ITrustManager$Stub$Proxy: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)> -- <com.android.server.trust.TrustManagerService$1: void unlockedByBiometricForUser(int,android.hardware.biometrics.BiometricSourceType)>
<android.os.IUserManager$Stub$Proxy: boolean isManagedProfile(int)> -- <com.android.server.pm.UserManagerService: boolean isManagedProfile(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void cancelTaskWindowTransition(int)> -- <com.android.server.wm.ActivityTaskManagerService: void cancelTaskWindowTransition(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List setMeteredDataDisabledPackages(android.content.ComponentName,java.util.List)>
<android.view.IWindowManager$Stub$Proxy: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)> -- <com.android.server.wm.WindowManagerService: int addWindowTokenWithOptions(android.os.IBinder,int,int,android.os.Bundle,java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: boolean setPowerSaveModeEnabled(boolean)> -- <com.android.server.power.PowerManagerService$BinderService: boolean setPowerSaveModeEnabled(boolean)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int)>
<android.app.job.IJobScheduler$Stub$Proxy: int schedule(android.app.job.JobInfo)> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: int schedule(android.app.job.JobInfo)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -- <com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
<android.app.INotificationManager$Stub$Proxy: void deleteNotificationChannel(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void deleteNotificationChannel(java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)> -- <com.android.server.audio.AudioService: void avrcpSupportsAbsoluteVolume(java.lang.String,boolean)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getExtraLocationControllerPackage()> -- <com.android.server.location.LocationManagerService: java.lang.String getExtraLocationControllerPackage()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getOrganizationColorForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColorForUser(int)>
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallUidRule(int,int,int)> -- <com.android.server.NetworkManagementService: void setFirewallUidRule(int,int,int)>
<android.net.sip.ISipService$Stub$Proxy: java.util.List getProfiles(java.lang.String)> -- <com.android.server.sip.SipService: java.util.List getProfiles(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setFrontActivityScreenCompatMode(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setFrontActivityScreenCompatMode(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setTurnScreenOn(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setTurnScreenOn(android.os.IBinder,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCameraDisabled(android.content.ComponentName,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -- <com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$StackInfo getFocusedStackInfo()>
<android.app.INotificationManager$Stub$Proxy: boolean removeAutomaticZenRules(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean removeAutomaticZenRules(java.lang.String)>
<android.net.IIpSecService$Stub$Proxy: void applyTunnelModeTransform(int,int,int,java.lang.String)> -- <com.android.server.IpSecService: void applyTunnelModeTransform(int,int,int,java.lang.String)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)> -- <com.android.server.appop.AppOpsService: void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)>
<android.accounts.IAccountManager$Stub$Proxy: boolean accountAuthenticated(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: boolean accountAuthenticated(android.accounts.Account)>
<android.os.INetworkManagementService$Stub$Proxy: void stopInterfaceForwarding(java.lang.String,java.lang.String)> -- <com.android.server.NetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>
<android.hardware.location.IContextHubService$Stub$Proxy: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)> -- <com.android.server.location.ContextHubService: void disableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void grantInlineReplyUriPermission(java.lang.String,android.net.Uri,android.os.UserHandle,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: boolean areBubblesAllowed(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean areBubblesAllowed(java.lang.String)>
<android.os.IUserManager$Stub$Proxy: int getUserBadgeLabelResId(int)> -- <com.android.server.pm.UserManagerService: int getUserBadgeLabelResId(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void enableSystemApp(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getDeviceOwnerName()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean,int)> -- <com.android.server.wm.WindowManagerService: void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture,android.os.IRemoteCallback,boolean,int)>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -- <com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<android.os.INetworkManagementService$Stub$Proxy: boolean isTetheringStarted()> -- <com.android.server.NetworkManagementService: boolean isTetheringStarted()>
<android.content.pm.IShortcutService$Stub$Proxy: boolean isRequestPinItemSupported(int,int)> -- <com.android.server.pm.ShortcutService: boolean isRequestPinItemSupported(int,int)>
<android.view.IWindowManager$Stub$Proxy: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)> -- <com.android.server.wm.WindowManagerService: void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)>
<android.app.IActivityManager$Stub$Proxy: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: android.os.IBinder peekService(android.content.Intent,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean,java.util.List)>
<android.hardware.display.IDisplayManager$Stub$Proxy: boolean isUidPresentOnDisplay(int,int)> -- <com.android.server.display.DisplayManagerService$BinderService: boolean isUidPresentOnDisplay(int,int)>
<android.media.session.ISessionManager$Stub$Proxy: boolean isTrusted(java.lang.String,int,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: boolean isTrusted(java.lang.String,int,int)>
<android.app.role.IRoleManager$Stub$Proxy: void setRoleNamesFromController(java.util.List)> -- <com.android.server.role.RoleManagerService$Stub: void setRoleNamesFromController(java.util.List)>
<android.content.pm.IPackageManager$Stub$Proxy: int getPackageUid(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long forceSecurityLogs()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long forceSecurityLogs()>
<android.view.IWindowManager$Stub$Proxy: void setWindowingMode(int,int)> -- <com.android.server.wm.WindowManagerService: void setWindowingMode(int,int)>
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> -- <com.android.server.NsdService: android.os.Messenger getMessenger()>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void setDefaultSmdpAddress(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetDefaultSmdpAddressCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedPasswordAttempt(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> -- <com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkPropertiesForType(int)> -- <com.android.server.ConnectivityService: android.net.LinkProperties getLinkPropertiesForType(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearApplicationUserData(android.content.ComponentName,java.lang.String,android.content.pm.IPackageDataObserver)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneSignalStrength(android.telephony.SignalStrength)> -- <com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)>
<android.app.IActivityTaskManager$Stub$Proxy: void positionTaskInStack(int,int,int)> -- <com.android.server.wm.ActivityTaskManagerService: void positionTaskInStack(int,int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long computeBatteryTimeRemaining()> -- <com.android.server.am.BatteryStatsService: long computeBatteryTimeRemaining()>
<android.net.IConnectivityManager$Stub$Proxy: boolean isCallerCurrentAlwaysOnVpnApp()> -- <com.android.server.ConnectivityService: boolean isCallerCurrentAlwaysOnVpnApp()>
<android.os.IDeviceIdleController$Stub$Proxy: void removeSystemPowerWhitelistApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void removeSystemPowerWhitelistApp(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)> -- <com.android.server.pm.PackageManagerService: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: java.lang.String getDefaultBrowser(int)> -- <com.android.server.pm.permission.PermissionManagerService: java.lang.String getDefaultBrowser(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,java.lang.String,android.content.Intent)>
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int,int)> -- <com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String,java.lang.String,int)>
<android.content.pm.IShortcutService$Stub$Proxy: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)> -- <com.android.server.pm.ShortcutService: void disableShortcuts(java.lang.String,java.util.List,java.lang.CharSequence,int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteNetworkInterfaceType(java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)>
<com.android.internal.telephony.IMms$Stub$Proxy: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -- <com.android.server.MmsServiceBroker$BinderService: void sendStoredMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomaticallyAsUser(boolean,int)> -- <com.android.server.content.ContentService: void setMasterSyncAutomaticallyAsUser(boolean,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void notifyActivityDrawn(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void notifyActivityDrawn(android.os.IBinder)>
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)> -- <com.android.server.backup.BackupManagerService: void setAutoRestore(boolean)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: java.lang.String changeProviderAndSetting(java.lang.String)> -- <com.android.server.webkit.WebViewUpdateService$BinderService: java.lang.String changeProviderAndSetting(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setOrganizationColorForUser(int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColorForUser(int,int)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobFinish(java.lang.String,int,int)> -- <com.android.server.am.BatteryStatsService: void noteJobFinish(java.lang.String,int,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showInattentiveSleepWarning()> -- <com.android.server.statusbar.StatusBarManagerService: void showInattentiveSleepWarning()>
<android.os.INetworkManagementService$Stub$Proxy: void addVpnUidRanges(int,android.net.UidRange[])> -- <com.android.server.NetworkManagementService: void addVpnUidRanges(int,android.net.UidRange[])>
<android.content.pm.IShortcutService$Stub$Proxy: void removeDynamicShortcuts(java.lang.String,java.util.List,int)> -- <com.android.server.pm.ShortcutService: void removeDynamicShortcuts(java.lang.String,java.util.List,int)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String,int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: void setActivityLocusContext(android.content.ComponentName,android.content.LocusId,android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)> -- <com.android.server.StorageManagerService: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: boolean shouldCollectNotes(int)> -- <com.android.server.appop.AppOpsService: boolean shouldCollectNotes(int)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStopped(int)> -- <com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)>
<android.app.IActivityManager$Stub$Proxy: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService: boolean setProcessMemoryTrimLevel(java.lang.String,int,int)>
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledPackages(int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)> -- <com.android.server.ConnectivityService: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void clearOverridesForTest(java.lang.String)> -- <com.android.server.compat.PlatformCompat: void clearOverridesForTest(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviderPackages(java.lang.String)> -- <com.android.server.location.LocationManagerService: java.util.List getProviderPackages(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvn(java.lang.String,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: int[] getProfileIds(int,boolean)> -- <com.android.server.pm.UserManagerService: int[] getProfileIds(int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)>
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplayDensityForUser(int,int)> -- <com.android.server.wm.WindowManagerService: void clearForcedDisplayDensityForUser(int,int)>
<android.os.IUserManager$Stub$Proxy: boolean markGuestForDeletion(int)> -- <com.android.server.pm.UserManagerService: boolean markGuestForDeletion(int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void finishSession(int,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void finishSession(int,int)>
<android.permission.IPermissionManager$Stub$Proxy: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
<android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> -- <com.android.server.ConnectivityService: void reportInetCondition(int,int)>
<android.app.INotificationManager$Stub$Proxy: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)> -- <com.android.server.notification.NotificationManagerService$10: void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])> -- <com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)> -- <com.android.internal.telephony.SmsController: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int getLockTaskModeState()> -- <com.android.server.am.ActivityManagerService: int getLockTaskModeState()>
<android.content.pm.IPackageManager$Stub$Proxy: void notifyPackagesReplacedReceived(java.lang.String[])> -- <com.android.server.pm.PackageManagerService: void notifyPackagesReplacedReceived(java.lang.String[])>
<android.os.IHardwarePropertiesManager$Stub$Proxy: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)> -- <com.android.server.HardwarePropertiesManagerService: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: int getLocationFlags(java.lang.String)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: int getLocationFlags(java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: void backupNow()> -- <com.android.server.backup.BackupManagerService: void backupNow()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackageForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackageForUser(int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTag(java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: boolean addVpnAddress(java.lang.String,int)> -- <com.android.server.ConnectivityService: boolean addVpnAddress(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void setAlwaysFinish(boolean)> -- <com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>
<android.app.IActivityManager$Stub$Proxy: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -- <com.android.server.am.ActivityManagerService: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
<android.print.IPrintManager$Stub$Proxy: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void setPrintServiceEnabled(android.content.ComponentName,boolean,int)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: void stopScan(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void stopScan(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntentForUser(int,java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: boolean forceSuspend()> -- <com.android.server.power.PowerManagerService$BinderService: boolean forceSuspend()>
<android.app.INotificationManager$Stub$Proxy: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)> -- <com.android.server.notification.NotificationManagerService$10: void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener,java.util.List)>
<android.app.IActivityManager$Stub$Proxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)> -- <com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$ParcelableCrashInfo)>
<android.media.IAudioService$Stub$Proxy: java.util.List getAudioVolumeGroups()> -- <com.android.server.audio.AudioService: java.util.List getAudioVolumeGroups()>
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String,java.lang.String)>
<android.print.IPrintManager$Stub$Proxy: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
<android.content.rollback.IRollbackManager$Stub$Proxy: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)> -- <com.android.server.rollback.RollbackManagerServiceImpl: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: boolean hasEnrolledBiometrics(int,java.lang.String)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: boolean hasEnrolledBiometrics(int,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)> -- <com.android.server.audio.AudioService: void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setBlockUninstallForUser(java.lang.String,boolean,int)> -- <com.android.server.pm.PackageManagerService: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)>
<android.os.IVibratorService$Stub$Proxy: boolean hasVibrator()> -- <com.android.server.VibratorService: boolean hasVibrator()>
<android.media.IMediaRouterService$Stub$Proxy: void setSessionVolumeWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,int)> -- <com.android.server.media.MediaRouterService: void setSessionVolumeWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void stopTracing()> -- <com.android.server.statusbar.StatusBarManagerService: void stopTracing()>
<android.media.session.ISessionManager$Stub$Proxy: void setSessionPolicies(android.media.session.MediaSession$Token,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void setSessionPolicies(android.media.session.MediaSession$Token,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isLogoutEnabled()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLogoutEnabled()>
<android.hardware.biometrics.IAuthService$Stub$Proxy: boolean hasEnrolledBiometrics(int,java.lang.String)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: boolean hasEnrolledBiometrics(int,java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onBiometricError(int,int,int)> -- <com.android.server.statusbar.StatusBarManagerService: void onBiometricError(int,int,int)>
<android.app.IActivityManager$Stub$Proxy: void registerProcessObserver(android.app.IProcessObserver)> -- <com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>
<android.content.pm.IPackageManager$Stub$Proxy: void clearCrossProfileIntentFilters(int,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void clearCrossProfileIntentFilters(int,java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: void enableInputDevice(int)> -- <com.android.server.input.InputManagerService: void enableInputDevice(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void activityDestroyed(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void activityDestroyed(android.os.IBinder)>
<android.app.IActivityTaskManager$Stub$Proxy: void keyguardGoingAway(int)> -- <com.android.server.wm.ActivityTaskManagerService: void keyguardGoingAway(int)>
<android.location.ILocationManager$Stub$Proxy: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean addGnssBatchingCallback(android.location.IBatchedLocationCallback,java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void format(java.lang.String)> -- <com.android.server.StorageManagerService: void format(java.lang.String)>
<android.hardware.lights.ILightsManager$Stub$Proxy: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])> -- <com.android.server.lights.LightsService$LightsManagerBinderService: void setLightStates(android.os.IBinder,int[],android.hardware.lights.LightState[])>
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplayScalingMode(int,int)> -- <com.android.server.wm.WindowManagerService: void setForcedDisplayScalingMode(int,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable(int,android.os.IBinder,java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void unregisterListener(android.service.notification.INotificationListener,int)> -- <com.android.server.notification.NotificationManagerService$10: void unregisterListener(android.service.notification.INotificationListener,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void startSession(android.os.IBinder,android.os.IBinder,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,boolean,int,android.content.ComponentName,boolean,com.android.internal.os.IResultReceiver)>
<android.os.IPowerManager$Stub$Proxy: boolean isPowerSaveMode()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isPowerSaveMode()>
<android.view.IWindowManager$Stub$Proxy: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)> -- <com.android.server.wm.WindowManagerService: void requestScrollCapture(int,android.os.IBinder,int,android.view.IScrollCaptureController)>
<android.app.IActivityManager$Stub$Proxy: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)> -- <com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>
<android.app.IWallpaperManager$Stub$Proxy: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)> -- <com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.app.IUriGrantsManager$Stub$Proxy: void releasePersistableUriPermission(android.net.Uri,int,java.lang.String,int)> -- <com.android.server.uri.UriGrantsManagerService: void releasePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>
<android.media.IAudioService$Stub$Proxy: boolean isHdmiSystemAudioSupported()> -- <com.android.server.audio.AudioService: boolean isHdmiSystemAudioSupported()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean switchUser(android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getOpsForPackage(int,java.lang.String,int[])> -- <com.android.server.appop.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])>
<android.view.IWindowManager$Stub$Proxy: void registerDisplayWindowListener(android.view.IDisplayWindowListener)> -- <com.android.server.wm.WindowManagerService: void registerDisplayWindowListener(android.view.IDisplayWindowListener)>
<android.app.IActivityManager$Stub$Proxy: java.lang.String getTagForIntentSender(android.content.IIntentSender,java.lang.String)> -- <com.android.server.am.ActivityManagerService: java.lang.String getTagForIntentSender(android.content.IIntentSender,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemFeature(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean hasSystemFeature(java.lang.String,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSmsSubId()> -- <com.android.internal.telephony.SubscriptionController: int getDefaultSmsSubId()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)>
<android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: boolean setDataSaverModeEnabled(boolean)> -- <com.android.server.NetworkManagementService: boolean setDataSaverModeEnabled(boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: boolean convertToTranslucent(android.os.IBinder,android.os.Bundle)>
<android.app.IWallpaperManager$Stub$Proxy: void setInAmbientMode(boolean,long)> -- <com.android.server.wallpaper.WallpaperManagerService: void setInAmbientMode(boolean,long)>
<android.permission.IPermissionManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: int checkUidPermission(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)> -- <com.android.server.wm.ActivityTaskManagerService: void registerRemoteAnimations(android.os.IBinder,android.view.RemoteAnimationDefinition)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)> -- <com.android.server.wm.ActivityTaskManagerService: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserProvisioningState(int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setUserProvisioningState(int,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void startWifiDisplayScan()> -- <com.android.server.display.DisplayManagerService$BinderService: void startWifiDisplayScan()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableBle(java.lang.String,android.os.IBinder)> -- <com.android.server.BluetoothManagerService: boolean enableBle(java.lang.String,android.os.IBinder)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int,java.lang.String)> -- <com.android.server.ConnectivityService: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)> -- <com.android.server.wm.WindowManagerService: boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>
<android.service.vr.IVrManager$Stub$Proxy: boolean getVrModeState()> -- <com.android.server.vr.VrManagerService$4: boolean getVrModeState()>
<android.app.INotificationManager$Stub$Proxy: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>
<com.android.internal.telephony.IMms$Stub$Proxy: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)> -- <com.android.server.MmsServiceBroker$BinderService: boolean updateStoredMessageStatus(java.lang.String,android.net.Uri,android.content.ContentValues)>
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int,long)> -- <com.android.server.backup.BackupManagerService: void opComplete(int,long)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: int enableTargetSdkChanges(java.lang.String,int)> -- <com.android.server.compat.PlatformCompat: int enableTargetSdkChanges(java.lang.String,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -- <com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<android.os.IUserManager$Stub$Proxy: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)> -- <com.android.server.pm.UserManagerService: boolean someUserHasSeedAccount(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getLockTaskFeatures(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getLockTaskFeatures(android.content.ComponentName)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -- <com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<android.net.IConnectivityManager$Stub$Proxy: boolean requestBandwidthUpdate(android.net.Network)> -- <com.android.server.ConnectivityService: boolean requestBandwidthUpdate(android.net.Network)>
<android.app.IActivityTaskManager$Stub$Proxy: int getRequestedOrientation(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: int getRequestedOrientation(android.os.IBinder)>
<android.net.INetworkStatsService$Stub$Proxy: long getUidStats(int,int)> -- <com.android.server.net.NetworkStatsService: long getUidStats(int,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)> -- <com.android.server.display.DisplayManagerService$BinderService: void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setMode(int,int,java.lang.String,int)> -- <com.android.server.appop.AppOpsService: void setMode(int,int,java.lang.String,int)>
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)> -- <com.android.server.StorageManagerService: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>
<android.content.pm.IShortcutService$Stub$Proxy: void applyRestore(byte[],int)> -- <com.android.server.pm.ShortcutService: void applyRestore(byte[],int)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: void cancelAuthentication(android.os.IBinder,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)> -- <com.android.server.audio.AudioService: void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)>
<android.app.IActivityManager$Stub$Proxy: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)> -- <com.android.server.am.ActivityManagerService: boolean startUserInBackgroundWithListener(int,android.os.IProgressListener)>
<android.media.IAudioService$Stub$Proxy: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)> -- <com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean,boolean,boolean,boolean,android.media.projection.IMediaProjection)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>
<android.content.pm.ILauncherApps$Stub$Proxy: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void registerShortcutChangeCallback(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.content.pm.IShortcutChangeCallback)>
<android.os.IPowerManager$Stub$Proxy: void reboot(boolean,java.lang.String,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void reboot(boolean,java.lang.String,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1NumberForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1NumberForSubscriber(int,java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void destroyUserKey(int)> -- <com.android.server.StorageManagerService: void destroyUserKey(int)>
<android.content.pm.IShortcutService$Stub$Proxy: void removeAllDynamicShortcuts(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: void removeAllDynamicShortcuts(java.lang.String,int)>
<android.os.storage.IStorageManager$Stub$Proxy: long getCacheSizeBytes(java.lang.String,int)> -- <com.android.server.StorageManagerService: long getCacheSizeBytes(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<android.app.slice.ISliceManager$Stub$Proxy: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)> -- <com.android.server.slice.SliceManagerService: void unpinSlice(java.lang.String,android.net.Uri,android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: void setRemoveContentMode(int,int)> -- <com.android.server.wm.WindowManagerService: void setRemoveContentMode(int,int)>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivityFromRecents(int,android.os.Bundle)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)> -- <com.android.server.notification.NotificationManagerService$10: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int)>
<android.accounts.IAccountManager$Stub$Proxy: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)> -- <com.android.server.accounts.AccountManagerService: boolean setAccountVisibility(android.accounts.Account,java.lang.String,int)>
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)> -- <com.android.server.power.PowerManagerService$BinderService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)> -- <com.android.server.pm.PackageManagerService: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -- <com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>
<android.permission.IPermissionManager$Stub$Proxy: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int setParameter(int,int,int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int setParameter(int,int,int)>
<android.view.IWindowManager$Stub$Proxy: int getWindowingMode(int)> -- <com.android.server.wm.WindowManagerService: int getWindowingMode(int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)> -- <com.android.server.media.MediaRouterService: void setSelectedRoute(android.media.IMediaRouterClient,java.lang.String,boolean)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionPolicy(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionPolicy(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setUninstallBlocked(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredConversation(java.lang.String,long)> -- <com.android.server.MmsServiceBroker$BinderService: boolean deleteStoredConversation(java.lang.String,long)>
<android.hardware.input.IInputManager$Stub$Proxy: boolean injectInputEvent(android.view.InputEvent,int)> -- <com.android.server.input.InputManagerService: boolean injectInputEvent(android.view.InputEvent,int)>
<android.app.IActivityManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)> -- <com.android.server.am.ActivityManagerService: void unregisterTaskStackListener(android.app.ITaskStackListener)>
<android.app.role.IRoleManager$Stub$Proxy: boolean isRoleAvailable(java.lang.String)> -- <com.android.server.role.RoleManagerService$Stub: boolean isRoleAvailable(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void releaseNetworkRequest(android.net.NetworkRequest)> -- <com.android.server.ConnectivityService: void releaseNetworkRequest(android.net.NetworkRequest)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void rebootHistory(long)> -- <com.android.server.appop.AppOpsService: void rebootHistory(long)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean hasBindAppWidgetPermission(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean hasBindAppWidgetPermission(java.lang.String,int)>
<android.permission.IPermissionManager$Stub$Proxy: void setPermissionEnforced(java.lang.String,boolean)> -- <com.android.server.pm.permission.PermissionManagerService: void setPermissionEnforced(java.lang.String,boolean)>
<android.app.IActivityManager$Stub$Proxy: long[] getProcessPss(int[])> -- <com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getOrganizationColor(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColor(android.content.ComponentName)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)> -- <com.android.server.usage.UsageStatsService$BinderService: void setAppStandbyBuckets(android.content.pm.ParceledListSlice,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getActiveNetwork()> -- <com.android.server.ConnectivityService: android.net.Network getActiveNetwork()>
<android.app.IActivityManager$Stub$Proxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)> -- <com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean setAutoRevokeWhitelisted(java.lang.String,boolean,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)> -- <com.android.server.wm.ActivityTaskManagerService: void registerRemoteAnimationsForDisplay(int,android.view.RemoteAnimationDefinition)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void loadBoundProfilePackage(java.lang.String,java.lang.String,byte[],com.android.internal.telephony.euicc.ILoadBoundProfilePackageCallback)>
<android.os.IUserManager$Stub$Proxy: void setUserEnabled(int)> -- <com.android.server.pm.UserManagerService: void setUserEnabled(int)>
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)> -- <com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumberWithFeature(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumberWithFeature(java.lang.String,java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteResetCamera()> -- <com.android.server.am.BatteryStatsService: void noteResetCamera()>
<android.app.IActivityTaskManager$Stub$Proxy: void unregisterTaskStackListener(android.app.ITaskStackListener)> -- <com.android.server.wm.ActivityTaskManagerService: void unregisterTaskStackListener(android.app.ITaskStackListener)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String,java.lang.String[],boolean)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyInfo getProxyForNetwork(android.net.Network)> -- <com.android.server.ConnectivityService: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLogoutEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setLogoutEnabled(android.content.ComponentName,boolean)>
<android.media.session.ISessionManager$Stub$Proxy: void notifySession2Created(android.media.Session2Token)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void notifySession2Created(android.media.Session2Token)>
<android.media.IAudioService$Stub$Proxy: void unregisterAudioFocusClient(java.lang.String)> -- <com.android.server.audio.AudioService: void unregisterAudioFocusClient(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: int getConnectionOwnerUid(android.net.ConnectionInfo)> -- <com.android.server.ConnectivityService: int getConnectionOwnerUid(android.net.ConnectionInfo)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: boolean isAppInactive(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: boolean isAppInactive(java.lang.String,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasUserSetupCompleted()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted()>
<android.net.INetworkPolicyManager$Stub$Proxy: boolean getRestrictBackground()> -- <com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo findCurrentGuestUser()> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo findCurrentGuestUser()>
<android.os.IUserManager$Stub$Proxy: boolean canAddMoreProfilesToUser(java.lang.String,int,boolean)> -- <com.android.server.pm.UserManagerService: boolean canAddMoreProfilesToUser(java.lang.String,int,boolean)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void onLockscreenShown()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void onLockscreenShown()>
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)> -- <com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
<android.app.slice.ISliceManager$Stub$Proxy: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)> -- <com.android.server.slice.SliceManagerService: void grantPermissionFromUser(android.net.Uri,java.lang.String,java.lang.String,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean removeTask(int)> -- <com.android.server.wm.ActivityTaskManagerService: boolean removeTask(int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)> -- <com.android.server.compat.PlatformCompat: void setOverrides(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)> -- <com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getStackInfoOnDisplay(int,int,int)> -- <com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$StackInfo getStackInfoOnDisplay(int,int,int)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: boolean isClientActive()> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean isClientActive()>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceAlert(java.lang.String,long)> -- <com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>
<android.app.IActivityManager$Stub$Proxy: java.lang.String getLaunchedFromPackage(android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: java.lang.String getLaunchedFromPackage(android.os.IBinder)>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getSystemPowerWhitelistExceptIdle()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getSystemPowerWhitelistExceptIdle()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyUserMobileDataStateChangedForPhoneId(int,int,boolean)> -- <com.android.server.TelephonyRegistry: void notifyUserMobileDataStateChangedForPhoneId(int,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void addInterfaceToNetwork(java.lang.String,int)> -- <com.android.server.NetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)> -- <com.android.server.TelephonyRegistry: void notifyCellLocationForSubscriber(int,android.telephony.CellIdentity)>
<android.app.IActivityTaskManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)> -- <com.android.server.wm.ActivityTaskManagerService: void setPackageScreenCompatMode(java.lang.String,int)>
<android.hardware.lights.ILightsManager$Stub$Proxy: android.hardware.lights.LightState getLightState(int)> -- <com.android.server.lights.LightsService$LightsManagerBinderService: android.hardware.lights.LightState getLightState(int)>
<android.view.IWindowManager$Stub$Proxy: boolean isRotationFrozen()> -- <com.android.server.wm.WindowManagerService: boolean isRotationFrozen()>
<android.net.IConnectivityManager$Stub$Proxy: int getMultipathPreference(android.net.Network)> -- <com.android.server.ConnectivityService: int getMultipathPreference(android.net.Network)>
<android.app.INotificationManager$Stub$Proxy: android.service.notification.ZenModeConfig getZenModeConfig()> -- <com.android.server.notification.NotificationManagerService$10: android.service.notification.ZenModeConfig getZenModeConfig()>
<android.app.IActivityTaskManager$Stub$Proxy: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)> -- <com.android.server.wm.ActivityTaskManagerService: void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)>
<com.android.internal.telephony.ISub$Stub$Proxy: boolean setSubscriptionEnabled(boolean,int)> -- <com.android.internal.telephony.SubscriptionController: boolean setSubscriptionEnabled(boolean,int)>
<android.app.INotificationManager$Stub$Proxy: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> -- <com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<android.app.IActivityTaskManager$Stub$Proxy: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)> -- <com.android.server.wm.ActivityTaskManagerService: void registerRemoteAnimationForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter)>
<android.app.IActivityManager$Stub$Proxy: void updateServiceGroup(android.app.IServiceConnection,int,int)> -- <com.android.server.am.ActivityManagerService: void updateServiceGroup(android.app.IServiceConnection,int,int)>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void notifyInteraction(int,java.lang.String,android.os.Bundle)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void notifyInteraction(int,java.lang.String,android.os.Bundle)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void removeClient(android.view.autofill.IAutoFillManagerClient,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void removeClient(android.view.autofill.IAutoFillManagerClient,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)> -- <com.android.internal.telephony.SmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)> -- <com.android.server.pm.PackageManagerService: void freeStorageAndNotify(java.lang.String,long,int,android.content.pm.IPackageDataObserver)>
<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void validatePrinters(java.util.List,int)>
<android.hardware.lights.ILightsManager$Stub$Proxy: java.util.List getLights()> -- <com.android.server.lights.LightsService$LightsManagerBinderService: java.util.List getLights()>
<android.media.IAudioService$Stub$Proxy: void playerAttributes(int,android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: void playerAttributes(int,android.media.AudioAttributes)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFlashlightOff(int)> -- <com.android.server.am.BatteryStatsService: void noteFlashlightOff(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>
<com.android.internal.telephony.ISub$Stub$Proxy: int[] getSubId(int)> -- <com.android.internal.telephony.SubscriptionController: int[] getSubId(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void setBindAppWidgetPermission(java.lang.String,int,boolean)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>
<android.content.IContentService$Stub$Proxy: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)> -- <com.android.server.content.ContentService: void setIsSyncableAsUser(android.accounts.Account,java.lang.String,int,int)>
<android.net.IEthernetManager$Stub$Proxy: void setConfiguration(java.lang.String,android.net.IpConfiguration)> -- <com.android.server.ethernet.EthernetServiceImpl: void setConfiguration(java.lang.String,android.net.IpConfiguration)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)> -- <com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getUserControlDisabledPackages(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: void unregisterRemoteAnimations(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void unregisterRemoteAnimations(android.os.IBinder)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void startPreparedClient(int)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void startPreparedClient(int)>
<android.service.dreams.IDreamManager$Stub$Proxy: boolean isDreaming()> -- <com.android.server.dreams.DreamManagerService$BinderService: boolean isDreaming()>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransportForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: java.lang.String selectBackupTransportForUser(int,java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: int[] getDisableFlags(android.os.IBinder,int)> -- <com.android.server.statusbar.StatusBarManagerService: int[] getDisableFlags(android.os.IBinder,int)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean supportsLocalVoiceInteraction()> -- <com.android.server.wm.ActivityTaskManagerService: boolean supportsLocalVoiceInteraction()>
<android.os.IUserManager$Stub$Proxy: void setUserAdmin(int)> -- <com.android.server.pm.UserManagerService: void setUserAdmin(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledApplications(int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledApplications(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>
<android.media.IAudioService$Stub$Proxy: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)> -- <com.android.server.audio.AudioService: void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice,int,boolean,int)>
<android.app.INotificationManager$Stub$Proxy: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])> -- <com.android.server.notification.NotificationManagerService$10: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>
<android.net.IConnectivityManager$Stub$Proxy: boolean isCallerCurrentAlwaysOnVpnLockdownApp()> -- <com.android.server.ConnectivityService: boolean isCallerCurrentAlwaysOnVpnLockdownApp()>
<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: boolean hasEnrolledFingerprints(int,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean hasEnrolledFingerprints(int,java.lang.String)>
<android.app.slice.ISliceManager$Stub$Proxy: boolean hasSliceAccess(java.lang.String)> -- <com.android.server.slice.SliceManagerService: boolean hasSliceAccess(java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: long getCurrentFunctions()> -- <com.android.server.usb.UsbService: long getCurrentFunctions()>
<android.content.pm.ILauncherApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)>
<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)> -- <com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>
<android.net.IIpSecService$Stub$Proxy: void closeUdpEncapsulationSocket(int)> -- <com.android.server.IpSecService: void closeUdpEncapsulationSocket(int)>
<android.os.IUserManager$Stub$Proxy: java.lang.String getSeedAccountName()> -- <com.android.server.pm.UserManagerService: java.lang.String getSeedAccountName()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)> -- <com.android.server.TelephonyRegistry: void notifyOutgoingEmergencyCall(int,int,android.telephony.emergency.EmergencyNumber)>
<android.media.IMediaRouterService$Stub$Proxy: java.util.List getSystemRoutes()> -- <com.android.server.media.MediaRouterService: java.util.List getSystemRoutes()>
<android.view.IWindowManager$Stub$Proxy: void setForceShowSystemBars(boolean)> -- <com.android.server.wm.WindowManagerService: void setForceShowSystemBars(boolean)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<android.view.IWindowManager$Stub$Proxy: boolean stopViewServer()> -- <com.android.server.wm.WindowManagerService: boolean stopViewServer()>
<android.app.IActivityManager$Stub$Proxy: void removeStack(int)> -- <com.android.server.am.ActivityManagerService: void removeStack(int)>
<android.os.IUserManager$Stub$Proxy: boolean canHaveRestrictedProfile(int)> -- <com.android.server.pm.UserManagerService: boolean canHaveRestrictedProfile(int)>
<android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
<android.app.IActivityTaskManager$Stub$Proxy: void setTaskResizeable(int,int)> -- <com.android.server.wm.ActivityTaskManagerService: void setTaskResizeable(int,int)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int,int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: int canAuthenticate(java.lang.String,int,int,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstallForUser(int,java.lang.String,int)> -- <com.android.server.backup.BackupManagerService: void restoreAtInstallForUser(int,java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean removeVpnAddress(java.lang.String,int)> -- <com.android.server.ConnectivityService: boolean removeVpnAddress(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: void startTetheringWithConfiguration(boolean,java.lang.String[])> -- <com.android.server.NetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>
<android.net.INetworkPolicyManager$Stub$Proxy: int[] getUidsWithPolicy(int)> -- <com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecondaryLockscreenEnabled(android.os.UserHandle)>
<android.hardware.input.IInputManager$Stub$Proxy: void removePortAssociation(java.lang.String)> -- <com.android.server.input.InputManagerService: void removePortAssociation(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> -- <com.android.server.am.ActivityManagerService: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> -- <com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)> -- <com.android.server.wm.ActivityTaskManagerService: boolean updateConfiguration(android.content.res.Configuration)>
<android.view.IWindowManager$Stub$Proxy: void setEventDispatching(boolean)> -- <com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)>
<android.media.IAudioService$Stub$Proxy: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallPackageWithActiveAdmins(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> -- <com.android.server.ConnectivityService: boolean isNetworkSupported(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteLongPartialWakelockStartFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteResetAudio()> -- <com.android.server.am.BatteryStatsService: void noteResetAudio()>
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> -- <com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId,java.lang.String,android.content.pm.ParceledListSlice)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback)>
<android.os.IPowerManager$Stub$Proxy: int getLastSleepReason()> -- <com.android.server.power.PowerManagerService$BinderService: int getLastSleepReason()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getMobileProvisioningUrl()> -- <com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean startDreamActivity(android.content.Intent)> -- <com.android.server.wm.ActivityTaskManagerService: boolean startDreamActivity(android.content.Intent)>
<android.app.IActivityTaskManager$Stub$Proxy: void showLockTaskEscapeMessage(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void showLockTaskEscapeMessage(android.os.IBinder)>
<android.app.INotificationManager$Stub$Proxy: void silenceNotificationSound()> -- <com.android.server.notification.NotificationManagerService$10: void silenceNotificationSound()>
<android.app.IActivityTaskManager$Stub$Proxy: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)> -- <com.android.server.wm.ActivityTaskManagerService: void setPictureInPictureParams(android.os.IBinder,android.app.PictureInPictureParams)>
<android.app.IActivityManager$Stub$Proxy: void hang(android.os.IBinder,boolean)> -- <com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: int removeRoutesFromLocalNetwork(java.util.List)> -- <com.android.server.NetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>
<android.app.IActivityTaskManager$Stub$Proxy: int getPackageScreenCompatMode(java.lang.String)> -- <com.android.server.wm.ActivityTaskManagerService: int getPackageScreenCompatMode(java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunctions(long)> -- <com.android.server.usb.UsbService: void setCurrentFunctions(long)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteEvent(int,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteEvent(int,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPasswordSufficientAfterProfileUnification(int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPasswordSufficientAfterProfileUnification(int,int)>
<android.view.IWindowManager$Stub$Proxy: void setLayerTracing(boolean)> -- <com.android.server.wm.WindowManagerService: void setLayerTracing(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)> -- <com.android.server.pm.PackageManagerService: boolean performDexOptSecondary(java.lang.String,java.lang.String,boolean)>
<android.content.IContentService$Stub$Proxy: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -- <com.android.server.content.ContentService: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List extractAsyncOps(java.lang.String)> -- <com.android.server.appop.AppOpsService: java.util.List extractAsyncOps(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getFilteredTasks(int,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: java.util.List getFilteredTasks(int,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()> -- <com.android.server.StorageManagerService: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>
<android.app.IActivityManager$Stub$Proxy: void showBootMessage(java.lang.CharSequence,boolean)> -- <com.android.server.am.ActivityManagerService: void showBootMessage(java.lang.CharSequence,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void setUidMeteredNetworkWhitelist(int,boolean)> -- <com.android.server.NetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)> -- <com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)>
<android.app.IWallpaperManager$Stub$Proxy: int getWidthHint(int)> -- <com.android.server.wallpaper.WallpaperManagerService: int getWidthHint(int)>
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -- <com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
<android.media.IAudioService$Stub$Proxy: java.util.List getActivePlaybackConfigurations()> -- <com.android.server.audio.AudioService: java.util.List getActivePlaybackConfigurations()>
<android.view.IWindowManager$Stub$Proxy: boolean destroyInputConsumer(java.lang.String,int)> -- <com.android.server.wm.WindowManagerService: boolean destroyInputConsumer(java.lang.String,int)>
<android.os.IDeviceIdleController$Stub$Proxy: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void killBackgroundProcesses(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: void stopKeepalive(android.net.Network,int)> -- <com.android.server.ConnectivityService: void stopKeepalive(android.net.Network,int)>
<android.app.IUriGrantsManager$Stub$Proxy: void takePersistableUriPermission(android.net.Uri,int,java.lang.String,int)> -- <com.android.server.uri.UriGrantsManagerService: void takePersistableUriPermission(android.net.Uri,int,java.lang.String,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void resetAllModes(int,java.lang.String)> -- <com.android.server.appop.AppOpsService: void resetAllModes(int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void requestBugReport(int)> -- <com.android.server.am.ActivityManagerService: void requestBugReport(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getGlobalPrivateDnsMode(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getGlobalPrivateDnsMode(android.content.ComponentName)>
<android.app.ISearchManager$Stub$Proxy: java.util.List getSearchablesInGlobalSearch()> -- <com.android.server.search.SearchManagerService: java.util.List getSearchablesInGlobalSearch()>
<android.app.IActivityManager$Stub$Proxy: boolean isUidActive(int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean isUidActive(int,java.lang.String)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)> -- <com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void reportChange(long,android.content.pm.ApplicationInfo)> -- <com.android.server.compat.PlatformCompat: void reportChange(long,android.content.pm.ApplicationInfo)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setDataRoaming(int,int)> -- <com.android.internal.telephony.SubscriptionController: int setDataRoaming(int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScreenState(int)> -- <com.android.server.am.BatteryStatsService: void noteScreenState(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)> -- <com.android.server.wm.ActivityTaskManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMasterVolumeMuted(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setMasterVolumeMuted(android.content.ComponentName,boolean)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect(java.lang.String)> -- <com.android.server.BluetoothManagerService: boolean enableNoAutoConnect(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)> -- <com.android.server.wm.ActivityTaskManagerService: void finishVoiceTask(android.service.voice.IVoiceInteractionSession)>
<android.media.IAudioService$Stub$Proxy: boolean isSpeakerphoneOn()> -- <com.android.server.audio.AudioService: boolean isSpeakerphoneOn()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable(java.lang.String)> -- <com.android.server.BluetoothManagerService: boolean enable(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)> -- <com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean canProfileOwnerResetPasswordWhenLocked(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean canProfileOwnerResetPasswordWhenLocked(int)>
<android.app.INotificationManager$Stub$Proxy: int getZenMode()> -- <com.android.server.notification.NotificationManagerService$10: int getZenMode()>
<android.view.IWindowManager$Stub$Proxy: void updateRotation(boolean,boolean)> -- <com.android.server.wm.WindowManagerService: void updateRotation(boolean,boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getAvailableSubscriptionInfoList(java.lang.String,java.lang.String)>
<android.content.IContentService$Stub$Proxy: void cancelRequest(android.content.SyncRequest)> -- <com.android.server.content.ContentService: void cancelRequest(android.content.SyncRequest)>
<android.os.IUserManager$Stub$Proxy: long getUserCreationTime(int)> -- <com.android.server.pm.UserManagerService: long getUserCreationTime(int)>
<android.net.IConnectivityManager$Stub$Proxy: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)> -- <com.android.server.ConnectivityService: void startTcpKeepalive(android.net.Network,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>
<android.hardware.input.IInputManager$Stub$Proxy: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)> -- <com.android.server.input.InputManagerService: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>
<android.app.IActivityTaskManager$Stub$Proxy: void removeAllVisibleRecentTasks()> -- <com.android.server.wm.ActivityTaskManagerService: void removeAllVisibleRecentTasks()>
<android.os.IUserManager$Stub$Proxy: java.util.List getProfiles(int,boolean)> -- <com.android.server.pm.UserManagerService: java.util.List getProfiles(int,boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getSlotIndex(int)> -- <com.android.internal.telephony.SubscriptionController: int getSlotIndex(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: void setDefaultDataSubId(int)> -- <com.android.internal.telephony.SubscriptionController: void setDefaultDataSubId(int)>
<android.view.IWindowManager$Stub$Proxy: void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)> -- <com.android.server.wm.WindowManagerService: void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener,int)>
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> -- <com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)> -- <com.android.server.NetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: void addSubscriptionsIntoGroup(int[],android.os.ParcelUuid,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: void addSubscriptionsIntoGroup(int[],android.os.ParcelUuid,java.lang.String)>
<android.os.IVibratorService$Stub$Proxy: int[] areEffectsSupported(int[])> -- <com.android.server.VibratorService: int[] areEffectsSupported(int[])>
<android.app.IActivityTaskManager$Stub$Proxy: void releaseSomeActivities(android.app.IApplicationThread)> -- <com.android.server.wm.ActivityTaskManagerService: void releaseSomeActivities(android.app.IApplicationThread)>
<android.app.IActivityManager$Stub$Proxy: boolean isIntentSenderABroadcast(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: boolean isIntentSenderABroadcast(android.content.IIntentSender)>
<android.view.IWindowManager$Stub$Proxy: void dontOverrideDisplayInfo(int)> -- <com.android.server.wm.WindowManagerService: void dontOverrideDisplayInfo(int)>
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder,java.lang.String)> -- <com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)>
<android.content.rollback.IRollbackManager$Stub$Proxy: void blockRollbackManager(long)> -- <com.android.server.rollback.RollbackManagerServiceImpl: void blockRollbackManager(long)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void interrupt(int)> -- <com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>
<android.content.IContentService$Stub$Proxy: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)> -- <com.android.server.content.ContentService: void notifyChange(android.net.Uri[],android.database.IContentObserver,boolean,int,int,int,java.lang.String)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: java.lang.String getInstallerForPackage(java.lang.String)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: java.lang.String getInstallerForPackage(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void setRenderThread(int)> -- <com.android.server.am.ActivityManagerService: void setRenderThread(int)>
<android.view.IWindowManager$Stub$Proxy: boolean isLayerTracing()> -- <com.android.server.wm.WindowManagerService: boolean isLayerTracing()>
<android.app.IActivityTaskManager$Stub$Proxy: void setVrThread(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setVrThread(int)>
<android.os.IThermalService$Stub$Proxy: android.os.Temperature[] getCurrentTemperaturesWithType(int)> -- <com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperaturesWithType(int)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognitionForService(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int stopRecognitionForService(android.os.ParcelUuid)>
<android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>
<android.media.IAudioService$Stub$Proxy: java.util.List getDevicesForAttributes(android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: java.util.List getDevicesForAttributes(android.media.AudioAttributes)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: long getMinAssociationDumpDuration()> -- <com.android.server.am.ProcessStatsService: long getMinAssociationDumpDuration()>
<android.app.INotificationManager$Stub$Proxy: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void deleteNotificationChannelGroup(java.lang.String,java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeImeSurface()> -- <com.android.server.inputmethod.InputMethodManagerService: void removeImeSurface()>
<android.app.slice.ISliceManager$Stub$Proxy: void applyRestore(byte[],int)> -- <com.android.server.slice.SliceManagerService: void applyRestore(byte[],int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getWifiMacAddress(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getWifiMacAddress(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>
<android.app.backup.IBackupManager$Stub$Proxy: void agentDisconnectedForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: void agentDisconnectedForUser(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandSettingsPanel(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void expandSettingsPanel(java.lang.String)>
<android.media.IMediaRouterService$Stub$Proxy: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)> -- <com.android.server.media.MediaRouterService: android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)> -- <com.android.server.TelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerAuthenticator(int,int,int,android.hardware.biometrics.IBiometricAuthenticator)>
<android.os.INetworkManagementService$Stub$Proxy: void allowProtect(int)> -- <com.android.server.NetworkManagementService: void allowProtect(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void clearLaunchParamsForPackages(java.util.List)> -- <com.android.server.wm.ActivityTaskManagerService: void clearLaunchParamsForPackages(java.util.List)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void continueOperation(int,android.content.Intent,android.os.Bundle)> -- <com.android.internal.telephony.euicc.EuiccController: void continueOperation(int,android.content.Intent,android.os.Bundle)>
<android.app.IActivityTaskManager$Stub$Proxy: java.lang.String getPackageForToken(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: java.lang.String getPackageForToken(android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getPassword()> -- <com.android.server.StorageManagerService: java.lang.String getPassword()>
<android.content.IContentService$Stub$Proxy: void unregisterContentObserver(android.database.IContentObserver)> -- <com.android.server.content.ContentService: void unregisterContentObserver(android.database.IContentObserver)>
<android.content.pm.IShortcutService$Stub$Proxy: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)> -- <com.android.server.pm.ShortcutService: android.content.Intent createShortcutResultIntent(java.lang.String,android.content.pm.ShortcutInfo,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiState(int,java.lang.String)> -- <com.android.server.am.BatteryStatsService: void noteWifiState(int,java.lang.String)>
<android.service.vr.IVrManager$Stub$Proxy: boolean getPersistentVrModeEnabled()> -- <com.android.server.vr.VrManagerService$4: boolean getPersistentVrModeEnabled()>
<android.view.IWindowManager$Stub$Proxy: void freezeRotation(int)> -- <com.android.server.wm.WindowManagerService: void freezeRotation(int)>
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -- <com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: void startVpnProfile(java.lang.String)> -- <com.android.server.ConnectivityService: void startVpnProfile(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAffiliationIds(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setAffiliationIds(android.content.ComponentName,java.util.List)>
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: java.util.List getWhitelistedRestrictedPermissions(java.lang.String,int,int)>
<android.service.vr.IVrManager$Stub$Proxy: int getVr2dDisplayId()> -- <com.android.server.vr.VrManagerService$4: int getVr2dDisplayId()>
<android.net.IEthernetManager$Stub$Proxy: void addListener(android.net.IEthernetServiceListener)> -- <com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>
<android.app.INotificationManager$Stub$Proxy: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)> -- <com.android.server.notification.NotificationManagerService$10: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void finish(android.os.IBinder)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void finish(android.os.IBinder)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int,int,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int trackRecorder(android.os.IBinder)> -- <com.android.server.audio.AudioService: int trackRecorder(android.os.IBinder)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)> -- <com.android.server.usb.UsbService: void requestDevicePermission(android.hardware.usb.UsbDevice,java.lang.String,android.app.PendingIntent)>
<android.app.IActivityManager$Stub$Proxy: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent,android.os.Bundle)>
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> -- <com.android.server.MmsServiceBroker$BinderService: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -- <com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>
<android.media.IAudioService$Stub$Proxy: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: int getUserSerialNumber(int)> -- <com.android.server.pm.UserManagerService: int getUserSerialNumber(int)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getNaiForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getNaiForSubscriber(int,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getOverrideApns(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getOverrideApns(android.content.ComponentName)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.INetworkStatsSession openSession()> -- <com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSession()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getHomeActivities(java.util.List)> -- <com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivities(java.util.List)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfilePackages(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfilePackages(android.content.ComponentName,java.util.List)>
<android.location.ILocationManager$Stub$Proxy: boolean isLocationEnabledForUser(int)> -- <com.android.server.location.LocationManagerService: boolean isLocationEnabledForUser(int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void setImeWindowStatus(int,android.os.IBinder,int,int,boolean,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
<android.os.INetworkManagementService$Stub$Proxy: void registerObserver(android.net.INetworkManagementEventObserver)> -- <com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)> -- <com.android.server.textservices.TextServicesManagerService: void finishSpellCheckerService(int,com.android.internal.textservice.ISpellCheckerSessionListener)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingStarted(int[],com.android.internal.app.IAppOpsStartedCallback)>
<android.view.IWindowManager$Stub$Proxy: int getDefaultDisplayRotation()> -- <com.android.server.wm.WindowManagerService: int getDefaultDisplayRotation()>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: long getRecommendedTimeoutMillis()> -- <com.android.server.accessibility.AccessibilityManagerService: long getRecommendedTimeoutMillis()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isInstantApp(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String[] getIgnoreSettingsWhitelist()> -- <com.android.server.location.LocationManagerService: java.lang.String[] getIgnoreSettingsWhitelist()>
<android.app.blob.IBlobStoreManager$Stub$Proxy: java.util.List queryBlobsForUser(int)> -- <com.android.server.blob.BlobStoreManagerService$Stub: java.util.List queryBlobsForUser(int)>
<android.media.IAudioService$Stub$Proxy: void playSoundEffect(int)> -- <com.android.server.audio.AudioService: void playSoundEffect(int)>
<android.app.IActivityManager$Stub$Proxy: boolean refContentProvider(android.os.IBinder,int,int)> -- <com.android.server.am.ActivityManagerService: boolean refContentProvider(android.os.IBinder,int,int)>
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallUidRules(int,int[],int[])> -- <com.android.server.NetworkManagementService: void setFirewallUidRules(int,int[],int[])>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultSubId()> -- <com.android.internal.telephony.SubscriptionController: int getDefaultSubId()>
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> -- <com.android.server.location.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void attachApplication(android.app.IApplicationThread,long)> -- <com.android.server.am.ActivityManagerService: void attachApplication(android.app.IApplicationThread,long)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getNamesForUids(int[])> -- <com.android.server.pm.PackageManagerService: java.lang.String[] getNamesForUids(int[])>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivityForSubscriber(int,int)> -- <com.android.server.TelephonyRegistry: void notifyDataActivityForSubscriber(int,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void setUserData(android.service.autofill.UserData)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setUserData(android.service.autofill.UserData)>
<android.content.pm.IPackageManager$Stub$Proxy: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)> -- <com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void unregisterAppUsageObserver(int,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void unregisterAppUsageObserver(int,java.lang.String)>
<android.net.INetworkPolicyManager$Stub$Proxy: void setDeviceIdleMode(boolean)> -- <com.android.server.net.NetworkPolicyManagerService: void setDeviceIdleMode(boolean)>
<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void restartPrintJob(android.print.PrintJobId,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getServiceSettingsActivity(com.android.internal.os.IResultReceiver)>
<android.hardware.IConsumerIrService$Stub$Proxy: void transmit(java.lang.String,int,int[])> -- <com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setPortRoles(java.lang.String,int,int)> -- <com.android.server.usb.UsbService: void setPortRoles(java.lang.String,int,int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransport()> -- <com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransport()>
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)> -- <com.android.server.location.ContextHubService: android.hardware.location.IContextHubClient createPendingIntentClient(int,android.app.PendingIntent,long)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String,int,java.lang.String,java.lang.String,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getOrganizationNameForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationNameForUser(int)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: void stopActiveProjection()> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: void stopActiveProjection()>
<android.app.blob.IBlobStoreManager$Stub$Proxy: long createSession(android.app.blob.BlobHandle,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: long createSession(android.app.blob.BlobHandle,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext,android.view.textclassifier.TextClassificationSessionId)>
<android.app.IActivityManager$Stub$Proxy: void cancelRecentsAnimation(boolean)> -- <com.android.server.am.ActivityManagerService: void cancelRecentsAnimation(boolean)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void resetTimeout(byte[])> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void resetTimeout(byte[])>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,android.os.IBinder,boolean,int)>
<android.accounts.IAccountManager$Stub$Proxy: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>
<android.os.IThermalService$Stub$Proxy: boolean registerThermalStatusListener(android.os.IThermalStatusListener)> -- <com.android.server.power.ThermalManagerService$1: boolean registerThermalStatusListener(android.os.IThermalStatusListener)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.ProxyInfo getGlobalProxy()> -- <com.android.server.ConnectivityService: android.net.ProxyInfo getGlobalProxy()>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabledByUid(long,int)> -- <com.android.server.compat.PlatformCompat: boolean isChangeEnabledByUid(long,int)>
<android.app.IActivityManager$Stub$Proxy: void removeContentProvider(android.os.IBinder,boolean)> -- <com.android.server.am.ActivityManagerService: void removeContentProvider(android.os.IBinder,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getForceEphemeralUsers(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getForceEphemeralUsers(android.content.ComponentName)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void performDirectAction(android.os.IBinder,java.lang.String,android.os.Bundle,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
<android.os.IUserManager$Stub$Proxy: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)> -- <com.android.server.pm.UserManagerService: boolean requestQuietModeEnabled(java.lang.String,boolean,int,android.content.IntentSender,int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: void resetCarrierKeysForImsiEncryption(int,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: void resetCarrierKeysForImsiEncryption(int,java.lang.String)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isSMSPromptEnabled()> -- <com.android.internal.telephony.SmsController: boolean isSMSPromptEnabled()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)> -- <com.android.server.TelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>
<android.app.trust.ITrustManager$Stub$Proxy: void registerTrustListener(android.app.trust.ITrustListener)> -- <com.android.server.trust.TrustManagerService$1: void registerTrustListener(android.app.trust.ITrustListener)>
<android.app.IActivityManager$Stub$Proxy: boolean isVrModePackageEnabled(android.content.ComponentName)> -- <com.android.server.am.ActivityManagerService: boolean isVrModePackageEnabled(android.content.ComponentName)>
<android.view.IWindowManager$Stub$Proxy: float[] getAnimationScales()> -- <com.android.server.wm.WindowManagerService: float[] getAnimationScales()>
<android.app.job.IJobScheduler$Stub$Proxy: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void noteAlarmFinish(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.ParceledListSlice getAllPermissionGroups(int)> -- <com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice getAllPermissionGroups(int)>
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -- <com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyPairCertificate(android.content.ComponentName,java.lang.String,java.lang.String,byte[],byte[],boolean)>
<android.app.IActivityManager$Stub$Proxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void associate(android.companion.AssociationRequest,android.companion.IFindDeviceCallback,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedAccessibilityServicesForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServicesForUser(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppResolverComponent()> -- <com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppResolverComponent()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportKeyguardDismissed(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardDismissed(int)>
<android.location.ILocationManager$Stub$Proxy: void flushGnssBatch(java.lang.String)> -- <com.android.server.location.LocationManagerService: void flushGnssBatch(java.lang.String)>
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomaticallyAsUser(int)> -- <com.android.server.content.ContentService: boolean getMasterSyncAutomaticallyAsUser(int)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: void abandonSession(long,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: void abandonSession(long,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean isUserUnlocked(int)> -- <com.android.server.pm.UserManagerService: boolean isUserUnlocked(int)>
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperInfo getWallpaperInfo(int)> -- <com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo(int)>
<android.service.dreams.IDreamManager$Stub$Proxy: void startDozing(android.os.IBinder,int,int)> -- <com.android.server.dreams.DreamManagerService$BinderService: void startDozing(android.os.IBinder,int,int)>
<android.content.IContentService$Stub$Proxy: void syncAsUser(android.content.SyncRequest,int,java.lang.String)> -- <com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int,java.lang.String)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -- <com.android.internal.telephony.SmsController: void sendStoredText(int,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.media.IAudioService$Stub$Proxy: boolean shouldVibrate(int)> -- <com.android.server.audio.AudioService: boolean shouldVibrate(int)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: boolean isMultiProcessEnabled()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: boolean isMultiProcessEnabled()>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -- <com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>
<android.app.IActivityManager$Stub$Proxy: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)> -- <com.android.server.am.ActivityManagerService: boolean startUserInForegroundWithListener(int,android.os.IProgressListener)>
<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: void reportChangeByUid(long,int)> -- <com.android.server.compat.PlatformCompatNative: void reportChangeByUid(long,int)>
<android.app.INotificationManager$Stub$Proxy: void requestHintsFromListener(android.service.notification.INotificationListener,int)> -- <com.android.server.notification.NotificationManagerService$10: void requestHintsFromListener(android.service.notification.INotificationListener,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)> -- <com.android.server.backup.BackupManagerService: void initializeTransportsForUser(int,java.lang.String[],android.app.backup.IBackupObserver)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void cancelEnrollment(android.os.IBinder)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void cancelEnrollment(android.os.IBinder)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: int getAppStandbyBucket(java.lang.String,java.lang.String,int)> -- <com.android.server.usage.UsageStatsService$BinderService: int getAppStandbyBucket(java.lang.String,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void finishToken(java.lang.String,android.os.IBinder)> -- <com.android.server.notification.NotificationManagerService$10: void finishToken(java.lang.String,android.os.IBinder)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)> -- <com.android.server.display.DisplayManagerService$BinderService: void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int,int,int)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)> -- <com.android.server.location.LocationManagerService: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>
<android.location.ILocationManager$Stub$Proxy: int getGnssYearOfHardware()> -- <com.android.server.location.LocationManagerService: int getGnssYearOfHardware()>
<android.app.IUiModeManager$Stub$Proxy: boolean isNightModeLocked()> -- <com.android.server.UiModeManagerService$11: boolean isNightModeLocked()>
<android.view.IWindowManager$Stub$Proxy: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)> -- <com.android.server.wm.WindowManagerService: boolean requestAssistScreenshot(android.app.IAssistDataReceiver)>
<android.view.IWindowManager$Stub$Proxy: void stopWindowTrace()> -- <com.android.server.wm.WindowManagerService: void stopWindowTrace()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isTopActivityImmersive()> -- <com.android.server.wm.ActivityTaskManagerService: boolean isTopActivityImmersive()>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -- <com.android.internal.telephony.SmsController: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.os.IPowerManager$Stub$Proxy: void userActivity(long,int,int)> -- <com.android.server.power.PowerManagerService$BinderService: void userActivity(long,int,int)>
<android.app.IActivityManager$Stub$Proxy: void notifyLockedProfile(int)> -- <com.android.server.am.ActivityManagerService: void notifyLockedProfile(int)>
<android.hardware.input.IInputManager$Stub$Proxy: android.view.InputMonitor monitorGestureInput(java.lang.String,int)> -- <com.android.server.input.InputManagerService: android.view.InputMonitor monitorGestureInput(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)> -- <com.android.server.am.ActivityManagerService: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
<android.app.IActivityManager$Stub$Proxy: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void noteWakeupAlarm(android.content.IIntentSender,android.os.WorkSource,int,java.lang.String,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquired(int)> -- <com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String,int)>
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)> -- <com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setInTouchMode(boolean)> -- <com.android.server.wm.WindowManagerService: void setInTouchMode(boolean)>
<android.media.midi.IMidiManager$Stub$Proxy: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)> -- <com.android.server.midi.MidiService: void setDeviceStatus(android.media.midi.IMidiDeviceServer,android.media.midi.MidiDeviceStatus)>
<android.net.IIpSecService$Stub$Proxy: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)> -- <com.android.server.IpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>
<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void startPrinterStateTracking(android.print.PrinterId,int)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> -- <com.android.server.BluetoothManagerService: java.lang.String getName()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)> -- <com.android.server.usb.UsbService: void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory,int,android.os.UserHandle,boolean)>
<android.permission.IPermissionManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean isAutoRevokeWhitelisted(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void removeStacksWithActivityTypes(int[])> -- <com.android.server.wm.ActivityTaskManagerService: void removeStacksWithActivityTypes(int[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>
<android.view.IWindowManager$Stub$Proxy: void thawRotation()> -- <com.android.server.wm.WindowManagerService: void thawRotation()>
<android.os.storage.IStorageManager$Stub$Proxy: void mount(java.lang.String)> -- <com.android.server.StorageManagerService: void mount(java.lang.String)>
<android.content.pm.IShortcutService$Stub$Proxy: boolean hasShareTargets(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.ShortcutService: boolean hasShareTargets(java.lang.String,java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void noteAppWidgetTapped(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void noteAppWidgetTapped(java.lang.String,int)>
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> -- <com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void clickTile(android.content.ComponentName)> -- <com.android.server.statusbar.StatusBarManagerService: void clickTile(android.content.ComponentName)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationHistory getNotificationHistory(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>
<android.app.trust.ITrustManager$Stub$Proxy: void setDeviceLockedForUser(int,boolean)> -- <com.android.server.trust.TrustManagerService$1: void setDeviceLockedForUser(int,boolean)>
<android.hardware.input.IInputManager$Stub$Proxy: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)> -- <com.android.server.input.InputManagerService: android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)>
<android.net.IConnectivityManager$Stub$Proxy: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)> -- <com.android.server.ConnectivityService: void startNattKeepaliveWithFd(android.net.Network,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isManagedProfile(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(android.content.ComponentName)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void unregisterAppUsageLimitObserver(int,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void unregisterAppUsageLimitObserver(int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getUserProvisioningState()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState()>
<android.hardware.display.IDisplayManager$Stub$Proxy: void stopWifiDisplayScan()> -- <com.android.server.display.DisplayManagerService$BinderService: void stopWifiDisplayScan()>
<android.content.IContentService$Stub$Proxy: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)> -- <com.android.server.content.ContentService: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle,java.lang.String)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void shareData(android.view.contentcapture.DataShareRequest,android.view.contentcapture.IDataShareWriteAdapter)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getAutoTimeZoneEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeZoneEnabled(android.content.ComponentName)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStartedFromSource(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIds(android.content.ComponentName)> -- <com.android.server.appwidget.AppWidgetServiceImpl: int[] getAppWidgetIds(android.content.ComponentName)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: int getCurrentMemoryState()> -- <com.android.server.am.ProcessStatsService: int getCurrentMemoryState()>
<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: void reportChangeByPackageName(long,java.lang.String,int)> -- <com.android.server.compat.PlatformCompatNative: void reportChangeByPackageName(long,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void registerMoveCallback(android.content.pm.IPackageMoveObserver)> -- <com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>
<android.app.IActivityManager$Stub$Proxy: void unregisterIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)> -- <com.android.server.am.ActivityManagerService: void unregisterIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>
<android.os.INetworkManagementService$Stub$Proxy: void removeVpnUidRanges(int,android.net.UidRange[])> -- <com.android.server.NetworkManagementService: void removeVpnUidRanges(int,android.net.UidRange[])>
<android.content.IContentService$Stub$Proxy: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)> -- <com.android.server.content.ContentService: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getDefaultSmdpAddress(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetDefaultSmdpAddressCallback)>
<android.app.IActivityManager$Stub$Proxy: void waitForNetworkStateUpdate(long)> -- <com.android.server.am.ActivityManagerService: void waitForNetworkStateUpdate(long)>
<android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void transferToRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<android.os.IDeviceIdleController$Stub$Proxy: int setPreIdleTimeoutMode(int)> -- <com.android.server.DeviceIdleController$BinderService: int setPreIdleTimeoutMode(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,int[])>
<android.accounts.IAccountManager$Stub$Proxy: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)> -- <com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void onReadyForAuthentication(int,boolean,int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void onReadyForAuthentication(int,boolean,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setOpportunistic(boolean,int,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: int setOpportunistic(boolean,int,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.telephony.CellIdentity)> -- <com.android.server.TelephonyRegistry: void notifyCellLocation(android.telephony.CellIdentity)>
<android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)> -- <com.android.server.media.MediaRouterService: void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2,android.media.RouteDiscoveryPreference)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getAllSessions(java.lang.String)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getAllSessions(java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)> -- <com.android.server.TelephonyRegistry: void notifyImsDisconnectCause(int,android.telephony.ims.ImsReasonInfo)>
<android.app.IActivityManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -- <com.android.server.am.ActivityManagerService: void closeSystemDialogs(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -- <com.android.server.location.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>
<android.media.IAudioService$Stub$Proxy: void setRingerModeInternal(int,java.lang.String)> -- <com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)>
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> -- <com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)> -- <com.android.server.pm.UserManagerService: void addUserRestrictionsListener(android.os.IUserRestrictionsListener)>
<android.app.IActivityManager$Stub$Proxy: int getPackageProcessState(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: int getPackageProcessState(java.lang.String,java.lang.String)>
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -- <com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: java.util.List getSupportedCountries(boolean)> -- <com.android.internal.telephony.euicc.EuiccController: java.util.List getSupportedCountries(boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)> -- <com.android.internal.telephony.SmsController: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String,int,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void stopListening(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void stopListening(java.lang.String,int)>
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.VolumeRecord[] getVolumeRecords(int)> -- <com.android.server.StorageManagerService: android.os.storage.VolumeRecord[] getVolumeRecords(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void resetMemory(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IResetMemoryCallback)>
<android.permission.IPermissionManager$Stub$Proxy: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)> -- <com.android.server.pm.permission.PermissionManagerService: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void setAirplaneMode(boolean)> -- <com.android.server.ConnectivityService: void setAirplaneMode(boolean)>
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)> -- <com.android.server.midi.MidiService: android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean shouldUpRecreateTask(android.os.IBinder,java.lang.String)> -- <com.android.server.wm.ActivityTaskManagerService: boolean shouldUpRecreateTask(android.os.IBinder,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageSuspendedForUser(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void onPendingSaveUi(int,android.os.IBinder)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void onPendingSaveUi(int,android.os.IBinder)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppInstallerComponent()> -- <com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppInstallerComponent()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAffiliatedUser()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAffiliatedUser()>
<android.net.INetworkPolicyManager$Stub$Proxy: int getRestrictBackgroundByCaller()> -- <com.android.server.net.NetworkPolicyManagerService: int getRestrictBackgroundByCaller()>
<android.os.IPermissionController$Stub$Proxy: int getPackageUid(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService$PermissionController: int getPackageUid(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isActivePasswordSufficient(int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficient(int,boolean)>
<android.app.IActivityManager$Stub$Proxy: void suppressResizeConfigChanges(boolean)> -- <com.android.server.am.ActivityManagerService: void suppressResizeConfigChanges(boolean)>
<android.view.IWindowManager$Stub$Proxy: void setShouldShowIme(int,boolean)> -- <com.android.server.wm.WindowManagerService: void setShouldShowIme(int,boolean)>
<android.media.IAudioService$Stub$Proxy: boolean isValidRingerMode(int)> -- <com.android.server.audio.AudioService: boolean isValidRingerMode(int)>
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)> -- <com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int allocateAppWidgetId(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: int allocateAppWidgetId(java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: int getUserBadgeColorResId(int)> -- <com.android.server.pm.UserManagerService: int getUserBadgeColorResId(int)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(java.lang.String,boolean)> -- <com.android.server.BluetoothManagerService: boolean disable(java.lang.String,boolean)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setUiHints(android.os.Bundle)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setUiHints(android.os.Bundle)>
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)> -- <com.android.server.wm.ActivityTaskManagerService: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getField(java.lang.String)> -- <com.android.server.StorageManagerService: java.lang.String getField(java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void setActiveUser(int)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void setActiveUser(int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: int getInputMethodWindowVisibleHeight()> -- <com.android.server.inputmethod.InputMethodManagerService: int getInputMethodWindowVisibleHeight()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAutoTimeRequired(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeRequired(android.content.ComponentName,boolean)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void enumerate(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void enumerate(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)> -- <com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)>
<android.os.IUserManager$Stub$Proxy: boolean removeUserEvenWhenDisallowed(int)> -- <com.android.server.pm.UserManagerService: boolean removeUserEvenWhenDisallowed(int)>
<android.os.INetworkManagementService$Stub$Proxy: android.net.NetworkStats getNetworkStatsTethering(int)> -- <com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>
<android.media.session.ISessionManager$Stub$Proxy: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> -- <com.android.server.NetworkManagementService: void startTethering(java.lang.String[])>
<android.app.IActivityTaskManager$Stub$Proxy: boolean convertFromTranslucent(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean convertFromTranslucent(android.os.IBinder)>
<android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void selectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)> -- <com.android.server.am.BatteryStatsService: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>
<android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getAppPredictionServicePackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getAppPredictionServicePackageName()>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: boolean isHardwareDetected(java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean isHardwareDetected(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: int checkPermission(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,java.lang.String,boolean,boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)> -- <com.android.internal.telephony.SmsController: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>
<android.app.INotificationManager$Stub$Proxy: void applyRestore(byte[],int)> -- <com.android.server.notification.NotificationManagerService$10: void applyRestore(byte[],int)>
<android.content.pm.IPackageManager$Stub$Proxy: void logAppProcessStartIfNeeded(java.lang.String,int,java.lang.String,java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: void logAppProcessStartIfNeeded(java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void removeStacksInWindowingModes(int[])> -- <com.android.server.wm.ActivityTaskManagerService: void removeStacksInWindowingModes(int[])>
<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)> -- <com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShareTargets(java.lang.String,android.content.IntentFilter,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getFillEventHistory(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getFillEventHistory(com.android.internal.os.IResultReceiver)>
<android.service.dreams.IDreamManager$Stub$Proxy: void testDream(int,android.content.ComponentName)> -- <com.android.server.dreams.DreamManagerService$BinderService: void testDream(int,android.content.ComponentName)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int unloadSoundModel(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int unloadSoundModel(android.os.ParcelUuid)>
<android.hardware.location.IContextHubService$Stub$Proxy: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -- <com.android.server.location.ContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getTestProviderCurrentRequests(java.lang.String)> -- <com.android.server.location.LocationManagerService: java.util.List getTestProviderCurrentRequests(java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationSmartReplySent(java.lang.String,int,java.lang.CharSequence,int,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartReplySent(java.lang.String,int,java.lang.CharSequence,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)> -- <com.android.server.pm.PackageManagerService: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>
<android.app.IActivityManager$Stub$Proxy: android.app.ActivityManager$StackInfo getFocusedStackInfo()> -- <com.android.server.am.ActivityManagerService: android.app.ActivityManager$StackInfo getFocusedStackInfo()>
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> -- <com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
<android.media.IAudioService$Stub$Proxy: void setRingtonePlayer(android.media.IRingtonePlayer)> -- <com.android.server.audio.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean resizeTask(int,android.graphics.Rect,int)> -- <com.android.server.wm.ActivityTaskManagerService: boolean resizeTask(int,android.graphics.Rect,int)>
<android.os.storage.IStorageManager$Stub$Proxy: void fixateNewestUserKeyAuth(int)> -- <com.android.server.StorageManagerService: void fixateNewestUserKeyAuth(int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void switchToProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.ISwitchToProfileCallback)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean getPackageAskScreenCompat(java.lang.String)> -- <com.android.server.wm.ActivityTaskManagerService: boolean getPackageAskScreenCompat(java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)> -- <com.android.server.accounts.AccountManagerService: boolean hasAccountAccess(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<com.android.internal.telephony.ISms$Stub$Proxy: int getPreferredSmsSubscription()> -- <com.android.internal.telephony.SmsController: int getPreferredSmsSubscription()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDisallowedSystemApps(android.content.ComponentName,int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -- <com.android.server.wm.ActivityTaskManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<com.android.internal.telephony.ISub$Stub$Proxy: int getDefaultDataSubId()> -- <com.android.internal.telephony.SubscriptionController: int getDefaultDataSubId()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void reportChooserSelection(java.lang.String,int,java.lang.String,java.lang.String[],java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setFocusedTask(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setFocusedTask(int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)> -- <com.android.server.TelephonyRegistry: void notifyDisplayInfoChanged(int,int,android.telephony.TelephonyDisplayInfo)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordComplexity(boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordComplexity(boolean)>
<android.media.IAudioService$Stub$Proxy: void setRingerModeExternal(int,java.lang.String)> -- <com.android.server.audio.AudioService: void setRingerModeExternal(int,java.lang.String)>
<android.os.IPermissionController$Stub$Proxy: java.lang.String[] getPackagesForUid(int)> -- <com.android.server.am.ActivityManagerService$PermissionController: java.lang.String[] getPackagesForUid(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingNoted(int[],com.android.internal.app.IAppOpsNotedCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getWellbeingPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getWellbeingPackageName()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void collapsePanels()> -- <com.android.server.statusbar.StatusBarManagerService: void collapsePanels()>
<android.app.IActivityTaskManager$Stub$Proxy: void notifyLaunchTaskBehindComplete(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void notifyLaunchTaskBehindComplete(android.os.IBinder)>
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> -- <com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getDeviceOwnerOrganizationName()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerOrganizationName()>
<android.app.INotificationManager$Stub$Proxy: void allowAssistantAdjustment(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void allowAssistantAdjustment(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void setHideSilentStatusIcons(boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setHideSilentStatusIcons(boolean)>
<android.media.IAudioService$Stub$Proxy: void startBluetoothScoVirtualCall(android.os.IBinder)> -- <com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disable2(int,android.os.IBinder,java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void disable2(int,android.os.IBinder,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void registerPinnedStackListener(int,android.view.IPinnedStackListener)> -- <com.android.server.wm.WindowManagerService: void registerPinnedStackListener(int,android.view.IPinnedStackListener)>
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getAutoRevokeExemptionRequestedPackages(int)> -- <com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionRequestedPackages(int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getConversations(boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getConversations(boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void clearDefaultNetId()> -- <com.android.server.NetworkManagementService: void clearDefaultNetId()>
<android.app.IActivityTaskManager$Stub$Proxy: android.content.ComponentName getCallingActivity(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: void unlockUserKey(int,int,byte[],byte[])> -- <com.android.server.StorageManagerService: void unlockUserKey(int,int,byte[],byte[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCrossProfileCallerIdDisabledForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)>
<android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEvent(java.lang.String,java.lang.String,boolean,android.view.KeyEvent,int,boolean)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchVolumeKeyEvent(java.lang.String,java.lang.String,boolean,android.view.KeyEvent,int,boolean)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)> -- <com.android.server.BluetoothManagerService: boolean bindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
<android.print.IPrintManager$Stub$Proxy: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener,int)>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)> -- <com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
<android.location.ILocationManager$Stub$Proxy: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String)>
<android.net.INetworkStatsService$Stub$Proxy: long getTotalStats(int)> -- <com.android.server.net.NetworkStatsService: long getTotalStats(int)>
<android.accounts.IAccountManager$Stub$Proxy: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)> -- <com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>
<android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>
<android.media.IAudioService$Stub$Proxy: int getFocusRampTimeMs(int,android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
<android.content.pm.IPackageManager$Stub$Proxy: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)> -- <com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppInactive(java.lang.String,boolean,int)> -- <com.android.server.usage.UsageStatsService$BinderService: void setAppInactive(java.lang.String,boolean,int)>
<android.app.job.IJobScheduler$Stub$Proxy: java.util.List getStartedJobs()> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: java.util.List getStartedJobs()>
<android.os.INetworkManagementService$Stub$Proxy: void setGlobalAlert(long)> -- <com.android.server.NetworkManagementService: void setGlobalAlert(long)>
<android.app.INotificationManager$Stub$Proxy: boolean areChannelsBypassingDnd()> -- <com.android.server.notification.NotificationManagerService$10: boolean areChannelsBypassingDnd()>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
<android.permission.IPermissionManager$Stub$Proxy: boolean isPermissionEnforced(java.lang.String)> -- <com.android.server.pm.permission.PermissionManagerService: boolean isPermissionEnforced(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setDisplayToSingleTaskInstance(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setDisplayToSingleTaskInstance(int)>
<android.os.IPermissionController$Stub$Proxy: boolean isRuntimePermission(java.lang.String)> -- <com.android.server.am.ActivityManagerService$PermissionController: boolean isRuntimePermission(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getCurrentFailedPasswordAttempts(int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int,boolean)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>
<android.permission.IPermissionManager$Stub$Proxy: void grantRuntimePermission(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageStateProtected(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean isPackageStateProtected(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setProfileEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileEnabled(android.content.ComponentName)>
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)> -- <com.android.server.input.InputManagerService: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,int,int,java.lang.String)> -- <com.android.server.TelephonyRegistry: void notifyCallState(int,int,int,java.lang.String)>
<android.app.role.IRoleManager$Stub$Proxy: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)> -- <com.android.server.role.RoleManagerService$Stub: void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)> -- <com.android.server.ConnectivityService: boolean provisionVpnProfile(com.android.internal.net.VpnProfile,java.lang.String)>
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> -- <com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor getControlFd(long)> -- <com.android.server.usb.UsbService: android.os.ParcelFileDescriptor getControlFd(long)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstallerPackageName(java.lang.String)> -- <com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperationRaw(int,int,java.lang.String)> -- <com.android.server.appop.AppOpsService: int checkOperationRaw(int,int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getInstantApps(int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstantApps(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProviderInfo(android.content.ComponentName,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void fstrim(int,android.os.IVoldTaskListener)> -- <com.android.server.StorageManagerService: void fstrim(int,android.os.IVoldTaskListener)>
<android.location.ILocationManager$Stub$Proxy: void injectLocation(android.location.Location)> -- <com.android.server.location.LocationManagerService: void injectLocation(android.location.Location)>
<android.media.IAudioService$Stub$Proxy: int getMode()> -- <com.android.server.audio.AudioService: int getMode()>
<android.app.IUiModeManager$Stub$Proxy: void setNightMode(int)> -- <com.android.server.UiModeManagerService$11: void setNightMode(int)>
<android.view.IWindowManager$Stub$Proxy: void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)> -- <com.android.server.wm.WindowManagerService: void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void suppressAmbientDisplay(boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void suppressAmbientDisplay(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int startUserInBackground(android.content.ComponentName,android.os.UserHandle)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void dismissInattentiveSleepWarning(boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void dismissInattentiveSleepWarning(boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: int addSubInfoRecord(java.lang.String,int)> -- <com.android.internal.telephony.SubscriptionController: int addSubInfoRecord(java.lang.String,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteVibratorOff(int)> -- <com.android.server.am.BatteryStatsService: void noteVibratorOff(int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)> -- <com.android.server.pm.PackageManagerService: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyGrantForApp(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getEnabledAccessibilityServiceList(int,int)> -- <com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void setAncestralSerialNumber(long)> -- <com.android.server.backup.BackupManagerService: void setAncestralSerialNumber(long)>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getAllSubInfoList(java.lang.String,java.lang.String)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isHearingAidProfileSupported()> -- <com.android.server.BluetoothManagerService: boolean isHearingAidProfileSupported()>
<android.media.IAudioService$Stub$Proxy: boolean hasHapticChannels(android.net.Uri)> -- <com.android.server.audio.AudioService: boolean hasHapticChannels(android.net.Uri)>
<android.app.IActivityManager$Stub$Proxy: void killAllBackgroundProcesses()> -- <com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void retrieveNotification(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationCallback)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationListenerAccessGrantedForUser(android.content.ComponentName,int,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getImeiForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getImeiForSubscriber(int,java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void setVolumeUserFlags(java.lang.String,int,int)> -- <com.android.server.StorageManagerService: void setVolumeUserFlags(java.lang.String,int,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void removeIcon(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void removeIcon(java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void startTracing()> -- <com.android.server.statusbar.StatusBarManagerService: void startTracing()>
<android.app.IActivityManager$Stub$Proxy: int getUidProcessState(int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: int getUidProcessState(int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: boolean isNetworkRestricted(int)> -- <com.android.server.NetworkManagementService: boolean isNetworkRestricted(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForPackage(java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void setNickname(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.ISetNicknameCallback)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)> -- <com.android.server.accessibility.AccessibilityManagerService: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationPolicy(java.lang.String,android.app.NotificationManager$Policy)>
<android.location.ILocationManager$Stub$Proxy: long getGnssCapabilities()> -- <com.android.server.location.LocationManagerService: long getGnssCapabilities()>
<android.os.IPowerManager$Stub$Proxy: void shutdown(boolean,java.lang.String,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void shutdown(boolean,java.lang.String,boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: void setDefaultVoiceSubId(int)> -- <com.android.internal.telephony.SubscriptionController: void setDefaultVoiceSubId(int)>
<android.app.IActivityManager$Stub$Proxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)> -- <com.android.server.am.ActivityManagerService: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,int,int)>
<android.app.IActivityManager$Stub$Proxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)> -- <com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,int)>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void suggestContentSelections(int,android.app.contentsuggestions.SelectionsRequest,android.app.contentsuggestions.ISelectionsCallback)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)> -- <com.android.server.appop.AppOpsService: void getHistoricalOpsFromDiskRaw(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<android.app.INotificationManager$Stub$Proxy: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)> -- <com.android.server.notification.NotificationManagerService$10: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
<android.media.IAudioService$Stub$Proxy: void setMicrophoneMuteFromSwitch(boolean)> -- <com.android.server.audio.AudioService: void setMicrophoneMuteFromSwitch(boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)> -- <com.android.server.wm.ActivityTaskManagerService: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void cancelSession(java.lang.String,java.lang.String,byte[],int,com.android.internal.telephony.euicc.ICancelSessionCallback)>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPreviousName(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: java.lang.String getPreviousName(android.accounts.Account)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteConnectivityChanged(int,java.lang.String)> -- <com.android.server.am.BatteryStatsService: void noteConnectivityChanged(int,java.lang.String)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)> -- <com.android.server.BluetoothManagerService: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartAudio(int)> -- <com.android.server.am.BatteryStatsService: void noteStartAudio(int)>
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotWallpaper()> -- <com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotWallpaper()>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.app.role.IRoleManager$Stub$Proxy: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)> -- <com.android.server.role.RoleManagerService$Stub: void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener,int)>
<android.media.IAudioService$Stub$Proxy: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)> -- <com.android.server.audio.AudioService: int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void unhandledBack()> -- <com.android.server.wm.ActivityTaskManagerService: void unhandledBack()>
<android.hardware.display.IDisplayManager$Stub$Proxy: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)> -- <com.android.server.display.DisplayManagerService$BinderService: void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback,boolean)>
<android.net.INetworkStatsService$Stub$Proxy: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])> -- <com.android.server.net.NetworkStatsService: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>
<android.app.IActivityManager$Stub$Proxy: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -- <com.android.server.am.ActivityManagerService: int startActivityAsUserWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setFocusedStack(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setFocusedStack(int)>
<android.app.IAlarmManager$Stub$Proxy: long currentNetworkTimeMillis()> -- <com.android.server.AlarmManagerService$4: long currentNetworkTimeMillis()>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)> -- <com.android.server.compat.PlatformCompat: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChangedForSubscriber(int,boolean)> -- <com.android.server.TelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)>
<android.app.backup.IBackupManager$Stub$Proxy: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)> -- <com.android.server.backup.BackupManagerService: int requestBackupForUser(int,java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
<android.app.IWallpaperManager$Stub$Proxy: boolean isWallpaperBackupEligible(int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperBackupEligible(int,int)>
<android.permission.IPermissionManager$Stub$Proxy: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)> -- <com.android.server.pm.permission.PermissionManagerService: void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
<android.media.IMediaRouterService$Stub$Proxy: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)> -- <com.android.server.media.MediaRouterService: void registerClientGroupId(android.media.IMediaRouterClient,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: boolean isCharging()> -- <com.android.server.am.BatteryStatsService: boolean isCharging()>
<android.app.prediction.IPredictionManager$Stub$Proxy: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)>
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder,int)> -- <com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWakeUp(java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteWakeUp(java.lang.String,int)>
<android.view.IWindowManager$Stub$Proxy: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)> -- <com.android.server.wm.WindowManagerService: void setDisplayWindowInsetsController(int,android.view.IDisplayWindowInsetsController)>
<android.content.pm.IPackageManager$Stub$Proxy: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)> -- <com.android.server.pm.PackageManagerService: void registerDexModule(java.lang.String,java.lang.String,boolean,android.content.pm.IDexModuleRegisterCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void removeActiveAdmin(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void resumeWifiDisplay()> -- <com.android.server.display.DisplayManagerService$BinderService: void resumeWifiDisplay()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onBiometricHelp(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void onBiometricHelp(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPersonalAppsSuspendedReasons(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPersonalAppsSuspendedReasons(android.content.ComponentName)>
<com.android.internal.telephony.ISms$Stub$Proxy: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SmsController: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int stopUser(int,boolean,android.app.IStopUserCallback)> -- <com.android.server.am.ActivityManagerService: int stopUser(int,boolean,android.app.IStopUserCallback)>
<android.os.IVibratorService$Stub$Proxy: boolean isVibrating()> -- <com.android.server.VibratorService: boolean isVibrating()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>
<android.hardware.input.IInputManager$Stub$Proxy: int[] getInputDeviceIds()> -- <com.android.server.input.InputManagerService: int[] getInputDeviceIds()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)> -- <com.android.server.appop.AppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)> -- <com.android.server.wm.ActivityTaskManagerService: void activityStopped(android.os.IBinder,android.os.Bundle,android.os.PersistableBundle,java.lang.CharSequence)>
<android.content.IClipboard$Stub$Proxy: android.content.ClipData getPrimaryClip(java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<android.location.ILocationManager$Stub$Proxy: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean addGnssMeasurementsListener(android.location.GnssRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteScreenBrightness(int)> -- <com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)>
<android.content.pm.ILauncherApps$Stub$Proxy: boolean hasShortcutHostPermission(java.lang.String)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean hasShortcutHostPermission(java.lang.String)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)> -- <com.android.internal.telephony.SmsController: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -- <com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySimActivationStateChangedForPhoneId(int,int,int,int)> -- <com.android.server.TelephonyRegistry: void notifySimActivationStateChangedForPhoneId(int,int,int,int)>
<android.media.IMediaRouterService$Stub$Proxy: void requestUpdateVolume(android.media.IMediaRouterClient,java.lang.String,int)> -- <com.android.server.media.MediaRouterService: void requestUpdateVolume(android.media.IMediaRouterClient,java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getPrimaryUser()> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo getPrimaryUser()>
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> -- <com.android.server.power.PowerManagerService$BinderService: void releaseWakeLock(android.os.IBinder,int)>
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)> -- <com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void closeSystemDialogs(java.lang.String)> -- <com.android.server.wm.WindowManagerService: void closeSystemDialogs(java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void clearInterfaceAddresses(java.lang.String)> -- <com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)> -- <com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>
<android.app.IActivityManager$Stub$Proxy: boolean isBackgroundRestricted(java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean isBackgroundRestricted(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean updateConfiguration(android.content.res.Configuration)> -- <com.android.server.am.ActivityManagerService: boolean updateConfiguration(android.content.res.Configuration)>
<android.hardware.input.IInputManager$Stub$Proxy: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()> -- <com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.ComponentName[] listAllTransportComponentsForUser(int)> -- <com.android.server.backup.BackupManagerService: android.content.ComponentName[] listAllTransportComponentsForUser(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStopped(android.os.WorkSource,boolean)> -- <com.android.server.am.BatteryStatsService: void noteBleScanStopped(android.os.WorkSource,boolean)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLinks$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isResetPasswordTokenActive(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isResetPasswordTokenActive(android.content.ComponentName)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastEnabled(int)> -- <com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)>
<android.net.IConnectivityManager$Stub$Proxy: int registerNetworkFactory(android.os.Messenger,java.lang.String)> -- <com.android.server.ConnectivityService: int registerNetworkFactory(android.os.Messenger,java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void removeNotificationFromList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRemoveNotificationFromListCallback)>
<android.os.storage.IStorageManager$Stub$Proxy: boolean needsCheckpoint()> -- <com.android.server.StorageManagerService: boolean needsCheckpoint()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getDoNotAskCredentialsOnBoot()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getDoNotAskCredentialsOnBoot()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfoForSubscriber(int,java.util.List)> -- <com.android.server.TelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)>
<android.media.IMediaRouterService$Stub$Proxy: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)> -- <com.android.server.media.MediaRouterService: void setRouteVolumeWithRouter2(android.media.IMediaRouter2,android.media.MediaRoute2Info,int)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivityAffinity(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean finishActivityAffinity(android.os.IBinder)>
<android.content.pm.IPackageManager$Stub$Proxy: void lambda$notifyDexLoad$0(android.os.Parcel,java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void lambda$notifyDexLoad$0(android.os.Parcel,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceUp(java.lang.String)> -- <com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean isPreCreated(int)> -- <com.android.server.pm.UserManagerService: boolean isPreCreated(int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onClearAllNotifications(int)> -- <com.android.server.statusbar.StatusBarManagerService: void onClearAllNotifications(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setIconTint(int,int)> -- <com.android.internal.telephony.SubscriptionController: int setIconTint(int,int)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String,int,boolean)>
<android.media.IAudioService$Stub$Proxy: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)> -- <com.android.server.audio.AudioService: void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<android.media.IAudioService$Stub$Proxy: boolean isMicrophoneMuted()> -- <com.android.server.audio.AudioService: boolean isMicrophoneMuted()>
<android.app.job.IJobScheduler$Stub$Proxy: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<android.media.IAudioService$Stub$Proxy: int setHdmiSystemAudioSupported(boolean)> -- <com.android.server.audio.AudioService: int setHdmiSystemAudioSupported(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: int getUidForSharedUser(java.lang.String)> -- <com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setFixedToUserRotation(int,int)> -- <com.android.server.wm.WindowManagerService: void setFixedToUserRotation(int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFlashlightOn(int)> -- <com.android.server.am.BatteryStatsService: void noteFlashlightOn(int)>
<android.app.INotificationManager$Stub$Proxy: boolean isSystemConditionProviderEnabled(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean isSystemConditionProviderEnabled(java.lang.String)>
<android.app.job.IJobScheduler$Stub$Proxy: android.content.pm.ParceledListSlice getAllJobSnapshots()> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: android.content.pm.ParceledListSlice getAllJobSnapshots()>
<android.net.IConnectivityManager$Stub$Proxy: byte[] getNetworkWatchlistConfigHash()> -- <com.android.server.ConnectivityService: byte[] getNetworkWatchlistConfigHash()>
<android.content.pm.IPackageManager$Stub$Proxy: void restoreDefaultApps(byte[],int)> -- <com.android.server.pm.PackageManagerService: void restoreDefaultApps(byte[],int)>
<android.app.IActivityTaskManager$Stub$Proxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)> -- <com.android.server.wm.ActivityTaskManagerService: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: java.util.List getAssociations(java.lang.String,int)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: java.util.List getAssociations(java.lang.String,int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getEuiccInfo1(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo1Callback)>
<android.media.IAudioService$Stub$Proxy: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)> -- <com.android.server.audio.AudioService: android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[],int,int)>
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void resumeAppSwitches()> -- <com.android.server.wm.ActivityTaskManagerService: void resumeAppSwitches()>
<android.content.pm.IPackageManager$Stub$Proxy: void sendDeviceCustomizationReadyBroadcast()> -- <com.android.server.pm.PackageManagerService: void sendDeviceCustomizationReadyBroadcast()>
<android.media.IAudioService$Stub$Proxy: int getRingerModeInternal()> -- <com.android.server.audio.AudioService: int getRingerModeInternal()>
<android.view.IWindowManager$Stub$Proxy: boolean isKeyguardLocked()> -- <com.android.server.wm.WindowManagerService: boolean isKeyguardLocked()>
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)> -- <com.android.server.content.ContentService: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCount(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
<android.app.ISearchManager$Stub$Proxy: java.util.List getGlobalSearchActivities()> -- <com.android.server.search.SearchManagerService: java.util.List getGlobalSearchActivities()>
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)> -- <com.android.server.notification.NotificationManagerService$10: void updateNotificationChannelGroupForPackage(java.lang.String,int,android.app.NotificationChannelGroup)>
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)> -- <com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>
<android.net.INetworkPolicyManager$Stub$Proxy: void removeUidPolicy(int,int)> -- <com.android.server.net.NetworkPolicyManagerService: void removeUidPolicy(int,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getAutofillServiceComponentName(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getAutofillServiceComponentName(com.android.internal.os.IResultReceiver)>
<android.os.storage.IStorageManager$Stub$Proxy: void runIdleMaintenance()> -- <com.android.server.StorageManagerService: void runIdleMaintenance()>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void startSession(android.os.IBinder,android.content.ComponentName,int,int,com.android.internal.os.IResultReceiver)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getAccountTypesWithManagementDisabled()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabled()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)> -- <com.android.server.wm.ActivityTaskManagerService: boolean isActivityStartAllowedOnDisplay(int,android.content.Intent,java.lang.String,int)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int getParameter(android.os.ParcelUuid,int)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int getParameter(android.os.ParcelUuid,int)>
<android.app.IActivityManager$Stub$Proxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -- <com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOpportunisticSubscriptionInfoChanged()> -- <com.android.server.TelephonyRegistry: void notifyOpportunisticSubscriptionInfoChanged()>
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -- <com.android.server.location.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -- <com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)> -- <com.android.internal.telephony.SmsController: int getPremiumSmsPermissionForSubscriber(int,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void stopFreezingScreen()> -- <com.android.server.wm.WindowManagerService: void stopFreezingScreen()>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getFullPowerWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getFullPowerWhitelist()>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: long preEnroll(android.os.IBinder)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: long preEnroll(android.os.IBinder)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] listAllTransportsForUser(int)> -- <com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransportsForUser(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int,int,int,long)> -- <com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int,int,int,long)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.SmsController: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>
<android.app.trust.ITrustManager$Stub$Proxy: boolean isDeviceLocked(int)> -- <com.android.server.trust.TrustManagerService$1: boolean isDeviceLocked(int)>
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setPackageAskScreenCompat(java.lang.String,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)>
<android.os.IUserManager$Stub$Proxy: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)> -- <com.android.server.pm.UserManagerService: boolean isSettingRestrictedForUser(java.lang.String,int,java.lang.String,int)>
<android.hardware.input.IInputManager$Stub$Proxy: void vibrate(int,long[],int,android.os.IBinder)> -- <com.android.server.input.InputManagerService: void vibrate(int,long[],int,android.os.IBinder)>
<android.content.pm.IPackageManager$Stub$Proxy: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)> -- <com.android.server.pm.PackageManagerService: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>
<android.net.IEthernetManager$Stub$Proxy: java.lang.String[] getAvailableInterfaces()> -- <com.android.server.ethernet.EthernetServiceImpl: java.lang.String[] getAvailableInterfaces()>
<android.media.session.ISessionManager$Stub$Proxy: android.content.pm.ParceledListSlice getSession2Tokens(int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: android.content.pm.ParceledListSlice getSession2Tokens(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void extendVerificationTimeout(int,int,long)> -- <com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)>
<android.app.IActivityTaskManager$Stub$Proxy: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)> -- <com.android.server.wm.ActivityTaskManagerService: void dismissKeyguard(android.os.IBinder,com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskFeatures(int,int)> -- <com.android.server.wm.ActivityTaskManagerService: void updateLockTaskFeatures(int,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int getDisabledShowContext()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int getDisabledShowContext()>
<android.hardware.biometrics.IAuthService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: android.telephony.euicc.EuiccInfo getEuiccInfo(int)> -- <com.android.internal.telephony.euicc.EuiccController: android.telephony.euicc.EuiccInfo getEuiccInfo(int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)> -- <com.android.internal.telephony.SmsController: void setPremiumSmsPermissionForSubscriber(int,java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void disableForUser(int,android.os.IBinder,java.lang.String,int)> -- <com.android.server.statusbar.StatusBarManagerService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void requestSystemServerHeapDump()> -- <com.android.server.am.ActivityManagerService: void requestSystemServerHeapDump()>
<com.android.internal.telephony.ISub$Stub$Proxy: int removeSubInfo(java.lang.String,int)> -- <com.android.internal.telephony.SubscriptionController: int removeSubInfo(java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: java.lang.String getNotificationDelegate(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: java.lang.String getNotificationDelegate(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void setZenMode(int,android.net.Uri,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void setZenMode(int,android.net.Uri,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean bindBackupAgent(java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>
<android.net.INetworkStatsService$Stub$Proxy: void forceUpdate()> -- <com.android.server.net.NetworkStatsService: void forceUpdate()>
<android.app.IActivityManager$Stub$Proxy: void unstableProviderDied(android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: void unstableProviderDied(android.os.IBinder)>
<com.android.internal.telephony.IMms$Stub$Proxy: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)> -- <com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>
<android.content.pm.IShortcutService$Stub$Proxy: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)> -- <com.android.server.pm.ShortcutService: boolean setDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<android.os.IUserManager$Stub$Proxy: int getCredentialOwnerProfile(int)> -- <com.android.server.pm.UserManagerService: int getCredentialOwnerProfile(int)>
<android.app.IWallpaperManager$Stub$Proxy: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void setDisplayPadding(android.graphics.Rect,java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: android.media.RoutingSessionInfo getSystemSessionInfo()> -- <com.android.server.media.MediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfo()>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)> -- <com.android.internal.telephony.SmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void clearDefaults(java.lang.String,int)> -- <com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteUserActivity(int,int)> -- <com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)>
<android.view.IWindowManager$Stub$Proxy: void showStrictModeViolation(boolean)> -- <com.android.server.wm.WindowManagerService: void showStrictModeViolation(boolean)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)>
<android.app.IActivityManager$Stub$Proxy: void killUid(int,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void killUid(int,int,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: android.os.ParcelFileDescriptor getStatsOverTime(long)> -- <com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>
<android.net.IConnectivityManager$Stub$Proxy: void stopVpnProfile(java.lang.String)> -- <com.android.server.ConnectivityService: void stopVpnProfile(java.lang.String)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: void setActiveUser(int)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: void setActiveUser(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int getUserDisabledShowContext()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int getUserDisabledShowContext()>
<android.os.IUserManager$Stub$Proxy: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)> -- <com.android.server.pm.UserManagerService: void setSeedAccountData(int,java.lang.String,java.lang.String,android.os.PersistableBundle,boolean)>
<android.app.IActivityManager$Stub$Proxy: void setAgentApp(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void setAgentApp(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: boolean removeAccountExplicitly(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: boolean removeAccountExplicitly(android.accounts.Account)>
<android.app.IActivityManager$Stub$Proxy: void notifyCleartextNetwork(int,byte[])> -- <com.android.server.am.ActivityManagerService: void notifyCleartextNetwork(int,byte[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeKeyPair(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean hasBaseUserRestriction(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: boolean hasBaseUserRestriction(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ActivityInfo resolveActivity(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isEphemeralUser(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isEphemeralUser(android.content.ComponentName)>
<android.content.pm.IPackageManager$Stub$Proxy: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void notifyDexLoad(java.lang.String,java.util.Map,java.lang.String)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: java.lang.String[] getNamesForUids(int[])> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: java.lang.String[] getNamesForUids(int[])>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setCurrentFunction(java.lang.String,boolean)> -- <com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void getServiceComponentName(com.android.internal.os.IResultReceiver)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getServiceComponentName(com.android.internal.os.IResultReceiver)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiMulticastDisabled(int)> -- <com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)>
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)> -- <com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor getWallpaper(java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
<android.media.IAudioService$Stub$Proxy: int trackPlayer(android.media.PlayerBase$PlayerIdCard)> -- <com.android.server.audio.AudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>
<android.app.backup.IBackupManager$Stub$Proxy: void excludeKeysFromRestore(java.lang.String,java.util.List)> -- <com.android.server.backup.BackupManagerService: void excludeKeysFromRestore(java.lang.String,java.util.List)>
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getAutoRevokeExemptionGrantedPackages(int)> -- <com.android.server.pm.permission.PermissionManagerService: java.util.List getAutoRevokeExemptionGrantedPackages(int)>
<android.media.IAudioService$Stub$Proxy: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
<android.net.IIpSecService$Stub$Proxy: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)> -- <com.android.server.IpSecService: android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String,int,android.os.IBinder)>
<android.net.IConnectivityManager$Stub$Proxy: void startCaptivePortalAppInternal(android.net.Network,android.os.Bundle)> -- <com.android.server.ConnectivityService: void startCaptivePortalAppInternal(android.net.Network,android.os.Bundle)>
<android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)> -- <com.android.server.media.MediaRouterService: void requestCreateSessionWithRouter2(android.media.IMediaRouter2,int,long,android.media.RoutingSessionInfo,android.media.MediaRoute2Info,android.os.Bundle)>
<android.app.IActivityTaskManager$Stub$Proxy: int getDisplayId(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: int getDisplayId(android.os.IBinder)>
<android.media.IAudioService$Stub$Proxy: void playerEvent(int,int)> -- <com.android.server.audio.AudioService: void playerEvent(int,int)>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getRemovedSystemPowerWhitelistApps()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getRemovedSystemPowerWhitelistApps()>
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -- <com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>
<android.os.storage.IStorageManager$Stub$Proxy: void createUserKey(int,int,boolean)> -- <com.android.server.StorageManagerService: void createUserKey(int,int,boolean)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: android.os.IBinder requestStartActivityPermissionToken(android.os.IBinder)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopVideo(int)> -- <com.android.server.am.BatteryStatsService: void noteStopVideo(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ChangedPackages getChangedPackages(int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ChangedPackages getChangedPackages(int,int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)> -- <com.android.server.accessibility.AccessibilityManagerService: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>
<android.content.pm.IPackageManager$Stub$Proxy: int movePrimaryStorage(java.lang.String)> -- <com.android.server.pm.PackageManagerService: int movePrimaryStorage(java.lang.String)>
<android.location.ICountryDetector$Stub$Proxy: void addCountryListener(android.location.ICountryListener)> -- <com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void unregisterSystemAction(int)> -- <com.android.server.accessibility.AccessibilityManagerService: void unregisterSystemAction(int)>
<android.app.IActivityManager$Stub$Proxy: void restart()> -- <com.android.server.am.ActivityManagerService: void restart()>
<android.view.IWindowManager$Stub$Proxy: boolean mirrorDisplay(int,android.view.SurfaceControl)> -- <com.android.server.wm.WindowManagerService: boolean mirrorDisplay(int,android.view.SurfaceControl)>
<android.app.IActivityTaskManager$Stub$Proxy: int getTaskForActivity(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: int getTaskForActivity(android.os.IBinder,boolean)>
<android.app.IActivityManager$Stub$Proxy: int getProcessLimit()> -- <com.android.server.am.ActivityManagerService: int getProcessLimit()>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.Curve getMinimumBrightnessCurve()> -- <com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.Curve getMinimumBrightnessCurve()>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -- <com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean isInputMethodPickerShownForTest()> -- <com.android.server.inputmethod.InputMethodManagerService: boolean isInputMethodPickerShownForTest()>
<android.companion.ICompanionDeviceManager$Stub$Proxy: boolean hasNotificationAccess(android.content.ComponentName)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: boolean hasNotificationAccess(android.content.ComponentName)>
<android.app.ISearchManager$Stub$Proxy: void launchAssist(int,android.os.Bundle)> -- <com.android.server.search.SearchManagerService: void launchAssist(int,android.os.Bundle)>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getFullPowerWhitelistExceptIdle()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getFullPowerWhitelistExceptIdle()>
<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabledForUser(int,boolean)> -- <com.android.server.backup.BackupManagerService: void setBackupEnabledForUser(int,boolean)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onGlobalActionsHidden()> -- <com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsHidden()>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getSystemSharedLibraryNames()> -- <com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>
<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> -- <com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderWithFeature(int,java.lang.String,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
<android.net.IConnectivityManager$Stub$Proxy: int getRestoreDefaultNetworkDelay(int)> -- <com.android.server.ConnectivityService: int getRestoreDefaultNetworkDelay(int)>
<android.media.midi.IMidiManager$Stub$Proxy: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)> -- <com.android.server.midi.MidiService: void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)>
<android.os.IPowerManager$Stub$Proxy: void setPowerBoost(int,int)> -- <com.android.server.power.PowerManagerService$BinderService: void setPowerBoost(int,int)>
<android.companion.ICompanionDeviceManager$Stub$Proxy: void disassociate(java.lang.String,java.lang.String)> -- <com.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl: void disassociate(java.lang.String,java.lang.String)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDetailedUidStats(java.lang.String[])> -- <com.android.server.net.NetworkStatsService: android.net.NetworkStats getDetailedUidStats(java.lang.String[])>
<android.content.pm.IPackageManager$Stub$Proxy: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
<android.view.IWindowManager$Stub$Proxy: void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)> -- <com.android.server.wm.WindowManagerService: void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void listNotifications(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IListNotificationsCallback)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)> -- <com.android.server.usb.UsbService: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void killApplicationProcess(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void killApplicationProcess(java.lang.String,int)>
<android.app.trust.ITrustManager$Stub$Proxy: void unregisterTrustListener(android.app.trust.ITrustListener)> -- <com.android.server.trust.TrustManagerService$1: void unregisterTrustListener(android.app.trust.ITrustListener)>
<android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkFactory(android.os.Messenger)> -- <com.android.server.ConnectivityService: void unregisterNetworkFactory(android.os.Messenger)>
<android.app.INotificationManager$Stub$Proxy: boolean onlyHasDefaultChannel(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean onlyHasDefaultChannel(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isRootVoiceInteraction(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean isRootVoiceInteraction(android.os.IBinder)>
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isUidNetworkingBlocked(int,boolean)> -- <com.android.server.net.NetworkPolicyManagerService: boolean isUidNetworkingBlocked(int,boolean)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getUserInfo(int)> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>
<android.os.IPowerManager$Stub$Proxy: int getPowerSaveModeTrigger()> -- <com.android.server.power.PowerManagerService$BinderService: int getPowerSaveModeTrigger()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isStorageLow()> -- <com.android.server.pm.PackageManagerService: boolean isStorageLow()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDefaultCrossProfilePackages()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDefaultCrossProfilePackages()>
<android.view.IWindowManager$Stub$Proxy: void setShouldShowWithInsecureKeyguard(int,boolean)> -- <com.android.server.wm.WindowManagerService: void setShouldShowWithInsecureKeyguard(int,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberIdWithFeature(java.lang.String,java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.service.vr.IVrManager$Stub$Proxy: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)> -- <com.android.server.vr.VrManagerService$4: void registerPersistentVrStateListener(android.service.vr.IPersistentVrStateCallbacks)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void disableProfile(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.euicc.IDisableProfileCallback)>
<android.app.IActivityManager$Stub$Proxy: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)> -- <com.android.server.am.ActivityManagerService: boolean clearApplicationUserData(java.lang.String,boolean,android.content.pm.IPackageDataObserver,int)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> -- <com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEf(int)>
<android.content.pm.IShortcutService$Stub$Proxy: void onApplicationActive(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: void onApplicationActive(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setDisabledShowContext(int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setDisabledShowContext(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: void setDefaultSmsSubId(int)> -- <com.android.internal.telephony.SubscriptionController: void setDefaultSmsSubId(int)>
<android.app.IActivityManager$Stub$Proxy: void killUidForPermissionChange(int,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void killUidForPermissionChange(int,int,java.lang.String)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: java.lang.String getModuleMetadataPackageName()> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: java.lang.String getModuleMetadataPackageName()>
<android.net.INetworkPolicyManager$Stub$Proxy: java.lang.String getSubscriptionPlansOwner(int)> -- <com.android.server.net.NetworkPolicyManagerService: java.lang.String getSubscriptionPlansOwner(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartCamera(int)> -- <com.android.server.am.BatteryStatsService: void noteStartCamera(int)>
<android.permission.IPermissionManager$Stub$Proxy: void startOneTimePermissionSession(java.lang.String,int,long,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: void startOneTimePermissionSession(java.lang.String,int,long,int,int)>
<android.content.IContentService$Stub$Proxy: void removeStatusChangeListener(android.content.ISyncStatusObserver)> -- <com.android.server.content.ContentService: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.INotificationManager$Stub$Proxy: boolean shouldHideSilentStatusIcons(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean shouldHideSilentStatusIcons(java.lang.String)>
<android.service.vr.IVrManager$Stub$Proxy: void unregisterListener(android.service.vr.IVrStateCallbacks)> -- <com.android.server.vr.VrManagerService$4: void unregisterListener(android.service.vr.IVrStateCallbacks)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderResponse waitForAndGetProvider()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderResponse waitForAndGetProvider()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.Intent createAdminSupportIntent(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Intent createAdminSupportIntent(java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteGpsChanged(android.os.WorkSource,android.os.WorkSource)>
<android.app.INotificationManager$Stub$Proxy: int getDeletedChannelCount(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: int getDeletedChannelCount(java.lang.String,int)>
<android.hardware.input.IInputManager$Stub$Proxy: boolean hasKeys(int,int,int[],boolean[])> -- <com.android.server.input.InputManagerService: boolean hasKeys(int,int,int[],boolean[])>
<android.content.IClipboard$Stub$Proxy: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void crashApplication(int,int,java.lang.String,int,java.lang.String,boolean)> -- <com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,int,java.lang.String,boolean)>
<android.media.IAudioService$Stub$Proxy: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
<android.app.IActivityTaskManager$Stub$Proxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)> -- <com.android.server.wm.ActivityTaskManagerService: void finishSubActivity(android.os.IBinder,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor getLifeMonitor()> -- <com.android.server.am.ActivityManagerService: android.os.ParcelFileDescriptor getLifeMonitor()>
<android.os.INetworkManagementService$Stub$Proxy: void setAllowOnlyVpnForUids(boolean,android.net.UidRange[])> -- <com.android.server.NetworkManagementService: void setAllowOnlyVpnForUids(boolean,android.net.UidRange[])>
<android.net.INetworkPolicyManager$Stub$Proxy: void snoozeLimit(android.net.NetworkTemplate)> -- <com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulBiometricAttempt(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulBiometricAttempt(int)>
<android.app.IActivityManager$Stub$Proxy: int getTaskForActivity(android.os.IBinder,boolean)> -- <com.android.server.am.ActivityManagerService: int getTaskForActivity(android.os.IBinder,boolean)>
<android.view.IWindowManager$Stub$Proxy: void enableScreenIfNeeded()> -- <com.android.server.wm.WindowManagerService: void enableScreenIfNeeded()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getBluetoothContactSharingDisabledForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabledForUser(int)>
<android.accounts.IAccountManager$Stub$Proxy: void addSharedAccountsFromParentUser(int,int,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void addSharedAccountsFromParentUser(int,int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void resetApplicationPreferences(int)> -- <com.android.server.pm.PackageManagerService: void resetApplicationPreferences(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)>
<android.view.IWindowManager$Stub$Proxy: void removeRotationWatcher(android.view.IRotationWatcher)> -- <com.android.server.wm.WindowManagerService: void removeRotationWatcher(android.view.IRotationWatcher)>
<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationCategoryHint(java.lang.String,int,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void setApplicationCategoryHint(java.lang.String,int,java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: int addSubInfo(java.lang.String,java.lang.String,int,int)> -- <com.android.internal.telephony.SubscriptionController: int addSubInfo(java.lang.String,java.lang.String,int,int)>
<android.net.INetworkPolicyManager$Stub$Proxy: int getUidPolicy(int)> -- <com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>
<android.os.IPowerManager$Stub$Proxy: android.os.PowerSaveState getPowerSaveState(int)> -- <com.android.server.power.PowerManagerService$BinderService: android.os.PowerSaveState getPowerSaveState(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getAccessibleSubscriptionInfoList(java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getAccessibleSubscriptionInfoList(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startVoiceActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>
<android.view.IWindowManager$Stub$Proxy: void removeWindowToken(android.os.IBinder,int)> -- <com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int clearSubInfo()> -- <com.android.internal.telephony.SubscriptionController: int clearSubInfo()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)> -- <com.android.server.statusbar.StatusBarManagerService: void showAuthenticationDialog(android.os.Bundle,android.hardware.biometrics.IBiometricServiceReceiverInternal,int,boolean,int,java.lang.String,long,int)>
<android.media.IMediaRouterService$Stub$Proxy: void setSessionVolumeWithRouter2(android.media.IMediaRouter2,java.lang.String,int)> -- <com.android.server.media.MediaRouterService: void setSessionVolumeWithRouter2(android.media.IMediaRouter2,java.lang.String,int)>
<android.os.IThermalService$Stub$Proxy: android.os.Temperature[] getCurrentTemperatures()> -- <com.android.server.power.ThermalManagerService$1: android.os.Temperature[] getCurrentTemperatures()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)> -- <com.android.server.location.LocationManagerService: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
<android.hardware.display.IDisplayManager$Stub$Proxy: boolean isMinimalPostProcessingRequested(int)> -- <com.android.server.display.DisplayManagerService$BinderService: boolean isMinimalPostProcessingRequested(int)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getBugreportWhitelistedPackages()> -- <com.android.server.am.ActivityManagerService: java.util.List getBugreportWhitelistedPackages()>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: android.app.WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> -- <com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>
<android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)> -- <com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: boolean requestAssistContextExtras(int,android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isAssistDataAllowedOnCurrentActivity()> -- <com.android.server.wm.ActivityTaskManagerService: boolean isAssistDataAllowedOnCurrentActivity()>
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)> -- <com.android.server.usb.UsbService: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
<android.app.job.IJobScheduler$Stub$Proxy: void cancelAll()> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: void cancelAll()>
<android.os.IPermissionController$Stub$Proxy: boolean checkPermission(java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService$PermissionController: boolean checkPermission(java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()> -- <com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network,java.lang.String)> -- <com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network,java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void setUpdateAvailable(java.lang.String,boolean)> -- <com.android.server.pm.PackageManagerService: void setUpdateAvailable(java.lang.String,boolean)>
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)> -- <com.android.server.location.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanResults(android.os.WorkSource,int)> -- <com.android.server.am.BatteryStatsService: void noteBleScanResults(android.os.WorkSource,int)>
<android.os.INetworkManagementService$Stub$Proxy: void tetherLimitReached(android.net.ITetheringStatsProvider)> -- <com.android.server.NetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String,java.lang.String)> -- <com.android.server.sip.SipService: boolean isOpened(java.lang.String,java.lang.String)>
<android.security.keymaster.IKeyAttestationApplicationIdProvider$Stub$Proxy: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)> -- <com.android.server.security.KeyAttestationApplicationIdProviderService: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<android.permission.IPermissionManager$Stub$Proxy: int getPermissionFlags(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceDown(java.lang.String)> -- <com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void setProcessImportant(android.os.IBinder,int,boolean,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: boolean canNotifyAsPackage(java.lang.String,java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean canNotifyAsPackage(java.lang.String,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setOrganizationColor(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColor(android.content.ComponentName,int)>
<android.os.IThermalService$Stub$Proxy: boolean unregisterThermalEventListener(android.os.IThermalEventListener)> -- <com.android.server.power.ThermalManagerService$1: boolean unregisterThermalEventListener(android.os.IThermalEventListener)>
<android.os.IUserManager$Stub$Proxy: java.util.List getUserRestrictionSources(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: java.util.List getUserRestrictionSources(java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: void registerRouter2(android.media.IMediaRouter2,java.lang.String)> -- <com.android.server.media.MediaRouterService: void registerRouter2(android.media.IMediaRouter2,java.lang.String)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void setAutofillFailure(int,java.util.List,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAutofillFailure(int,java.util.List,int)>
<android.os.IPowerManager$Stub$Proxy: void goToSleep(long,int,int)> -- <com.android.server.power.PowerManagerService$BinderService: void goToSleep(long,int,int)>
<android.net.INetworkPolicyManager$Stub$Proxy: void setSubscriptionOverride(int,int,int,long,java.lang.String)> -- <com.android.server.net.NetworkPolicyManagerService: void setSubscriptionOverride(int,int,int,long,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: boolean hasRegisteredDynamicPolicy()> -- <com.android.server.audio.AudioService: boolean hasRegisteredDynamicPolicy()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveDataSubscriptionId()> -- <com.android.internal.telephony.SubscriptionController: int getActiveDataSubscriptionId()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName)>
<android.view.IWindowManager$Stub$Proxy: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)> -- <com.android.server.wm.WindowManagerService: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwner(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int logoutUser(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int logoutUser(android.content.ComponentName)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean isBackupServiceActive(int)> -- <com.android.server.backup.BackupManagerService: boolean isBackupServiceActive(int)>
<android.media.IAudioService$Stub$Proxy: boolean isStreamAffectedByMute(int)> -- <com.android.server.audio.AudioService: boolean isStreamAffectedByMute(int)>
<android.app.IActivityManager$Stub$Proxy: boolean startUserInBackground(int)> -- <com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean installKeyPair(android.content.ComponentName,java.lang.String,byte[],byte[],byte[],java.lang.String,boolean,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)> -- <com.android.server.ConnectivityService: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: int getPasswordType()> -- <com.android.server.StorageManagerService: int getPasswordType()>
<android.net.IEthernetManager$Stub$Proxy: void setIncludeTestInterfaces(boolean)> -- <com.android.server.ethernet.EthernetServiceImpl: void setIncludeTestInterfaces(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getInstalledModules(int)> -- <com.android.server.pm.PackageManagerService: java.util.List getInstalledModules(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void stopLockTaskModeByToken(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void stopLockTaskModeByToken(android.os.IBinder)>
<com.android.internal.telephony.ISub$Stub$Proxy: boolean canDisablePhysicalSubscription()> -- <com.android.internal.telephony.SubscriptionController: boolean canDisablePhysicalSubscription()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdn(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSecurityLoggingEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecurityLoggingEnabled(android.content.ComponentName)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteNetworkStatsEnabled()> -- <com.android.server.am.BatteryStatsService: void noteNetworkStatsEnabled()>
<android.app.IUiModeManager$Stub$Proxy: void setCustomNightModeStart(long)> -- <com.android.server.UiModeManagerService$11: void setCustomNightModeStart(long)>
<android.content.pm.IPackageManager$Stub$Proxy: int getInstallReason(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: int getInstallReason(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<android.os.storage.IStorageManager$Stub$Proxy: void registerListener(android.os.storage.IStorageEventListener)> -- <com.android.server.StorageManagerService: void registerListener(android.os.storage.IStorageEventListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAffiliationIds(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAffiliationIds(android.content.ComponentName)>
<android.os.IPowerManager$Stub$Proxy: void powerHint(int,int)> -- <com.android.server.power.PowerManagerService$BinderService: void powerHint(int,int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)> -- <com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)>
<android.app.IActivityManager$Stub$Proxy: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void prepareDownload(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IPrepareDownloadCallback)>
<android.media.IAudioService$Stub$Proxy: int getStreamMaxVolume(int)> -- <com.android.server.audio.AudioService: int getStreamMaxVolume(int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void addTile(android.content.ComponentName)> -- <com.android.server.statusbar.StatusBarManagerService: void addTile(android.content.ComponentName)>
<android.content.rollback.IRollbackManager$Stub$Proxy: void reloadPersistedData()> -- <com.android.server.rollback.RollbackManagerServiceImpl: void reloadPersistedData()>
<android.net.INetworkStatsService$Stub$Proxy: void unregisterUsageRequest(android.net.DataUsageRequest)> -- <com.android.server.net.NetworkStatsService: void unregisterUsageRequest(android.net.DataUsageRequest)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportKeyguardSecured(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardSecured(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCameraDisabled(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isSafeMode()> -- <com.android.server.pm.PackageManagerService: boolean isSafeMode()>
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> -- <com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>
<android.app.IUriGrantsManager$Stub$Proxy: void clearGrantedUriPermissions(java.lang.String,int)> -- <com.android.server.uri.UriGrantsManagerService: void clearGrantedUriPermissions(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -- <com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
<android.os.IPermissionController$Stub$Proxy: int noteOp(java.lang.String,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService$PermissionController: int noteOp(java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallEnabled(boolean)> -- <com.android.server.NetworkManagementService: void setFirewallEnabled(boolean)>
<android.content.IContentService$Stub$Proxy: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)> -- <com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startRecognition(int,java.lang.String,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.ParcelFileDescriptor getStatisticsStream()> -- <com.android.server.am.BatteryStatsService: android.os.ParcelFileDescriptor getStatisticsStream()>
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupDataForUser(int,java.lang.String,java.lang.String)> -- <com.android.server.backup.BackupManagerService: void clearBackupDataForUser(int,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void backupAgentCreated(java.lang.String,android.os.IBinder,int)> -- <com.android.server.am.ActivityManagerService: void backupAgentCreated(java.lang.String,android.os.IBinder,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void cancelIntentSender(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: void cancelIntentSender(android.content.IIntentSender)>
<android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)> -- <com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledImsServices(java.lang.String[],int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void setTemporaryAutoBrightnessAdjustment(float)> -- <com.android.server.display.DisplayManagerService$BinderService: void setTemporaryAutoBrightnessAdjustment(float)>
<android.media.session.ISessionManager$Stub$Proxy: boolean isGlobalPriorityActive()> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: boolean isGlobalPriorityActive()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void wipeDataWithReason(int,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataWithReason(int,java.lang.String,boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: void setPremiumSmsPermission(java.lang.String,int)> -- <com.android.internal.telephony.SmsController: void setPremiumSmsPermission(java.lang.String,int)>
<android.media.IAudioService$Stub$Proxy: boolean isBluetoothScoOn()> -- <com.android.server.audio.AudioService: boolean isBluetoothScoOn()>
<android.app.IActivityTaskManager$Stub$Proxy: void setLockScreenShown(boolean,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setLockScreenShown(boolean,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void denyProtect(int)> -- <com.android.server.NetworkManagementService: void denyProtect(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setDelegatedScopes(android.content.ComponentName,java.lang.String,java.util.List)>
<android.app.IActivityManager$Stub$Proxy: int[] getRunningUserIds()> -- <com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>
<android.media.IAudioService$Stub$Proxy: int getVibrateSetting(int)> -- <com.android.server.audio.AudioService: int getVibrateSetting(int)>
<android.os.storage.IStorageManager$Stub$Proxy: void addUserKeyAuth(int,int,byte[],byte[])> -- <com.android.server.StorageManagerService: void addUserKeyAuth(int,int,byte[],byte[])>
<android.app.IActivityManager$Stub$Proxy: void resumeAppSwitches()> -- <com.android.server.am.ActivityManagerService: void resumeAppSwitches()>
<android.content.pm.IShortcutService$Stub$Proxy: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)> -- <com.android.server.pm.ShortcutService: void removeLongLivedShortcuts(java.lang.String,java.util.List,int)>
<android.content.pm.IShortcutService$Stub$Proxy: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)> -- <com.android.server.pm.ShortcutService: void pushDynamicShortcut(java.lang.String,android.content.pm.ShortcutInfo,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getNetworkForType(int)> -- <com.android.server.ConnectivityService: android.net.Network getNetworkForType(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiControllerActivity(android.os.connectivity.WifiActivityEnergyInfo)> -- <com.android.server.am.BatteryStatsService: void noteWifiControllerActivity(android.os.connectivity.WifiActivityEnergyInfo)>
<android.app.IActivityManager$Stub$Proxy: boolean shutdown(int)> -- <com.android.server.am.ActivityManagerService: boolean shutdown(int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> -- <com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.content.pm.ILauncherApps$Stub$Proxy: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void clearInlineReplyUriPermissions(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void clearInlineReplyUriPermissions(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void requestBugReportWithDescription(java.lang.String,java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void requestBugReportWithDescription(java.lang.String,java.lang.String,int)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: void setInteractAcrossProfilesAppOp(java.lang.String,int)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void forceUsageSourceSettingRead()> -- <com.android.server.usage.UsageStatsService$BinderService: void forceUsageSourceSettingRead()>
<android.app.backup.IBackupManager$Stub$Proxy: void cancelBackups()> -- <com.android.server.backup.BackupManagerService: void cancelBackups()>
<android.media.IAudioService$Stub$Proxy: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: int dispatchFocusChange(android.media.AudioFocusInfo,int,android.media.audiopolicy.IAudioPolicyCallback)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void reportUsageStart(android.os.IBinder,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwnerAsUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerAsUser(int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void isServiceEnabled(int,java.lang.String,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isServiceEnabled(int,java.lang.String,com.android.internal.os.IResultReceiver)>
<android.app.IWallpaperManager$Stub$Proxy: void settingsRestored()> -- <com.android.server.wallpaper.WallpaperManagerService: void settingsRestored()>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getAlwaysOnVpnPackage(int)> -- <com.android.server.ConnectivityService: java.lang.String getAlwaysOnVpnPackage(int)>
<android.media.IAudioService$Stub$Proxy: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)> -- <com.android.server.audio.AudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>
<android.view.IGraphicsStats$Stub$Proxy: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)> -- <android.graphics.GraphicsStatsService: android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String,android.view.IGraphicsStatsCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onClassifyText(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassification$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCommonCriteriaModeEnabled(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordQuality(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)> -- <com.android.server.StorageManagerService: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>
<android.view.IWindowManager$Stub$Proxy: boolean injectInputAfterTransactionsApplied(android.view.InputEvent,int)> -- <com.android.server.wm.WindowManagerService: boolean injectInputAfterTransactionsApplied(android.view.InputEvent,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getAmbientBrightnessStats()> -- <com.android.server.display.DisplayManagerService$BinderService: android.content.pm.ParceledListSlice getAmbientBrightnessStats()>
<android.print.IPrintManager$Stub$Proxy: boolean getBindInstantServiceAllowed(int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: boolean getBindInstantServiceAllowed(int)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextClassifierEvent)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextSelection$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallCaCerts(android.content.ComponentName,java.lang.String,java.lang.String[])>
<android.os.storage.IStorageManager$Stub$Proxy: int decryptStorage(java.lang.String)> -- <com.android.server.StorageManagerService: int decryptStorage(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setStatusBarDisabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>
<android.app.IActivityManager$Stub$Proxy: void requestWifiBugReport(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void requestWifiBugReport(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySrvccStateChanged(int,int)> -- <com.android.server.TelephonyRegistry: void notifySrvccStateChanged(int,int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean isQuietModeEnabled(int)> -- <com.android.server.pm.UserManagerService: boolean isQuietModeEnabled(int)>
<android.os.storage.IStorageManager$Stub$Proxy: void allocateBytes(java.lang.String,long,int,java.lang.String)> -- <com.android.server.StorageManagerService: void allocateBytes(java.lang.String,long,int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getServices(int,int)> -- <com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDeviceProvisioningConfigApplied()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceProvisioningConfigApplied()>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> -- <com.android.server.location.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.app.INotificationManager$Stub$Proxy: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])> -- <com.android.server.notification.NotificationManagerService$10: void notifyConditions(java.lang.String,android.service.notification.IConditionProvider,android.service.notification.Condition[])>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getMimeGroup(java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: java.util.List getMimeGroup(java.lang.String,java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void reconcileSecondaryDexFiles(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void reconcileSecondaryDexFiles(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportFailedBiometricAttempt(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedBiometricAttempt(int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: java.lang.CharSequence getDataManagementLabelForUser(int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: boolean isBandwidthControlEnabled()> -- <com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()>
<android.net.IConnectivityManager$Stub$Proxy: void startCaptivePortalApp(android.net.Network)> -- <com.android.server.ConnectivityService: void startCaptivePortalApp(android.net.Network)>
<android.app.backup.IBackupManager$Stub$Proxy: void cancelBackupsForUser(int)> -- <com.android.server.backup.BackupManagerService: void cancelBackupsForUser(int)>
<android.app.IActivityManager$Stub$Proxy: void moveTaskToStack(int,int,boolean)> -- <com.android.server.am.ActivityManagerService: void moveTaskToStack(int,int,boolean)>
<android.os.IPowerManager$Stub$Proxy: void boostScreenBrightness(long)> -- <com.android.server.power.PowerManagerService$BinderService: void boostScreenBrightness(long)>
<android.content.pm.IPackageManager$Stub$Proxy: int getIntentVerificationStatus(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: int getIntentVerificationStatus(java.lang.String,int)>
<android.media.session.ISessionManager$Stub$Proxy: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: android.app.blob.IBlobStoreSession openSession(long,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: android.app.blob.IBlobStoreSession openSession(long,java.lang.String)>
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String,java.lang.String)> -- <com.android.server.sip.SipService: boolean isRegistered(java.lang.String,java.lang.String)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)>
<android.content.IClipboard$Stub$Proxy: boolean hasClipboardText(java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: boolean hasClipboardText(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getActivityOptions(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: android.os.Bundle getActivityOptions(android.os.IBinder)>
<android.hardware.usb.IUsbManager$Stub$Proxy: long getScreenUnlockedFunctions()> -- <com.android.server.usb.UsbService: long getScreenUnlockedFunctions()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setImmersive(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setImmersive(android.os.IBinder,boolean)>
<android.app.IActivityManager$Stub$Proxy: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService: android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int,int)>
<android.net.IIpSecService$Stub$Proxy: void releaseSecurityParameterIndex(int)> -- <com.android.server.IpSecService: void releaseSecurityParameterIndex(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageSuspended(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void setProvisioningNotificationVisible(boolean,int,java.lang.String)> -- <com.android.server.ConnectivityService: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int getLastAudibleStreamVolume(int)> -- <com.android.server.audio.AudioService: int getLastAudibleStreamVolume(int)>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void provideContextBitmap(int,android.graphics.Bitmap,android.os.Bundle)>
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)> -- <com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)> -- <com.android.server.compat.PlatformCompat: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: boolean clearOverride(long,java.lang.String)> -- <com.android.server.compat.PlatformCompat: boolean clearOverride(long,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>
<android.os.IDeviceIdleController$Stub$Proxy: void removePowerSaveWhitelistApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void removePowerSaveWhitelistApp(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.service.notification.StatusBarNotification[] getActiveNotificationsWithAttribution(java.lang.String,java.lang.String)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingActive(int[],com.android.internal.app.IAppOpsActiveCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean getBlockUninstallForUser(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showPinningEscapeToast()> -- <com.android.server.statusbar.StatusBarManagerService: void showPinningEscapeToast()>
<android.app.IActivityManager$Stub$Proxy: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)> -- <com.android.server.am.ActivityManagerService: void removeContentProviderExternalAsUser(java.lang.String,android.os.IBinder,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)> -- <com.android.server.ConnectivityService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>
<android.view.IWindowManager$Stub$Proxy: void getStableInsets(int,android.graphics.Rect)> -- <com.android.server.wm.WindowManagerService: void getStableInsets(int,android.graphics.Rect)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void renameWifiDisplay(java.lang.String,java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: void renameWifiDisplay(java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isTopOfTask(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean isTopOfTask(android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setNetworkLoggingEnabled(android.content.ComponentName,java.lang.String,boolean)>
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> -- <com.android.server.MmsServiceBroker$BinderService: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: int getOtaStatus(int)> -- <com.android.internal.telephony.euicc.EuiccController: int getOtaStatus(int)>
<android.content.rollback.IRollbackManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()> -- <com.android.server.rollback.RollbackManagerServiceImpl: android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()>
<android.accounts.IAccountManager$Stub$Proxy: void unregisterAccountListener(java.lang.String[],java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void unregisterAccountListener(java.lang.String[],java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void cancelAllNotifications(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: void cancelAllNotifications(java.lang.String,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void disableOwnedAutofillServices(int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void disableOwnedAutofillServices(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int addOverrideApn(android.content.ComponentName,android.telephony.data.ApnSetting)>
<android.app.IWallpaperManager$Stub$Proxy: java.lang.String getName()> -- <com.android.server.wallpaper.WallpaperManagerService: java.lang.String getName()>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -- <com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)> -- <com.android.server.audio.AudioService: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void verifyIntentFilter(int,int,java.util.List)> -- <com.android.server.pm.PackageManagerService: void verifyIntentFilter(int,int,java.util.List)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)>
<android.os.IVibratorService$Stub$Proxy: boolean hasAmplitudeControl()> -- <com.android.server.VibratorService: boolean hasAmplitudeControl()>
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getDefaultAppsBackup(int)> -- <com.android.server.pm.PackageManagerService: byte[] getDefaultAppsBackup(int)>
<android.os.IPowerManager$Stub$Proxy: boolean isDeviceIdleMode()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isDeviceIdleMode()>
<android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)> -- <com.android.server.power.ThermalManagerService$1: boolean registerThermalEventListenerWithType(android.os.IThermalEventListener,int)>
<android.os.storage.IStorageManager$Stub$Proxy: void clearPassword()> -- <com.android.server.StorageManagerService: void clearPassword()>
<android.os.INetworkManagementService$Stub$Proxy: void tetherInterface(java.lang.String)> -- <com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isUidPrivileged(int)> -- <com.android.server.pm.PackageManagerService: boolean isUidPrivileged(int)>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> -- <com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>
<android.view.IWindowManager$Stub$Proxy: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)> -- <com.android.server.wm.WindowManagerService: void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -- <com.android.server.backup.BackupManagerService: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: long getCacheQuotaBytes(java.lang.String,int,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)> -- <com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkOperation(int,int,java.lang.String)> -- <com.android.server.appop.AppOpsService: int checkOperation(int,int,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: void setCarrierInfoForImsiEncryption(int,java.lang.String,android.telephony.ImsiEncryptionInfo)> -- <com.android.internal.telephony.PhoneSubInfoController: void setCarrierInfoForImsiEncryption(int,java.lang.String,android.telephony.ImsiEncryptionInfo)>
<android.hardware.input.IInputManager$Stub$Proxy: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)> -- <com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>
<android.media.IAudioService$Stub$Proxy: void reloadAudioSettings()> -- <com.android.server.audio.AudioService: void reloadAudioSettings()>
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> -- <com.android.server.AlarmManagerService$4: void setTimeZone(java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteDeviceIdleMode(int,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteDeviceIdleMode(int,java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: int getLaunchedFromUid(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: int getLaunchedFromUid(android.os.IBinder)>
<android.net.IConnectivityManager$Stub$Proxy: void setAcceptPartialConnectivity(android.net.Network,boolean,boolean)> -- <com.android.server.ConnectivityService: void setAcceptPartialConnectivity(android.net.Network,boolean,boolean)>
<android.app.role.IRoleManager$Stub$Proxy: java.util.List getHeldRolesFromController(java.lang.String)> -- <com.android.server.role.RoleManagerService$Stub: java.util.List getHeldRolesFromController(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> -- <com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
<android.app.IActivityTaskManager$Stub$Proxy: android.graphics.Point getAppTaskThumbnailSize()> -- <com.android.server.wm.ActivityTaskManagerService: android.graphics.Point getAppTaskThumbnailSize()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int checkProvisioningPreCondition(java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int checkProvisioningPreCondition(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: void partitionPrivate(java.lang.String)> -- <com.android.server.StorageManagerService: void partitionPrivate(java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: int isInTabletMode()> -- <com.android.server.input.InputManagerService: int isInTabletMode()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isRemovingAdmin(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovingAdmin(android.content.ComponentName,int)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)> -- <com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openDevice(java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: java.util.List getAudioProductStrategies()> -- <com.android.server.audio.AudioService: java.util.List getAudioProductStrategies()>
<android.os.storage.IStorageManager$Stub$Proxy: void partitionMixed(java.lang.String,int)> -- <com.android.server.StorageManagerService: void partitionMixed(java.lang.String,int)>
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String,java.lang.String)> -- <com.android.server.backup.BackupManagerService: void clearBackupData(java.lang.String,java.lang.String)>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getUserPowerWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getUserPowerWhitelist()>
<android.media.IAudioService$Stub$Proxy: int setPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes)> -- <com.android.server.audio.AudioService: int setPreferredDeviceForStrategy(int,android.media.AudioDeviceAttributes)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>
<android.media.IAudioService$Stub$Proxy: boolean isCallScreeningModeSupported()> -- <com.android.server.audio.AudioService: boolean isCallScreeningModeSupported()>
<android.app.IActivityManager$Stub$Proxy: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: int bindIsolatedService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void updatePackagesIfNeeded()> -- <com.android.server.pm.PackageManagerService: void updatePackagesIfNeeded()>
<android.app.slice.ISliceManager$Stub$Proxy: byte[] getBackupPayload(int)> -- <com.android.server.slice.SliceManagerService: byte[] getBackupPayload(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedInputMethodsForCurrentUser()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethodsForCurrentUser()>
<android.view.IWindowManager$Stub$Proxy: void setLayerTracingFlags(int)> -- <com.android.server.wm.WindowManagerService: void setLayerTracingFlags(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isNetworkLoggingEnabled(android.content.ComponentName,java.lang.String)>
<android.content.IClipboard$Stub$Proxy: void setPrimaryClip(android.content.ClipData,java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: int[] getAppWidgetIdsForHost(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: int[] getAppWidgetIdsForHost(java.lang.String,int)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: long getCommittedStats(long,int,boolean,java.util.List)> -- <com.android.server.am.ProcessStatsService: long getCommittedStats(long,int,boolean,java.util.List)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getTotalBytes(java.lang.String,java.lang.String)> -- <com.android.server.usage.StorageStatsService: long getTotalBytes(java.lang.String,java.lang.String)>
<android.content.pm.IShortcutService$Stub$Proxy: void resetThrottling()> -- <com.android.server.pm.ShortcutService: void resetThrottling()>
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAllStackInfosOnDisplay(int)> -- <com.android.server.wm.ActivityTaskManagerService: java.util.List getAllStackInfosOnDisplay(int)>
<android.os.INetworkManagementService$Stub$Proxy: void untetherInterface(java.lang.String)> -- <com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void activityTopResumedStateLost()> -- <com.android.server.wm.ActivityTaskManagerService: void activityTopResumedStateLost()>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int getParameter(int,int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int getParameter(int,int)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void createPredictionSession(android.app.prediction.AppPredictionContext,android.app.prediction.AppPredictionSessionId)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: boolean isSpellCheckerEnabled(int)> -- <com.android.server.textservices.TextServicesManagerService: boolean isSpellCheckerEnabled(int)>
<android.media.IAudioService$Stub$Proxy: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)> -- <com.android.server.audio.AudioService: void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)>
<android.app.IActivityManager$Stub$Proxy: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)> -- <com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>
<android.app.IActivityManager$Stub$Proxy: void startDelegateShellPermissionIdentity(int,java.lang.String[])> -- <com.android.server.am.ActivityManagerService: void startDelegateShellPermissionIdentity(int,java.lang.String[])>
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponents()> -- <com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponents()>
<android.app.IActivityManager$Stub$Proxy: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)> -- <com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,android.os.RemoteCallback)>
<android.app.IActivityManager$Stub$Proxy: android.os.ParcelFileDescriptor openContentUri(java.lang.String)> -- <com.android.server.am.ActivityManagerService: android.os.ParcelFileDescriptor openContentUri(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -- <com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName[] getDreamComponentsForUser(int)> -- <com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponentsForUser(int)>
<android.service.dreams.IDreamManager$Stub$Proxy: void finishSelf(android.os.IBinder,boolean)> -- <com.android.server.dreams.DreamManagerService$BinderService: void finishSelf(android.os.IBinder,boolean)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.ConversationActions$Request,android.service.textclassifier.ITextClassifierCallback)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: android.content.ComponentName getActiveServiceComponentName()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.content.ComponentName getActiveServiceComponentName()>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeInfo[] listAllChanges()> -- <com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listAllChanges()>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean isSessionRunning()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean isSessionRunning()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void remTile(android.content.ComponentName)> -- <com.android.server.statusbar.StatusBarManagerService: void remTile(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)>
<android.content.pm.ILauncherApps$Stub$Proxy: void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean installExistingPackage(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)> -- <com.android.server.am.ActivityManagerService: void publishContentProviders(android.app.IApplicationThread,java.util.List)>
<android.net.IConnectivityManager$Stub$Proxy: void simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)> -- <com.android.server.ConnectivityService: void simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void collectNoteOpCallsForValidation(java.lang.String,int,java.lang.String,long)> -- <com.android.server.appop.AppOpsService: void collectNoteOpCallsForValidation(java.lang.String,int,java.lang.String,long)>
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)> -- <com.android.server.pm.permission.PermissionManagerService: void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setActiveAdmin(android.content.ComponentName,boolean,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>
<android.net.INetworkStatsService$Stub$Proxy: java.lang.String[] getMobileIfaces()> -- <com.android.server.net.NetworkStatsService: java.lang.String[] getMobileIfaces()>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: boolean isTagEnabled(java.lang.String)> -- <com.android.server.DropBoxManagerService$2: boolean isTagEnabled(java.lang.String)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo getProfileParent(int)> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>
<android.app.backup.IBackupManager$Stub$Proxy: android.app.backup.IRestoreSession beginRestoreSessionForUser(int,java.lang.String,java.lang.String)> -- <com.android.server.backup.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSessionForUser(int,java.lang.String,java.lang.String)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void connectWifiDisplay(java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: void connectWifiDisplay(java.lang.String)>
<android.app.IWallpaperManager$Stub$Proxy: void clearWallpaper(java.lang.String,int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void clearWallpaper(java.lang.String,int,int)>
<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponents(android.content.ComponentName[])> -- <com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponents(android.content.ComponentName[])>
<android.app.IActivityManager$Stub$Proxy: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> -- <com.android.server.am.ActivityManagerService: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)> -- <com.android.server.usb.UsbService: boolean hasDevicePermission(android.hardware.usb.UsbDevice,java.lang.String)>
<android.hardware.location.IContextHubService$Stub$Proxy: int[] getContextHubHandles()> -- <com.android.server.location.ContextHubService: int[] getContextHubHandles()>
<android.content.pm.IPackageManager$Stub$Proxy: void setInstallerPackageName(java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void setInstallerPackageName(java.lang.String,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationString(java.lang.String)> -- <com.android.server.backup.BackupManagerService: java.lang.String getDestinationString(java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)> -- <com.android.server.backup.BackupManagerService: void agentConnectedForUser(int,java.lang.String,android.os.IBinder)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getInstalledAccessibilityServiceList(int)> -- <com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setCameraAudioRestriction(int)> -- <com.android.server.appop.AppOpsService: void setCameraAudioRestriction(int)>
<android.os.IPowerManager$Stub$Proxy: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)> -- <com.android.server.power.PowerManagerService$BinderService: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()> -- <com.android.server.display.DisplayManagerService$BinderService: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>
<android.app.IUiModeManager$Stub$Proxy: long getCustomNightModeStart()> -- <com.android.server.UiModeManagerService$11: long getCustomNightModeStart()>
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getMountedObbPath(java.lang.String)> -- <com.android.server.StorageManagerService: java.lang.String getMountedObbPath(java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncFinish(java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteSyncFinish(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()> -- <com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSeparateProfileChallengeAllowed(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSeparateProfileChallengeAllowed(int)>
<android.os.IDeviceIdleController$Stub$Proxy: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: long whitelistAppTemporarily(java.lang.String,int,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void setVolumeNickname(java.lang.String,java.lang.String)> -- <com.android.server.StorageManagerService: void setVolumeNickname(java.lang.String,java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: boolean setAdaptivePowerSaveEnabled(boolean)> -- <com.android.server.power.PowerManagerService$BinderService: boolean setAdaptivePowerSaveEnabled(boolean)>
<android.view.IWindowManager$Stub$Proxy: void lockNow(android.os.Bundle)> -- <com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>
<android.net.IConnectivityManager$Stub$Proxy: void deleteVpnProfile(java.lang.String)> -- <com.android.server.ConnectivityService: void deleteVpnProfile(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSystemTextClassifierPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getSystemTextClassifierPackageName()>
<android.accounts.IAccountManager$Stub$Proxy: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int restartUserInBackground(int)> -- <com.android.server.am.ActivityManagerService: int restartUserInBackground(int)>
<android.app.IActivityManager$Stub$Proxy: java.lang.String getProviderMimeType(android.net.Uri,int)> -- <com.android.server.am.ActivityManagerService: java.lang.String getProviderMimeType(android.net.Uri,int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getDestinationStringForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: java.lang.String getDestinationStringForUser(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)> -- <com.android.server.pm.PackageManagerService: java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[],int,int)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void getDeviceList(android.os.Bundle)> -- <com.android.server.usb.UsbService: void getDeviceList(android.os.Bundle)>
<android.os.IVibratorService$Stub$Proxy: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)> -- <com.android.server.VibratorService: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>
<android.net.IIpSecService$Stub$Proxy: void deleteTunnelInterface(int,java.lang.String)> -- <com.android.server.IpSecService: void deleteTunnelInterface(int,java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: int getShortcutIconResId(java.lang.String,java.lang.String,java.lang.String,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getShortcutIconResId(java.lang.String,java.lang.String,java.lang.String,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastForSubscriber(int,int,int)> -- <com.android.internal.telephony.SmsController: boolean enableCellBroadcastForSubscriber(int,int,int)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)> -- <com.android.server.location.ContextHubService: android.hardware.location.IContextHubClient createClient(int,android.hardware.location.IContextHubClientCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionPolicy(android.content.ComponentName,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: boolean isAppStartModeDisabled(int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean isAppStartModeDisabled(int,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -- <com.android.server.TelephonyRegistry: void addOnOpportunisticSubscriptionsChangedListener(java.lang.String,java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>
<android.net.IConnectivityManager$Stub$Proxy: boolean setUnderlyingNetworksForVpn(android.net.Network[])> -- <com.android.server.ConnectivityService: boolean setUnderlyingNetworksForVpn(android.net.Network[])>
<android.os.IUserManager$Stub$Proxy: java.util.List getUsers(boolean,boolean,boolean)> -- <com.android.server.pm.UserManagerService: java.util.List getUsers(boolean,boolean,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: boolean isUserKeyUnlocked(int)> -- <com.android.server.StorageManagerService: boolean isUserKeyUnlocked(int)>
<android.app.trust.ITrustManager$Stub$Proxy: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)> -- <com.android.server.trust.TrustManagerService$1: void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId,android.app.prediction.AppTargetEvent)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)>
<android.media.IAudioService$Stub$Proxy: void playerHasOpPlayAudio(int,boolean)> -- <com.android.server.audio.AudioService: void playerHasOpPlayAudio(int,boolean)>
<android.app.IActivityManager$Stub$Proxy: boolean removeTask(int)> -- <com.android.server.am.ActivityManagerService: boolean removeTask(int)>
<android.service.vr.IVrManager$Stub$Proxy: void setStandbyEnabled(boolean)> -- <com.android.server.vr.VrManagerService$4: void setStandbyEnabled(boolean)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOemHookRawEventForSubscriber(int,int,byte[])> -- <com.android.server.TelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,int,byte[])>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void add(android.os.DropBoxManager$Entry)> -- <com.android.server.DropBoxManagerService$2: void add(android.os.DropBoxManager$Entry)>
<android.app.IActivityManager$Stub$Proxy: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: int checkPermissionWithToken(java.lang.String,int,int,android.os.IBinder)>
<com.android.internal.telephony.ISms$Stub$Proxy: int getPremiumSmsPermission(java.lang.String)> -- <com.android.internal.telephony.SmsController: int getPremiumSmsPermission(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationAssistantAccessGranted(android.content.ComponentName,boolean)>
<android.app.IActivityManager$Stub$Proxy: boolean isUserRunning(int,int)> -- <com.android.server.am.ActivityManagerService: boolean isUserRunning(int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSetupWizardPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getSetupWizardPackageName()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleased(int)> -- <com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)>
<android.permission.IPermissionManager$Stub$Proxy: java.lang.String[] getAppOpPermissionPackages(java.lang.String)> -- <com.android.server.pm.permission.PermissionManagerService: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>
<android.os.IUserManager$Stub$Proxy: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)> -- <com.android.server.pm.UserManagerService: void setApplicationRestrictions(java.lang.String,android.os.Bundle,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)> -- <com.android.server.am.BatteryStatsService: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
<android.location.ILocationManager$Stub$Proxy: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)> -- <com.android.server.location.LocationManagerService: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
<android.content.pm.ILauncherApps$Stub$Proxy: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void showAppDetailsAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
<android.app.backup.IBackupManager$Stub$Proxy: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)> -- <com.android.server.backup.BackupManagerService: void selectBackupTransportAsyncForUser(int,android.content.ComponentName,android.app.backup.ISelectBackupTransportCallback)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.util.List getSystemConfigEnabledProfilesForPackage(java.lang.String)> -- <com.android.server.BluetoothManagerService: java.util.List getSystemConfigEnabledProfilesForPackage(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getCrossProfileContactsSearchDisabledForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)>
<android.content.pm.IShortcutService$Stub$Proxy: void reportShortcutUsed(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.ShortcutService: void reportShortcutUsed(java.lang.String,java.lang.String,int)>
<android.view.IWindowManager$Stub$Proxy: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)> -- <com.android.server.wm.WindowManagerService: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>
<android.media.IAudioService$Stub$Proxy: boolean isStreamMute(int)> -- <com.android.server.audio.AudioService: boolean isStreamMute(int)>
<android.os.storage.IStorageManager$Stub$Proxy: void runMaintenance()> -- <com.android.server.StorageManagerService: void runMaintenance()>
<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)> -- <com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String,int,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setKeepUninstalledPackages(android.content.ComponentName,java.lang.String,java.util.List)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEfForSubscriber(int,int)> -- <com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEfForSubscriber(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileCalendarPackagesForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileCalendarPackagesForUser(int)>
<android.os.IUserManager$Stub$Proxy: long getUserUnlockRealtime()> -- <com.android.server.pm.UserManagerService: long getUserUnlockRealtime()>
<android.app.IActivityTaskManager$Stub$Proxy: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)> -- <com.android.server.wm.ActivityTaskManagerService: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<android.media.session.ISessionManager$Stub$Proxy: java.util.List getSessions(android.content.ComponentName,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: java.util.List getSessions(android.content.ComponentName,int)>
<android.view.IWindowManager$Stub$Proxy: boolean isWindowTraceEnabled()> -- <com.android.server.wm.WindowManagerService: boolean isWindowTraceEnabled()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeOverrideApn(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeOverrideApn(android.content.ComponentName,int)>
<android.app.IActivityManager$Stub$Proxy: void updatePersistentConfiguration(android.content.res.Configuration)> -- <com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallChainEnabled(int,boolean)> -- <com.android.server.NetworkManagementService: void setFirewallChainEnabled(int,boolean)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void clearHistory()> -- <com.android.server.appop.AppOpsService: void clearHistory()>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)> -- <com.android.server.appop.AppOpsService: int noteProxyOperation(int,int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,boolean)>
<android.app.IActivityManager$Stub$Proxy: void appNotResponding(java.lang.String)> -- <com.android.server.am.ActivityManagerService: void appNotResponding(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void setAcceptUnvalidated(android.net.Network,boolean,boolean)> -- <com.android.server.ConnectivityService: void setAcceptUnvalidated(android.net.Network,boolean,boolean)>
<android.app.IActivityManager$Stub$Proxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: boolean isWindowToken(android.os.IBinder)> -- <com.android.server.wm.WindowManagerService: boolean isWindowToken(android.os.IBinder)>
<android.media.IMediaRouterService$Stub$Proxy: void unregisterManager(android.media.IMediaRouter2Manager)> -- <com.android.server.media.MediaRouterService: void unregisterManager(android.media.IMediaRouter2Manager)>
<android.content.pm.IPackageManager$Stub$Proxy: void enterSafeMode()> -- <com.android.server.pm.PackageManagerService: void enterSafeMode()>
<android.app.IWallpaperManager$Stub$Proxy: int getWallpaperIdForUser(int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: int getWallpaperIdForUser(int,int)>
<android.app.INotificationManager$Stub$Proxy: java.util.List getAllowedAssistantAdjustments(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: java.util.List getAllowedAssistantAdjustments(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,java.lang.String,byte[])>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRadioPowerState(int,long,int)> -- <com.android.server.am.BatteryStatsService: void noteWifiRadioPowerState(int,long,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: int getSmsCapacityOnIccForSubscriber(int)> -- <com.android.internal.telephony.SmsController: int getSmsCapacityOnIccForSubscriber(int)>
<android.app.INotificationManager$Stub$Proxy: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)> -- <com.android.server.notification.NotificationManagerService$10: void createNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,java.lang.String,int)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void finishSession(int)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void finishSession(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiOff()> -- <com.android.server.am.BatteryStatsService: void noteWifiOff()>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: int disableTargetSdkChanges(java.lang.String,int)> -- <com.android.server.compat.PlatformCompat: int disableTargetSdkChanges(java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: int getProfileParentId(int)> -- <com.android.server.pm.UserManagerService: int getProfileParentId(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)> -- <com.android.internal.telephony.SmsController: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>
<android.permission.IPermissionManager$Stub$Proxy: void removePermission(java.lang.String)> -- <com.android.server.pm.permission.PermissionManagerService: void removePermission(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: java.util.List getAllProviders()> -- <com.android.server.location.LocationManagerService: java.util.List getAllProviders()>
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAllStackInfos()> -- <com.android.server.wm.ActivityTaskManagerService: java.util.List getAllStackInfos()>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])> -- <com.android.server.appop.AppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])>
<android.app.IActivityManager$Stub$Proxy: void updateDeviceOwner(java.lang.String)> -- <com.android.server.am.ActivityManagerService: void updateDeviceOwner(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: void deleteSoundModel(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void deleteSoundModel(android.os.ParcelUuid)>
<android.view.IWindowManager$Stub$Proxy: void showGlobalActions()> -- <com.android.server.wm.WindowManagerService: void showGlobalActions()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void forceRemoveActiveAdmin(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void forceRemoveActiveAdmin(android.content.ComponentName,int)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.ComponentName,int,boolean)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String,int,java.lang.String,boolean)>
<android.os.IPowerManager$Stub$Proxy: boolean isLightDeviceIdleMode()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isLightDeviceIdleMode()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)>
<android.os.IUserManager$Stub$Proxy: boolean hasUserRestriction(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setAudioRestriction(int,int,int,int,java.lang.String[])> -- <com.android.server.appop.AppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimDomain(int)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimDomain(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setEndUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.IActivityManager$Stub$Proxy: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDisconnectCause(int,int,int,int)> -- <com.android.server.TelephonyRegistry: void notifyDisconnectCause(int,int,int,int)>
<android.hardware.input.IInputManager$Stub$Proxy: void setPointerIconType(int)> -- <com.android.server.input.InputManagerService: void setPointerIconType(int)>
<android.os.IVibratorService$Stub$Proxy: boolean registerVibratorStateListener(android.os.IVibratorStateListener)> -- <com.android.server.VibratorService: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.IPackageInstaller getPackageInstaller()> -- <com.android.server.pm.PackageManagerService: android.content.pm.IPackageInstaller getPackageInstaller()>
<android.media.IMediaRouterService$Stub$Proxy: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)> -- <com.android.server.media.MediaRouterService: void registerManager(android.media.IMediaRouter2Manager,java.lang.String)>
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -- <com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void removeUser(int)> -- <com.android.server.appop.AppOpsService: void removeUser(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void resetHistoryParameters()> -- <com.android.server.appop.AppOpsService: void resetHistoryParameters()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String,java.lang.String)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void registerAppUsageObserver(int,java.lang.String[],long,android.app.PendingIntent,java.lang.String)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: int getUsageSource()> -- <com.android.server.usage.UsageStatsService$BinderService: int getUsageSource()>
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintServices(int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintServices(int,int)>
<android.app.INotificationManager$Stub$Proxy: java.util.List getEnabledNotificationListeners(int)> -- <com.android.server.notification.NotificationManagerService$10: java.util.List getEnabledNotificationListeners(int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: int[] getDisplayIds()> -- <com.android.server.display.DisplayManagerService$BinderService: int[] getDisplayIds()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartSensor(int,int)> -- <com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)> -- <com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>
<android.app.IActivityTaskManager$Stub$Proxy: java.lang.String getLaunchedFromPackage(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: java.lang.String getLaunchedFromPackage(android.os.IBinder)>
<android.net.INetworkPolicyManager$Stub$Proxy: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)> -- <com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void shutdown()> -- <com.android.server.NetworkManagementService: void shutdown()>
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceAlert(java.lang.String)> -- <com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void modifyDisplayWindowInsets(int,android.view.InsetsState)> -- <com.android.server.wm.WindowManagerService: void modifyDisplayWindowInsets(int,android.view.InsetsState)>
<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void clearOverrides(java.lang.String)> -- <com.android.server.compat.PlatformCompat: void clearOverrides(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)> -- <com.android.server.am.ActivityManagerService: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>
<android.view.IWindowManager$Stub$Proxy: float getAnimationScale(int)> -- <com.android.server.wm.WindowManagerService: float getAnimationScale(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> -- <com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>
<android.app.IActivityManager$Stub$Proxy: boolean isUserAMonkey()> -- <com.android.server.am.ActivityManagerService: boolean isUserAMonkey()>
<android.app.IActivityManager$Stub$Proxy: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)> -- <com.android.server.am.ActivityManagerService: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)> -- <com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)>
<android.permission.IPermissionManager$Stub$Proxy: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: java.lang.String getCallingPackage(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: java.lang.String getCallingPackage(android.os.IBinder)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: boolean isSupportedCountry(java.lang.String)> -- <com.android.internal.telephony.euicc.EuiccController: boolean isSupportedCountry(java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptions(int,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void eraseSubscriptions(int,android.app.PendingIntent)>
<android.app.INotificationManager$Stub$Proxy: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)> -- <com.android.server.notification.NotificationManagerService$10: void setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)>
<android.app.trust.ITrustManager$Stub$Proxy: void reportUnlockAttempt(boolean,int)> -- <com.android.server.trust.TrustManagerService$1: void reportUnlockAttempt(boolean,int)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: void resetLockout(byte[])> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: void resetLockout(byte[])>
<android.content.pm.IPackageManagerNative$Stub$Proxy: void unregisterPackageChangeObserver(android.content.pm.IPackageChangeObserver)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: void unregisterPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<android.app.IActivityManager$Stub$Proxy: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: int checkUriPermission(android.net.Uri,int,int,int,int,android.os.IBinder)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: void deleteBlob(long)> -- <com.android.server.blob.BlobStoreManagerService$Stub: void deleteBlob(long)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)> -- <com.android.server.usb.UsbService: void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>
<android.app.IActivityTaskManager$Stub$Proxy: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startAssistantActivity(java.lang.String,java.lang.String,int,int,android.content.Intent,java.lang.String,android.os.Bundle,int)>
<android.os.IPowerManager$Stub$Proxy: boolean isWakeLockLevelSupported(int)> -- <com.android.server.power.PowerManagerService$BinderService: boolean isWakeLockLevelSupported(int)>
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)> -- <com.android.server.wm.WindowManagerService: boolean startViewServer(int)>
<android.media.IAudioService$Stub$Proxy: void setMicrophoneMute(boolean,java.lang.String,int)> -- <com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getAutoTimeRequired()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeRequired()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onPanelHidden()> -- <com.android.server.statusbar.StatusBarManagerService: void onPanelHidden()>
<android.os.IUserManager$Stub$Proxy: int getUserBadgeResId(int)> -- <com.android.server.pm.UserManagerService: int getUserBadgeResId(int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForUser(long,long,int,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(android.net.Network)> -- <com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(android.net.Network)>
<android.app.INotificationManager$Stub$Proxy: int getNumNotificationChannelsForPackage(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: int getNumNotificationChannelsForPackage(java.lang.String,int,boolean)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)> -- <com.android.server.net.NetworkStatsService: android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String,android.net.netstats.provider.INetworkStatsProvider)>
<android.os.INetworkManagementService$Stub$Proxy: void setDefaultNetId(int)> -- <com.android.server.NetworkManagementService: void setDefaultNetId(int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSystemCaptionsServicePackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getSystemCaptionsServicePackageName()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1Number(java.lang.String,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimPcscf(int)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimPcscf(int)>
<android.media.IAudioService$Stub$Proxy: void setMasterMute(boolean,int,java.lang.String,int)> -- <com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)>
<android.view.IWindowManager$Stub$Proxy: void getInitialDisplaySize(int,android.graphics.Point)> -- <com.android.server.wm.WindowManagerService: void getInitialDisplaySize(int,android.graphics.Point)>
<android.hardware.IConsumerIrService$Stub$Proxy: int[] getCarrierFrequencies()> -- <com.android.server.ConsumerIrService: int[] getCarrierFrequencies()>
<android.app.IWallpaperManager$Stub$Proxy: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: int getFlagsForUid(int)> -- <com.android.server.pm.PackageManagerService: int getFlagsForUid(int)>
<android.app.INotificationManager$Stub$Proxy: java.util.List getEnabledNotificationListenerPackages()> -- <com.android.server.notification.NotificationManagerService$10: java.util.List getEnabledNotificationListenerPackages()>
<android.os.storage.IStorageManager$Stub$Proxy: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)> -- <com.android.server.StorageManagerService: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>
<android.accounts.IAccountManager$Stub$Proxy: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> -- <com.android.server.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)>
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)> -- <com.android.server.audio.AudioService: void setStreamVolume(int,int,int,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int getRingerModeExternal()> -- <com.android.server.audio.AudioService: int getRingerModeExternal()>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void isEnabled(int,com.android.internal.os.IResultReceiver)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void isEnabled(int,com.android.internal.os.IResultReceiver)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setUsbDeviceConnectionHandler(android.content.ComponentName)> -- <com.android.server.usb.UsbService: void setUsbDeviceConnectionHandler(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPersonalAppsSuspended(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPersonalAppsSuspended(android.content.ComponentName,boolean)>
<android.print.IPrintManager$Stub$Proxy: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getEffectsSuppressor()> -- <com.android.server.notification.NotificationManagerService$10: android.content.ComponentName getEffectsSuppressor()>
<android.app.backup.IBackupManager$Stub$Proxy: void dataChanged(java.lang.String)> -- <com.android.server.backup.BackupManagerService: void dataChanged(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setSystemAppInstallState(java.lang.String,boolean,int)> -- <com.android.server.pm.PackageManagerService: boolean setSystemAppInstallState(java.lang.String,boolean,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int,android.app.Notification$Action,com.android.internal.statusbar.NotificationVisibility,boolean)>
<android.app.INotificationManager$Stub$Proxy: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)> -- <com.android.server.notification.NotificationManagerService$10: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteGpsSignalQuality(int)> -- <com.android.server.am.BatteryStatsService: void noteGpsSignalQuality(int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumber(java.lang.String,java.lang.String)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void cancelSession(int,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void cancelSession(int,int)>
<android.os.INetworkManagementService$Stub$Proxy: void removeRoute(int,android.net.RouteInfo)> -- <com.android.server.NetworkManagementService: void removeRoute(int,android.net.RouteInfo)>
<android.app.trust.ITrustManager$Stub$Proxy: void reportUnlockLockout(int,int)> -- <com.android.server.trust.TrustManagerService$1: void reportUnlockLockout(int,int)>
<android.os.IUserManager$Stub$Proxy: boolean isProfile(int)> -- <com.android.server.pm.UserManagerService: boolean isProfile(int)>
<android.os.storage.IStorageManager$Stub$Proxy: int verifyEncryptionPassword(java.lang.String)> -- <com.android.server.StorageManagerService: int verifyEncryptionPassword(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)>
<android.os.IUserManager$Stub$Proxy: void setUserName(int,java.lang.String)> -- <com.android.server.pm.UserManagerService: void setUserName(int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,boolean,java.lang.String,java.lang.String,int)>
<android.app.slice.ISliceManager$Stub$Proxy: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)> -- <com.android.server.slice.SliceManagerService: void grantSlicePermission(java.lang.String,java.lang.String,android.net.Uri)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)> -- <com.android.server.usb.UsbService: void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -- <com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationListenerAccessGranted(android.content.ComponentName,boolean)>
<android.os.IUserManager$Stub$Proxy: java.lang.String getUserName()> -- <com.android.server.pm.UserManagerService: java.lang.String getUserName()>
<android.hardware.input.IInputManager$Stub$Proxy: void setCustomPointerIcon(android.view.PointerIcon)> -- <com.android.server.input.InputManagerService: void setCustomPointerIcon(android.view.PointerIcon)>
<android.app.IActivityTaskManager$Stub$Proxy: android.os.Bundle getAssistContextExtras(int)> -- <com.android.server.wm.ActivityTaskManagerService: android.os.Bundle getAssistContextExtras(int)>
<android.app.INotificationManager$Stub$Proxy: boolean hasSentValidMsg(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean hasSentValidMsg(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: android.os.IBinder getUriPermissionOwnerForActivity(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: android.os.IBinder getUriPermissionOwnerForActivity(android.os.IBinder)>
<android.media.IAudioService$Stub$Proxy: void setMultiAudioFocusEnabled(boolean)> -- <com.android.server.audio.AudioService: void setMultiAudioFocusEnabled(boolean)>
<android.media.IAudioService$Stub$Proxy: void forceVolumeControlStream(int,android.os.IBinder)> -- <com.android.server.audio.AudioService: void forceVolumeControlStream(int,android.os.IBinder)>
<android.app.contentsuggestions.IContentSuggestionsManager$Stub$Proxy: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)> -- <com.android.server.contentsuggestions.ContentSuggestionsManagerService$ContentSuggestionsManagerStub: void classifyContentSelections(int,android.app.contentsuggestions.ClassificationsRequest,android.app.contentsuggestions.IClassificationsCallback)>
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean isFunctionEnabled(java.lang.String)> -- <com.android.server.usb.UsbService: boolean isFunctionEnabled(java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> -- <com.android.server.power.PowerManagerService$BinderService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplayDensityForUser(int,int,int)> -- <com.android.server.wm.WindowManagerService: void setForcedDisplayDensityForUser(int,int,int)>
<android.app.slice.ISliceManager$Stub$Proxy: android.net.Uri[] getPinnedSlices(java.lang.String)> -- <com.android.server.slice.SliceManagerService: android.net.Uri[] getPinnedSlices(java.lang.String)>
<android.net.IIpSecService$Stub$Proxy: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)> -- <com.android.server.IpSecService: android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int,android.os.IBinder)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isImmersive(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean isImmersive(android.os.IBinder)>
<android.app.IActivityManager$Stub$Proxy: boolean isTopOfTask(android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: boolean isTopOfTask(android.os.IBinder)>
<android.app.IActivityManager$Stub$Proxy: void signalPersistentProcesses(int)> -- <com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>
<android.app.slice.ISliceManager$Stub$Proxy: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])> -- <com.android.server.slice.SliceManagerService: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.internal.telephony.ISub$Stub$Proxy: boolean isActiveSubId(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: boolean isActiveSubId(int,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)> -- <com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)>
<com.android.internal.telephony.IMms$Stub$Proxy: void setAutoPersisting(java.lang.String,boolean)> -- <com.android.server.MmsServiceBroker$BinderService: void setAutoPersisting(java.lang.String,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: void prepareUserStorage(java.lang.String,int,int,int)> -- <com.android.server.StorageManagerService: void prepareUserStorage(java.lang.String,int,int,int)>
<android.hardware.lights.ILightsManager$Stub$Proxy: void closeSession(android.os.IBinder)> -- <com.android.server.lights.LightsService$LightsManagerBinderService: void closeSession(android.os.IBinder)>
<android.media.IAudioService$Stub$Proxy: int getCurrentAudioFocus()> -- <com.android.server.audio.AudioService: int getCurrentAudioFocus()>
<android.security.IFileIntegrityService$Stub$Proxy: boolean isApkVeritySupported()> -- <com.android.server.security.FileIntegrityService$1: boolean isApkVeritySupported()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isFirstBoot()> -- <com.android.server.pm.PackageManagerService: boolean isFirstBoot()>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)> -- <com.android.internal.telephony.SmsController: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: java.lang.String getSeedAccountType()> -- <com.android.server.pm.UserManagerService: java.lang.String getSeedAccountType()>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] listAllTransports()> -- <com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransports()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean requestPinAppWidget(java.lang.String,android.content.ComponentName,android.os.Bundle,android.content.IntentSender)>
<android.app.IActivityManager$Stub$Proxy: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>
<android.os.IUserManager$Stub$Proxy: boolean isUserUnlockingOrUnlocked(int)> -- <com.android.server.pm.UserManagerService: boolean isUserUnlockingOrUnlocked(int)>
<android.app.IActivityManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)> -- <com.android.server.am.ActivityManagerService: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
<android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isOnlyCoreApps()> -- <com.android.server.pm.PackageManagerService: boolean isOnlyCoreApps()>
<android.app.IActivityTaskManager$Stub$Proxy: void reportSizeConfigurations(android.os.IBinder,int[],int[],int[])> -- <com.android.server.wm.ActivityTaskManagerService: void reportSizeConfigurations(android.os.IBinder,int[],int[],int[])>
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getDefaultGuestRestrictions()> -- <com.android.server.pm.UserManagerService: android.os.Bundle getDefaultGuestRestrictions()>
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdUserWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: int[] getAppIdUserWhitelist()>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void rename(int,int,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void rename(int,int,java.lang.String)>
<android.net.IIpSecService$Stub$Proxy: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)> -- <com.android.server.IpSecService: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getDeviceOwnerUserId()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>
<android.os.IPowerManager$Stub$Proxy: boolean setDynamicPowerSaveHint(boolean,int)> -- <com.android.server.power.PowerManagerService$BinderService: boolean setDynamicPowerSaveHint(boolean,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationDirectReplied(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationDirectReplied(java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getSimStateForSlotIndex(int)> -- <com.android.internal.telephony.SubscriptionController: int getSimStateForSlotIndex(int)>
<android.os.storage.IStorageManager$Stub$Proxy: void forgetVolume(java.lang.String)> -- <com.android.server.StorageManagerService: void forgetVolume(java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: long getAvailableRestoreTokenForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: long getAvailableRestoreTokenForUser(int,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabledForPackage(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean areNotificationsEnabledForPackage(java.lang.String,int)>
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)> -- <com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String,java.lang.String)>
<android.app.IUiModeManager$Stub$Proxy: long getCustomNightModeEnd()> -- <com.android.server.UiModeManagerService$11: long getCustomNightModeEnd()>
<android.app.IUiModeManager$Stub$Proxy: boolean isUiModeLocked()> -- <com.android.server.UiModeManagerService$11: boolean isUiModeLocked()>
<android.media.IAudioService$Stub$Proxy: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)> -- <com.android.server.audio.AudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: java.util.List getAppTasks(java.lang.String)> -- <com.android.server.wm.ActivityTaskManagerService: java.util.List getAppTasks(java.lang.String)>
<com.android.internal.telephony.ISub$Stub$Proxy: void requestEmbeddedSubscriptionInfoListRefresh(int)> -- <com.android.internal.telephony.SubscriptionController: void requestEmbeddedSubscriptionInfoListRefresh(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String)>
<android.media.midi.IMidiManager$Stub$Proxy: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)> -- <com.android.server.midi.MidiService: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>
<android.os.storage.IStorageManager$Stub$Proxy: void abortIdleMaintenance()> -- <com.android.server.StorageManagerService: void abortIdleMaintenance()>
<android.accounts.IAccountManager$Stub$Proxy: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: java.util.Map getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: boolean isInputDeviceEnabled(int)> -- <com.android.server.input.InputManagerService: boolean isInputDeviceEnabled(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)> -- <com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>
<android.app.IActivityManager$Stub$Proxy: boolean unbindService(android.app.IServiceConnection)> -- <com.android.server.am.ActivityManagerService: boolean unbindService(android.app.IServiceConnection)>
<android.os.IPowerManager$Stub$Proxy: void suppressAmbientDisplay(java.lang.String,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void suppressAmbientDisplay(java.lang.String,boolean)>
<android.app.IActivityManager$Stub$Proxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)> -- <com.android.server.am.ActivityManagerService: void serviceDoneExecuting(android.os.IBinder,int,int,int)>
<android.media.IMediaRouterService$Stub$Proxy: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void transferToRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<android.os.IDeviceIdleController$Stub$Proxy: int addPowerSaveWhitelistApps(java.util.List)> -- <com.android.server.DeviceIdleController$BinderService: int addPowerSaveWhitelistApps(java.util.List)>
<android.app.backup.IBackupManager$Stub$Proxy: void agentConnected(java.lang.String,android.os.IBinder)> -- <com.android.server.backup.BackupManagerService: void agentConnected(java.lang.String,android.os.IBinder)>
<android.os.INetworkManagementService$Stub$Proxy: void setFirewallInterfaceRule(java.lang.String,boolean)> -- <com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void addRoute(int,android.net.RouteInfo)> -- <com.android.server.NetworkManagementService: void addRoute(int,android.net.RouteInfo)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>
<android.view.IWindowManager$Stub$Proxy: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)> -- <com.android.server.wm.WindowManagerService: void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback,java.lang.CharSequence)>
<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToStack(int,int,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void moveTaskToStack(int,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isLockTaskPermitted(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskPermitted(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)> -- <com.android.server.wm.ActivityTaskManagerService: int addAppTask(android.os.IBinder,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()> -- <com.android.server.appop.AppOpsService: android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntentForUser(int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void addIdleTimer(java.lang.String,int,int)> -- <com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: java.util.List getAccessibilityShortcutTargets(int)> -- <com.android.server.accessibility.AccessibilityManagerService: java.util.List getAccessibilityShortcutTargets(int)>
<android.location.ILocationManager$Stub$Proxy: void setLocationEnabledForUser(boolean,int)> -- <com.android.server.location.LocationManagerService: void setLocationEnabledForUser(boolean,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAugmentedAutofillWhitelist(java.util.List,java.util.List,com.android.internal.os.IResultReceiver)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void retrieveNotificationList(java.lang.String,java.lang.String,int,com.android.internal.telephony.euicc.IRetrieveNotificationListCallback)>
<android.app.IActivityTaskManager$Stub$Proxy: int getLastResumedActivityUserId()> -- <com.android.server.wm.ActivityTaskManagerService: int getLastResumedActivityUserId()>
<android.media.IAudioService$Stub$Proxy: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)> -- <com.android.server.audio.AudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void setSupportedCountries(boolean,java.util.List)> -- <com.android.internal.telephony.euicc.EuiccController: void setSupportedCountries(boolean,java.util.List)>
<android.permission.IPermissionManager$Stub$Proxy: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)> -- <com.android.server.pm.permission.PermissionManagerService: void revokeDefaultPermissionsFromDisabledTelephonyDataServices(java.lang.String[],int)>
<android.app.IWallpaperManager$Stub$Proxy: boolean isWallpaperSupported(java.lang.String)> -- <com.android.server.wallpaper.WallpaperManagerService: boolean isWallpaperSupported(java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void setDebugFlags(int,int)> -- <com.android.server.StorageManagerService: void setDebugFlags(int,int)>
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize(int)> -- <com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClick(java.lang.String,com.android.internal.statusbar.NotificationVisibility)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationClick(java.lang.String,com.android.internal.statusbar.NotificationVisibility)>
<android.media.IAudioService$Stub$Proxy: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])> -- <com.android.server.audio.AudioService: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>
<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: boolean isChangeEnabledByPackageName(long,java.lang.String,int)> -- <com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByPackageName(long,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setInvalidMsgAppDemoted(java.lang.String,int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void suppressResizeConfigChanges(boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void suppressResizeConfigChanges(boolean)>
<android.app.IActivityManager$Stub$Proxy: boolean switchUser(int)> -- <com.android.server.am.ActivityManagerService: boolean switchUser(int)>
<com.android.internal.compat.IPlatformCompatNative$Stub$Proxy: boolean isChangeEnabledByUid(long,int)> -- <com.android.server.compat.PlatformCompatNative: boolean isChangeEnabledByUid(long,int)>
<android.app.IUriGrantsManager$Stub$Proxy: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)> -- <com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean removeUser(android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>
<android.media.IAudioService$Stub$Proxy: int setAllowedCapturePolicy(int)> -- <com.android.server.audio.AudioService: int setAllowedCapturePolicy(int)>
<android.service.vr.IVrManager$Stub$Proxy: void setPersistentVrModeEnabled(boolean)> -- <com.android.server.vr.VrManagerService$4: void setPersistentVrModeEnabled(boolean)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteJobStart(java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteJobStart(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.KeySet getKeySetByAlias(java.lang.String,java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int deleteKeyphraseSoundModel(int,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int deleteKeyphraseSoundModel(int,java.lang.String)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: boolean canInteractAcrossProfiles(java.lang.String)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: boolean canInteractAcrossProfiles(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void requestColorMode(int,int)> -- <com.android.server.display.DisplayManagerService$BinderService: void requestColorMode(int,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)>
<android.media.IAudioService$Stub$Proxy: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void offsetHistory(long)> -- <com.android.server.appop.AppOpsService: void offsetHistory(long)>
<android.app.IActivityManager$Stub$Proxy: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)> -- <com.android.server.am.ActivityManagerService: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
<android.app.backup.IBackupManager$Stub$Proxy: void fullTransportBackupForUser(int,java.lang.String[])> -- <com.android.server.backup.BackupManagerService: void fullTransportBackupForUser(int,java.lang.String[])>
<android.content.pm.IShortcutService$Stub$Proxy: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)> -- <com.android.server.pm.ShortcutService: boolean requestPinShortcut(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int)>
<android.os.IHardwarePropertiesManager$Stub$Proxy: float[] getDeviceTemperatures(java.lang.String,int,int)> -- <com.android.server.HardwarePropertiesManagerService: float[] getDeviceTemperatures(java.lang.String,int,int)>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo createUserWithThrow(java.lang.String,java.lang.String,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)> -- <com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastSecurityLogRetrievalTime()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getLastSecurityLogRetrievalTime()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCarrierNetworkChange(boolean)> -- <com.android.server.TelephonyRegistry: void notifyCarrierNetworkChange(boolean)>
<android.view.IWindowManager$Stub$Proxy: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)> -- <com.android.server.wm.WindowManagerService: void setShellRootAccessibilityWindow(int,int,android.view.IWindow)>
<android.net.IConnectivityManager$Stub$Proxy: boolean isActiveNetworkMetered()> -- <com.android.server.ConnectivityService: boolean isActiveNetworkMetered()>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)> -- <com.android.server.location.LocationManagerService: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteSyncStart(java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteSyncStart(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void unbindBackupAgent(android.content.pm.ApplicationInfo)> -- <com.android.server.am.ActivityManagerService: void unbindBackupAgent(android.content.pm.ApplicationInfo)>
<android.os.IUserManager$Stub$Proxy: int getUserRestrictionSource(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: int getUserRestrictionSource(java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int,boolean)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String,java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String,java.lang.String,int)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.app.usage.StorageStats queryStatsForUid(java.lang.String,int,java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: void resetRuntimePermissions()> -- <com.android.server.pm.permission.PermissionManagerService: void resetRuntimePermissions()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteHost(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void deleteHost(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getPermissionControllerPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getPermissionControllerPackageName()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)> -- <com.android.server.wm.ActivityTaskManagerService: boolean finishActivity(android.os.IBinder,int,android.content.Intent,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRunning(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>
<android.service.dreams.IDreamManager$Stub$Proxy: void stopDozing(android.os.IBinder)> -- <com.android.server.dreams.DreamManagerService$BinderService: void stopDozing(android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: boolean isDisplayRotationFrozen(int)> -- <com.android.server.wm.WindowManagerService: boolean isDisplayRotationFrozen(int)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] getTransportWhitelist()> -- <com.android.server.backup.BackupManagerService: java.lang.String[] getTransportWhitelist()>
<android.app.IActivityTaskManager$Stub$Proxy: void setDisablePreviewScreenshots(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setDisablePreviewScreenshots(android.os.IBinder,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void removeData(android.view.contentcapture.DataRemovalRequest)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void removeData(android.view.contentcapture.DataRemovalRequest)>
<android.app.role.IRoleManager$Stub$Proxy: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)> -- <com.android.server.role.RoleManagerService$Stub: void clearRoleHoldersAsUser(java.lang.String,int,int,android.os.RemoteCallback)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: int getState()> -- <com.android.server.BluetoothManagerService: int getState()>
<android.app.IActivityManager$Stub$Proxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)> -- <com.android.server.am.ActivityManagerService: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)> -- <com.android.server.TelephonyRegistry: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>
<android.os.storage.IStorageManager$Stub$Proxy: void mkdirs(java.lang.String,java.lang.String)> -- <com.android.server.StorageManagerService: void mkdirs(java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void setInheritShowWhenLocked(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setInheritShowWhenLocked(android.os.IBinder,boolean)>
<android.app.IActivityManager$Stub$Proxy: void makePackageIdle(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void makePackageIdle(java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAllHosts()> -- <com.android.server.appwidget.AppWidgetServiceImpl: void deleteAllHosts()>
<android.media.IAudioService$Stub$Proxy: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>
<android.os.IBatteryPropertiesRegistrar$Stub$Proxy: int getProperty(int,android.os.BatteryProperty)> -- <com.android.server.BatteryService$BatteryPropertiesRegistrar: int getProperty(int,android.os.BatteryProperty)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> -- <com.android.server.am.BatteryStatsService: byte[] getStatistics()>
<android.content.pm.ICrossProfileApps$Stub$Proxy: boolean canRequestInteractAcrossProfiles(java.lang.String)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: boolean canRequestInteractAcrossProfiles(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void stopAppSwitches()> -- <com.android.server.am.ActivityManagerService: void stopAppSwitches()>
<android.os.storage.IStorageManager$Stub$Proxy: void clearUserKeyAuth(int,int,byte[],byte[])> -- <com.android.server.StorageManagerService: void clearUserKeyAuth(int,int,byte[],byte[])>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void authenticateServer(java.lang.String,java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.euicc.IAuthenticateServerCallback)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> -- <com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopSensor(int,int)> -- <com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)>
<android.media.IAudioService$Stub$Proxy: android.media.IRingtonePlayer getRingtonePlayer()> -- <com.android.server.audio.AudioService: android.media.IRingtonePlayer getRingtonePlayer()>
<android.app.INotificationManager$Stub$Proxy: void requestUnbindProvider(android.service.notification.IConditionProvider)> -- <com.android.server.notification.NotificationManagerService$10: void requestUnbindProvider(android.service.notification.IConditionProvider)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> -- <com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>
<android.accounts.IAccountManager$Stub$Proxy: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: void startAddAccountSession(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)>
<android.os.storage.IStorageManager$Stub$Proxy: long getAllocatableBytes(java.lang.String,int,java.lang.String)> -- <com.android.server.StorageManagerService: long getAllocatableBytes(java.lang.String,int,java.lang.String)>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getWebSearchActivity()> -- <com.android.server.search.SearchManagerService: android.content.ComponentName getWebSearchActivity()>
<android.net.IIpSecService$Stub$Proxy: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)> -- <com.android.server.IpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>
<android.location.ILocationManager$Stub$Proxy: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: void tryPointerSpeed(int)> -- <com.android.server.input.InputManagerService: void tryPointerSpeed(int)>
<android.media.session.ISessionManager$Stub$Proxy: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePreferredActivities(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)> -- <com.android.server.notification.NotificationManagerService$10: void applyAdjustmentFromAssistant(android.service.notification.INotificationListener,android.service.notification.Adjustment)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.ComponentName getInstantAppResolverSettingsComponent()> -- <com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppResolverSettingsComponent()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setStartUserSessionMessage(android.content.ComponentName,java.lang.CharSequence)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)> -- <com.android.server.statusbar.StatusBarManagerService: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)>
<android.accounts.IAccountManager$Stub$Proxy: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)> -- <com.android.server.accounts.AccountManagerService: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)> -- <com.android.server.appop.AppOpsService: void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)>
<android.accounts.IAccountManager$Stub$Proxy: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -- <com.android.server.accounts.AccountManagerService: void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<android.view.contentcapture.IContentCaptureManager$Stub$Proxy: void getContentCaptureConditions(java.lang.String,com.android.internal.os.IResultReceiver)> -- <com.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub: void getContentCaptureConditions(java.lang.String,com.android.internal.os.IResultReceiver)>
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: int[] getAppIdWhitelist()>
<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)> -- <com.android.server.VibratorService: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiSupplicantStateChanged(int,boolean)> -- <com.android.server.am.BatteryStatsService: void noteWifiSupplicantStateChanged(int,boolean)>
<android.app.INotificationManager$Stub$Proxy: java.util.List getZenRules()> -- <com.android.server.notification.NotificationManagerService$10: java.util.List getZenRules()>
<android.os.INetworkManagementService$Stub$Proxy: void setUidCleartextNetworkPolicy(int,int)> -- <com.android.server.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getRunningAppProcesses()> -- <com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>
<android.content.pm.ILauncherApps$Stub$Proxy: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void unregisterShortcutChangeCallback(java.lang.String,android.content.pm.IShortcutChangeCallback)>
<android.net.IIpSecService$Stub$Proxy: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)> -- <com.android.server.IpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)> -- <com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void notifyPackageUse(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: void notifyPackageUse(java.lang.String,int)>
<android.location.ILocationManager$Stub$Proxy: boolean isProviderPackage(java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean isProviderPackage(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isDeviceUpgrading()> -- <com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportPerceptible(android.os.IBinder,boolean)> -- <com.android.server.inputmethod.InputMethodManagerService: void reportPerceptible(android.os.IBinder,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getAllCrossProfilePackages()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getAllCrossProfilePackages()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLocationEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setLocationEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
<android.app.INotificationManager$Stub$Proxy: boolean isNotificationListenerAccessGrantedForUser(android.content.ComponentName,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean isNotificationListenerAccessGrantedForUser(android.content.ComponentName,int)>
<android.os.IUserManager$Stub$Proxy: void evictCredentialEncryptionKey(int)> -- <com.android.server.pm.UserManagerService: void evictCredentialEncryptionKey(int)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)> -- <com.android.server.usb.UsbService: void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory,java.lang.String[],android.os.UserHandle)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneOn()> -- <com.android.server.am.BatteryStatsService: void notePhoneOn()>
<android.media.IAudioService$Stub$Proxy: void setVibrateSetting(int,int)> -- <com.android.server.audio.AudioService: void setVibrateSetting(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearCrossProfileIntentFilters(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearCrossProfileIntentFilters(android.content.ComponentName)>
<android.os.storage.IStorageManager$Stub$Proxy: void setField(java.lang.String,java.lang.String)> -- <com.android.server.StorageManagerService: void setField(java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void removeStack(int)> -- <com.android.server.wm.ActivityTaskManagerService: void removeStack(int)>
<android.content.IClipboard$Stub$Proxy: boolean hasPrimaryClip(java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: boolean hasPrimaryClip(java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onPanelRevealed(boolean,int)> -- <com.android.server.statusbar.StatusBarManagerService: void onPanelRevealed(boolean,int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)> -- <com.android.server.compat.PlatformCompat: void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: boolean setChargingStateUpdateDelayMillis(int)> -- <com.android.server.am.BatteryStatsService: boolean setChargingStateUpdateDelayMillis(int)>
<android.app.trust.ITrustManager$Stub$Proxy: void reportKeyguardShowingChanged()> -- <com.android.server.trust.TrustManagerService$1: void reportKeyguardShowingChanged()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void clearNotificationEffects()> -- <com.android.server.statusbar.StatusBarManagerService: void clearNotificationEffects()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getSecondaryUsers(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getSecondaryUsers(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean hasDeviceOwner()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasDeviceOwner()>
<android.app.INotificationManager$Stub$Proxy: void setNotificationPolicyAccessGranted(java.lang.String,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationPolicyAccessGranted(java.lang.String,boolean)>
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])> -- <com.android.server.power.PowerManagerService$BinderService: void updateWakeLockUids(android.os.IBinder,int[])>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void togglePanel()> -- <com.android.server.statusbar.StatusBarManagerService: void togglePanel()>
<android.content.pm.ICrossProfileApps$Stub$Proxy: boolean canConfigureInteractAcrossProfiles(java.lang.String)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: boolean canConfigureInteractAcrossProfiles(java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -- <com.android.server.inputmethod.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<android.net.IConnectivityManager$Stub$Proxy: void setAvoidUnvalidated(android.net.Network)> -- <com.android.server.ConnectivityService: void setAvoidUnvalidated(android.net.Network)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskFeatures(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskFeatures(android.content.ComponentName,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()> -- <com.android.server.am.BatteryStatsService: android.os.connectivity.GpsBatteryStats getGpsBatteryStats()>
<android.service.dreams.IDreamManager$Stub$Proxy: void awaken()> -- <com.android.server.dreams.DreamManagerService$BinderService: void awaken()>
<android.content.IContentService$Stub$Proxy: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)> -- <com.android.server.content.ContentService: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdWhitelistExceptIdle()> -- <com.android.server.DeviceIdleController$BinderService: int[] getAppIdWhitelistExceptIdle()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void grantRuntimePermission(java.lang.String,java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> -- <com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>
<android.app.IActivityManager$Stub$Proxy: void startSystemLockTaskMode(int)> -- <com.android.server.am.ActivityManagerService: void startSystemLockTaskMode(int)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getAllStackInfos()> -- <com.android.server.am.ActivityManagerService: java.util.List getAllStackInfos()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCurrentInputMethodSetByOwner()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCurrentInputMethodSetByOwner()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAlwaysOnVpnLockdownEnabledForUser(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabledForUser(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: boolean isOperationActive(int,int,java.lang.String)> -- <com.android.server.appop.AppOpsService: boolean isOperationActive(int,int,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: boolean isAudioServerRunning()> -- <com.android.server.audio.AudioService: boolean isAudioServerRunning()>
<android.app.IActivityManager$Stub$Proxy: void killApplication(java.lang.String,int,int,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void killApplication(java.lang.String,int,int,java.lang.String)>
<android.content.IRestrictionsManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(java.lang.String)> -- <com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: android.os.Bundle getApplicationRestrictions(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationsEnabledForPackage(java.lang.String,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setTimeZone(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setTimeZone(android.content.ComponentName,java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isPackageEnabled(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)> -- <com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)>
<android.media.session.ISessionManager$Stub$Proxy: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimIst(int)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimIst(int)>
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String,java.lang.String,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setPipVisibility(boolean)> -- <com.android.server.wm.WindowManagerService: void setPipVisibility(boolean)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network[] getAllNetworks()> -- <com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()>
<android.app.IActivityManager$Stub$Proxy: void dumpHeapFinished(java.lang.String)> -- <com.android.server.am.ActivityManagerService: void dumpHeapFinished(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)> -- <com.android.server.audio.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: void shutdown(android.os.storage.IStorageShutdownObserver)> -- <com.android.server.StorageManagerService: void shutdown(android.os.storage.IStorageShutdownObserver)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: long getCommittedStatsMerged(long,int,boolean,java.util.List,com.android.internal.app.procstats.ProcessStats)> -- <com.android.server.am.ProcessStatsService: long getCommittedStatsMerged(long,int,boolean,java.util.List,com.android.internal.app.procstats.ProcessStats)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void eraseSubscriptionsWithOptions(int,int,android.app.PendingIntent)>
<android.view.IWindowManager$Stub$Proxy: void startWindowTrace()> -- <com.android.server.wm.WindowManagerService: void startWindowTrace()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSigningCertificate(java.lang.String,byte[],int)> -- <com.android.server.pm.PackageManagerService: boolean hasSigningCertificate(java.lang.String,byte[],int)>
<android.content.pm.IPackageManager$Stub$Proxy: void restoreLabelAndIcon(android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: void restoreLabelAndIcon(android.content.ComponentName,int)>
<android.app.IActivityManager$Stub$Proxy: void requestTelephonyBugReport(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void requestTelephonyBugReport(java.lang.String,java.lang.String)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void deleteAppWidgetId(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void deleteAppWidgetId(java.lang.String,int)>
<android.os.IDeviceIdleController$Stub$Proxy: void addPowerSaveWhitelistApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void addPowerSaveWhitelistApp(java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)> -- <com.android.server.TelephonyRegistry: void notifyBarringInfoChanged(int,int,android.telephony.BarringInfo)>
<android.os.IThermalService$Stub$Proxy: boolean registerThermalEventListener(android.os.IThermalEventListener)> -- <com.android.server.power.ThermalManagerService$1: boolean registerThermalEventListener(android.os.IThermalEventListener)>
<android.os.IDeviceIdleController$Stub$Proxy: boolean isPowerSaveWhitelistExceptIdleApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: boolean isPowerSaveWhitelistExceptIdleApp(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void createConversationNotificationChannelForPackage(java.lang.String,int,java.lang.String,android.app.NotificationChannel,java.lang.String)>
<android.hardware.input.IInputManager$Stub$Proxy: void requestPointerCapture(android.os.IBinder,boolean)> -- <com.android.server.input.InputManagerService: void requestPointerCapture(android.os.IBinder,boolean)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartVideo(int)> -- <com.android.server.am.BatteryStatsService: void noteStartVideo(int)>
<android.content.IRestrictionsManager$Stub$Proxy: android.content.Intent createLocalApprovalIntent()> -- <com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: android.content.Intent createLocalApprovalIntent()>
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
<android.app.IActivityManager$Stub$Proxy: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isOverrideApnEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOverrideApnEnabled(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void lockNow(int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void lockNow(int,boolean)>
<android.media.session.ISessionManager$Stub$Proxy: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)>
<android.app.INotificationManager$Stub$Proxy: void requestBindProvider(android.content.ComponentName)> -- <com.android.server.notification.NotificationManagerService$10: void requestBindProvider(android.content.ComponentName)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])> -- <com.android.server.inputmethod.InputMethodManagerService: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>
<android.content.pm.ICrossProfileApps$Stub$Proxy: void clearInteractAcrossProfilesAppOps()> -- <com.android.server.pm.CrossProfileAppsServiceImpl: void clearInteractAcrossProfilesAppOps()>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void prepareForAuthentication(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiverInternal,java.lang.String,int,int,int,int)>
<com.android.internal.telephony.IMms$Stub$Proxy: boolean archiveStoredConversation(java.lang.String,long,boolean)> -- <com.android.server.MmsServiceBroker$BinderService: boolean archiveStoredConversation(java.lang.String,long,boolean)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: boolean isTracing()> -- <com.android.server.statusbar.StatusBarManagerService: boolean isTracing()>
<android.app.IActivityManager$Stub$Proxy: void sendIdleJobTrigger()> -- <com.android.server.am.ActivityManagerService: void sendIdleJobTrigger()>
<android.media.IMediaRouterService$Stub$Proxy: void unregisterClient(android.media.IMediaRouterClient)> -- <com.android.server.media.MediaRouterService: void unregisterClient(android.media.IMediaRouterClient)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int checkPackage(int,java.lang.String)> -- <com.android.server.appop.AppOpsService: int checkPackage(int,java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)> -- <com.android.server.inputmethod.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])> -- <com.android.internal.telephony.SmsController: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>
<android.content.pm.IPackageManager$Stub$Proxy: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: void overrideLabelAndIcon(android.content.ComponentName,java.lang.String,int,int)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getDeviceOwnerComponent(boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -- <com.android.server.wm.ActivityTaskManagerService: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
<android.os.IPowerManager$Stub$Proxy: void wakeUp(long,int,java.lang.String,java.lang.String)> -- <com.android.server.power.PowerManagerService$BinderService: void wakeUp(long,int,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)> -- <com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isBleScanAlwaysAvailable()> -- <com.android.server.BluetoothManagerService: boolean isBleScanAlwaysAvailable()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getContentCaptureServicePackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getContentCaptureServicePackageName()>
<android.hardware.usb.IUsbManager$Stub$Proxy: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)> -- <com.android.server.usb.UsbService: void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice,java.lang.String[],android.os.UserHandle)>
<android.app.IActivityManager$Stub$Proxy: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)> -- <com.android.server.am.ActivityManagerService: void registerIntentSenderCancelListener(android.content.IIntentSender,com.android.internal.os.IResultReceiver)>
<android.content.pm.IPackageManager$Stub$Proxy: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)> -- <com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<android.app.IUiModeManager$Stub$Proxy: void setCustomNightModeEnd(long)> -- <com.android.server.UiModeManagerService$11: void setCustomNightModeEnd(long)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: boolean sendFingerprintGesture(int)> -- <com.android.server.accessibility.AccessibilityManagerService: boolean sendFingerprintGesture(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingAsyncNoted(java.lang.String,com.android.internal.app.IAppOpsAsyncNotedCallback)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isDeviceProvisioningConfigApplied()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioningConfigApplied()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isFactoryResetProtectionPolicySupported()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isFactoryResetProtectionPolicySupported()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()> -- <com.android.server.am.BatteryStatsService: android.os.connectivity.CellularBatteryStats getCellularBatteryStats()>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getAppOpPermissionPackages(java.lang.String)> -- <com.android.server.pm.PackageManagerService: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void setIconVisibility(java.lang.String,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)>
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceQuota(java.lang.String)> -- <com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void requestRemoteBugReport()> -- <com.android.server.am.ActivityManagerService: void requestRemoteBugReport()>
<android.app.ISearchManager$Stub$Proxy: android.content.ComponentName getGlobalSearchActivity()> -- <com.android.server.search.SearchManagerService: android.content.ComponentName getGlobalSearchActivity()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$StackInfo getStackInfo(int,int)> -- <com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$StackInfo getStackInfo(int,int)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: void notifyRelroCreationCompleted()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: void notifyRelroCreationCompleted()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationSmartSuggestionsAdded(java.lang.String,int,int,boolean,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationSmartSuggestionsAdded(java.lang.String,int,int,boolean,boolean)>
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void unhandledBack()> -- <com.android.server.am.ActivityManagerService: void unhandledBack()>
<android.location.ILocationManager$Stub$Proxy: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections,java.lang.String)> -- <com.android.server.location.LocationManagerService: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections,java.lang.String)>
<android.hardware.ISensorPrivacyManager$Stub$Proxy: boolean isSensorPrivacyEnabled()> -- <com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: boolean isSensorPrivacyEnabled()>
<android.hardware.display.IDisplayManager$Stub$Proxy: int getPreferredWideGamutColorSpaceId()> -- <com.android.server.display.DisplayManagerService$BinderService: int getPreferredWideGamutColorSpaceId()>
<android.os.IPowerManager$Stub$Proxy: void setPowerMode(int,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void setPowerMode(int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(java.lang.String,long,int,android.content.IntentSender)> -- <com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,int,android.content.IntentSender)>
<android.media.session.ISessionManager$Stub$Proxy: void setCustomSessionPolicyProviderForTesting(java.lang.String)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void setCustomSessionPolicyProviderForTesting(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>
<android.content.IClipboard$Stub$Proxy: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)> -- <com.android.server.clipboard.ClipboardService$ClipboardImpl: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void cancelToast(java.lang.String,android.os.IBinder)> -- <com.android.server.notification.NotificationManagerService$10: void cancelToast(java.lang.String,android.os.IBinder)>
<android.location.ILocationManager$Stub$Proxy: boolean stopGnssBatch()> -- <com.android.server.location.LocationManagerService: boolean stopGnssBatch()>
<android.app.IActivityManager$Stub$Proxy: void requestInteractiveBugReportWithDescription(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: void requestInteractiveBugReportWithDescription(java.lang.String,java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: long[] getAuthenticatorIds(int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: long[] getAuthenticatorIds(int)>
<android.view.IWindowManager$Stub$Proxy: void refreshScreenCaptureDisabled(int)> -- <com.android.server.wm.WindowManagerService: void refreshScreenCaptureDisabled(int)>
<android.os.IUserManager$Stub$Proxy: boolean canAddMoreManagedProfiles(int,boolean)> -- <com.android.server.pm.UserManagerService: boolean canAddMoreManagedProfiles(int,boolean)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)> -- <com.android.server.inputmethod.InputMethodManagerService: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>
<android.app.IActivityManager$Stub$Proxy: boolean isInLockTaskMode()> -- <com.android.server.am.ActivityManagerService: boolean isInLockTaskMode()>
<android.hardware.ISensorPrivacyManager$Stub$Proxy: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)> -- <com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteResetFlashlight()> -- <com.android.server.am.BatteryStatsService: void noteResetFlashlight()>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(android.os.ParcelUuid,int)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(android.os.ParcelUuid,int)>
<android.hardware.location.IContextHubService$Stub$Proxy: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)> -- <com.android.server.location.ContextHubService: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> -- <com.android.internal.telephony.UiccPhoneBookController: int[] getAdnRecordsSize(int)>
<android.content.pm.ILauncherApps$Stub$Proxy: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startSessionDetailsActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.pm.PackageInstaller$SessionInfo,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)>
<android.location.ILocationManager$Stub$Proxy: boolean isExtraLocationControllerPackageEnabled()> -- <com.android.server.location.LocationManagerService: boolean isExtraLocationControllerPackageEnabled()>
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean generateKeyPair(android.content.ComponentName,java.lang.String,java.lang.String,android.security.keystore.ParcelableKeyGenParameterSpec,int,android.security.keymaster.KeymasterCertificateChain)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneDataConnectionState(int,boolean,int)> -- <com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean,int)>
<android.app.IActivityManager$Stub$Proxy: void setDebugApp(java.lang.String,boolean,boolean)> -- <com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void registerCallback(android.hardware.display.IDisplayManagerCallback)> -- <com.android.server.display.DisplayManagerService$BinderService: void registerCallback(android.hardware.display.IDisplayManagerCallback)>
<android.os.IUserManager$Stub$Proxy: boolean isUserRunning(int)> -- <com.android.server.pm.UserManagerService: boolean isUserRunning(int)>
<android.app.role.IRoleManager$Stub$Proxy: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)> -- <com.android.server.role.RoleManagerService$Stub: void addRoleHolderAsUser(java.lang.String,java.lang.String,int,int,android.os.RemoteCallback)>
<android.os.INetworkManagementService$Stub$Proxy: void enableNat(java.lang.String,java.lang.String)> -- <com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])> -- <com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.app.backup.IBackupManager$Stub$Proxy: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)> -- <com.android.server.backup.BackupManagerService: void updateTransportAttributesForUser(int,android.content.ComponentName,java.lang.String,android.content.Intent,java.lang.String,android.content.Intent,java.lang.CharSequence)>
<android.service.dreams.IDreamManager$Stub$Proxy: void setDreamComponentsForUser(int,android.content.ComponentName[])> -- <com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponentsForUser(int,android.content.ComponentName[])>
<android.app.IAlarmManager$Stub$Proxy: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)> -- <com.android.server.AlarmManagerService$4: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>
<android.content.IContentService$Stub$Proxy: void addStatusChangeListener(int,android.content.ISyncStatusObserver)> -- <com.android.server.content.ContentService: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
<android.app.IActivityManager$Stub$Proxy: void setProcessStateSummary(byte[])> -- <com.android.server.am.ActivityManagerService: void setProcessStateSummary(byte[])>
<android.app.INotificationManager$Stub$Proxy: boolean areNotificationsEnabled(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean areNotificationsEnabled(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)> -- <com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)> -- <com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int,boolean)>
<android.media.IAudioService$Stub$Proxy: void disableSafeMediaVolume(java.lang.String)> -- <com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)>
<android.media.IMediaRouterService$Stub$Proxy: void unregisterRouter2(android.media.IMediaRouter2)> -- <com.android.server.media.MediaRouterService: void unregisterRouter2(android.media.IMediaRouter2)>
<android.content.pm.IShortcutService$Stub$Proxy: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)> -- <com.android.server.pm.ShortcutService: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,int,int)>
<android.app.IActivityManager$Stub$Proxy: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: void moveTaskToFront(android.app.IApplicationThread,java.lang.String,int,int,android.os.Bundle)>
<android.content.pm.IPackageManager$Stub$Proxy: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)> -- <com.android.server.pm.PackageManagerService: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)> -- <com.android.server.notification.NotificationManagerService$10: void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void setTemporaryBrightness(float)> -- <com.android.server.display.DisplayManagerService$BinderService: void setTemporaryBrightness(float)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(int,int)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$ModelParamRange queryParameter(int,int)>
<android.permission.IPermissionManager$Stub$Proxy: boolean setDefaultBrowser(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean setDefaultBrowser(java.lang.String,int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int getAccessibilityWindowId(android.os.IBinder)> -- <com.android.server.accessibility.AccessibilityManagerService: int getAccessibilityWindowId(android.os.IBinder)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void launchVoiceAssistFromKeyguard()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void launchVoiceAssistFromKeyguard()>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEventsForPackage(long,long,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int getVolumeIndexForAttributes(android.media.AudioAttributes)> -- <com.android.server.audio.AudioService: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int setParameter(android.os.ParcelUuid,int,int)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int setParameter(android.os.ParcelUuid,int,int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -- <com.android.server.accessibility.AccessibilityManagerService: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>
<android.os.IUserManager$Stub$Proxy: long getUserStartRealtime()> -- <com.android.server.pm.UserManagerService: long getUserStartRealtime()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopCamera(int)> -- <com.android.server.am.BatteryStatsService: void noteStopCamera(int)>
<android.accounts.IAccountManager$Stub$Proxy: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void clearApplicationProfileData(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void clearApplicationProfileData(java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onGlobalActionsShown()> -- <com.android.server.statusbar.StatusBarManagerService: void onGlobalActionsShown()>
<android.os.IUserManager$Stub$Proxy: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])> -- <com.android.server.pm.UserManagerService: android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String,java.lang.String,int,int,java.lang.String[])>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -- <com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>
<android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)> -- <com.android.server.audio.AudioService: void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
<android.os.IDeviceIdleController$Stub$Proxy: java.lang.String[] getSystemPowerWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: java.lang.String[] getSystemPowerWhitelist()>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: int[] getPackageGids(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastNetworkLogRetrievalTime()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getLastNetworkLogRetrievalTime()>
<android.app.job.IJobScheduler$Stub$Proxy: android.app.job.JobInfo getPendingJob(int)> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: android.app.job.JobInfo getPendingJob(int)>
<android.net.INetworkPolicyManager$Stub$Proxy: void setWifiMeteredOverride(java.lang.String,int)> -- <com.android.server.net.NetworkPolicyManagerService: void setWifiMeteredOverride(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.util.List getAllPackages()> -- <com.android.server.pm.PackageManagerService: java.util.List getAllPackages()>
<android.view.IWindowManager$Stub$Proxy: android.graphics.Region getCurrentImeTouchRegion()> -- <com.android.server.wm.WindowManagerService: android.graphics.Region getCurrentImeTouchRegion()>
<android.media.IAudioService$Stub$Proxy: void setVolumePolicy(android.media.VolumePolicy)> -- <com.android.server.audio.AudioService: void setVolumePolicy(android.media.VolumePolicy)>
<android.content.pm.ILauncherApps$Stub$Proxy: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)>
<android.app.IActivityManager$Stub$Proxy: int getForegroundServiceType(android.content.ComponentName,android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: int getForegroundServiceType(android.content.ComponentName,android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
<android.app.blob.IBlobStoreManager$Stub$Proxy: void waitForIdle(android.os.RemoteCallback)> -- <com.android.server.blob.BlobStoreManagerService$Stub: void waitForIdle(android.os.RemoteCallback)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteVibratorOn(int,long)> -- <com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)>
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getCaptivePortalServerUrl()> -- <com.android.server.ConnectivityService: java.lang.String getCaptivePortalServerUrl()>
<android.app.IActivityManager$Stub$Proxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)> -- <com.android.server.am.ActivityManagerService: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstantAppCookie(java.lang.String,byte[],int)> -- <com.android.server.pm.PackageManagerService: boolean setInstantAppCookie(java.lang.String,byte[],int)>
<android.app.IActivityManager$Stub$Proxy: int checkPermission(java.lang.String,int,int)> -- <com.android.server.am.ActivityManagerService: int checkPermission(java.lang.String,int,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network getActiveNetworkForUid(int,boolean)> -- <com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUid(int,boolean)>
<android.view.IWindowManager$Stub$Proxy: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)> -- <com.android.server.wm.WindowManagerService: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
<android.hardware.location.IContextHubService$Stub$Proxy: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)> -- <com.android.server.location.ContextHubService: void queryNanoApps(int,android.hardware.location.IContextHubTransactionCallback)>
<android.app.INotificationManager$Stub$Proxy: void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener,int)> -- <com.android.server.notification.NotificationManagerService$10: void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener,int)>
<android.os.IUserManager$Stub$Proxy: void setUserIcon(int,android.graphics.Bitmap)> -- <com.android.server.pm.UserManagerService: void setUserIcon(int,android.graphics.Bitmap)>
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> -- <com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySubscriptionInfoChanged()> -- <com.android.server.TelephonyRegistry: void notifySubscriptionInfoChanged()>
<android.permission.IPermissionManager$Stub$Proxy: boolean addPermission(android.content.pm.PermissionInfo,boolean)> -- <com.android.server.pm.permission.PermissionManagerService: boolean addPermission(android.content.pm.PermissionInfo,boolean)>
<com.android.internal.telephony.IMms$Stub$Proxy: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)> -- <com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>
<android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToActiveLuiApp(java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)> -- <com.android.server.ConnectivityService: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: boolean isQuotaSupported(java.lang.String,java.lang.String)> -- <com.android.server.usage.StorageStatsService: boolean isQuotaSupported(java.lang.String,java.lang.String)>
<android.content.pm.IShortcutService$Stub$Proxy: int getMaxShortcutCountPerActivity(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: int getMaxShortcutCountPerActivity(java.lang.String,int)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.CompatibilityChangeInfo[] listUIChanges()> -- <com.android.server.compat.PlatformCompat: com.android.internal.compat.CompatibilityChangeInfo[] listUIChanges()>
<android.app.backup.IBackupManager$Stub$Proxy: boolean isBackupEnabledForUser(int)> -- <com.android.server.backup.BackupManagerService: boolean isBackupEnabledForUser(int)>
<android.app.IActivityManager$Stub$Proxy: boolean isTopActivityImmersive()> -- <com.android.server.am.ActivityManagerService: boolean isTopActivityImmersive()>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getDataManagementIntent(java.lang.String)> -- <com.android.server.backup.BackupManagerService: android.content.Intent getDataManagementIntent(java.lang.String)>
<android.hardware.usb.IUsbManager$Stub$Proxy: void resetUsbGadget()> -- <com.android.server.usb.UsbService: void resetUsbGadget()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isUninstallInQueue(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallInQueue(java.lang.String)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void registerUsageSessionObserver(int,java.lang.String[],long,long,android.app.PendingIntent,android.app.PendingIntent,java.lang.String)>
<android.app.IWallpaperManager$Stub$Proxy: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback,int,int)>
<android.net.INetworkPolicyManager$Stub$Proxy: void addUidPolicy(int,int)> -- <com.android.server.net.NetworkPolicyManagerService: void addUidPolicy(int,int)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: boolean isRecognitionActive(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: boolean isRecognitionActive(android.os.ParcelUuid)>
<android.os.INetworkManagementService$Stub$Proxy: void disableNat(java.lang.String,java.lang.String)> -- <com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)> -- <com.android.server.audio.AudioService: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>
<android.permission.IPermissionManager$Stub$Proxy: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int,int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String[] getIsimImpu(int)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimImpu(int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: boolean supportsCheckpoint()> -- <com.android.server.StorageManagerService: boolean supportsCheckpoint()>
<android.os.INetworkManagementService$Stub$Proxy: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -- <com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int,int)> -- <com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int,int)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void sortAppTargets(android.app.prediction.AppPredictionSessionId,android.content.pm.ParceledListSlice,android.app.prediction.IPredictionCallback)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: java.lang.String getEid(int,java.lang.String)> -- <com.android.internal.telephony.euicc.EuiccController: java.lang.String getEid(int,java.lang.String)>
<android.app.job.IJobScheduler$Stub$Proxy: void cancel(int)> -- <com.android.server.job.JobSchedulerService$JobSchedulerStub: void cancel(int)>
<android.content.pm.IPackageManager$Stub$Proxy: int movePackage(java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: int movePackage(java.lang.String,java.lang.String)>
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)> -- <com.android.server.accounts.AccountManagerService: boolean addAccountExplicitlyWithVisibility(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map)>
<android.app.IActivityManager$Stub$Proxy: void resizeTask(int,android.graphics.Rect,int)> -- <com.android.server.am.ActivityManagerService: void resizeTask(int,android.graphics.Rect,int)>
<android.app.IActivityManager$Stub$Proxy: void backgroundWhitelistUid(int)> -- <com.android.server.am.ActivityManagerService: void backgroundWhitelistUid(int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)> -- <com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList(int)> -- <com.android.server.inputmethod.InputMethodManagerService: java.util.List getEnabledInputMethodList(int)>
<android.media.IMediaRouterService$Stub$Proxy: boolean isPlaybackActive(android.media.IMediaRouterClient)> -- <com.android.server.media.MediaRouterService: boolean isPlaybackActive(android.media.IMediaRouterClient)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean activeServiceSupportsAssist()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsAssist()>
<android.app.IActivityManager$Stub$Proxy: void requestInteractiveBugReport()> -- <com.android.server.am.ActivityManagerService: void requestInteractiveBugReport()>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String[] filterAppsEligibleForBackupForUser(int,java.lang.String[])> -- <com.android.server.backup.BackupManagerService: java.lang.String[] filterAppsEligibleForBackupForUser(int,java.lang.String[])>
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> -- <com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>
<android.media.midi.IMidiManager$Stub$Proxy: void closeDevice(android.os.IBinder,android.os.IBinder)> -- <com.android.server.midi.MidiService: void closeDevice(android.os.IBinder,android.os.IBinder)>
<android.app.role.IRoleManager$Stub$Proxy: boolean addRoleHolderFromController(java.lang.String,java.lang.String)> -- <com.android.server.role.RoleManagerService$Stub: boolean addRoleHolderFromController(java.lang.String,java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String,java.lang.String,android.os.UserHandle)>
<android.os.IVibratorService$Stub$Proxy: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)> -- <com.android.server.VibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean resetAllCellBroadcastRanges(int)> -- <com.android.internal.telephony.SmsController: boolean resetAllCellBroadcastRanges(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean updateOverrideApn(android.content.ComponentName,int,android.telephony.data.ApnSetting)>
<android.app.INotificationManager$Stub$Proxy: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)> -- <com.android.server.notification.NotificationManagerService$10: void cancelNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> -- <com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)>
<android.print.IPrintManager$Stub$Proxy: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId,int)>
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintServiceRecommendations(int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintServiceRecommendations(int)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: java.lang.String[] getAllPackages()> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: java.lang.String[] getAllPackages()>
<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)> -- <com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,java.lang.String,int,boolean)>
<android.app.INotificationManager$Stub$Proxy: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)> -- <com.android.server.notification.NotificationManagerService$10: boolean isNotificationAssistantAccessGranted(android.content.ComponentName)>
<android.media.IAudioService$Stub$Proxy: void setRttEnabled(boolean)> -- <com.android.server.audio.AudioService: void setRttEnabled(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void dumpProfiles(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void dumpProfiles(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void setBluetoothA2dpOn(boolean)> -- <com.android.server.audio.AudioService: void setBluetoothA2dpOn(boolean)>
<android.app.IActivityManager$Stub$Proxy: android.content.res.Configuration getConfiguration()> -- <com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()>
<android.media.session.ISessionManager$Stub$Proxy: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String)> -- <com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: void rebootSafeMode(boolean,boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void rebootSafeMode(boolean,boolean)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)> -- <com.android.server.accessibility.AccessibilityManagerService: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>
<android.media.IAudioService$Stub$Proxy: void releaseRecorder(int)> -- <com.android.server.audio.AudioService: void releaseRecorder(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getStorageEncryptionStatus(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(java.lang.String,int)>
<android.content.pm.ILauncherApps$Stub$Proxy: void uncacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void uncacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -- <com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
<android.location.ILocationManager$Stub$Proxy: boolean geocoderIsPresent()> -- <com.android.server.location.LocationManagerService: boolean geocoderIsPresent()>
<android.view.IWindowManager$Stub$Proxy: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)> -- <com.android.server.wm.WindowManagerService: void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
<android.app.backup.IBackupManager$Stub$Proxy: void backupNowForUser(int)> -- <com.android.server.backup.BackupManagerService: void backupNowForUser(int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getPackagesForUid(int)> -- <com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int setGlobalPrivateDns(android.content.ComponentName,int,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setForwardedInsets(int,android.graphics.Insets)> -- <com.android.server.wm.WindowManagerService: void setForwardedInsets(int,android.graphics.Insets)>
<android.app.INotificationManager$Stub$Proxy: void clearRequestedListenerHints(android.service.notification.INotificationListener)> -- <com.android.server.notification.NotificationManagerService$10: void clearRequestedListenerHints(android.service.notification.INotificationListener)>
<android.app.IActivityManager$Stub$Proxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
<android.os.storage.IStorageManager$Stub$Proxy: void fixupAppDir(java.lang.String)> -- <com.android.server.StorageManagerService: void fixupAppDir(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean isRestricted()> -- <com.android.server.pm.UserManagerService: boolean isRestricted()>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void setActiveUser(int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void setActiveUser(int)>
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getPreferredActivityBackup(int)> -- <com.android.server.pm.PackageManagerService: byte[] getPreferredActivityBackup(int)>
<android.view.IWindowManager$Stub$Proxy: void addWindowToken(android.os.IBinder,int,int)> -- <com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int,int)>
<android.os.IDeviceIdleController$Stub$Proxy: int[] getAppIdTempWhitelist()> -- <com.android.server.DeviceIdleController$BinderService: int[] getAppIdTempWhitelist()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)> -- <com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: java.lang.String getPrimaryStorageUuid()> -- <com.android.server.StorageManagerService: java.lang.String getPrimaryStorageUuid()>
<android.app.INotificationManager$Stub$Proxy: void setNotificationAssistantAccessGrantedForUser(android.content.ComponentName,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationAssistantAccessGrantedForUser(android.content.ComponentName,int,boolean)>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onConnectedStateChanged(int)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onConnectedStateChanged(int)>
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> -- <com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: android.os.IBinder startOrGetTestNetworkService()> -- <com.android.server.ConnectivityService: android.os.IBinder startOrGetTestNetworkService()>
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabledForUser(java.lang.String,int)> -- <com.android.server.location.LocationManagerService: boolean isProviderEnabledForUser(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getAttentionServicePackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getAttentionServicePackageName()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.KeySet getSigningKeySet(java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.KeySet getSigningKeySet(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void setExtraLocationControllerPackageEnabled(boolean)> -- <com.android.server.location.LocationManagerService: void setExtraLocationControllerPackageEnabled(boolean)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerSystemAction(android.app.RemoteAction,int)> -- <com.android.server.accessibility.AccessibilityManagerService: void registerSystemAction(android.app.RemoteAction,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)> -- <com.android.server.wm.ActivityTaskManagerService: int setVrMode(android.os.IBinder,boolean,android.content.ComponentName)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getDspModuleProperties()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$ModuleProperties getDspModuleProperties()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>
<android.content.IContentService$Stub$Proxy: void resetTodayStats()> -- <com.android.server.content.ContentService: void resetTodayStats()>
<android.location.ILocationManager$Stub$Proxy: void removeGnssBatchingCallback()> -- <com.android.server.location.LocationManagerService: void removeGnssBatchingCallback()>
<android.media.IAudioService$Stub$Proxy: int getAllowedCapturePolicy()> -- <com.android.server.audio.AudioService: int getAllowedCapturePolicy()>
<com.android.internal.telephony.ISub$Stub$Proxy: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)> -- <com.android.internal.telephony.SubscriptionController: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback)>
<android.content.IContentService$Stub$Proxy: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -- <com.android.server.content.ContentService: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isUsingUnifiedPassword(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUsingUnifiedPassword(android.content.ComponentName)>
<android.service.vr.IVrManager$Stub$Proxy: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)> -- <com.android.server.vr.VrManagerService$4: void setVr2dDisplayProperties(android.app.Vr2dDisplayProperties)>
<android.content.pm.IShortcutService$Stub$Proxy: int getIconMaxDimensions(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: int getIconMaxDimensions(java.lang.String,int)>
<android.os.IThermalService$Stub$Proxy: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)> -- <com.android.server.power.ThermalManagerService$1: android.os.CoolingDevice[] getCurrentCoolingDevicesWithType(int)>
<android.app.backup.IBackupManager$Stub$Proxy: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)> -- <com.android.server.backup.BackupManagerService: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver,android.app.backup.IBackupManagerMonitor,int)>
<android.view.IWindowManager$Stub$Proxy: void freezeDisplayRotation(int,int)> -- <com.android.server.wm.WindowManagerService: void freezeDisplayRotation(int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyEmergencyNumberList(int,int)> -- <com.android.server.TelephonyRegistry: void notifyEmergencyNumberList(int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -- <com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>
<android.hardware.location.IContextHubService$Stub$Proxy: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)> -- <com.android.server.location.ContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>
<android.app.INotificationManager$Stub$Proxy: android.content.ComponentName getAllowedNotificationAssistant()> -- <com.android.server.notification.NotificationManagerService$10: android.content.ComponentName getAllowedNotificationAssistant()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean packageHasActiveAdmins(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>
<android.app.role.IRoleManager$Stub$Proxy: java.lang.String getDefaultSmsPackage(int)> -- <com.android.server.role.RoleManagerService$Stub: java.lang.String getDefaultSmsPackage(int)>
<android.net.IIpConnectivityMetrics$Stub$Proxy: boolean removeNetdEventCallback(int)> -- <com.android.server.connectivity.IpConnectivityMetrics$Impl: boolean removeNetdEventCallback(int)>
<android.app.IActivityManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])> -- <com.android.server.am.ActivityManagerService: void updateLockTaskPackages(int,java.lang.String[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean approveCaCert(java.lang.String,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>
<android.view.IWindowManager$Stub$Proxy: boolean isSafeModeEnabled()> -- <com.android.server.wm.WindowManagerService: boolean isSafeModeEnabled()>
<android.content.pm.ICrossProfileApps$Stub$Proxy: java.util.List getTargetUserProfiles(java.lang.String)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfiles(java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: byte[] getBackupPayload(int)> -- <com.android.server.notification.NotificationManagerService$10: byte[] getBackupPayload(int)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)> -- <com.android.server.wm.ActivityTaskManagerService: boolean requestAutofillData(android.app.IAssistDataReceiver,android.os.Bundle,android.os.IBinder,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>
<android.app.INotificationManager$Stub$Proxy: int getAppsBypassingDndCount(int)> -- <com.android.server.notification.NotificationManagerService$10: int getAppsBypassingDndCount(int)>
<android.app.INotificationManager$Stub$Proxy: boolean canShowBadge(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: boolean canShowBadge(java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)> -- <com.android.server.wm.ActivityTaskManagerService: void reportAssistContextExtras(android.os.IBinder,android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,android.net.Uri)>
<android.content.IContentService$Stub$Proxy: android.content.SyncAdapterType[] getSyncAdapterTypes()> -- <com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidPermission(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void deselectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<android.app.IActivityManager$Stub$Proxy: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)> -- <com.android.server.am.ActivityManagerService: void revokeUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>
<android.os.IUserManager$Stub$Proxy: int getUserHandle(int)> -- <com.android.server.pm.UserManagerService: int getUserHandle(int)>
<android.media.IAudioService$Stub$Proxy: int getStreamMinVolume(int)> -- <com.android.server.audio.AudioService: int getStreamMinVolume(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence,int)> -- <com.android.server.pm.PackageManagerService: void setHarmfulAppWarning(java.lang.String,java.lang.CharSequence,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void startSystemLockTaskMode(int)> -- <com.android.server.wm.ActivityTaskManagerService: void startSystemLockTaskMode(int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean shouldAvoidBadWifi()> -- <com.android.server.ConnectivityService: boolean shouldAvoidBadWifi()>
<android.app.IActivityManager$Stub$Proxy: boolean isAppFreezerSupported()> -- <com.android.server.am.ActivityManagerService: boolean isAppFreezerSupported()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearDeviceOwner(java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwner(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void bootAnimationComplete()> -- <com.android.server.am.ActivityManagerService: void bootAnimationComplete()>
<android.net.IConnectivityManager$Stub$Proxy: void setVpnPackageAuthorization(java.lang.String,int,int)> -- <com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,int)>
<android.view.IWindowManager$Stub$Proxy: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)> -- <com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>
<android.app.IActivityManager$Stub$Proxy: boolean killProcessesBelowForeground(java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean killProcessesBelowForeground(java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -- <com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.media.IAudioService$Stub$Proxy: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)> -- <com.android.server.audio.AudioService: void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher)>
<android.os.INetworkManagementService$Stub$Proxy: void setUidMeteredNetworkBlacklist(int,boolean)> -- <com.android.server.NetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String getImsSmsFormatForSubscriber(int)> -- <com.android.internal.telephony.SmsController: java.lang.String getImsSmsFormatForSubscriber(int)>
<android.app.INotificationManager$Stub$Proxy: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)> -- <com.android.server.notification.NotificationManagerService$10: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>
<com.android.internal.telephony.ISub$Stub$Proxy: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isProfileActivePasswordSufficientForParent(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileActivePasswordSufficientForParent(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getManagedProfileMaximumTimeOff(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getManagedProfileMaximumTimeOff(android.content.ComponentName)>
<android.view.IWindowManager$Stub$Proxy: void syncInputTransactions()> -- <com.android.server.wm.WindowManagerService: void syncInputTransactions()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean isInLockTaskMode()> -- <com.android.server.wm.ActivityTaskManagerService: boolean isInLockTaskMode()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setOverrideApnsEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setOverrideApnsEnabled(android.content.ComponentName,boolean)>
<android.app.INotificationManager$Stub$Proxy: int getBlockedAppCount(int)> -- <com.android.server.notification.NotificationManagerService$10: int getBlockedAppCount(int)>
<android.app.IUiModeManager$Stub$Proxy: void disableCarMode(int)> -- <com.android.server.UiModeManagerService$11: void disableCarMode(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)> -- <com.android.server.appop.AppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>
<android.view.IWindowManager$Stub$Proxy: boolean isKeyguardSecure(int)> -- <com.android.server.wm.WindowManagerService: boolean isKeyguardSecure(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.os.Bundle getSuspendedPackageAppExtras(java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)> -- <com.android.server.ConnectivityService: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int stopUser(android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int stopUser(android.content.ComponentName,android.os.UserHandle)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getLastBugReportRequestTime()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getLastBugReportRequestTime()>
<android.app.IActivityManager$Stub$Proxy: void setPackageScreenCompatMode(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)> -- <com.android.server.am.ActivityManagerService: void startRecentsActivity(android.content.Intent,android.app.IAssistDataReceiver,android.view.IRecentsAnimationRunner)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId(java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberId(java.lang.String)>
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)> -- <com.android.server.pm.UserManagerService: android.os.Bundle getApplicationRestrictionsForUser(java.lang.String,int)>
<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>
<android.app.IActivityManager$Stub$Proxy: void addPackageDependency(java.lang.String)> -- <com.android.server.am.ActivityManagerService: void addPackageDependency(java.lang.String)>
<android.media.projection.IMediaProjectionManager$Stub$Proxy: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)> -- <com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>
<android.app.IActivityManager$Stub$Proxy: void killPackageDependents(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void killPackageDependents(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean performDexOptMode(java.lang.String,boolean,java.lang.String,boolean,boolean,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getSharedSystemSharedLibraryPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getSharedSystemSharedLibraryPackageName()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>
<android.app.INotificationManager$Stub$Proxy: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)> -- <com.android.server.notification.NotificationManagerService$10: java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule)>
<android.app.INotificationManager$Stub$Proxy: int getBlockedChannelCount(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: int getBlockedChannelCount(java.lang.String,int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int,int,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean releaseActivityInstance(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean releaseActivityInstance(android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: int encryptStorage(int,java.lang.String)> -- <com.android.server.StorageManagerService: int encryptStorage(int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void onBackPressedOnTaskRoot(android.os.IBinder,android.app.IRequestFinishCallback)> -- <com.android.server.wm.ActivityTaskManagerService: void onBackPressedOnTaskRoot(android.os.IBinder,android.app.IRequestFinishCallback)>
<android.media.IMediaRouterService$Stub$Proxy: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void deselectRouteWithRouter2(android.media.IMediaRouter2,java.lang.String,android.media.MediaRoute2Info)>
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getInstantAppCookie(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: byte[] getInstantAppCookie(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getNameForUid(int)> -- <com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>
<android.app.role.IRoleManager$Stub$Proxy: java.util.List getRoleHoldersAsUser(java.lang.String,int)> -- <com.android.server.role.RoleManagerService$Stub: java.util.List getRoleHoldersAsUser(java.lang.String,int)>
<android.content.IRestrictionsManager$Stub$Proxy: boolean hasRestrictionsProvider()> -- <com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: boolean hasRestrictionsProvider()>
<android.content.rollback.IRollbackManager$Stub$Proxy: int notifyStagedSession(int)> -- <com.android.server.rollback.RollbackManagerServiceImpl: int notifyStagedSession(int)>
<android.app.IActivityManager$Stub$Proxy: void setTaskResizeable(int,int)> -- <com.android.server.am.ActivityManagerService: void setTaskResizeable(int,int)>
<android.os.IPowerManager$Stub$Proxy: boolean isScreenBrightnessBoosted()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isScreenBrightnessBoosted()>
<android.app.IActivityManager$Stub$Proxy: int getUidForIntentSender(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: int getUidForIntentSender(android.content.IIntentSender)>
<android.media.IAudioService$Stub$Proxy: void disableRingtoneSync(int)> -- <com.android.server.audio.AudioService: void disableRingtoneSync(int)>
<android.content.pm.IShortcutService$Stub$Proxy: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)> -- <com.android.server.pm.ShortcutService: boolean addDynamicShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean hideSessionFromSession(android.os.IBinder)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean hideSessionFromSession(android.os.IBinder)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>
<android.app.INotificationManager$Stub$Proxy: void setShowBadge(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setShowBadge(java.lang.String,int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void setShowWhenLocked(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setShowWhenLocked(android.os.IBinder,boolean)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteModemControllerActivity(android.telephony.ModemActivityInfo)> -- <com.android.server.am.BatteryStatsService: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.health.HealthStatsParceler takeUidSnapshot(int)> -- <com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler takeUidSnapshot(int)>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSizeForSubscriber(int,int)> -- <com.android.internal.telephony.UiccPhoneBookController: int[] getAdnRecordsSizeForSubscriber(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setAutoTimeEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeEnabled(android.content.ComponentName,boolean)>
<android.os.IBatteryPropertiesRegistrar$Stub$Proxy: void scheduleUpdate()> -- <com.android.server.BatteryService$BatteryPropertiesRegistrar: void scheduleUpdate()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void reportSuccessfulPasswordAttempt(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void finishPackageInstall(int,boolean)> -- <com.android.server.pm.PackageManagerService: void finishPackageInstall(int,boolean)>
<android.os.storage.IStorageManager$Stub$Proxy: void partitionPublic(java.lang.String)> -- <com.android.server.StorageManagerService: void partitionPublic(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void unloadSoundEffects()> -- <com.android.server.audio.AudioService: void unloadSoundEffects()>
<android.service.vr.IVrManager$Stub$Proxy: void setAndBindCompositor(java.lang.String)> -- <com.android.server.vr.VrManagerService$4: void setAndBindCompositor(java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)> -- <com.android.server.ConnectivityService: android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void clearProfileOwner(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwner(android.content.ComponentName)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void showPinningEnterExitToast(boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void showPinningEnterExitToast(boolean)>
<android.view.IWindowManager$Stub$Proxy: void setStrictModeVisualIndicatorPreference(java.lang.String)> -- <com.android.server.wm.WindowManagerService: void setStrictModeVisualIndicatorPreference(java.lang.String)>
<android.hardware.location.IContextHubService$Stub$Proxy: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)> -- <com.android.server.location.ContextHubService: void loadNanoAppOnHub(int,android.hardware.location.IContextHubTransactionCallback,android.hardware.location.NanoAppBinary)>
<android.app.IActivityManager$Stub$Proxy: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: boolean updateMccMncConfiguration(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getLockTaskPackages(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: android.os.IBinder getWindowToken(int,int)> -- <com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)> -- <com.android.server.appop.AppOpsService: void getHistoricalOps(int,java.lang.String,java.lang.String,java.util.List,int,long,long,int,android.os.RemoteCallback)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean isAppEligibleForBackupForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: boolean isAppEligibleForBackupForUser(int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
<android.hardware.display.IDisplayManager$Stub$Proxy: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String)>
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)> -- <com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<android.os.IUserManager$Stub$Proxy: void setDefaultGuestRestrictions(android.os.Bundle)> -- <com.android.server.pm.UserManagerService: void setDefaultGuestRestrictions(android.os.Bundle)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: java.lang.CharSequence getHarmfulAppWarning(java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationPolicyAccessGrantedForUser(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationPolicyAccessGrantedForUser(java.lang.String,int,boolean)>
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int loadGenericSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean isImsSmsSupportedForSubscriber(int)> -- <com.android.internal.telephony.SmsController: boolean isImsSmsSupportedForSubscriber(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void restorePreferredActivities(byte[],int)> -- <com.android.server.pm.PackageManagerService: void restorePreferredActivities(byte[],int)>
<android.app.IActivityManager$Stub$Proxy: void setProcessLimit(int)> -- <com.android.server.am.ActivityManagerService: void setProcessLimit(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void stopLocalVoiceInteraction(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void stopLocalVoiceInteraction(android.os.IBinder)>
<android.content.rollback.IRollbackManager$Stub$Proxy: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)> -- <com.android.server.rollback.RollbackManagerServiceImpl: void commitRollback(int,android.content.pm.ParceledListSlice,java.lang.String,android.content.IntentSender)>
<android.app.IActivityManager$Stub$Proxy: void positionTaskInStack(int,int,int)> -- <com.android.server.am.ActivityManagerService: void positionTaskInStack(int,int,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setUidMode(int,int,int)> -- <com.android.server.appop.AppOpsService: void setUidMode(int,int,int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void updateSession(int,android.view.autofill.AutofillId,android.graphics.Rect,android.view.autofill.AutofillValue,int,int,int)>
<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)> -- <com.android.server.notification.NotificationManagerService$10: void createNotificationChannelGroups(java.lang.String,android.content.pm.ParceledListSlice)>
<android.app.INotificationManager$Stub$Proxy: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)> -- <com.android.server.notification.NotificationManagerService$10: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>
<android.app.IActivityManager$Stub$Proxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -- <com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getPackagesForOps(int[])> -- <com.android.server.appop.AppOpsService: java.util.List getPackagesForOps(int[])>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBleScanStarted(android.os.WorkSource,boolean)> -- <com.android.server.am.BatteryStatsService: void noteBleScanStarted(android.os.WorkSource,boolean)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getActiveSubInfoCountMax()> -- <com.android.internal.telephony.SubscriptionController: int getActiveSubInfoCountMax()>
<android.app.IActivityTaskManager$Stub$Proxy: int getLockTaskModeState()> -- <com.android.server.wm.ActivityTaskManagerService: int getLockTaskModeState()>
<android.content.pm.ILauncherApps$Stub$Proxy: void cacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void cacheShortcuts(java.lang.String,java.lang.String,java.util.List,android.os.UserHandle,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getPermittedInputMethods(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethods(android.content.ComponentName)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: int getTargetSdkVersionForPackage(java.lang.String)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: int getTargetSdkVersionForPackage(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean willActivityBeVisible(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: boolean willActivityBeVisible(android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.VolumeInfo[] getVolumes(int)> -- <com.android.server.StorageManagerService: android.os.storage.VolumeInfo[] getVolumes(int)>
<android.hardware.ISensorPrivacyManager$Stub$Proxy: void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)> -- <com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>
<android.os.storage.IStorageManager$Stub$Proxy: android.os.storage.DiskInfo[] getDisks()> -- <com.android.server.StorageManagerService: android.os.storage.DiskInfo[] getDisks()>
<android.content.pm.IPackageManager$Stub$Proxy: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)> -- <com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean startViewCalendarEventInManagedProfile(java.lang.String,long,long,long,boolean,int)>
<android.app.INotificationManager$Stub$Proxy: int getHintsFromListener(android.service.notification.INotificationListener)> -- <com.android.server.notification.NotificationManagerService$10: int getHintsFromListener(android.service.notification.INotificationListener)>
<android.app.INotificationManager$Stub$Proxy: boolean matchesCallFilter(android.os.Bundle)> -- <com.android.server.notification.NotificationManagerService$10: boolean matchesCallFilter(android.os.Bundle)>
<android.app.INotificationManager$Stub$Proxy: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)> -- <com.android.server.notification.NotificationManagerService$10: void createNotificationChannelsForPackage(java.lang.String,int,android.content.pm.ParceledListSlice)>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)> -- <com.android.server.DropBoxManagerService$2: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long,java.lang.String)>
<android.os.IDeviceIdentifiersPolicyService$Stub$Proxy: java.lang.String getSerial()> -- <com.android.server.os.DeviceIdentifiersPolicyService$DeviceIdentifiersPolicy: java.lang.String getSerial()>
<android.content.pm.IPackageManager$Stub$Proxy: void systemReady()> -- <com.android.server.pm.PackageManagerService: void systemReady()>
<android.accounts.IAccountManager$Stub$Proxy: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)> -- <com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>
<android.hardware.input.IInputManager$Stub$Proxy: int isMicMuted()> -- <com.android.server.input.InputManagerService: int isMicMuted()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId(java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceId(java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void restartActivityProcessIfVisible(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void restartActivityProcessIfVisible(android.os.IBinder)>
<android.app.IWallpaperManager$Stub$Proxy: boolean isSetWallpaperAllowed(java.lang.String)> -- <com.android.server.wallpaper.WallpaperManagerService: boolean isSetWallpaperAllowed(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)> -- <com.android.server.am.ActivityManagerService: int stopUserWithDelayedLocking(int,boolean,android.app.IStopUserCallback)>
<android.app.IWallpaperManager$Stub$Proxy: android.app.WallpaperColors getWallpaperColors(int,int,int)> -- <com.android.server.wallpaper.WallpaperManagerService: android.app.WallpaperColors getWallpaperColors(int,int,int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int startVoiceActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
<android.media.session.ISessionManager$Stub$Proxy: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)> -- <com.android.server.appop.AppOpsService: void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)> -- <com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: java.util.List getEnrolledFingerprints(int,java.lang.String)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: java.util.List getEnrolledFingerprints(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.dex.IArtManager getArtManager()> -- <com.android.server.pm.PackageManagerService: android.content.pm.dex.IArtManager getArtManager()>
<android.media.session.ISessionManager$Stub$Proxy: void dispatchAdjustVolume(java.lang.String,java.lang.String,int,int,int)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void dispatchAdjustVolume(java.lang.String,java.lang.String,int,int,int)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: long[] getAuthenticatorIds()> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: long[] getAuthenticatorIds()>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getSystemAvailableFeatures()> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getSystemAvailableFeatures()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationSettingsViewed(java.lang.String)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationSettingsViewed(java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void hideAuthenticationDialog()> -- <com.android.server.statusbar.StatusBarManagerService: void hideAuthenticationDialog()>
<android.hardware.display.IDisplayManager$Stub$Proxy: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setDockedStackDividerTouchRegion(android.graphics.Rect)> -- <com.android.server.wm.WindowManagerService: void setDockedStackDividerTouchRegion(android.graphics.Rect)>
<android.location.ILocationManager$Stub$Proxy: android.location.LocationTime getGnssTimeMillis()> -- <com.android.server.location.LocationManagerService: android.location.LocationTime getGnssTimeMillis()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isCaCertApproved(java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCaCertApproved(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(android.os.IBinder,boolean)> -- <com.android.server.audio.AudioService: void setSpeakerphoneOn(android.os.IBinder,boolean)>
<android.permission.IPermissionManager$Stub$Proxy: void updatePermissionFlagsForAllApps(int,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlagsForAllApps(int,int,int)>
<android.content.pm.IShortcutService$Stub$Proxy: void enableShortcuts(java.lang.String,java.util.List,int)> -- <com.android.server.pm.ShortcutService: void enableShortcuts(java.lang.String,java.util.List,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getDefaultTextClassifierPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getDefaultTextClassifierPackageName()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean setRequiredForSystemUser(java.lang.String,boolean)> -- <com.android.server.pm.PackageManagerService: boolean setRequiredForSystemUser(java.lang.String,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: com.android.internal.net.VpnConfig getVpnConfig(int)> -- <com.android.server.ConnectivityService: com.android.internal.net.VpnConfig getVpnConfig(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getAllSubInfoCount(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: int getAllSubInfoCount(java.lang.String,java.lang.String)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void notifyAccessibilityButtonVisibilityChanged(boolean)> -- <com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonVisibilityChanged(boolean)>
<android.app.backup.IBackupManager$Stub$Proxy: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -- <com.android.server.backup.BackupManagerService: void acknowledgeFullBackupOrRestoreForUser(int,int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void shutdown()> -- <com.android.server.statusbar.StatusBarManagerService: void shutdown()>
<android.app.IActivityTaskManager$Stub$Proxy: void setRequestedOrientation(android.os.IBinder,int)> -- <com.android.server.wm.ActivityTaskManagerService: void setRequestedOrientation(android.os.IBinder,int)>
<android.os.storage.IStorageManager$Stub$Proxy: int getEncryptionState()> -- <com.android.server.StorageManagerService: int getEncryptionState()>
<android.hardware.input.IInputManager$Stub$Proxy: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)> -- <com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>
<android.media.IAudioService$Stub$Proxy: int removePreferredDeviceForStrategy(int)> -- <com.android.server.audio.AudioService: int removePreferredDeviceForStrategy(int)>
<com.android.internal.telephony.ISms$Stub$Proxy: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.SmsController: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -- <com.android.internal.telephony.SmsController: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getEuiccInfo2(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccInfo2Callback)>
<android.location.ILocationManager$Stub$Proxy: void setExtraLocationControllerPackage(java.lang.String)> -- <com.android.server.location.LocationManagerService: void setExtraLocationControllerPackage(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties,java.lang.String,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean hasRestrictedProfiles()> -- <com.android.server.pm.UserManagerService: boolean hasRestrictedProfiles()>
<android.net.IEthernetManager$Stub$Proxy: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)> -- <com.android.server.ethernet.EthernetServiceImpl: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfilePackages(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfilePackages(android.content.ComponentName)>
<android.app.IActivityManager$Stub$Proxy: void setPersistentVrThread(int)> -- <com.android.server.am.ActivityManagerService: void setPersistentVrThread(int)>
<com.android.internal.telephony.ISub$Stub$Proxy: android.os.ParcelUuid createSubscriptionGroup(int[],java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: android.os.ParcelUuid createSubscriptionGroup(int[],java.lang.String)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryEventStats(int,long,long,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest getDefaultRequest()> -- <com.android.server.ConnectivityService: android.net.NetworkRequest getDefaultRequest()>
<android.os.IUserManager$Stub$Proxy: boolean isUserNameSet(int)> -- <com.android.server.pm.UserManagerService: boolean isUserNameSet(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void activityPaused(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void activityPaused(android.os.IBinder)>
<android.content.IRestrictionsManager$Stub$Proxy: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)> -- <com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: void notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)>
<android.content.pm.IPackageManager$Stub$Proxy: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.graphics.Bitmap getInstantAppIcon(java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getProcessesInErrorState()> -- <com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()>
<android.hardware.display.IDisplayManager$Stub$Proxy: void forgetWifiDisplay(java.lang.String)> -- <com.android.server.display.DisplayManagerService$BinderService: void forgetWifiDisplay(java.lang.String)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)> -- <com.android.server.display.DisplayManagerService$BinderService: void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback,android.view.Surface)>
<android.app.backup.IBackupManager$Stub$Proxy: void adbBackup(int,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])> -- <com.android.server.backup.BackupManagerService: void adbBackup(int,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>
<com.android.internal.telephony.IMms$Stub$Proxy: boolean deleteStoredMessage(java.lang.String,android.net.Uri)> -- <com.android.server.MmsServiceBroker$BinderService: boolean deleteStoredMessage(java.lang.String,android.net.Uri)>
<android.app.IActivityManager$Stub$Proxy: void requestFullBugReport()> -- <com.android.server.am.ActivityManagerService: void requestFullBugReport()>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)>
<android.app.IUiModeManager$Stub$Proxy: void disableCarModeByCallingPackage(int,java.lang.String)> -- <com.android.server.UiModeManagerService$11: void disableCarModeByCallingPackage(int,java.lang.String)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void disassociateEmbeddedHierarchy(android.os.IBinder)> -- <com.android.server.accessibility.AccessibilityManagerService: void disassociateEmbeddedHierarchy(android.os.IBinder)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseCallState(int,int,int,int,int)> -- <com.android.server.TelephonyRegistry: void notifyPreciseCallState(int,int,int,int,int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void unregisterUsageSessionObserver(int,java.lang.String)> -- <com.android.server.usage.UsageStatsService$BinderService: void unregisterUsageSessionObserver(int,java.lang.String)>
<android.net.IIpSecService$Stub$Proxy: void deleteTransform(int)> -- <com.android.server.IpSecService: void deleteTransform(int)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<android.media.session.ISessionManager$Stub$Proxy: int getSessionPolicies(android.media.session.MediaSession$Token)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: int getSessionPolicies(android.media.session.MediaSession$Token)>
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile,java.lang.String)> -- <com.android.server.sip.SipService: void open(android.net.sip.SipProfile,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.String getCertInstallerPackage(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getCertInstallerPackage(android.content.ComponentName)>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$TaskSnapshot getTaskSnapshot(int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession,boolean)>
<android.os.IUserManager$Stub$Proxy: void setUserRestriction(java.lang.String,boolean,int)> -- <com.android.server.pm.UserManagerService: void setUserRestriction(java.lang.String,boolean,int)>
<android.media.IMediaRouterService$Stub$Proxy: void releaseSessionWithRouter2(android.media.IMediaRouter2,java.lang.String)> -- <com.android.server.media.MediaRouterService: void releaseSessionWithRouter2(android.media.IMediaRouter2,java.lang.String)>
<android.content.pm.ILauncherApps$Stub$Proxy: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isActivityEnabled(java.lang.String,android.content.ComponentName,android.os.UserHandle)>
<android.app.IActivityManager$Stub$Proxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> -- <com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>
<android.app.INotificationManager$Stub$Proxy: int getBubblePreferenceForPackage(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: int getBubblePreferenceForPackage(java.lang.String,int)>
<android.media.session.ISessionManager$Stub$Proxy: void setCustomMediaKeyDispatcherForTesting(java.lang.String)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void setCustomMediaKeyDispatcherForTesting(java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)> -- <com.android.server.location.LocationManagerService: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
<android.app.IActivityManager$Stub$Proxy: void appNotRespondingViaProvider(android.os.IBinder)> -- <com.android.server.am.ActivityManagerService: void appNotRespondingViaProvider(android.os.IBinder)>
<android.hardware.location.IContextHubService$Stub$Proxy: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)> -- <com.android.server.location.ContextHubService: void enableNanoApp(int,android.hardware.location.IContextHubTransactionCallback,long)>
<android.media.IMediaResourceMonitor$Stub$Proxy: void notifyResourceGranted(int,int)> -- <com.android.server.media.MediaResourceMonitorService$MediaResourceMonitorImpl: void notifyResourceGranted(int,int)>
<android.os.storage.IStorageManager$Stub$Proxy: void forgetAllVolumes()> -- <com.android.server.StorageManagerService: void forgetAllVolumes()>
<com.android.internal.telephony.ISub$Stub$Proxy: int[] getActiveSubIdList(boolean)> -- <com.android.internal.telephony.SubscriptionController: int[] getActiveSubIdList(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean clearResetPasswordToken(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean clearResetPasswordToken(android.content.ComponentName)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationExpansionChanged(java.lang.String,boolean,boolean,int)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean,int)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: void enableMultiProcess(boolean)> -- <com.android.server.webkit.WebViewUpdateService$BinderService: void enableMultiProcess(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiScanStoppedFromSource(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)>
<android.app.slice.ISliceManager$Stub$Proxy: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)> -- <com.android.server.slice.SliceManagerService: android.app.slice.SliceSpec[] getPinnedSpecs(android.net.Uri,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean hasBadge(int)> -- <com.android.server.pm.UserManagerService: boolean hasBadge(int)>
<android.view.IWindowManager$Stub$Proxy: void setSwitchingUser(boolean)> -- <com.android.server.wm.WindowManagerService: void setSwitchingUser(boolean)>
<android.media.IAudioService$Stub$Proxy: boolean isCameraSoundForced()> -- <com.android.server.audio.AudioService: boolean isCameraSoundForced()>
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)> -- <com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getActiveAdmins(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])> -- <com.android.internal.telephony.SmsController: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>
<android.app.IActivityManager$Stub$Proxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)> -- <com.android.server.am.ActivityManagerService: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager$Stub$Proxy: long lastMaintenance()> -- <com.android.server.StorageManagerService: long lastMaintenance()>
<android.app.prediction.IPredictionManager$Stub$Proxy: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
<android.os.IPowerManager$Stub$Proxy: boolean isAmbientDisplaySuppressed()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplaySuppressed()>
<android.app.IWallpaperManager$Stub$Proxy: boolean hasNamedWallpaper(java.lang.String)> -- <com.android.server.wallpaper.WallpaperManagerService: boolean hasNamedWallpaper(java.lang.String)>
<android.net.INetworkStatsService$Stub$Proxy: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)> -- <com.android.server.net.NetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: void startCheckpoint(int)> -- <com.android.server.StorageManagerService: void startCheckpoint(int)>
<android.location.ICountryDetector$Stub$Proxy: android.location.Country detectCountry()> -- <com.android.server.CountryDetectorService: android.location.Country detectCountry()>
<android.os.storage.IStorageManager$Stub$Proxy: void benchmark(java.lang.String,android.os.IVoldTaskListener)> -- <com.android.server.StorageManagerService: void benchmark(java.lang.String,android.os.IVoldTaskListener)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void setAppStandbyBucket(java.lang.String,int,int)> -- <com.android.server.usage.UsageStatsService$BinderService: void setAppStandbyBucket(java.lang.String,int,int)>
<android.media.IAudioService$Stub$Proxy: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)> -- <com.android.server.audio.AudioService: android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)>
<android.accounts.IAccountManager$Stub$Proxy: boolean someUserHasAccount(android.accounts.Account)> -- <com.android.server.accounts.AccountManagerService: boolean someUserHasAccount(android.accounts.Account)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getUserDataId(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getUserDataId(com.android.internal.os.IResultReceiver)>
<android.media.IAudioService$Stub$Proxy: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)> -- <com.android.server.audio.AudioService: void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyActiveDataSubIdChanged(int)> -- <com.android.server.TelephonyRegistry: void notifyActiveDataSubIdChanged(int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void restoreSession(int,android.os.IBinder,android.os.IBinder,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void restoreSession(int,android.os.IBinder,android.os.IBinder,com.android.internal.os.IResultReceiver)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onBiometricAuthenticated()> -- <com.android.server.statusbar.StatusBarManagerService: void onBiometricAuthenticated()>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)> -- <com.android.server.textservices.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getPersistentApplications(int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getPersistentApplications(int)>
<android.os.IDeviceIdleController$Stub$Proxy: void resetPreIdleTimeoutMode()> -- <com.android.server.DeviceIdleController$BinderService: void resetPreIdleTimeoutMode()>
<android.content.rollback.IRollbackManager$Stub$Proxy: void notifyStagedApkSession(int,int)> -- <com.android.server.rollback.RollbackManagerServiceImpl: void notifyStagedApkSession(int,int)>
<android.app.IActivityManager$Stub$Proxy: void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)> -- <com.android.server.am.ActivityManagerService: void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)>
<com.android.internal.app.procstats.IProcessStats$Stub$Proxy: byte[] getCurrentStats(java.util.List)> -- <com.android.server.am.ProcessStatsService: byte[] getCurrentStats(java.util.List)>
<android.permission.IPermissionManager$Stub$Proxy: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)> -- <com.android.server.pm.permission.PermissionManagerService: android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void reportActivityFullyDrawn(android.os.IBinder,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void reportActivityFullyDrawn(android.os.IBinder,boolean)>
<android.location.ILocationManager$Stub$Proxy: java.lang.String getGnssHardwareModelName()> -- <com.android.server.location.LocationManagerService: java.lang.String getGnssHardwareModelName()>
<android.view.IWindowManager$Stub$Proxy: int getRemoveContentMode(int)> -- <com.android.server.wm.WindowManagerService: int getRemoveContentMode(int)>
<android.app.IActivityTaskManager$Stub$Proxy: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)>
<android.content.pm.IPackageManager$Stub$Proxy: int getMoveStatus(int)> -- <com.android.server.pm.PackageManagerService: int getMoveStatus(int)>
<android.app.IActivityManager$Stub$Proxy: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)> -- <com.android.server.am.ActivityManagerService: android.app.ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.ComponentName getCurrentTransportComponentForUser(int)> -- <com.android.server.backup.BackupManagerService: android.content.ComponentName getCurrentTransportComponentForUser(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String,android.app.SyncNotedAppOp,java.lang.String)> -- <com.android.server.appop.AppOpsService: com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String,android.app.SyncNotedAppOp,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -- <com.android.server.am.ActivityManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryCratesForUser(java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForUser(java.lang.String,int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivityIntentSender(android.app.IApplicationThread,android.content.IIntentSender,android.os.IBinder,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
<android.media.IAudioService$Stub$Proxy: int getStreamVolume(int)> -- <com.android.server.audio.AudioService: int getStreamVolume(int)>
<android.app.IActivityManager$Stub$Proxy: boolean killPids(int[],java.lang.String,boolean)> -- <com.android.server.am.ActivityManagerService: boolean killPids(int[],java.lang.String,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setForceEphemeralUsers(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setForceEphemeralUsers(android.content.ComponentName,boolean)>
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])> -- <com.android.server.wm.WindowManagerService: void setAnimationScales(float[])>
<android.os.INetworkManagementService$Stub$Proxy: void startInterfaceForwarding(java.lang.String,java.lang.String)> -- <com.android.server.NetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.PersistableBundle getTransferOwnershipBundle()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PersistableBundle getTransferOwnershipBundle()>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void hideCurrentSession()> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void hideCurrentSession()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasUidSigningCertificate(int,byte[],int)> -- <com.android.server.pm.PackageManagerService: boolean hasUidSigningCertificate(int,byte[],int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,java.lang.String,int,android.os.RemoteCallback)>
<android.os.IPowerManager$Stub$Proxy: boolean isAmbientDisplaySuppressedForToken(java.lang.String)> -- <com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplaySuppressedForToken(java.lang.String)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)> -- <com.android.server.appop.AppOpsService: void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)>
<android.net.IEthernetManager$Stub$Proxy: void removeListener(android.net.IEthernetServiceListener)> -- <com.android.server.ethernet.EthernetServiceImpl: void removeListener(android.net.IEthernetServiceListener)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean onFactoryReset()> -- <com.android.server.BluetoothManagerService: boolean onFactoryReset()>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getSubscriptionsInGroup(android.os.ParcelUuid,java.lang.String,java.lang.String)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingMode(int,java.lang.String,com.android.internal.app.IAppOpsCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setSecondaryLockscreenEnabled(android.content.ComponentName,boolean)>
<android.hardware.input.IInputManager$Stub$Proxy: void cancelVibrate(int,android.os.IBinder)> -- <com.android.server.input.InputManagerService: void cancelVibrate(int,android.os.IBinder)>
<android.media.session.ISessionManager$Stub$Proxy: void removeSession2TokensListener(android.media.session.ISession2TokensListener)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void removeSession2TokensListener(android.media.session.ISession2TokensListener)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)> -- <com.android.server.appop.AppOpsService: void startWatchingModeWithFlags(int,java.lang.String,int,com.android.internal.app.IAppOpsCallback)>
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void forceStopPackage(java.lang.String,int)> -- <com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)>
<android.media.IAudioService$Stub$Proxy: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)> -- <com.android.server.audio.AudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>
<android.media.IMediaRouterService$Stub$Proxy: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void requestCreateSessionWithManager(android.media.IMediaRouter2Manager,int,android.media.RoutingSessionInfo,android.media.MediaRoute2Info)>
<com.android.internal.telephony.ISub$Stub$Proxy: int setDisplayNameUsingSrc(java.lang.String,int,int)> -- <com.android.internal.telephony.SubscriptionController: int setDisplayNameUsingSrc(java.lang.String,int,int)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -- <com.android.server.inputmethod.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.SelectionEvent)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>
<android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)>
<android.os.IThermalService$Stub$Proxy: boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)> -- <com.android.server.power.ThermalManagerService$1: boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)>
<android.content.pm.IPackageManager$Stub$Proxy: void clearPackagePersistentPreferredActivities(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: void clearPackagePersistentPreferredActivities(java.lang.String,int)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderInfo[] getAllWebViewPackages()>
<android.content.pm.IPackageManager$Stub$Proxy: void querySyncProviders(java.util.List,java.util.List)> -- <com.android.server.pm.PackageManagerService: void querySyncProviders(java.util.List,java.util.List)>
<android.media.IAudioService$Stub$Proxy: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)> -- <com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>
<android.os.IPowerManager$Stub$Proxy: void nap(long)> -- <com.android.server.power.PowerManagerService$BinderService: void nap(long)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: android.content.pm.ParceledListSlice queryCratesForPackage(java.lang.String,java.lang.String,int,java.lang.String)> -- <com.android.server.usage.StorageStatsService: android.content.pm.ParceledListSlice queryCratesForPackage(java.lang.String,java.lang.String,int,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteMobileRadioPowerState(int,long,int)> -- <com.android.server.am.BatteryStatsService: void noteMobileRadioPowerState(int,long,int)>
<android.os.IUserManager$Stub$Proxy: boolean isSameProfileGroup(int,int)> -- <com.android.server.pm.UserManagerService: boolean isSameProfileGroup(int,int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long computeChargeTimeRemaining()> -- <com.android.server.am.BatteryStatsService: long computeChargeTimeRemaining()>
<android.app.blob.IBlobStoreManager$Stub$Proxy: android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: boolean shouldShowIme(int)> -- <com.android.server.wm.WindowManagerService: boolean shouldShowIme(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: android.hardware.soundtrigger.KeyphraseMetadata getEnrolledKeyphraseMetadata(java.lang.String,java.lang.String)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.KeyphraseMetadata getEnrolledKeyphraseMetadata(java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void initConfiguredStrength(int)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void initConfiguredStrength(int)>
<android.app.trust.ITrustManager$Stub$Proxy: boolean isDeviceSecure(int)> -- <com.android.server.trust.TrustManagerService$1: boolean isDeviceSecure(int)>
<android.app.role.IRoleManager$Stub$Proxy: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)> -- <com.android.server.role.RoleManagerService$Stub: boolean removeRoleHolderFromController(java.lang.String,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: void disallowAssistantAdjustment(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void disallowAssistantAdjustment(java.lang.String)>
<android.permission.IPermissionManager$Stub$Proxy: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)> -- <com.android.server.pm.permission.PermissionManagerService: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>
<android.hardware.biometrics.IAuthService$Stub$Proxy: int canAuthenticate(java.lang.String,int,int)> -- <com.android.server.biometrics.AuthService$AuthServiceImpl: int canAuthenticate(java.lang.String,int,int)>
<android.app.INotificationManager$Stub$Proxy: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)> -- <com.android.server.notification.NotificationManagerService$10: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>
<android.view.IWindowManager$Stub$Proxy: int getBaseDisplayDensity(int)> -- <com.android.server.wm.WindowManagerService: int getBaseDisplayDensity(int)>
<com.android.internal.telephony.ISms$Stub$Proxy: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.SmsController: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiRssiChanged(int)> -- <com.android.server.am.BatteryStatsService: void noteWifiRssiChanged(int)>
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> -- <com.android.server.MmsServiceBroker$BinderService: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)>
<android.view.IWindowManager$Stub$Proxy: void hideTransientBars(int)> -- <com.android.server.wm.WindowManagerService: void hideTransientBars(int)>
<android.app.IActivityManager$Stub$Proxy: void registerTaskStackListener(android.app.ITaskStackListener)> -- <com.android.server.am.ActivityManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>
<android.app.IActivityTaskManager$Stub$Proxy: void requestPictureInPictureMode(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void requestPictureInPictureMode(android.os.IBinder)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> -- <com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>
<android.app.backup.IBackupManager$Stub$Proxy: void opCompleteForUser(int,int,long)> -- <com.android.server.backup.BackupManagerService: void opCompleteForUser(int,int,long)>
<android.content.pm.IPackageManager$Stub$Proxy: byte[] getIntentFilterVerificationBackup(int)> -- <com.android.server.pm.PackageManagerService: byte[] getIntentFilterVerificationBackup(int)>
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyInfo)> -- <com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyInfo)>
<android.media.IAudioService$Stub$Proxy: boolean isBluetoothA2dpOn()> -- <com.android.server.audio.AudioService: boolean isBluetoothA2dpOn()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)> -- <com.android.server.inputmethod.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<android.hardware.ISensorPrivacyManager$Stub$Proxy: void setSensorPrivacy(boolean)> -- <com.android.server.SensorPrivacyService$SensorPrivacyServiceImpl: void setSensorPrivacy(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName,java.util.List)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setResetPasswordToken(android.content.ComponentName,byte[])> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setResetPasswordToken(android.content.ComponentName,byte[])>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setScreenUnlockedFunctions(long)> -- <com.android.server.usb.UsbService: void setScreenUnlockedFunctions(long)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)> -- <com.android.server.inputmethod.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: int permissionToOpCode(java.lang.String)> -- <com.android.server.appop.AppOpsService: int permissionToOpCode(java.lang.String)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void performAccessibilityShortcut(java.lang.String)> -- <com.android.server.accessibility.AccessibilityManagerService: void performAccessibilityShortcut(java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean isUserReadyForBackup(int)> -- <com.android.server.backup.BackupManagerService: boolean isUserReadyForBackup(int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String,int)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>
<android.app.usage.IUsageStatsManager$Stub$Proxy: void onCarrierPrivilegedAppsChanged()> -- <com.android.server.usage.UsageStatsService$BinderService: void onCarrierPrivilegedAppsChanged()>
<android.app.IActivityTaskManager$Stub$Proxy: void updateLockTaskPackages(int,java.lang.String[])> -- <com.android.server.wm.ActivityTaskManagerService: void updateLockTaskPackages(int,java.lang.String[])>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int,boolean)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)> -- <com.android.server.BluetoothManagerService: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
<android.app.IUiModeManager$Stub$Proxy: int getNightMode()> -- <com.android.server.UiModeManagerService$11: int getNightMode()>
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)> -- <com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<com.android.internal.compat.IPlatformCompat$Stub$Proxy: com.android.internal.compat.IOverrideValidator getOverrideValidator()> -- <com.android.server.compat.PlatformCompat: com.android.internal.compat.IOverrideValidator getOverrideValidator()>
<android.app.IActivityTaskManager$Stub$Proxy: int getMaxNumPictureInPictureActions(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: int getMaxNumPictureInPictureActions(android.os.IBinder)>
<android.os.IPowerManager$Stub$Proxy: boolean isAmbientDisplayAvailable()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isAmbientDisplayAvailable()>
<android.service.dreams.IDreamManager$Stub$Proxy: android.content.ComponentName getDefaultDreamComponentForUser(int)> -- <com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName getDefaultDreamComponentForUser(int)>
<android.app.IActivityTaskManager$Stub$Proxy: void notifyEnterAnimationComplete(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void notifyEnterAnimationComplete(android.os.IBinder)>
<android.os.IUserManager$Stub$Proxy: int getUserBadgeDarkColorResId(int)> -- <com.android.server.pm.UserManagerService: int getUserBadgeDarkColorResId(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getDeviceOwnerLockScreenInfo()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getDeviceOwnerLockScreenInfo()>
<com.android.internal.telephony.ISub$Stub$Proxy: boolean isSubscriptionEnabled(int)> -- <com.android.internal.telephony.SubscriptionController: boolean isSubscriptionEnabled(int)>
<android.app.IActivityTaskManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)> -- <com.android.server.wm.ActivityTaskManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isSystemOnlyUser(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemOnlyUser(android.content.ComponentName)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyRadioPowerStateChanged(int,int,int)> -- <com.android.server.TelephonyRegistry: void notifyRadioPowerStateChanged(int,int,int)>
<android.content.pm.IShortcutService$Stub$Proxy: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)> -- <com.android.server.pm.ShortcutService: boolean updateShortcuts(java.lang.String,android.content.pm.ParceledListSlice,int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: java.util.List getUidOps(int,int[])> -- <com.android.server.appop.AppOpsService: java.util.List getUidOps(int,int[])>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void handleSystemKey(int)> -- <com.android.server.statusbar.StatusBarManagerService: void handleSystemKey(int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void deleteProfile(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IDeleteProfileCallback)>
<android.os.IUserManager$Stub$Proxy: boolean isDemoUser(int)> -- <com.android.server.pm.UserManagerService: boolean isDemoUser(int)>
<android.security.IFileIntegrityService$Stub$Proxy: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)> -- <com.android.server.security.FileIntegrityService$1: boolean isAppSourceCertificateTrusted(byte[],java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void forceDexOpt(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void forceDexOpt(java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: boolean isRequestPinAppWidgetSupported()> -- <com.android.server.appwidget.AppWidgetServiceImpl: boolean isRequestPinAppWidgetSupported()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getInputMethodList(int)> -- <com.android.server.inputmethod.InputMethodManagerService: java.util.List getInputMethodList(int)>
<android.content.pm.IPackageManager$Stub$Proxy: void setRuntimePermissionsVersion(int,int)> -- <com.android.server.pm.PackageManagerService: void setRuntimePermissionsVersion(int,int)>
<android.app.IAlarmManager$Stub$Proxy: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)> -- <com.android.server.AlarmManagerService$4: void set(java.lang.String,int,long,long,long,int,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo)>
<android.permission.IPermissionManager$Stub$Proxy: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)> -- <com.android.server.pm.permission.PermissionManagerService: int checkDeviceIdentifierAccess(java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.app.IActivityManager$Stub$Proxy: void unregisterProcessObserver(android.app.IProcessObserver)> -- <com.android.server.am.ActivityManagerService: void unregisterProcessObserver(android.app.IProcessObserver)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> -- <com.android.server.accessibility.AccessibilityManagerService: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>
<android.app.INotificationManager$Stub$Proxy: boolean isNotificationListenerAccessGranted(android.content.ComponentName)> -- <com.android.server.notification.NotificationManagerService$10: boolean isNotificationListenerAccessGranted(android.content.ComponentName)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean hasSystemUidErrors()> -- <com.android.server.pm.PackageManagerService: boolean hasSystemUidErrors()>
<android.content.pm.IPackageManager$Stub$Proxy: int getApplicationEnabledSetting(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.INotificationManager$Stub$Proxy: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String,int,boolean)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void isServiceSupported(int,com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void isServiceSupported(int,com.android.internal.os.IResultReceiver)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteLongPartialWakelockFinishFromSource(java.lang.String,java.lang.String,android.os.WorkSource)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isOrganizationOwnedDeviceWithManagedProfile()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isOrganizationOwnedDeviceWithManagedProfile()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>
<android.app.backup.IBackupManager$Stub$Proxy: void adbRestore(int,android.os.ParcelFileDescriptor)> -- <com.android.server.backup.BackupManagerService: void adbRestore(int,android.os.ParcelFileDescriptor)>
<android.media.IMediaRouterService$Stub$Proxy: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)> -- <com.android.server.media.MediaRouterService: void setDiscoveryRequest(android.media.IMediaRouterClient,int,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: int getRuntimePermissionsVersion(int)> -- <com.android.server.pm.PackageManagerService: int getRuntimePermissionsVersion(int)>
<android.content.IContentService$Stub$Proxy: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)> -- <com.android.server.content.ContentService: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>
<android.os.IVibratorService$Stub$Proxy: boolean[] arePrimitivesSupported(int[])> -- <com.android.server.VibratorService: boolean[] arePrimitivesSupported(int[])>
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -- <com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.os.storage.IStorageManager$Stub$Proxy: long getCacheQuotaBytes(java.lang.String,int)> -- <com.android.server.StorageManagerService: long getCacheQuotaBytes(java.lang.String,int)>
<android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(android.net.Network,java.lang.String[])> -- <com.android.server.NetworkManagementService: void setDnsForwarders(android.net.Network,java.lang.String[])>
<android.media.session.ISessionManager$Stub$Proxy: void registerRemoteVolumeController(android.media.IRemoteVolumeController)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>
<android.app.INotificationManager$Stub$Proxy: boolean removeAutomaticZenRule(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean removeAutomaticZenRule(java.lang.String)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int getModelState(android.os.ParcelUuid)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int getModelState(android.os.ParcelUuid)>
<android.app.INotificationManager$Stub$Proxy: long pullStats(long,int,boolean,java.util.List)> -- <com.android.server.notification.NotificationManagerService$10: long pullStats(long,int,boolean,java.util.List)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>
<android.app.IAlarmManager$Stub$Proxy: long getNextWakeFromIdleTime()> -- <com.android.server.AlarmManagerService$4: long getNextWakeFromIdleTime()>
<android.app.INotificationManager$Stub$Proxy: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: android.service.notification.StatusBarNotification[] getHistoricalNotificationsWithAttribution(java.lang.String,java.lang.String,int,boolean)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -- <com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)>
<android.net.INetworkPolicyManager$Stub$Proxy: void factoryReset(java.lang.String)> -- <com.android.server.net.NetworkPolicyManagerService: void factoryReset(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)> -- <com.android.server.audio.AudioService: void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: int checkUidSignatures(int,int)> -- <com.android.server.pm.PackageManagerService: int checkUidSignatures(int,int)>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)> -- <com.android.server.accessibility.AccessibilityManagerService: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
<com.android.internal.telephony.ISub$Stub$Proxy: int getEnabledSubscriptionId(int)> -- <com.android.internal.telephony.SubscriptionController: int getEnabledSubscriptionId(int)>
<android.os.storage.IStorageManager$Stub$Proxy: int changeEncryptionPassword(int,java.lang.String)> -- <com.android.server.StorageManagerService: int changeEncryptionPassword(int,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void disableIpv6(java.lang.String)> -- <com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: boolean isFirewallEnabled()> -- <com.android.server.NetworkManagementService: boolean isFirewallEnabled()>
<android.net.IConnectivityManager$Stub$Proxy: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)> -- <com.android.server.ConnectivityService: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>
<android.content.pm.IShortcutService$Stub$Proxy: long getRateLimitResetTime(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: long getRateLimitResetTime(java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: int checkMobileProvisioning(int)> -- <com.android.server.ConnectivityService: int checkMobileProvisioning(int)>
<android.hardware.location.IContextHubService$Stub$Proxy: int registerCallback(android.hardware.location.IContextHubCallback)> -- <com.android.server.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isBackupServiceEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isBackupServiceEnabled(android.content.ComponentName)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void authenticate(android.os.IBinder,long,int,android.hardware.biometrics.IBiometricServiceReceiver,java.lang.String,android.os.Bundle,int,int,int)>
<android.app.backup.IBackupManager$Stub$Proxy: android.content.Intent getConfigurationIntent(java.lang.String)> -- <com.android.server.backup.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)> -- <com.android.server.inputmethod.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setPersistentVrThread(int)> -- <com.android.server.wm.ActivityTaskManagerService: void setPersistentVrThread(int)>
<android.app.INotificationManager$Stub$Proxy: void requestUnbindListener(android.service.notification.INotificationListener)> -- <com.android.server.notification.NotificationManagerService$10: void requestUnbindListener(android.service.notification.INotificationListener)>
<android.media.IAudioService$Stub$Proxy: int[] getSupportedSystemUsages()> -- <com.android.server.audio.AudioService: int[] getSupportedSystemUsages()>
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupServiceActive(int,boolean)> -- <com.android.server.backup.BackupManagerService: void setBackupServiceActive(int,boolean)>
<android.app.IActivityTaskManager$Stub$Proxy: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)> -- <com.android.server.wm.ActivityTaskManagerService: boolean enterPictureInPictureMode(android.os.IBinder,android.app.PictureInPictureParams)>
<android.app.IActivityManager$Stub$Proxy: void unregisterUidObserver(android.app.IUidObserver)> -- <com.android.server.am.ActivityManagerService: void unregisterUidObserver(android.app.IUidObserver)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: int getInstallLocation()> -- <com.android.server.pm.PackageManagerService: int getInstallLocation()>
<android.net.IIpConnectivityMetrics$Stub$Proxy: boolean addNetdEventCallback(int,android.net.INetdEventCallback)> -- <com.android.server.connectivity.IpConnectivityMetrics$Impl: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
<android.os.IUserManager$Stub$Proxy: boolean isUserOfType(int,java.lang.String)> -- <com.android.server.pm.UserManagerService: boolean isUserOfType(int,java.lang.String)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.graphics.Point getStableDisplaySize()> -- <com.android.server.display.DisplayManagerService$BinderService: android.graphics.Point getStableDisplaySize()>
<android.os.IPowerManager$Stub$Proxy: boolean isInteractive()> -- <com.android.server.power.PowerManagerService$BinderService: boolean isInteractive()>
<android.media.midi.IMidiManager$Stub$Proxy: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)> -- <com.android.server.midi.MidiService: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
<android.hardware.usb.IUsbManager$Stub$Proxy: boolean hasDefaults(java.lang.String,int)> -- <com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)>
<android.app.IActivityTaskManager$Stub$Proxy: void setSplitScreenResizing(boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void setSplitScreenResizing(boolean)>
<android.os.IUserManager$Stub$Proxy: java.lang.String getUserAccount(int)> -- <com.android.server.pm.UserManagerService: java.lang.String getUserAccount(int)>
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)> -- <com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void cancelRecentsAnimation(boolean)> -- <com.android.server.wm.ActivityTaskManagerService: void cancelRecentsAnimation(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean compileLayouts(java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean compileLayouts(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void setVolumeController(android.media.IVolumeController)> -- <com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void hideCurrentInputMethodForBubbles()> -- <com.android.server.statusbar.StatusBarManagerService: void hideCurrentInputMethodForBubbles()>
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> -- <com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])>
<android.app.IActivityManager$Stub$Proxy: void setUserIsMonkey(boolean)> -- <com.android.server.am.ActivityManagerService: void setUserIsMonkey(boolean)>
<android.view.IWindowManager$Stub$Proxy: boolean shouldShowWithInsecureKeyguard(int)> -- <com.android.server.wm.WindowManagerService: boolean shouldShowWithInsecureKeyguard(int)>
<android.net.IConnectivityManager$Stub$Proxy: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)> -- <com.android.server.ConnectivityService: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>
<android.content.pm.ILauncherApps$Stub$Proxy: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void registerPackageInstallerCallback(java.lang.String,android.content.pm.IPackageInstallerCallback)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void pauseWifiDisplay()> -- <com.android.server.display.DisplayManagerService$BinderService: void pauseWifiDisplay()>
<android.app.INotificationManager$Stub$Proxy: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)> -- <com.android.server.notification.NotificationManagerService$10: boolean updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)>
<android.app.IActivityTaskManager$Stub$Proxy: void invalidateHomeTaskSnapshot(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void invalidateHomeTaskSnapshot(android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: int watchRotation(android.view.IRotationWatcher,int)> -- <com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackages(android.content.ComponentName,java.lang.String)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void setHasCallback(int,int,boolean)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setHasCallback(int,int,boolean)>
<android.hardware.display.IDisplayManager$Stub$Proxy: void disconnectWifiDisplay()> -- <com.android.server.display.DisplayManagerService$BinderService: void disconnectWifiDisplay()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void reboot(boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void reboot(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean canRequestPackageInstalls(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean canRequestPackageInstalls(java.lang.String,int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopAudio(int)> -- <com.android.server.am.BatteryStatsService: void noteStopAudio(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemSetting(android.content.ComponentName,java.lang.String,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String,java.lang.String)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onBubbleNotificationSuppressionChanged(java.lang.String,boolean)> -- <com.android.server.statusbar.StatusBarManagerService: void onBubbleNotificationSuppressionChanged(java.lang.String,boolean)>
<android.hardware.display.IDisplayManager$Stub$Proxy: android.view.DisplayInfo getDisplayInfo(int)> -- <com.android.server.display.DisplayManagerService$BinderService: android.view.DisplayInfo getDisplayInfo(int)>
<android.accounts.IAccountManager$Stub$Proxy: void registerAccountListener(java.lang.String[],java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void registerAccountListener(java.lang.String[],java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteResetBleScan()> -- <com.android.server.am.BatteryStatsService: void noteResetBleScan()>
<android.app.IActivityManager$Stub$Proxy: void killProcessesWhenImperceptible(int[],java.lang.String)> -- <com.android.server.am.ActivityManagerService: void killProcessesWhenImperceptible(int[],java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: int getInterruptionFilterFromListener(android.service.notification.INotificationListener)> -- <com.android.server.notification.NotificationManagerService$10: int getInterruptionFilterFromListener(android.service.notification.INotificationListener)>
<android.app.IActivityTaskManager$Stub$Proxy: void stopSystemLockTaskMode()> -- <com.android.server.wm.ActivityTaskManagerService: void stopSystemLockTaskMode()>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String,int,int,int)>
<android.accounts.IAccountManager$Stub$Proxy: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)> -- <com.android.server.accounts.AccountManagerService: android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account,java.lang.String,android.os.UserHandle)>
<android.os.IDeviceIdleController$Stub$Proxy: boolean isPowerSaveWhitelistApp(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: boolean isPowerSaveWhitelistApp(java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)> -- <com.android.server.power.PowerManagerService$BinderService: void setAttentionLight(boolean,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -- <com.android.server.TelephonyRegistry: void listenWithFeature(java.lang.String,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> -- <com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void removeAccessibilityInteractionConnection(android.view.IWindow)> -- <com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyLockTaskModeChanged(boolean,java.lang.String,int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>
<android.view.IWindowManager$Stub$Proxy: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)> -- <com.android.server.wm.WindowManagerService: void createInputConsumer(android.os.IBinder,java.lang.String,int,android.view.InputChannel)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIsimImpi(int)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimImpi(int)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)> -- <com.android.server.appop.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void restoreIntentFilterVerification(byte[],int)> -- <com.android.server.pm.PackageManagerService: void restoreIntentFilterVerification(byte[],int)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disableBle(java.lang.String,android.os.IBinder)> -- <com.android.server.BluetoothManagerService: boolean disableBle(java.lang.String,android.os.IBinder)>
<android.os.storage.IStorageManager$Stub$Proxy: void unmount(java.lang.String)> -- <com.android.server.StorageManagerService: void unmount(java.lang.String)>
<android.content.pm.IShortcutService$Stub$Proxy: int getRemainingCallCount(java.lang.String,int)> -- <com.android.server.pm.ShortcutService: int getRemainingCallCount(java.lang.String,int)>
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.MmsServiceBroker$BinderService: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void performIdleMaintenance()> -- <com.android.server.am.ActivityManagerService: void performIdleMaintenance()>
<android.os.IPowerManager$Stub$Proxy: float getBrightnessConstraint(int)> -- <com.android.server.power.PowerManagerService$BinderService: float getBrightnessConstraint(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>
<android.net.IConnectivityManager$Stub$Proxy: boolean isVpnLockdownEnabled(int)> -- <com.android.server.ConnectivityService: boolean isVpnLockdownEnabled(int)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTag(java.lang.String,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: void releasePendingNetworkRequest(android.app.PendingIntent)> -- <com.android.server.ConnectivityService: void releasePendingNetworkRequest(android.app.PendingIntent)>
<android.app.IActivityManager$Stub$Proxy: android.graphics.Rect getTaskBounds(int)> -- <com.android.server.am.ActivityManagerService: android.graphics.Rect getTaskBounds(int)>
<android.location.ICountryDetector$Stub$Proxy: void removeCountryListener(android.location.ICountryListener)> -- <com.android.server.CountryDetectorService: void removeCountryListener(android.location.ICountryListener)>
<android.hardware.input.IInputManager$Stub$Proxy: void disableInputDevice(int)> -- <com.android.server.input.InputManagerService: void disableInputDevice(int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void onNotificationClear(java.lang.String,java.lang.String,int,int,java.lang.String,int,int,com.android.internal.statusbar.NotificationVisibility)> -- <com.android.server.statusbar.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int,int,java.lang.String,int,int,com.android.internal.statusbar.NotificationVisibility)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>
<android.hardware.biometrics.IBiometricService$Stub$Proxy: void resetLockout(byte[])> -- <com.android.server.biometrics.BiometricService$BiometricServiceWrapper: void resetLockout(byte[])>
<android.content.IContentService$Stub$Proxy: void onDbCorruption(java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.content.ContentService: void onDbCorruption(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)>
<android.location.ILocationManager$Stub$Proxy: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean getCurrentLocation(android.location.LocationRequest,android.os.ICancellationSignal,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: boolean getPrivateNotificationsAllowed()> -- <com.android.server.notification.NotificationManagerService$10: boolean getPrivateNotificationsAllowed()>
<android.app.IActivityTaskManager$Stub$Proxy: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -- <com.android.server.wm.ActivityTaskManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)>
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> -- <com.android.server.content.ContentService: java.util.List getCurrentSyncs()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdnForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdnForSubscriber(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.IMms$Stub$Proxy: boolean getAutoPersisting()> -- <com.android.server.MmsServiceBroker$BinderService: boolean getAutoPersisting()>
<android.os.INetworkManagementService$Stub$Proxy: void registerNetworkActivityListener(android.os.INetworkActivityListener)> -- <com.android.server.NetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: android.webkit.WebViewProviderInfo[] getValidWebViewPackages()>
<android.app.IActivityTaskManager$Stub$Proxy: void activityRelaunched(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void activityRelaunched(android.os.IBinder)>
<android.app.IActivityManager$Stub$Proxy: boolean isIntentSenderAnActivity(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: boolean isIntentSenderAnActivity(android.content.IIntentSender)>
<android.app.IActivityManager$Stub$Proxy: boolean launchBugReportHandlerApp()> -- <com.android.server.am.ActivityManagerService: boolean launchBugReportHandlerApp()>
<android.app.IActivityTaskManager$Stub$Proxy: boolean setTaskWindowingMode(int,int,boolean)> -- <com.android.server.wm.ActivityTaskManagerService: boolean setTaskWindowingMode(int,int,boolean)>
<android.hardware.lights.ILightsManager$Stub$Proxy: void openSession(android.os.IBinder)> -- <com.android.server.lights.LightsService$LightsManagerBinderService: void openSession(android.os.IBinder)>
<android.app.IActivityManager$Stub$Proxy: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>
<android.os.INetworkManagementService$Stub$Proxy: void removeInterfaceFromNetwork(java.lang.String,int)> -- <com.android.server.NetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandNotificationsPanel()> -- <com.android.server.statusbar.StatusBarManagerService: void expandNotificationsPanel()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void notifyAccessibilityButtonClicked(int,java.lang.String)> -- <com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityButtonClicked(int,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)> -- <com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(int,int,int,java.lang.String,int)>
<android.print.IPrintManager$Stub$Proxy: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener,int)>
<android.content.pm.ILauncherApps$Stub$Proxy: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)> -- <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void addOnAppsChangedListener(java.lang.String,android.content.pm.IOnAppsChangedListener)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getIncidentReportApproverPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getIncidentReportApproverPackageName()>
<com.android.internal.telephony.ISms$Stub$Proxy: android.os.Bundle getCarrierConfigValuesForSubscriber(int)> -- <com.android.internal.telephony.SmsController: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void getUserData(com.android.internal.os.IResultReceiver)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void getUserData(com.android.internal.os.IResultReceiver)>
<android.app.IActivityTaskManager$Stub$Proxy: void toggleFreeformWindowingMode(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void toggleFreeformWindowingMode(android.os.IBinder)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isPackageAvailable(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: boolean isPackageAvailable(java.lang.String,int)>
<android.media.IMediaRouterService$Stub$Proxy: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)> -- <com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: boolean isIntentSenderAForegroundService(android.content.IIntentSender)> -- <com.android.server.am.ActivityManagerService: boolean isIntentSenderAForegroundService(android.content.IIntentSender)>
<android.app.IActivityManager$Stub$Proxy: void stopDelegateShellPermissionIdentity()> -- <com.android.server.am.ActivityManagerService: void stopDelegateShellPermissionIdentity()>
<android.content.pm.IPackageManager$Stub$Proxy: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String getCurrentTransportForUser(int)> -- <com.android.server.backup.BackupManagerService: java.lang.String getCurrentTransportForUser(int)>
<android.app.IUiModeManager$Stub$Proxy: boolean setNightModeActivated(boolean)> -- <com.android.server.UiModeManagerService$11: boolean setNightModeActivated(boolean)>
<android.permission.IPermissionManager$Stub$Proxy: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)> -- <com.android.server.pm.permission.PermissionManagerService: void grantDefaultPermissionsToEnabledTelephonyDataServices(java.lang.String[],int)>
<android.location.ILocationManager$Stub$Proxy: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)> -- <com.android.server.location.LocationManagerService: boolean startGnssBatch(long,boolean,java.lang.String,java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)> -- <com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>
<android.app.IActivityManager$Stub$Proxy: int startActivityFromRecents(int,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)>
<android.accounts.IAccountManager$Stub$Proxy: void onAccountAccessed(java.lang.String)> -- <com.android.server.accounts.AccountManagerService: void onAccountAccessed(java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void setShouldShowSystemDecors(int,boolean)> -- <com.android.server.wm.WindowManagerService: void setShouldShowSystemDecors(int,boolean)>
<android.content.pm.ICrossProfileApps$Stub$Proxy: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)> -- <com.android.server.pm.CrossProfileAppsServiceImpl: void startActivityAsUserByIntent(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,int,android.os.IBinder,android.os.Bundle)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getServicesSystemSharedLibraryPackageName()> -- <com.android.server.pm.PackageManagerService: java.lang.String getServicesSystemSharedLibraryPackageName()>
<android.os.storage.IStorageManager$Stub$Proxy: void commitChanges()> -- <com.android.server.StorageManagerService: void commitChanges()>
<android.app.INotificationManager$Stub$Proxy: void setInterruptionFilter(java.lang.String,int)> -- <com.android.server.notification.NotificationManagerService$10: void setInterruptionFilter(java.lang.String,int)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String getInstantAppAndroidId(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: java.lang.String getInstantAppAndroidId(java.lang.String,int)>
<android.hardware.location.IContextHubService$Stub$Proxy: java.util.List getContextHubs()> -- <com.android.server.location.ContextHubService: java.util.List getContextHubs()>
<android.hardware.usb.IUsbManager$Stub$Proxy: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)> -- <com.android.server.usb.UsbService: void setDevicePersistentPermission(android.hardware.usb.UsbDevice,int,android.os.UserHandle,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getDelegatedScopes(android.content.ComponentName,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> -- <com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void removePermission(java.lang.String)> -- <com.android.server.pm.PackageManagerService: void removePermission(java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> -- <com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)> -- <com.android.server.wm.WindowManagerService: android.view.IWindowSession openSession(android.view.IWindowSessionCallback)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean getAutoTimeEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeEnabled(android.content.ComponentName)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])> -- <com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])>
<android.app.IActivityTaskManager$Stub$Proxy: void activityResumed(android.os.IBinder)> -- <com.android.server.wm.ActivityTaskManagerService: void activityResumed(android.os.IBinder)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void closeSystemDialogs(android.os.IBinder)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void closeSystemDialogs(android.os.IBinder)>
<android.app.INotificationManager$Stub$Proxy: void clearData(java.lang.String,int,boolean)> -- <com.android.server.notification.NotificationManagerService$10: void clearData(java.lang.String,int,boolean)>
<android.hardware.input.IInputManager$Stub$Proxy: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)> -- <com.android.server.input.InputManagerService: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>
<android.content.pm.IPackageManager$Stub$Proxy: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>
<android.content.pm.IPackageManager$Stub$Proxy: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>
<android.os.INetworkManagementService$Stub$Proxy: void enableIpv6(java.lang.String)> -- <com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setProfileName(android.content.ComponentName,java.lang.String)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileName(android.content.ComponentName,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: android.window.IWindowOrganizerController getWindowOrganizerController()> -- <com.android.server.wm.ActivityTaskManagerService: android.window.IWindowOrganizerController getWindowOrganizerController()>
<android.media.IAudioService$Stub$Proxy: int getUiSoundsStreamType()> -- <com.android.server.audio.AudioService: int getUiSoundsStreamType()>
<android.view.IWindowManager$Stub$Proxy: boolean useBLAST()> -- <com.android.server.wm.WindowManagerService: boolean useBLAST()>
<android.service.textclassifier.ITextClassifierService$Stub$Proxy: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)> -- <com.android.server.textclassifier.TextClassificationManagerService: void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId,android.view.textclassifier.TextLanguage$Request,android.service.textclassifier.ITextClassifierCallback)>
<android.os.IHardwarePropertiesManager$Stub$Proxy: float[] getFanSpeeds(java.lang.String)> -- <com.android.server.HardwarePropertiesManagerService: float[] getFanSpeeds(java.lang.String)>
<android.view.autofill.IAutoFillManager$Stub$Proxy: void setAuthenticationResult(android.os.Bundle,int,int,int)> -- <com.android.server.autofill.AutofillManagerService$AutoFillManagerServiceStub: void setAuthenticationResult(android.os.Bundle,int,int,int)>
<android.app.IUriGrantsManager$Stub$Proxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)> -- <com.android.server.uri.UriGrantsManagerService: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int,int,int)>
<android.os.INetworkManagementService$Stub$Proxy: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)> -- <com.android.server.NetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<android.view.IWindowManager$Stub$Proxy: void endProlongedAnimations()> -- <com.android.server.wm.WindowManagerService: void endProlongedAnimations()>
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncsAsUser(int)> -- <com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)>
<android.net.IIpSecService$Stub$Proxy: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)> -- <com.android.server.IpSecService: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)> -- <com.android.server.TelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)>
<android.service.dreams.IDreamManager$Stub$Proxy: void dream()> -- <com.android.server.dreams.DreamManagerService$BinderService: void dream()>
<android.app.IActivityManager$Stub$Proxy: void setActivityController(android.app.IActivityController,boolean)> -- <com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController,boolean)>
<android.media.IAudioService$Stub$Proxy: boolean loadSoundEffects()> -- <com.android.server.audio.AudioService: boolean loadSoundEffects()>
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String,java.lang.String)> -- <com.android.server.sip.SipService: void close(java.lang.String,java.lang.String)>
<android.app.trust.ITrustManager$Stub$Proxy: void reportEnabledTrustAgentsChanged(int)> -- <com.android.server.trust.TrustManagerService$1: void reportEnabledTrustAgentsChanged(int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellInfo(java.util.List)> -- <com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)>
<android.hardware.location.IContextHubService$Stub$Proxy: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)> -- <com.android.server.location.ContextHubService: void unloadNanoAppFromHub(int,android.hardware.location.IContextHubTransactionCallback,long)>
<android.os.storage.IStorageManager$Stub$Proxy: void destroyUserStorage(java.lang.String,int,int)> -- <com.android.server.StorageManagerService: void destroyUserStorage(java.lang.String,int,int)>
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)> -- <com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)> -- <com.android.server.NetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
<android.os.IPowerManager$Stub$Proxy: int getLastShutdownReason()> -- <com.android.server.power.PowerManagerService$BinderService: int getLastShutdownReason()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallStateForAllSubs(int,java.lang.String)> -- <com.android.server.TelephonyRegistry: void notifyCallStateForAllSubs(int,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: int checkSignatures(java.lang.String,java.lang.String)> -- <com.android.server.pm.PackageManagerService: int checkSignatures(java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: android.app.ActivityManager$TaskDescription getTaskDescription(int)> -- <com.android.server.wm.ActivityTaskManagerService: android.app.ActivityManager$TaskDescription getTaskDescription(int)>
<com.android.internal.app.ISoundTriggerService$Stub$Proxy: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -- <com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognitionForService(android.os.ParcelUuid,android.os.Bundle,android.content.ComponentName,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>
<android.webkit.IWebViewUpdateService$Stub$Proxy: java.lang.String getCurrentWebViewPackageName()> -- <com.android.server.webkit.WebViewUpdateService$BinderService: java.lang.String getCurrentWebViewPackageName()>
<android.app.IActivityManager$Stub$Proxy: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>
<android.app.IActivityManager$Stub$Proxy: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)> -- <com.android.server.am.ActivityManagerService: void addInstrumentationResults(android.app.IApplicationThread,android.os.Bundle)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>
<android.os.INetworkManagementService$Stub$Proxy: void setIPv6AddrGenMode(java.lang.String,int)> -- <com.android.server.NetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)> -- <com.android.server.power.PowerManagerService$BinderService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>
<android.net.IConnectivityManager$Stub$Proxy: java.util.List getVpnLockdownWhitelist(int)> -- <com.android.server.ConnectivityService: java.util.List getVpnLockdownWhitelist(int)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String,int,int)>
<android.permission.IPermissionManager$Stub$Proxy: java.util.List getSplitPermissions()> -- <com.android.server.pm.permission.PermissionManagerService: java.util.List getSplitPermissions()>
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -- <com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)> -- <com.android.server.TelephonyRegistry: void notifyDataActivity(int)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setManagedProfileMaximumTimeOff(android.content.ComponentName,long)>
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> -- <com.android.server.BluetoothManagerService: java.lang.String getAddress()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setBackupServiceEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setBackupServiceEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long getPasswordExpiration(android.content.ComponentName,int,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int,boolean)>
<android.media.midi.IMidiManager$Stub$Proxy: android.media.midi.MidiDeviceInfo[] getDevices()> -- <com.android.server.midi.MidiService: android.media.midi.MidiDeviceInfo[] getDevices()>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> -- <com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: long forceNetworkLogs()> -- <com.android.server.devicepolicy.DevicePolicyManagerService: long forceNetworkLogs()>
<android.os.IUserManager$Stub$Proxy: android.os.ParcelFileDescriptor getUserIcon(int)> -- <com.android.server.pm.UserManagerService: android.os.ParcelFileDescriptor getUserIcon(int)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void requestDirectActions(android.os.IBinder,int,android.os.IBinder,android.os.RemoteCallback,android.os.RemoteCallback)>
<android.os.IUserManager$Stub$Proxy: android.os.Bundle getUserRestrictions(int)> -- <com.android.server.pm.UserManagerService: android.os.Bundle getUserRestrictions(int)>
<android.view.IWindowManager$Stub$Proxy: int getInitialDisplayDensity(int)> -- <com.android.server.wm.WindowManagerService: int getInitialDisplayDensity(int)>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getEuiccChallenge(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetEuiccChallengeCallback)>
<android.app.trust.ITrustManager$Stub$Proxy: boolean isTrustUsuallyManaged(int)> -- <com.android.server.trust.TrustManagerService$1: boolean isTrustUsuallyManaged(int)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean runBackgroundDexoptJob(java.util.List)> -- <com.android.server.pm.PackageManagerService: boolean runBackgroundDexoptJob(java.util.List)>
<android.app.backup.IBackupManager$Stub$Proxy: void dataChangedForUser(int,java.lang.String)> -- <com.android.server.backup.BackupManagerService: void dataChangedForUser(int,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)> -- <com.android.server.am.ActivityManagerService: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>
<android.content.pm.IPackageManager$Stub$Proxy: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)> -- <com.android.server.pm.PackageManagerService: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>
<android.media.midi.IMidiManager$Stub$Proxy: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)> -- <com.android.server.midi.MidiService: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>
<android.hardware.input.IInputManager$Stub$Proxy: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -- <com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean isBackupEnabled()> -- <com.android.server.backup.BackupManagerService: boolean isBackupEnabled()>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void reloadNonHistoricalState()> -- <com.android.server.appop.AppOpsService: void reloadNonHistoricalState()>
<android.app.INotificationManager$Stub$Proxy: boolean isNotificationPolicyAccessGranted(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: boolean isNotificationPolicyAccessGranted(java.lang.String)>
<android.os.INetworkManagementService$Stub$Proxy: void stopTethering()> -- <com.android.server.NetworkManagementService: void stopTethering()>
<android.view.IWindowManager$Stub$Proxy: void thawDisplayRotation(int)> -- <com.android.server.wm.WindowManagerService: void thawDisplayRotation(int)>
<android.app.IUriGrantsManager$Stub$Proxy: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)> -- <com.android.server.uri.UriGrantsManagerService: android.content.pm.ParceledListSlice getUriPermissions(java.lang.String,boolean,boolean)>
<android.media.session.ISessionManager$Stub$Proxy: boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)> -- <com.android.server.media.MediaSessionService$SessionManagerImpl: boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String,java.lang.String)> -- <com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)> -- <com.android.server.TelephonyRegistry: void notifyOutgoingEmergencySms(int,int,android.telephony.emergency.EmergencyNumber)>
<android.app.IActivityManager$Stub$Proxy: java.util.List getRunningExternalApplications()> -- <com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()>
<com.android.internal.telephony.ISub$Stub$Proxy: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)> -- <com.android.internal.telephony.SubscriptionController: java.util.List getOpportunisticSubscriptions(java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager$Stub$Proxy: void setHomeActivity(android.content.ComponentName,int)> -- <com.android.server.pm.PackageManagerService: void setHomeActivity(android.content.ComponentName,int)>
<android.app.backup.IBackupManager$Stub$Proxy: boolean setBackupPassword(java.lang.String,java.lang.String)> -- <com.android.server.backup.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)>
<android.os.IThermalService$Stub$Proxy: int getCurrentThermalStatus()> -- <com.android.server.power.ThermalManagerService$1: int getCurrentThermalStatus()>
<android.app.INotificationManager$Stub$Proxy: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: android.app.NotificationChannel getNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)> -- <com.android.server.audio.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String,android.media.AudioAttributes,java.lang.String)>
<android.location.ILocationManager$Stub$Proxy: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)> -- <com.android.server.location.LocationManagerService: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
<com.android.internal.app.IVoiceInteractionManagerService$Stub$Proxy: void setKeepAwake(android.os.IBinder,boolean)> -- <com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void setKeepAwake(android.os.IBinder,boolean)>
<android.hardware.input.IInputManager$Stub$Proxy: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -- <com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>
<android.app.INotificationManager$Stub$Proxy: int getRuleInstanceCount(android.content.ComponentName)> -- <com.android.server.notification.NotificationManagerService$10: int getRuleInstanceCount(android.content.ComponentName)>
<android.content.pm.IPackageManager$Stub$Proxy: void verifyPendingInstall(int,int)> -- <com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)>
<android.hardware.fingerprint.IFingerprintService$Stub$Proxy: int postEnroll(android.os.IBinder)> -- <com.android.server.biometrics.fingerprint.FingerprintService$FingerprintServiceWrapper: int postEnroll(android.os.IBinder)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: void acquireLease(android.app.blob.BlobHandle,int,java.lang.CharSequence,long,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: void acquireLease(android.app.blob.BlobHandle,int,java.lang.CharSequence,long,java.lang.String)>
<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)> -- <com.android.server.print.PrintManagerService$PrintManagerImpl: void stopPrinterStateTracking(android.print.PrinterId,int)>
<android.app.prediction.IPredictionManager$Stub$Proxy: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)> -- <com.android.server.appprediction.AppPredictionManagerService$PredictionManagerServiceStub: void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId,android.app.prediction.IPredictionCallback)>
<android.content.pm.IPackageManager$Stub$Proxy: boolean isAutoRevokeWhitelisted(java.lang.String)> -- <com.android.server.pm.PackageManagerService: boolean isAutoRevokeWhitelisted(java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getRestrictionsProvider(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getRestrictionsProvider(int)>
<com.android.internal.telephony.euicc.IEuiccController$Stub$Proxy: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)> -- <com.android.internal.telephony.euicc.EuiccController: void getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)>
<android.service.dreams.IDreamManager$Stub$Proxy: void forceAmbientDisplayEnabled(boolean)> -- <com.android.server.dreams.DreamManagerService$BinderService: void forceAmbientDisplayEnabled(boolean)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>
<android.app.usage.IStorageStatsManager$Stub$Proxy: long getFreeBytes(java.lang.String,java.lang.String)> -- <com.android.server.usage.StorageStatsService: long getFreeBytes(java.lang.String,java.lang.String)>
<android.media.IAudioService$Stub$Proxy: void setSupportedSystemUsages(int[])> -- <com.android.server.audio.AudioService: void setSupportedSystemUsages(int[])>
<android.app.usage.IStorageStatsManager$Stub$Proxy: boolean isReservedSupported(java.lang.String,java.lang.String)> -- <com.android.server.usage.StorageStatsService: boolean isReservedSupported(java.lang.String,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)> -- <com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>
<android.content.pm.IPackageManagerNative$Stub$Proxy: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])> -- <com.android.server.pm.PackageManagerService$PackageManagerNative: boolean[] isAudioPlaybackCaptureAllowed(java.lang.String[])>
<android.os.IDeviceIdleController$Stub$Proxy: void exitIdle(java.lang.String)> -- <com.android.server.DeviceIdleController$BinderService: void exitIdle(java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -- <com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>
<android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)> -- <com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.content.ComponentName getGlobalProxyAdmin(int)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteWifiStopped(android.os.WorkSource)> -- <com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: java.lang.CharSequence getOrganizationName(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>
<android.app.IActivityManager$Stub$Proxy: void showWaitingForDebugger(android.app.IApplicationThread,boolean)> -- <com.android.server.am.ActivityManagerService: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>
<android.hardware.location.IContextHubService$Stub$Proxy: int loadNanoApp(int,android.hardware.location.NanoApp)> -- <com.android.server.location.ContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)>
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)> -- <com.android.server.ConnectivityService: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>
<android.app.IActivityManager$Stub$Proxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)> -- <com.android.server.am.ActivityManagerService: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastForSubscriber(int,int,int)> -- <com.android.internal.telephony.SmsController: boolean disableCellBroadcastForSubscriber(int,int,int)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.Bundle getAppWidgetOptions(java.lang.String,int)> -- <com.android.server.appwidget.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>
<android.net.IConnectivityManager$Stub$Proxy: boolean updateLockdownVpn()> -- <com.android.server.ConnectivityService: boolean updateLockdownVpn()>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)> -- <com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)>
<android.media.IMediaRouterService$Stub$Proxy: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)> -- <com.android.server.media.MediaRouterService: void selectRouteWithManager(android.media.IMediaRouter2Manager,int,java.lang.String,android.media.MediaRoute2Info)>
<android.app.INotificationManager$Stub$Proxy: int getPackageImportance(java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: int getPackageImportance(java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: void setDozeAfterScreenOff(boolean)> -- <com.android.server.power.PowerManagerService$BinderService: void setDozeAfterScreenOff(boolean)>
<android.content.IRestrictionsManager$Stub$Proxy: void requestPermission(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)> -- <com.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl: void requestPermission(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)>
<android.content.pm.IPackageManager$Stub$Proxy: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)> -- <com.android.server.pm.PackageManagerService: java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[],int)>
<android.app.IWallpaperManager$Stub$Proxy: int getHeightHint(int)> -- <com.android.server.wallpaper.WallpaperManagerService: int getHeightHint(int)>
<android.app.IAlarmManager$Stub$Proxy: void remove(android.app.PendingIntent,android.app.IAlarmListener)> -- <com.android.server.AlarmManagerService$4: void remove(android.app.PendingIntent,android.app.IAlarmListener)>
<android.app.INotificationManager$Stub$Proxy: void setNotificationDelegate(java.lang.String,java.lang.String)> -- <com.android.server.notification.NotificationManagerService$10: void setNotificationDelegate(java.lang.String,java.lang.String)>
<android.app.blob.IBlobStoreManager$Stub$Proxy: void releaseLease(android.app.blob.BlobHandle,java.lang.String)> -- <com.android.server.blob.BlobStoreManagerService$Stub: void releaseLease(android.app.blob.BlobHandle,java.lang.String)>
<android.app.IActivityTaskManager$Stub$Proxy: void moveStackToDisplay(int,int)> -- <com.android.server.wm.ActivityTaskManagerService: void moveStackToDisplay(int,int)>
<android.content.pm.IPackageManager$Stub$Proxy: int getPrivateFlagsForUid(int)> -- <com.android.server.pm.PackageManagerService: int getPrivateFlagsForUid(int)>
<android.net.IConnectivityManager$Stub$Proxy: void unregisterNetworkProvider(android.os.Messenger)> -- <com.android.server.ConnectivityService: void unregisterNetworkProvider(android.os.Messenger)>
<android.media.IAudioService$Stub$Proxy: void playSoundEffectVolume(int,float)> -- <com.android.server.audio.AudioService: void playSoundEffectVolume(int,float)>
<com.android.internal.app.IAppOpsService$Stub$Proxy: void setHistoryParameters(int,long,int)> -- <com.android.server.appop.AppOpsService: void setHistoryParameters(int,long,int)>
<android.hardware.IConsumerIrService$Stub$Proxy: boolean hasIrEmitter()> -- <com.android.server.ConsumerIrService: boolean hasIrEmitter()>
<com.android.internal.telephony.euicc.IEuiccCardController$Stub$Proxy: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)> -- <com.android.internal.telephony.euicc.EuiccCardController: void getRulesAuthTable(java.lang.String,java.lang.String,com.android.internal.telephony.euicc.IGetRulesAuthTableCallback)>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void removeImeSurfaceFromWindow(android.os.IBinder)> -- <com.android.server.inputmethod.InputMethodManagerService: void removeImeSurfaceFromWindow(android.os.IBinder)>
<android.view.IWindowManager$Stub$Proxy: int getDockedStackSide()> -- <com.android.server.wm.WindowManagerService: int getDockedStackSide()>
